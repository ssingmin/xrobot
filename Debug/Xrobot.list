
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a114  0800a114  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a11c  0800a11c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a120  0800a120  0001a120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004dcc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e40  20004e40  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001feb0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004698  00000000  00000000  0003ff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  000445f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001748  00000000  00000000  00045f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a75  00000000  00000000  00047658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d70b  00000000  00000000  0004e0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f21  00000000  00000000  0006b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c6f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ea8  00000000  00000000  0013c74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f90 	.word	0x08009f90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009f90 	.word	0x08009f90

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ws2812Init>:

uint16_t g_led_data[60+24]={0,};


void ws2812Init(uint32_t led_cnt)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, 60+24);
 80004dc:	2354      	movs	r3, #84	; 0x54
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <ws2812Init+0x1c>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <ws2812Init+0x20>)
 80004e4:	f003 fde0 	bl	80040a8 <HAL_TIM_PWM_Start_DMA>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000090 	.word	0x20000090
 80004f4:	200002ec 	.word	0x200002ec

080004f8 <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	4608      	mov	r0, r1
 8000502:	4611      	mov	r1, r2
 8000504:	461a      	mov	r2, r3
 8000506:	4603      	mov	r3, r0
 8000508:	70fb      	strb	r3, [r7, #3]
 800050a:	460b      	mov	r3, r1
 800050c:	70bb      	strb	r3, [r7, #2]
 800050e:	4613      	mov	r3, r2
 8000510:	707b      	strb	r3, [r7, #1]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000512:	78bb      	ldrb	r3, [r7, #2]
 8000514:	021a      	lsls	r2, r3, #8
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	4413      	add	r3, r2
 800051a:	021a      	lsls	r2, r3, #8
 800051c:	787b      	ldrb	r3, [r7, #1]
 800051e:	4413      	add	r3, r2
 8000520:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<24;i++)
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e01a      	b.n	800055e <ws2812SetColor+0x66>
	{
		if(buf&(1<<i)) {g_led_data[24-i] = BIT_HIGH;}
 8000528:	2201      	movs	r2, #1
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	461a      	mov	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4013      	ands	r3, r2
 8000536:	2b00      	cmp	r3, #0
 8000538:	d007      	beq.n	800054a <ws2812SetColor+0x52>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f1c3 0318 	rsb	r3, r3, #24
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <ws2812SetColor+0x7c>)
 8000542:	213b      	movs	r1, #59	; 0x3b
 8000544:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000548:	e006      	b.n	8000558 <ws2812SetColor+0x60>
		else {g_led_data[24-i] = BIT_LOW;}
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f1c3 0318 	rsb	r3, r3, #24
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <ws2812SetColor+0x7c>)
 8000552:	211e      	movs	r1, #30
 8000554:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b17      	cmp	r3, #23
 8000562:	dde1      	ble.n	8000528 <ws2812SetColor+0x30>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000090 	.word	0x20000090

08000578 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_CAN1_Init+0x64>)
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <MX_CAN1_Init+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_CAN1_Init+0x64>)
 8000584:	2206      	movs	r2, #6
 8000586:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_CAN1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_CAN1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_CAN1_Init+0x64>)
 8000596:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800059a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_CAN1_Init+0x64>)
 800059e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_CAN1_Init+0x64>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_CAN1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <MX_CAN1_Init+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_CAN1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_CAN1_Init+0x64>)
 80005ca:	f001 f9a7 	bl	800191c <HAL_CAN_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005d4:	f000 fbba 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000188 	.word	0x20000188
 80005e0:	40006400 	.word	0x40006400

080005e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <HAL_CAN_MspInit+0x94>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d134      	bne.n	8000670 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <HAL_CAN_MspInit+0x98>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <HAL_CAN_MspInit+0x98>)
 8000610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000614:	6413      	str	r3, [r2, #64]	; 0x40
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_CAN_MspInit+0x98>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_CAN_MspInit+0x98>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_CAN_MspInit+0x98>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_CAN_MspInit+0x98>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800063e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000650:	2309      	movs	r3, #9
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <HAL_CAN_MspInit+0x9c>)
 800065c:	f002 fcda 	bl	8003014 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2105      	movs	r1, #5
 8000664:	2014      	movs	r0, #20
 8000666:	f002 f8a9 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800066a:	2014      	movs	r0, #20
 800066c:	f002 f8c2 	bl	80027f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000670:	bf00      	nop
 8000672:	3728      	adds	r7, #40	; 0x28
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40006400 	.word	0x40006400
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <CanInit+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <CanInit+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <CanInit+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	4a1d      	ldr	r2, [pc, #116]	; (800071c <CanInit+0x98>)
 80006a8:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <CanInit+0x98>)
 80006b6:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <CanInit+0x98>)
 80006c0:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <CanInit+0x98>)
 80006ce:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <CanInit+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <CanInit+0x98>)
 80006d8:	2201      	movs	r2, #1
 80006da:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <CanInit+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <CanInit+0x9c>)
 80006e4:	f001 faf6 	bl	8001cd4 <HAL_CAN_Start>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <CanInit+0x6e>
 80006ee:	f000 fb2d 	bl	8000d4c <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 80006f2:	2102      	movs	r1, #2
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <CanInit+0x9c>)
 80006f6:	f001 fd53 	bl	80021a0 <HAL_CAN_ActivateNotification>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d000      	beq.n	8000702 <CanInit+0x7e>
 8000700:	e7fe      	b.n	8000700 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000702:	4906      	ldr	r1, [pc, #24]	; (800071c <CanInit+0x98>)
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <CanInit+0x9c>)
 8000706:	f001 fa05 	bl	8001b14 <HAL_CAN_ConfigFilter>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000710:	f000 fb1c 	bl	8000d4c <Error_Handler>
    }
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000160 	.word	0x20000160
 8000720:	20000188 	.word	0x20000188

08000724 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4611      	mov	r1, r2
 8000730:	461a      	mov	r2, r3
 8000732:	460b      	mov	r3, r1
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	4613      	mov	r3, r2
 8000738:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <sendCan+0x2c>
 800074c:	2304      	movs	r3, #4
 800074e:	e000      	b.n	8000752 <sendCan+0x2e>
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <sendCan+0x70>)
 8000760:	f001 fbd7 	bl	8001f12 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000764:	4603      	mov	r3, r0
 8000766:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00d      	beq.n	800078a <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	f107 0114 	add.w	r1, r7, #20
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <sendCan+0x70>)
 800077a:	f001 faef 	bl	8001d5c <HAL_CAN_AddTxMessage>
 800077e:	4603      	mov	r3, r0
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000784:	2b00      	cmp	r3, #0
 8000786:	d000      	beq.n	800078a <sendCan+0x66>
 8000788:	e7fe      	b.n	8000788 <sendCan+0x64>
    }
}
 800078a:	bf00      	nop
 800078c:	3730      	adds	r7, #48	; 0x30
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000188 	.word	0x20000188

08000798 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007a4:	2100      	movs	r1, #0
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80007a8:	f001 fbe8 	bl	8001f7c <HAL_CAN_GetRxMessage>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d000      	beq.n	80007b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 80007b2:	e7fe      	b.n	80007b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80007bc:	6013      	str	r3, [r2, #0]

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000013c 	.word	0x2000013c
 80007cc:	20000144 	.word	0x20000144
 80007d0:	20000188 	.word	0x20000188
 80007d4:	20000138 	.word	0x20000138

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_DMA_Init+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <MX_DMA_Init+0x3c>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	203a      	movs	r0, #58	; 0x3a
 8000800:	f001 ffdc 	bl	80027bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000804:	203a      	movs	r0, #58	; 0x3a
 8000806:	f001 fff5 	bl	80027f4 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <MX_FREERTOS_Init+0x48>)
 800081e:	2100      	movs	r1, #0
 8000820:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_FREERTOS_Init+0x4c>)
 8000822:	f006 f870 	bl	8006906 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <MX_FREERTOS_Init+0x50>)
 800082a:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MX_FREERTOS_Init+0x54>)
 800082e:	2100      	movs	r1, #0
 8000830:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_FREERTOS_Init+0x58>)
 8000832:	f006 f868 	bl	8006906 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <MX_FREERTOS_Init+0x5c>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <MX_FREERTOS_Init+0x60>)
 800083e:	2100      	movs	r1, #0
 8000840:	480e      	ldr	r0, [pc, #56]	; (800087c <MX_FREERTOS_Init+0x64>)
 8000842:	f006 f860 	bl	8006906 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <MX_FREERTOS_Init+0x68>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <MX_FREERTOS_Init+0x6c>)
 800084e:	2100      	movs	r1, #0
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_FREERTOS_Init+0x70>)
 8000852:	f006 f858 	bl	8006906 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_FREERTOS_Init+0x74>)
 800085a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	0800a000 	.word	0x0800a000
 8000864:	08000891 	.word	0x08000891
 8000868:	200001b0 	.word	0x200001b0
 800086c:	0800a024 	.word	0x0800a024
 8000870:	080008bd 	.word	0x080008bd
 8000874:	200001b4 	.word	0x200001b4
 8000878:	0800a048 	.word	0x0800a048
 800087c:	08000905 	.word	0x08000905
 8000880:	200001b8 	.word	0x200001b8
 8000884:	0800a06c 	.word	0x0800a06c
 8000888:	0800092d 	.word	0x0800092d
 800088c:	200001bc 	.word	0x200001bc

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t lastTime = osKernelGetTickCount();
 8000898:	f006 f820 	bl	80068dc <osKernelGetTickCount>
 800089c:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += 500U;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008a4:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f006 f8bf 	bl	8006a2a <osDelayUntil>
	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 80008ac:	2102      	movs	r1, #2
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <StartDefaultTask+0x28>)
 80008b0:	f002 fd65 	bl	800337e <HAL_GPIO_TogglePin>
	lastTime += 500U;
 80008b4:	e7f3      	b.n	800089e <StartDefaultTask+0xe>
 80008b6:	bf00      	nop
 80008b8:	40020800 	.word	0x40020800

080008bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t lastTime = osKernelGetTickCount();
 80008c4:	f006 f80a 	bl	80068dc <osKernelGetTickCount>
 80008c8:	6178      	str	r0, [r7, #20]

	CanInit(0,0);
 80008ca:	2100      	movs	r1, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fed9 	bl	8000684 <CanInit>
  /* Infinite loop */
  for(;;)
  {
	  uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <StartTask02+0x44>)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008dc:	e883 0003 	stmia.w	r3, {r0, r1}

	lastTime += 500U;;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008e6:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f006 f89e 	bl	8006a2a <osDelayUntil>

	//for(int i=0;i<8;i++){canbuf[i]=0;}
	sendCan(0, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext
 80008ee:	f107 010c 	add.w	r1, r7, #12
 80008f2:	2300      	movs	r3, #0
 80008f4:	2208      	movs	r2, #8
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ff14 	bl	8000724 <sendCan>
  {
 80008fc:	e7e9      	b.n	80008d2 <StartTask02+0x16>
 80008fe:	bf00      	nop
 8000900:	08009fd0 	.word	0x08009fd0

08000904 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime = osKernelGetTickCount();
 800090c:	f005 ffe6 	bl	80068dc <osKernelGetTickCount>
 8000910:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)//485 task for nuri motor must change uart port
  {
	lastTime += 500U;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000918:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f006 f885 	bl	8006a2a <osDelayUntil>
	  //HAL_UART_Transmit(&huart3, "hihi\n", sizeof("hihi\n"), 10);
	printf("hihihi\n");
 8000920:	4801      	ldr	r0, [pc, #4]	; (8000928 <StartTask03+0x24>)
 8000922:	f008 ffc7 	bl	80098b4 <puts>
  {
 8000926:	e7f4      	b.n	8000912 <StartTask03+0xe>
 8000928:	08009fd8 	.word	0x08009fd8

0800092c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0ae      	sub	sp, #184	; 0xb8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	uint32_t lastTime = osKernelGetTickCount();
 8000934:	f005 ffd2 	bl	80068dc <osKernelGetTickCount>
 8000938:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

	uint16_t value[60+24]={0,};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	22a8      	movs	r2, #168	; 0xa8
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f008 feaa 	bl	800969e <memset>

	////////////////////////////////
	ws2812Init(24);
 800094a:	2018      	movs	r0, #24
 800094c:	f7ff fdc2 	bl	80004d4 <ws2812Init>
	//HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);

  /* Infinite loop */
  for(;;)
  {
		lastTime += 500U;
 8000950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000954:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		osDelayUntil(lastTime);
 800095c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000960:	f006 f863 	bl	8006a2a <osDelayUntil>


		ws2812SetColor(0,0,0,1);//index, r, g, b
 8000964:	2301      	movs	r3, #1
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fdc4 	bl	80004f8 <ws2812SetColor>

//		value+=50;
//		if(value>100){value=0;}
		//htim8.Instance->CCR1 = value;

		printf("task4\n");
 8000970:	4801      	ldr	r0, [pc, #4]	; (8000978 <StartTask04+0x4c>)
 8000972:	f008 ff9f 	bl	80098b4 <puts>
  {
 8000976:	e7eb      	b.n	8000950 <StartTask04+0x24>
 8000978:	08009fe0 	.word	0x08009fe0

0800097c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <MX_GPIO_Init+0x158>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4e      	ldr	r2, [pc, #312]	; (8000ad4 <MX_GPIO_Init+0x158>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b45      	ldr	r3, [pc, #276]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a40      	ldr	r2, [pc, #256]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a39      	ldr	r2, [pc, #228]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_GPIO_Init+0x158>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <MX_GPIO_Init+0x158>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <MX_GPIO_Init+0x158>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_GPIO_Init+0x158>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|testled_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000a26:	f002 fc91 	bl	800334c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f244 0110 	movw	r1, #16400	; 0x4010
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <MX_GPIO_Init+0x160>)
 8000a32:	f002 fc8b 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000a3c:	f002 fc86 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PCPin
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|testled_Pin
 8000a40:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8000a44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000a5a:	f002 fadb 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0x15c>)
 8000a72:	f002 facf 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a76:	23f0      	movs	r3, #240	; 0xf0
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <MX_GPIO_Init+0x168>)
 8000a8c:	f002 fac2 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8000a90:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_GPIO_Init+0x160>)
 8000aaa:	f002 fab3 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_GPIO_Init+0x164>)
 8000ac6:	f002 faa5 	bl	8003014 <HAL_GPIO_Init>

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <MX_I2C1_SMBUS_Init+0x6c>)
 8000af0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_I2C1_SMBUS_Init+0x70>)
 8000af6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b04:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b2c:	f003 f8cc 	bl	8003cc8 <HAL_SMBUS_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 f909 	bl	8000d4c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_I2C1_SMBUS_Init+0x68>)
 8000b3c:	f003 f97a 	bl	8003e34 <HAL_SMBUS_EnableAlert_IT>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 8000b46:	f000 f901 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001c0 	.word	0x200001c0
 8000b54:	40005400 	.word	0x40005400
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_SMBUS_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_SMBUS_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_SMBUS_MspInit+0x88>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_SMBUS_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9a:	23e0      	movs	r3, #224	; 0xe0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9e:	2312      	movs	r3, #18
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000baa:	2304      	movs	r3, #4
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <HAL_SMBUS_MspInit+0x8c>)
 8000bb6:	f002 fa2d 	bl	8003014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_SMBUS_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_SMBUS_MspInit+0x88>)
 8000bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_SMBUS_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40005400 	.word	0x40005400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020400 	.word	0x40020400

08000bec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, (uint16_t)len, 100);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <_write+0x24>)
 8000c02:	f004 fe16 	bl	8005832 <HAL_UART_Transmit>
	return (len);
 8000c06:	687b      	ldr	r3, [r7, #4]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200003d8 	.word	0x200003d8

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 fe3e 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f81a 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f7ff feac 	bl	800097c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c24:	f7ff fca8 	bl	8000578 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000c28:	f000 fd5c 	bl	80016e4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000c2c:	f000 fd30 	bl	8001690 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c30:	f000 f9f0 	bl	8001014 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8000c34:	f7ff ff58 	bl	8000ae8 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8000c38:	f7ff fdce 	bl	80007d8 <MX_DMA_Init>
  MX_TIM8_Init();
 8000c3c:	f000 fb36 	bl	80012ac <MX_TIM8_Init>
  MX_TIM3_Init();
 8000c40:	f000 fab8 	bl	80011b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c44:	f005 fe00 	bl	8006848 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c48:	f7ff fde6 	bl	8000818 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c4c:	f005 fe20 	bl	8006890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <main+0x3c>
	...

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2230      	movs	r2, #48	; 0x30
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f008 fd1b 	bl	800969e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <SystemClock_Config+0xcc>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a27      	ldr	r2, [pc, #156]	; (8000d20 <SystemClock_Config+0xcc>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <SystemClock_Config+0xcc>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <SystemClock_Config+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <SystemClock_Config+0xd0>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <SystemClock_Config+0xd0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cc8:	23a8      	movs	r3, #168	; 0xa8
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fb6b 	bl	80033b4 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce4:	f000 f832 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2302      	movs	r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2105      	movs	r1, #5
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fdcc 	bl	80038a4 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d12:	f000 f81b 	bl	8000d4c <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fdcf 	bl	80018dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40001000 	.word	0x40001000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_MspInit+0x54>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <HAL_MspInit+0x54>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_MspInit+0x54>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_MspInit+0x54>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	210f      	movs	r1, #15
 8000d9a:	f06f 0001 	mvn.w	r0, #1
 8000d9e:	f001 fd0d 	bl	80027bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2036      	movs	r0, #54	; 0x36
 8000dc6:	f001 fcf9 	bl	80027bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dca:	2036      	movs	r0, #54	; 0x36
 8000dcc:	f001 fd12 	bl	80027f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_InitTick+0xa4>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_InitTick+0xa4>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_InitTick+0xa4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 ff34 	bl	8003c64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dfc:	f002 ff0a 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8000e00:	4603      	mov	r3, r0
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3b01      	subs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_InitTick+0xac>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_InitTick+0xac>)
 8000e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_InitTick+0xac>)
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_InitTick+0xac>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_InitTick+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_InitTick+0xac>)
 8000e36:	f003 f81d 	bl	8003e74 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <HAL_InitTick+0xac>)
 8000e42:	f003 f867 	bl	8003f14 <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	20000210 	.word	0x20000210
 8000e60:	40001000 	.word	0x40001000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <CAN1_RX0_IRQHandler+0x10>)
 8000e96:	f001 f9a9 	bl	80021ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000188 	.word	0x20000188

08000ea4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART2_IRQHandler+0x10>)
 8000eaa:	f004 fd55 	bl	8005958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000394 	.word	0x20000394

08000eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM6_DAC_IRQHandler+0x10>)
 8000ebe:	f003 fb14 	bl	80044ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000210 	.word	0x20000210

08000ecc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <DMA2_Stream2_IRQHandler+0x10>)
 8000ed2:	f001 fe35 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000334 	.word	0x20000334

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
	}

return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f008 fa42 	bl	800943c <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000258 	.word	0x20000258
 8000fec:	20004e40 	.word	0x20004e40

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09a      	sub	sp, #104	; 0x68
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2220      	movs	r2, #32
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 fb1f 	bl	800969e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001060:	4b52      	ldr	r3, [pc, #328]	; (80011ac <MX_TIM1_Init+0x198>)
 8001062:	4a53      	ldr	r2, [pc, #332]	; (80011b0 <MX_TIM1_Init+0x19c>)
 8001064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <MX_TIM1_Init+0x198>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <MX_TIM1_Init+0x198>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <MX_TIM1_Init+0x198>)
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b4c      	ldr	r3, [pc, #304]	; (80011ac <MX_TIM1_Init+0x198>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <MX_TIM1_Init+0x198>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b49      	ldr	r3, [pc, #292]	; (80011ac <MX_TIM1_Init+0x198>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800108c:	4847      	ldr	r0, [pc, #284]	; (80011ac <MX_TIM1_Init+0x198>)
 800108e:	f002 fef1 	bl	8003e74 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001098:	f7ff fe58 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a6:	4619      	mov	r1, r3
 80010a8:	4840      	ldr	r0, [pc, #256]	; (80011ac <MX_TIM1_Init+0x198>)
 80010aa:	f003 fc85 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010b4:	f7ff fe4a 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b8:	483c      	ldr	r0, [pc, #240]	; (80011ac <MX_TIM1_Init+0x198>)
 80010ba:	f002 ff9b 	bl	8003ff4 <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80010c4:	f7ff fe42 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010c8:	4838      	ldr	r0, [pc, #224]	; (80011ac <MX_TIM1_Init+0x198>)
 80010ca:	f003 f9b5 	bl	8004438 <HAL_TIM_IC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010d4:	f7ff fe3a 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010e4:	4619      	mov	r1, r3
 80010e6:	4831      	ldr	r0, [pc, #196]	; (80011ac <MX_TIM1_Init+0x198>)
 80010e8:	f004 fa74 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80010f2:	f7ff fe2b 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fe:	2300      	movs	r3, #0
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001112:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4824      	ldr	r0, [pc, #144]	; (80011ac <MX_TIM1_Init+0x198>)
 800111c:	f003 fb8a 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001126:	f7ff fe11 	bl	8000d4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800112e:	2301      	movs	r3, #1
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	2204      	movs	r2, #4
 8001140:	4619      	mov	r1, r3
 8001142:	481a      	ldr	r0, [pc, #104]	; (80011ac <MX_TIM1_Init+0x198>)
 8001144:	f003 fad9 	bl	80046fa <HAL_TIM_IC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800114e:	f7ff fdfd 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2208      	movs	r2, #8
 8001158:	4619      	mov	r1, r3
 800115a:	4814      	ldr	r0, [pc, #80]	; (80011ac <MX_TIM1_Init+0x198>)
 800115c:	f003 facd 	bl	80046fa <HAL_TIM_IC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001166:	f7ff fdf1 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_TIM1_Init+0x198>)
 800118e:	f004 fa9d 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001198:	f7ff fdd8 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <MX_TIM1_Init+0x198>)
 800119e:	f000 fa13 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 80011a2:	bf00      	nop
 80011a4:	3768      	adds	r7, #104	; 0x68
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000025c 	.word	0x2000025c
 80011b0:	40010000 	.word	0x40010000

080011b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_TIM3_Init+0xf0>)
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <MX_TIM3_Init+0xf4>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <MX_TIM3_Init+0xf0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <MX_TIM3_Init+0xf0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <MX_TIM3_Init+0xf0>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <MX_TIM3_Init+0xf0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <MX_TIM3_Init+0xf0>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001204:	4827      	ldr	r0, [pc, #156]	; (80012a4 <MX_TIM3_Init+0xf0>)
 8001206:	f002 fe35 	bl	8003e74 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001210:	f7ff fd9c 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4619      	mov	r1, r3
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <MX_TIM3_Init+0xf0>)
 8001222:	f003 fbc9 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800122c:	f7ff fd8e 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <MX_TIM3_Init+0xf0>)
 8001232:	f003 f901 	bl	8004438 <HAL_TIM_IC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800123c:	f7ff fd86 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <MX_TIM3_Init+0xf0>)
 8001250:	f004 f9c0 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800125a:	f7ff fd77 	bl	8000d4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2208      	movs	r2, #8
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <MX_TIM3_Init+0xf0>)
 8001276:	f003 fa40 	bl	80046fa <HAL_TIM_IC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001280:	f7ff fd64 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	220c      	movs	r2, #12
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_TIM3_Init+0xf0>)
 800128c:	f003 fa35 	bl	80046fa <HAL_TIM_IC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001296:	f7ff fd59 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002a4 	.word	0x200002a4
 80012a8:	40000400 	.word	0x40000400

080012ac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b096      	sub	sp, #88	; 0x58
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2220      	movs	r2, #32
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 f9da 	bl	800969e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <MX_TIM8_Init+0x180>)
 80012ec:	4a50      	ldr	r2, [pc, #320]	; (8001430 <MX_TIM8_Init+0x184>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80012f0:	4b4e      	ldr	r3, [pc, #312]	; (800142c <MX_TIM8_Init+0x180>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b4d      	ldr	r3, [pc, #308]	; (800142c <MX_TIM8_Init+0x180>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 109;
 80012fc:	4b4b      	ldr	r3, [pc, #300]	; (800142c <MX_TIM8_Init+0x180>)
 80012fe:	226d      	movs	r2, #109	; 0x6d
 8001300:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b4a      	ldr	r3, [pc, #296]	; (800142c <MX_TIM8_Init+0x180>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <MX_TIM8_Init+0x180>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <MX_TIM8_Init+0x180>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001314:	4845      	ldr	r0, [pc, #276]	; (800142c <MX_TIM8_Init+0x180>)
 8001316:	f002 fdad 	bl	8003e74 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001320:	f7ff fd14 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132e:	4619      	mov	r1, r3
 8001330:	483e      	ldr	r0, [pc, #248]	; (800142c <MX_TIM8_Init+0x180>)
 8001332:	f003 fb41 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800133c:	f7ff fd06 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <MX_TIM8_Init+0x180>)
 8001342:	f002 fe57 	bl	8003ff4 <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800134c:	f7ff fcfe 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135c:	4619      	mov	r1, r3
 800135e:	4833      	ldr	r0, [pc, #204]	; (800142c <MX_TIM8_Init+0x180>)
 8001360:	f004 f938 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800136a:	f7ff fcef 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	; 0x60
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4826      	ldr	r0, [pc, #152]	; (800142c <MX_TIM8_Init+0x180>)
 8001394:	f003 fa4e 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800139e:	f7ff fcd5 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	2204      	movs	r2, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4820      	ldr	r0, [pc, #128]	; (800142c <MX_TIM8_Init+0x180>)
 80013ac:	f003 fa42 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80013b6:	f7ff fcc9 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	2208      	movs	r2, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_TIM8_Init+0x180>)
 80013c4:	f003 fa36 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80013ce:	f7ff fcbd 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	220c      	movs	r2, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_TIM8_Init+0x180>)
 80013dc:	f003 fa2a 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80013e6:	f7ff fcb1 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM8_Init+0x180>)
 800140e:	f004 f95d 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001418:	f7ff fc98 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM8_Init+0x180>)
 800141e:	f000 f8d3 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3758      	adds	r7, #88	; 0x58
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200002ec 	.word	0x200002ec
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a55      	ldr	r2, [pc, #340]	; (80015a8 <HAL_TIM_Base_MspInit+0x174>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12d      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a53      	ldr	r2, [pc, #332]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4841      	ldr	r0, [pc, #260]	; (80015b0 <HAL_TIM_Base_MspInit+0x17c>)
 80014ac:	f001 fdb2 	bl	8003014 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80014b0:	e075      	b.n	800159e <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM3)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a3f      	ldr	r2, [pc, #252]	; (80015b4 <HAL_TIM_Base_MspInit+0x180>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d12c      	bne.n	8001516 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a39      	ldr	r2, [pc, #228]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	6313      	str	r3, [r2, #48]	; 0x30
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001504:	2302      	movs	r3, #2
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	482a      	ldr	r0, [pc, #168]	; (80015b8 <HAL_TIM_Base_MspInit+0x184>)
 8001510:	f001 fd80 	bl	8003014 <HAL_GPIO_Init>
}
 8001514:	e043      	b.n	800159e <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM8)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_TIM_Base_MspInit+0x188>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13e      	bne.n	800159e <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	4a20      	ldr	r2, [pc, #128]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	6453      	str	r3, [r2, #68]	; 0x44
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_TIM_Base_MspInit+0x178>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <HAL_TIM_Base_MspInit+0x190>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001544:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001548:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 800154c:	2240      	movs	r2, #64	; 0x40
 800154e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001564:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001582:	480f      	ldr	r0, [pc, #60]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001584:	f001 f944 	bl	8002810 <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_TIM_Base_MspInit+0x15e>
      Error_Handler();
 800158e:	f7ff fbdd 	bl	8000d4c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0x18c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	; 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40010400 	.word	0x40010400
 80015c0:	20000334 	.word	0x20000334
 80015c4:	40026440 	.word	0x40026440

080015c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a25      	ldr	r2, [pc, #148]	; (800167c <HAL_TIM_MspPostInit+0xb4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11f      	bne.n	800162a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_TIM_MspPostInit+0xb8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_TIM_MspPostInit+0xb8>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_TIM_MspPostInit+0xb8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <HAL_TIM_MspPostInit+0xbc>)
 8001624:	f001 fcf6 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001628:	e023      	b.n	8001672 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_TIM_MspPostInit+0xc0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d11e      	bne.n	8001672 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_TIM_MspPostInit+0xb8>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_TIM_MspPostInit+0xb8>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_TIM_MspPostInit+0xb8>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001650:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001662:	2303      	movs	r3, #3
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <HAL_TIM_MspPostInit+0xc4>)
 800166e:	f001 fcd1 	bl	8003014 <HAL_GPIO_Init>
}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40010000 	.word	0x40010000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000
 8001688:	40010400 	.word	0x40010400
 800168c:	40020800 	.word	0x40020800

08001690 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART2_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c8:	f004 f866 	bl	8005798 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fb3b 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000394 	.word	0x20000394
 80016e0:	40004400 	.word	0x40004400

080016e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_USART3_UART_Init+0x50>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART3_UART_Init+0x4c>)
 800171c:	f004 f83c 	bl	8005798 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001726:	f7ff fb11 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200003d8 	.word	0x200003d8
 8001734:	40004800 	.word	0x40004800

08001738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a36      	ldr	r2, [pc, #216]	; (8001830 <HAL_UART_MspInit+0xf8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d134      	bne.n	80017c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_UART_MspInit+0xfc>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_UART_MspInit+0xfc>)
 8001764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_UART_MspInit+0xfc>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_UART_MspInit+0xfc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_UART_MspInit+0xfc>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_UART_MspInit+0xfc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001792:	230c      	movs	r3, #12
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a2:	2307      	movs	r3, #7
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4822      	ldr	r0, [pc, #136]	; (8001838 <HAL_UART_MspInit+0x100>)
 80017ae:	f001 fc31 	bl	8003014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2105      	movs	r1, #5
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	f001 f800 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f001 f819 	bl	80027f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017c2:	e031      	b.n	8001828 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_UART_MspInit+0x104>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12c      	bne.n	8001828 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_UART_MspInit+0xfc>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_UART_MspInit+0xfc>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0xfc>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_UART_MspInit+0xfc>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_UART_MspInit+0xfc>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_UART_MspInit+0xfc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001806:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <HAL_UART_MspInit+0x108>)
 8001824:	f001 fbf6 	bl	8003014 <HAL_GPIO_Init>
}
 8001828:	bf00      	nop
 800182a:	3730      	adds	r7, #48	; 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40004400 	.word	0x40004400
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40004800 	.word	0x40004800
 8001840:	40020400 	.word	0x40020400

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001860:	4c0b      	ldr	r4, [pc, #44]	; (8001890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186e:	f7ff fbbf 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f007 fedf 	bl	8009634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff f9cd 	bl	8000c14 <main>
  bx  lr    
 800187a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001888:	0800a124 	.word	0x0800a124
  ldr r2, =_sbss
 800188c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001890:	20004e40 	.word	0x20004e40

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 ff70 	bl	80027a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f7ff fa72 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fa44 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	2000041c 	.word	0x2000041c

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000041c 	.word	0x2000041c

0800191c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0ed      	b.n	8001b0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7fe fe52 	bl	80005e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001950:	f7ff ffd8 	bl	8001904 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001956:	e012      	b.n	800197e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001958:	f7ff ffd4 	bl	8001904 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b0a      	cmp	r3, #10
 8001964:	d90b      	bls.n	800197e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2205      	movs	r2, #5
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0c5      	b.n	8001b0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0e5      	beq.n	8001958 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0202 	bic.w	r2, r2, #2
 800199a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800199c:	f7ff ffb2 	bl	8001904 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019a2:	e012      	b.n	80019ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a4:	f7ff ffae 	bl	8001904 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b0a      	cmp	r3, #10
 80019b0:	d90b      	bls.n	80019ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2205      	movs	r2, #5
 80019c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e09f      	b.n	8001b0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e5      	bne.n	80019a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7e1b      	ldrb	r3, [r3, #24]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e5b      	ldrb	r3, [r3, #25]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e007      	b.n	8001a2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e9b      	ldrb	r3, [r3, #26]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0220 	bic.w	r2, r2, #32
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7edb      	ldrb	r3, [r3, #27]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0210 	bic.w	r2, r2, #16
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0210 	orr.w	r2, r2, #16
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d108      	bne.n	8001a9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0208 	orr.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e007      	b.n	8001aaa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0208 	bic.w	r2, r2, #8
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7f5b      	ldrb	r3, [r3, #29]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d108      	bne.n	8001ac4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0204 	orr.w	r2, r2, #4
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	ea42 0103 	orr.w	r1, r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	1e5a      	subs	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d003      	beq.n	8001b3a <HAL_CAN_ConfigFilter+0x26>
 8001b32:	7cfb      	ldrb	r3, [r7, #19]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f040 80be 	bne.w	8001cb6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d123      	bne.n	8001be4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3248      	adds	r2, #72	; 0x48
 8001bc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bda:	6979      	ldr	r1, [r7, #20]
 8001bdc:	3348      	adds	r3, #72	; 0x48
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d122      	bne.n	8001c32 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3248      	adds	r2, #72	; 0x48
 8001c12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c28:	6979      	ldr	r1, [r7, #20]
 8001c2a:	3348      	adds	r3, #72	; 0x48
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	401a      	ands	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c4c:	e007      	b.n	8001c5e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ca8:	f023 0201 	bic.w	r2, r3, #1
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e006      	b.n	8001cc4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40006400 	.word	0x40006400

08001cd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d12e      	bne.n	8001d46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff fe00 	bl	8001904 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d06:	e012      	b.n	8001d2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d08:	f7ff fdfc 	bl	8001904 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b0a      	cmp	r3, #10
 8001d14:	d90b      	bls.n	8001d2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e012      	b.n	8001d54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e5      	bne.n	8001d08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e006      	b.n	8001d54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d003      	beq.n	8001d88 <HAL_CAN_AddTxMessage+0x2c>
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	f040 80b8 	bne.w	8001ef8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80a0 	beq.w	8001ee8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e09e      	b.n	8001f06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	6809      	ldr	r1, [r1, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3318      	adds	r3, #24
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	440b      	add	r3, r1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e00f      	b.n	8001e16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	440b      	add	r3, r1
 8001e14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3318      	adds	r3, #24
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	440b      	add	r3, r1
 8001e26:	3304      	adds	r3, #4
 8001e28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	7d1b      	ldrb	r3, [r3, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d111      	bne.n	8001e56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3318      	adds	r3, #24
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	440b      	add	r3, r1
 8001e52:	3304      	adds	r3, #4
 8001e54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3307      	adds	r3, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3306      	adds	r3, #6
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3305      	adds	r3, #5
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	3204      	adds	r2, #4
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	4610      	mov	r0, r2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	ea43 0200 	orr.w	r2, r3, r0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3303      	adds	r3, #3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	061a      	lsls	r2, r3, #24
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	4610      	mov	r0, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6811      	ldr	r1, [r2, #0]
 8001eb4:	ea43 0200 	orr.w	r2, r3, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	440b      	add	r3, r1
 8001ebe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ec2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3318      	adds	r3, #24
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6811      	ldr	r1, [r2, #0]
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3318      	adds	r3, #24
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	440b      	add	r3, r1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e00e      	b.n	8001f06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e006      	b.n	8001f06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f24:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d002      	beq.n	8001f32 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d11d      	bne.n	8001f6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d003      	beq.n	8001fa0 <HAL_CAN_GetRxMessage+0x24>
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	f040 80f3 	bne.w	8002186 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d116      	bne.n	8001fe2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0e7      	b.n	8002194 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0d8      	b.n	8002194 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	331b      	adds	r3, #27
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0204 	and.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10c      	bne.n	800201a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	331b      	adds	r3, #27
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0d5b      	lsrs	r3, r3, #21
 8002010:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e00b      	b.n	8002032 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	331b      	adds	r3, #27
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	4413      	add	r3, r2
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	331b      	adds	r3, #27
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0202 	and.w	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	331b      	adds	r3, #27
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 020f 	and.w	r2, r3, #15
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b2da      	uxtb	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0a1a      	lsrs	r2, r3, #8
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0c1a      	lsrs	r2, r3, #16
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	3302      	adds	r3, #2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0e1a      	lsrs	r2, r3, #24
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3303      	adds	r3, #3
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3304      	adds	r3, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0a1a      	lsrs	r2, r3, #8
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3305      	adds	r3, #5
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0c1a      	lsrs	r2, r3, #16
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	3306      	adds	r3, #6
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e1a      	lsrs	r2, r3, #24
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3307      	adds	r3, #7
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0220 	orr.w	r2, r2, #32
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e007      	b.n	8002182 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e006      	b.n	8002194 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d002      	beq.n	80021be <HAL_CAN_ActivateNotification+0x1e>
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d109      	bne.n	80021d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e006      	b.n	80021e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07c      	beq.n	800232c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f983 	bl	800255a <HAL_CAN_TxMailbox0CompleteCallback>
 8002254:	e016      	b.n	8002284 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e00c      	b.n	8002284 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
 800227c:	e002      	b.n	8002284 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f989 	bl	8002596 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d024      	beq.n	80022d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002296:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f963 	bl	800256e <HAL_CAN_TxMailbox1CompleteCallback>
 80022a8:	e016      	b.n	80022d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	e00c      	b.n	80022d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	e002      	b.n	80022d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f969 	bl	80025aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d024      	beq.n	800232c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f943 	bl	8002582 <HAL_CAN_TxMailbox2CompleteCallback>
 80022fc:	e016      	b.n	800232c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	e00c      	b.n	800232c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	e002      	b.n	800232c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f949 	bl	80025be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002346:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2208      	movs	r2, #8
 800236a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f930 	bl	80025d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fa04 	bl	8000798 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2210      	movs	r2, #16
 80023b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2208      	movs	r2, #8
 80023ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f912 	bl	80025fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8f9 	bl	80025e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8fc 	bl	800260e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2208      	movs	r2, #8
 8002430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8f5 	bl	8002622 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d07b      	beq.n	800253a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d072      	beq.n	8002532 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d043      	beq.n	8002532 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03e      	beq.n	8002532 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ba:	2b60      	cmp	r3, #96	; 0x60
 80024bc:	d02b      	beq.n	8002516 <HAL_CAN_IRQHandler+0x32a>
 80024be:	2b60      	cmp	r3, #96	; 0x60
 80024c0:	d82e      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024c2:	2b50      	cmp	r3, #80	; 0x50
 80024c4:	d022      	beq.n	800250c <HAL_CAN_IRQHandler+0x320>
 80024c6:	2b50      	cmp	r3, #80	; 0x50
 80024c8:	d82a      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d019      	beq.n	8002502 <HAL_CAN_IRQHandler+0x316>
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d826      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024d2:	2b30      	cmp	r3, #48	; 0x30
 80024d4:	d010      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x30c>
 80024d6:	2b30      	cmp	r3, #48	; 0x30
 80024d8:	d822      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d002      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x2f8>
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d005      	beq.n	80024ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024e2:	e01d      	b.n	8002520 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024ec:	e019      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024f6:	e014      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f043 0320 	orr.w	r3, r3, #32
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002500:	e00f      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800250a:	e00a      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002514:	e005      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800251e:	e000      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            break;
 8002520:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002530:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f872 	bl	8002636 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	; (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff4c 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ce:	f7ff ff61 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7ff ffb1 	bl	8002740 <NVIC_EncodePriority>
 80027de:	4602      	mov	r2, r0
 80027e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff80 	bl	80026ec <__NVIC_SetPriority>
}
 80027ec:	bf00      	nop
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff54 	bl	80026b0 <__NVIC_EnableIRQ>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff f872 	bl	8001904 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e099      	b.n	8002960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284c:	e00f      	b.n	800286e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284e:	f7ff f859 	bl	8001904 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b05      	cmp	r3, #5
 800285a:	d908      	bls.n	800286e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e078      	b.n	8002960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e8      	bne.n	800284e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_DMA_Init+0x158>)
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4313      	orrs	r3, r2
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d117      	bne.n	8002932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fb01 	bl	8002f1c <DMA_CheckFifoParam>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800292e:	2301      	movs	r3, #1
 8002930:	e016      	b.n	8002960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fab8 	bl	8002eb0 <DMA_CalcBaseAndBitshift>
 8002940:	4603      	mov	r3, r0
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	f010803f 	.word	0xf010803f

0800296c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Start_IT+0x26>
 800298e:	2302      	movs	r3, #2
 8002990:	e040      	b.n	8002a14 <HAL_DMA_Start_IT+0xa8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d12f      	bne.n	8002a06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fa4a 	bl	8002e54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	223f      	movs	r2, #63	; 0x3f
 80029c6:	409a      	lsls	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0216 	orr.w	r2, r2, #22
 80029da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a2a:	f7fe ff6b 	bl	8001904 <HAL_GetTick>
 8002a2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d008      	beq.n	8002a4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e052      	b.n	8002af4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0216 	bic.w	r2, r2, #22
 8002a5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <HAL_DMA_Abort+0x62>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0208 	bic.w	r2, r2, #8
 8002a8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9e:	e013      	b.n	8002ac8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa0:	f7fe ff30 	bl	8001904 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d90c      	bls.n	8002ac8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e015      	b.n	8002af4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e4      	bne.n	8002aa0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	223f      	movs	r2, #63	; 0x3f
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00c      	b.n	8002b34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b4c:	4b8e      	ldr	r3, [pc, #568]	; (8002d88 <HAL_DMA_IRQHandler+0x248>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a8e      	ldr	r2, [pc, #568]	; (8002d8c <HAL_DMA_IRQHandler+0x24c>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0a9b      	lsrs	r3, r3, #10
 8002b58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01a      	beq.n	8002bac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0204 	bic.w	r2, r2, #4
 8002b92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2208      	movs	r2, #8
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d012      	beq.n	8002be2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2201      	movs	r2, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f043 0202 	orr.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	2204      	movs	r2, #4
 8002be8:	409a      	lsls	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d012      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2204      	movs	r2, #4
 8002c06:	409a      	lsls	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d043      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03c      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d108      	bne.n	8002c70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d024      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
 8002c6e:	e01f      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01b      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e016      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0208 	bic.w	r2, r2, #8
 8002c9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 808f 	beq.w	8002de0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8087 	beq.w	8002de0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	d136      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0216 	bic.w	r2, r2, #22
 8002cf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_DMA_IRQHandler+0x1da>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0208 	bic.w	r2, r2, #8
 8002d28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	223f      	movs	r2, #63	; 0x3f
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d07e      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
        }
        return;
 8002d56:	e079      	b.n	8002e4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10d      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d031      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e02c      	b.n	8002de0 <HAL_DMA_IRQHandler+0x2a0>
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d023      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e01e      	b.n	8002de0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10f      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0210 	bic.w	r2, r2, #16
 8002dbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d032      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2205      	movs	r2, #5
 8002df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d307      	bcc.n	8002e28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f2      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x2cc>
 8002e26:	e000      	b.n	8002e2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e4c:	bf00      	nop
    }
  }
}
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d108      	bne.n	8002e94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e92:	e007      	b.n	8002ea4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	3b10      	subs	r3, #16
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <DMA_CalcBaseAndBitshift+0x64>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eca:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <DMA_CalcBaseAndBitshift+0x68>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d909      	bls.n	8002ef2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	659a      	str	r2, [r3, #88]	; 0x58
 8002ef0:	e007      	b.n	8002f02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	aaaaaaab 	.word	0xaaaaaaab
 8002f18:	0800a0a8 	.word	0x0800a0a8

08002f1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11f      	bne.n	8002f76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d856      	bhi.n	8002fea <DMA_CheckFifoParam+0xce>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <DMA_CheckFifoParam+0x28>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f55 	.word	0x08002f55
 8002f48:	08002f67 	.word	0x08002f67
 8002f4c:	08002f55 	.word	0x08002f55
 8002f50:	08002feb 	.word	0x08002feb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d046      	beq.n	8002fee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f64:	e043      	b.n	8002fee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6e:	d140      	bne.n	8002ff2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f74:	e03d      	b.n	8002ff2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7e:	d121      	bne.n	8002fc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d837      	bhi.n	8002ff6 <DMA_CheckFifoParam+0xda>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <DMA_CheckFifoParam+0x70>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fa3 	.word	0x08002fa3
 8002f94:	08002f9d 	.word	0x08002f9d
 8002f98:	08002fb5 	.word	0x08002fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e030      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d025      	beq.n	8002ffa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb2:	e022      	b.n	8002ffa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fbc:	d11f      	bne.n	8002ffe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fc2:	e01c      	b.n	8002ffe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d903      	bls.n	8002fd2 <DMA_CheckFifoParam+0xb6>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d003      	beq.n	8002fd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fd0:	e018      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd6:	e015      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e00b      	b.n	8003002 <DMA_CheckFifoParam+0xe6>
      break;
 8002fea:	bf00      	nop
 8002fec:	e00a      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e008      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e006      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e004      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
    }
  } 
  
  return status; 
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e16b      	b.n	8003308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 815a 	bne.w	8003302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d005      	beq.n	8003066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	2b02      	cmp	r3, #2
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d017      	beq.n	8003104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80b4 	beq.w	8003302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b60      	ldr	r3, [pc, #384]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a5f      	ldr	r2, [pc, #380]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a5b      	ldr	r2, [pc, #364]	; (8003324 <HAL_GPIO_Init+0x310>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_GPIO_Init+0x314>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x226>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_GPIO_Init+0x318>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_GPIO_Init+0x31c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_GPIO_Init+0x320>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x21a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_GPIO_Init+0x324>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x216>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_GPIO_Init+0x328>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x212>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x32c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x330>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x20a>
 800321a:	2307      	movs	r3, #7
 800321c:	e00e      	b.n	800323c <HAL_GPIO_Init+0x228>
 800321e:	2308      	movs	r3, #8
 8003220:	e00c      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003222:	2306      	movs	r3, #6
 8003224:	e00a      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003226:	2305      	movs	r3, #5
 8003228:	e008      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322a:	2304      	movs	r3, #4
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x228>
 800323a:	2300      	movs	r3, #0
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324c:	4935      	ldr	r1, [pc, #212]	; (8003324 <HAL_GPIO_Init+0x310>)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_GPIO_Init+0x334>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <HAL_GPIO_Init+0x334>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_GPIO_Init+0x334>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a8:	4a27      	ldr	r2, [pc, #156]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	f67f ae90 	bls.w	8003030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40013800 	.word	0x40013800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020800 	.word	0x40020800
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40021000 	.word	0x40021000
 800333c:	40021400 	.word	0x40021400
 8003340:	40021800 	.word	0x40021800
 8003344:	40021c00 	.word	0x40021c00
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003368:	e003      	b.n	8003372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003390:	887a      	ldrh	r2, [r7, #2]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4013      	ands	r3, r2
 8003396:	041a      	lsls	r2, r3, #16
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43d9      	mvns	r1, r3
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	400b      	ands	r3, r1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	619a      	str	r2, [r3, #24]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e267      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d112      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f6:	d10b      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05b      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d157      	bne.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e242      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x74>
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6f      	ldr	r2, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a6c      	ldr	r2, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 800344c:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fa4a 	bl	8001904 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fa46 	bl	8001904 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e207      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fa36 	bl	8001904 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fa32 	bl	8001904 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1f3      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1c7      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4937      	ldr	r1, [pc, #220]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e03a      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x244>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe f9eb 	bl	8001904 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003532:	f7fe f9e7 	bl	8001904 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1a8      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4925      	ldr	r1, [pc, #148]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	e015      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x244>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe f9ca 	bl	8001904 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003574:	f7fe f9c6 	bl	8001904 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e187      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d036      	beq.n	800360c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCC_OscConfig+0x248>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe f9aa 	bl	8001904 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe f9a6 	bl	8001904 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e167      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x200>
 80035d2:	e01b      	b.n	800360c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x248>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe f993 	bl	8001904 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	e00e      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe f98f 	bl	8001904 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d907      	bls.n	8003600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e150      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	42470000 	.word	0x42470000
 80035fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ea      	bne.n	80035e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8097 	beq.w	8003748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b7d      	ldr	r3, [pc, #500]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a7c      	ldr	r2, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b7a      	ldr	r3, [pc, #488]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b77      	ldr	r3, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b74      	ldr	r3, [pc, #464]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a73      	ldr	r2, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fe f94f 	bl	8001904 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fe f94b 	bl	8001904 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e10c      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x2ea>
 8003690:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a63      	ldr	r2, [pc, #396]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	e01c      	b.n	80036d8 <HAL_RCC_OscConfig+0x324>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x30c>
 80036a6:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5e      	ldr	r2, [pc, #376]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0x324>
 80036c0:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a57      	ldr	r2, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	4b55      	ldr	r3, [pc, #340]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a54      	ldr	r2, [pc, #336]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f023 0304 	bic.w	r3, r3, #4
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d015      	beq.n	800370c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe f910 	bl	8001904 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7fe f90c 	bl	8001904 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0cb      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ee      	beq.n	80036e8 <HAL_RCC_OscConfig+0x334>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fe f8fa 	bl	8001904 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fe f8f6 	bl	8001904 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0b5      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ee      	bne.n	8003714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	4a38      	ldr	r2, [pc, #224]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a1 	beq.w	8003894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003752:	4b34      	ldr	r3, [pc, #208]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b08      	cmp	r3, #8
 800375c:	d05c      	beq.n	8003818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d141      	bne.n	80037ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCC_OscConfig+0x478>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe f8ca 	bl	8001904 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe f8c6 	bl	8001904 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e087      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	3b01      	subs	r3, #1
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	491b      	ldr	r1, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x478>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fe f89f 	bl	8001904 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fe f89b 	bl	8001904 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e05c      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x416>
 80037e8:	e054      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_RCC_OscConfig+0x478>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe f888 	bl	8001904 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe f884 	bl	8001904 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e045      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x444>
 8003816:	e03d      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e038      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d028      	beq.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d121      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d11a      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	4293      	cmp	r3, r2
 800386a:	d111      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	3b01      	subs	r3, #1
 800387a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0cc      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e067      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fd ffb6 	bl	8001904 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd ffb2 	bl	8001904 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20c      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd f9b0 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	0800a090 	.word	0x0800a090
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	20000004 	.word	0x20000004

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a74:	b090      	sub	sp, #64	; 0x40
 8003a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a80:	2300      	movs	r3, #0
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d00d      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	f200 80a1 	bhi.w	8003bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa2:	e09b      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003aa8:	e09b      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aaa:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aae:	e098      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d028      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003adc:	fb03 f201 	mul.w	r2, r3, r1
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a43      	ldr	r2, [pc, #268]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aea:	fba0 1202 	umull	r1, r2, r0, r2
 8003aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af0:	460a      	mov	r2, r1
 8003af2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af6:	4413      	add	r3, r2
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	2200      	movs	r2, #0
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b0a:	f7fc fb61 	bl	80001d0 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4613      	mov	r3, r2
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b16:	e053      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	2200      	movs	r2, #0
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b2a:	f04f 0b00 	mov.w	fp, #0
 8003b2e:	4652      	mov	r2, sl
 8003b30:	465b      	mov	r3, fp
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	0159      	lsls	r1, r3, #5
 8003b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b40:	0150      	lsls	r0, r2, #5
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	ebb2 080a 	subs.w	r8, r2, sl
 8003b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b62:	ebb2 0408 	subs.w	r4, r2, r8
 8003b66:	eb63 0509 	sbc.w	r5, r3, r9
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	00eb      	lsls	r3, r5, #3
 8003b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b78:	00e2      	lsls	r2, r4, #3
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	eb14 030a 	adds.w	r3, r4, sl
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	eb45 030b 	adc.w	r3, r5, fp
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b96:	4629      	mov	r1, r5
 8003b98:	028b      	lsls	r3, r1, #10
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	028a      	lsls	r2, r1, #10
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	2200      	movs	r2, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb4:	f7fc fb0c 	bl	80001d0 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3740      	adds	r7, #64	; 0x40
 8003be8:	46bd      	mov	sp, r7
 8003bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	00b71b00 	.word	0x00b71b00

08003bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0a9b      	lsrs	r3, r3, #10
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	0800a0a0 	.word	0x0800a0a0

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c40:	f7ff ffdc 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0b5b      	lsrs	r3, r3, #13
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	0800a0a0 	.word	0x0800a0a0

08003c64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	220f      	movs	r2, #15
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0203 	and.w	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCC_GetClockConfig+0x60>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0207 	and.w	r2, r3, #7
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40023c00 	.word	0x40023c00

08003cc8 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0a1      	b.n	8003e26 <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fc ff30 	bl	8000b5c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	; 0x24
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7ff ff7e 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8003d18:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a44      	ldr	r2, [pc, #272]	; (8003e30 <HAL_SMBUS_Init+0x168>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0c9b      	lsrs	r3, r3, #18
 8003d24:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6852      	ldr	r2, [r2, #4]
 8003d62:	0052      	lsls	r2, r2, #1
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	fbb1 f1f2 	udiv	r1, r1, r2
 8003d6a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003d6e:	400a      	ands	r2, r1
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	d006      	beq.n	8003d82 <HAL_SMBUS_Init+0xba>
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6852      	ldr	r2, [r2, #4]
 8003d78:	0052      	lsls	r2, r2, #1
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	fbb1 f2f2 	udiv	r2, r1, r2
 8003d80:	e000      	b.n	8003d84 <HAL_SMBUS_Init+0xbc>
 8003d82:	2204      	movs	r2, #4
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6911      	ldr	r1, [r2, #16]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68d2      	ldr	r2, [r2, #12]
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8003e54:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e041      	b.n	8003f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd faca 	bl	8001434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 ff54 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e04e      	b.n	8003fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d01d      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_TIM_Base_Start_IT+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d111      	bne.n	8003fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d010      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	e007      	b.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40001800 	.word	0x40001800

08003ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e041      	b.n	800408a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f839 	bl	8004092 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fe94 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e022      	b.n	800411a <HAL_TIM_PWM_Start_DMA+0x72>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d109      	bne.n	80040ee <HAL_TIM_PWM_Start_DMA+0x46>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e015      	b.n	800411a <HAL_TIM_PWM_Start_DMA+0x72>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d109      	bne.n	8004108 <HAL_TIM_PWM_Start_DMA+0x60>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e008      	b.n	800411a <HAL_TIM_PWM_Start_DMA+0x72>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	e171      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_TIM_PWM_Start_DMA+0x94>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e022      	b.n	8004182 <HAL_TIM_PWM_Start_DMA+0xda>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d109      	bne.n	8004156 <HAL_TIM_PWM_Start_DMA+0xae>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e015      	b.n	8004182 <HAL_TIM_PWM_Start_DMA+0xda>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d109      	bne.n	8004170 <HAL_TIM_PWM_Start_DMA+0xc8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e008      	b.n	8004182 <HAL_TIM_PWM_Start_DMA+0xda>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d024      	beq.n	80041d0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start_DMA+0xee>
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e137      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start_DMA+0xfe>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	e016      	b.n	80041d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	e00e      	b.n	80041d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	e006      	b.n	80041d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ce:	e001      	b.n	80041d4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e118      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	f200 80ae 	bhi.w	8004338 <HAL_TIM_PWM_Start_DMA+0x290>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004339 	.word	0x08004339
 80041ec:	08004339 	.word	0x08004339
 80041f0:	08004339 	.word	0x08004339
 80041f4:	08004261 	.word	0x08004261
 80041f8:	08004339 	.word	0x08004339
 80041fc:	08004339 	.word	0x08004339
 8004200:	08004339 	.word	0x08004339
 8004204:	080042a9 	.word	0x080042a9
 8004208:	08004339 	.word	0x08004339
 800420c:	08004339 	.word	0x08004339
 8004210:	08004339 	.word	0x08004339
 8004214:	080042f1 	.word	0x080042f1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	4a7c      	ldr	r2, [pc, #496]	; (8004410 <HAL_TIM_PWM_Start_DMA+0x368>)
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	4a7b      	ldr	r2, [pc, #492]	; (8004414 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	4a7a      	ldr	r2, [pc, #488]	; (8004418 <HAL_TIM_PWM_Start_DMA+0x370>)
 800422e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3334      	adds	r3, #52	; 0x34
 800423c:	461a      	mov	r2, r3
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	f7fe fb94 	bl	800296c <HAL_DMA_Start_IT>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0db      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	60da      	str	r2, [r3, #12]
      break;
 800425e:	e06e      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	4a6a      	ldr	r2, [pc, #424]	; (8004410 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	4a68      	ldr	r2, [pc, #416]	; (8004418 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004276:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3338      	adds	r3, #56	; 0x38
 8004284:	461a      	mov	r2, r3
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	f7fe fb70 	bl	800296c <HAL_DMA_Start_IT>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0b7      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a4:	60da      	str	r2, [r3, #12]
      break;
 80042a6:	e04a      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a58      	ldr	r2, [pc, #352]	; (8004410 <HAL_TIM_PWM_Start_DMA+0x368>)
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4a57      	ldr	r2, [pc, #348]	; (8004414 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a56      	ldr	r2, [pc, #344]	; (8004418 <HAL_TIM_PWM_Start_DMA+0x370>)
 80042be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	333c      	adds	r3, #60	; 0x3c
 80042cc:	461a      	mov	r2, r3
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	f7fe fb4c 	bl	800296c <HAL_DMA_Start_IT>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e093      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ec:	60da      	str	r2, [r3, #12]
      break;
 80042ee:	e026      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a46      	ldr	r2, [pc, #280]	; (8004410 <HAL_TIM_PWM_Start_DMA+0x368>)
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	4a45      	ldr	r2, [pc, #276]	; (8004414 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	4a44      	ldr	r2, [pc, #272]	; (8004418 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3340      	adds	r3, #64	; 0x40
 8004314:	461a      	mov	r2, r3
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	f7fe fb28 	bl	800296c <HAL_DMA_Start_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06f      	b.n	8004406 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004334:	60da      	str	r2, [r3, #12]
      break;
 8004336:	e002      	b.n	800433e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
      break;
 800433c:	bf00      	nop
  }

  if (status == HAL_OK)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d15f      	bne.n	8004404 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	4618      	mov	r0, r3
 800434e:	f001 f91b 	bl	8005588 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a31      	ldr	r2, [pc, #196]	; (800441c <HAL_TIM_PWM_Start_DMA+0x374>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_TIM_PWM_Start_DMA+0x2be>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2f      	ldr	r2, [pc, #188]	; (8004420 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a25      	ldr	r2, [pc, #148]	; (800441c <HAL_TIM_PWM_Start_DMA+0x374>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d01d      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	; (8004428 <HAL_TIM_PWM_Start_DMA+0x380>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_TIM_PWM_Start_DMA+0x384>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_TIM_PWM_Start_DMA+0x378>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_TIM_PWM_Start_DMA+0x388>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d111      	bne.n	80043f4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d010      	beq.n	8004404 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	e007      	b.n	8004404 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	08004c51 	.word	0x08004c51
 8004414:	08004cf9 	.word	0x08004cf9
 8004418:	08004bbf 	.word	0x08004bbf
 800441c:	40010000 	.word	0x40010000
 8004420:	40010400 	.word	0x40010400
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800
 800442c:	40000c00 	.word	0x40000c00
 8004430:	40014000 	.word	0x40014000
 8004434:	40001800 	.word	0x40001800

08004438 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f839 	bl	80044d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 fc72 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d122      	bne.n	8004546 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d11b      	bne.n	8004546 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0202 	mvn.w	r2, #2
 8004516:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb14 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 8004532:	e005      	b.n	8004540 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fb06 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fb17 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d122      	bne.n	800459a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d11b      	bne.n	800459a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f06f 0204 	mvn.w	r2, #4
 800456a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 faea 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 8004586:	e005      	b.n	8004594 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fadc 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 faed 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d122      	bne.n	80045ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11b      	bne.n	80045ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f06f 0208 	mvn.w	r2, #8
 80045be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2204      	movs	r2, #4
 80045c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fac0 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 80045da:	e005      	b.n	80045e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fab2 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fac3 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d122      	bne.n	8004642 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d11b      	bne.n	8004642 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f06f 0210 	mvn.w	r2, #16
 8004612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2208      	movs	r2, #8
 8004618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa96 	bl	8004b5a <HAL_TIM_IC_CaptureCallback>
 800462e:	e005      	b.n	800463c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa88 	bl	8004b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa99 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10e      	bne.n	800466e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0201 	mvn.w	r2, #1
 8004666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fc fb5d 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d10e      	bne.n	800469a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d107      	bne.n	800469a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f001 f875 	bl	8005784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d10e      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fa68 	bl	8004b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d10e      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0220 	mvn.w	r2, #32
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f83f 	bl	8005770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004714:	2302      	movs	r3, #2
 8004716:	e088      	b.n	800482a <HAL_TIM_IC_ConfigChannel+0x130>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11b      	bne.n	800475e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f000 fd63 	bl	8005200 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 020c 	bic.w	r2, r2, #12
 8004748:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6999      	ldr	r1, [r3, #24]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
 800475c:	e060      	b.n	8004820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d11c      	bne.n	800479e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f000 fde7 	bl	8005346 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004786:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	619a      	str	r2, [r3, #24]
 800479c:	e040      	b.n	8004820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d11b      	bne.n	80047dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f000 fe34 	bl	8005420 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 020c 	bic.w	r2, r2, #12
 80047c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69d9      	ldr	r1, [r3, #28]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	61da      	str	r2, [r3, #28]
 80047da:	e021      	b.n	8004820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d11c      	bne.n	800481c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f000 fe51 	bl	8005498 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004804:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	61da      	str	r2, [r3, #28]
 800481a:	e001      	b.n	8004820 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800484e:	2302      	movs	r3, #2
 8004850:	e0ae      	b.n	80049b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b0c      	cmp	r3, #12
 800485e:	f200 809f 	bhi.w	80049a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080049a1 	.word	0x080049a1
 8004870:	080049a1 	.word	0x080049a1
 8004874:	080049a1 	.word	0x080049a1
 8004878:	080048dd 	.word	0x080048dd
 800487c:	080049a1 	.word	0x080049a1
 8004880:	080049a1 	.word	0x080049a1
 8004884:	080049a1 	.word	0x080049a1
 8004888:	0800491f 	.word	0x0800491f
 800488c:	080049a1 	.word	0x080049a1
 8004890:	080049a1 	.word	0x080049a1
 8004894:	080049a1 	.word	0x080049a1
 8004898:	0800495f 	.word	0x0800495f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fafc 	bl	8004ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0208 	orr.w	r2, r2, #8
 80048b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0204 	bic.w	r2, r2, #4
 80048c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6999      	ldr	r1, [r3, #24]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	619a      	str	r2, [r3, #24]
      break;
 80048da:	e064      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fb4c 	bl	8004f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	021a      	lsls	r2, r3, #8
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	619a      	str	r2, [r3, #24]
      break;
 800491c:	e043      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fba1 	bl	800506c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0208 	orr.w	r2, r2, #8
 8004938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0204 	bic.w	r2, r2, #4
 8004948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69d9      	ldr	r1, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	61da      	str	r2, [r3, #28]
      break;
 800495c:	e023      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fbf5 	bl	8005154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69d9      	ldr	r1, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	61da      	str	r2, [r3, #28]
      break;
 800499e:	e002      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	75fb      	strb	r3, [r7, #23]
      break;
 80049a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0b4      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x186>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0xd4>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	f000 8086 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x172>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0xa6>
 8004a28:	2b70      	cmp	r3, #112	; 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8004a38:	2b50      	cmp	r3, #80	; 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x13a>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f000 fd6b 	bl	8005548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f000 fd54 	bl	8005548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fc12 	bl	80052e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	; 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fd21 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 fc6e 	bl	80053c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	; 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fd11 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 fbf2 	bl	80052e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd01 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 fcf8 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d107      	bne.n	8004be6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	e02a      	b.n	8004c3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d107      	bne.n	8004c00 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bfe:	e01d      	b.n	8004c3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d107      	bne.n	8004c1a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	e010      	b.n	8004c3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d107      	bne.n	8004c34 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2208      	movs	r2, #8
 8004c28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c32:	e003      	b.n	8004c3c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff ffb4 	bl	8004baa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d10b      	bne.n	8004c80 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d136      	bne.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7e:	e031      	b.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d10b      	bne.n	8004ca2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d125      	bne.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca0:	e020      	b.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d10b      	bne.n	8004cc4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d114      	bne.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc2:	e00f      	b.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d10a      	bne.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff ff42 	bl	8004b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	771a      	strb	r2, [r3, #28]
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	771a      	strb	r2, [r3, #28]
 8004d16:	e019      	b.n	8004d4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d103      	bne.n	8004d2a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2202      	movs	r2, #2
 8004d26:	771a      	strb	r2, [r3, #28]
 8004d28:	e010      	b.n	8004d4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d103      	bne.n	8004d3c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2204      	movs	r2, #4
 8004d38:	771a      	strb	r2, [r3, #28]
 8004d3a:	e007      	b.n	8004d4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d102      	bne.n	8004d4c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff ff18 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3d      	ldr	r2, [pc, #244]	; (8004e78 <TIM_Base_SetConfig+0x118>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <TIM_Base_SetConfig+0x11c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <TIM_Base_SetConfig+0x120>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a3a      	ldr	r2, [pc, #232]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02b      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d027      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <TIM_Base_SetConfig+0x118>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d023      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <TIM_Base_SetConfig+0x11c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01f      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <TIM_Base_SetConfig+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01b      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d017      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <TIM_Base_SetConfig+0x128>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00f      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <TIM_Base_SetConfig+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <TIM_Base_SetConfig+0x134>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <TIM_Base_SetConfig+0x138>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <TIM_Base_SetConfig+0x13c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d108      	bne.n	8004e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0xf8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	615a      	str	r2, [r3, #20]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40010400 	.word	0x40010400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800
 8004e94:	40001800 	.word	0x40001800
 8004e98:	40001c00 	.word	0x40001c00
 8004e9c:	40002000 	.word	0x40002000

08004ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f023 0302 	bic.w	r3, r3, #2
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <TIM_OC1_SetConfig+0xd8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC1_SetConfig+0x64>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <TIM_OC1_SetConfig+0xdc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0308 	bic.w	r3, r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <TIM_OC1_SetConfig+0xd8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC1_SetConfig+0x8e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <TIM_OC1_SetConfig+0xdc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40010400 	.word	0x40010400

08004f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0210 	bic.w	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0320 	bic.w	r3, r3, #32
 8004fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a22      	ldr	r2, [pc, #136]	; (8005064 <TIM_OC2_SetConfig+0xe4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC2_SetConfig+0x68>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a21      	ldr	r2, [pc, #132]	; (8005068 <TIM_OC2_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d10d      	bne.n	8005004 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a17      	ldr	r2, [pc, #92]	; (8005064 <TIM_OC2_SetConfig+0xe4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_OC2_SetConfig+0x94>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a16      	ldr	r2, [pc, #88]	; (8005068 <TIM_OC2_SetConfig+0xe8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d113      	bne.n	800503c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400

0800506c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a21      	ldr	r2, [pc, #132]	; (800514c <TIM_OC3_SetConfig+0xe0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_OC3_SetConfig+0x66>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a20      	ldr	r2, [pc, #128]	; (8005150 <TIM_OC3_SetConfig+0xe4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10d      	bne.n	80050ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <TIM_OC3_SetConfig+0xe0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_OC3_SetConfig+0x92>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a15      	ldr	r2, [pc, #84]	; (8005150 <TIM_OC3_SetConfig+0xe4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d113      	bne.n	8005126 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400

08005154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800519e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <TIM_OC4_SetConfig+0xa4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_OC4_SetConfig+0x68>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a11      	ldr	r2, [pc, #68]	; (80051fc <TIM_OC4_SetConfig+0xa8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d109      	bne.n	80051d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	019b      	lsls	r3, r3, #6
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <TIM_TI1_SetConfig+0xcc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d017      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <TIM_TI1_SetConfig+0xd0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a24      	ldr	r2, [pc, #144]	; (80052d4 <TIM_TI1_SetConfig+0xd4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a23      	ldr	r2, [pc, #140]	; (80052d8 <TIM_TI1_SetConfig+0xd8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <TIM_TI1_SetConfig+0xdc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <TIM_TI1_SetConfig+0xe0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_TI1_SetConfig+0x66>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <TIM_TI1_SetConfig+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <TIM_TI1_SetConfig+0x6a>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <TIM_TI1_SetConfig+0x6c>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e003      	b.n	800528a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	b2db      	uxtb	r3, r3
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f023 030a 	bic.w	r3, r3, #10
 80052a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 030a 	and.w	r3, r3, #10
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40010400 	.word	0x40010400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40001800 	.word	0x40001800

080052e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 030a 	bic.w	r3, r3, #10
 8005324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0210 	bic.w	r2, r3, #16
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	b29b      	uxth	r3, r3
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005398:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	621a      	str	r2, [r3, #32]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f023 0210 	bic.w	r2, r3, #16
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	b2db      	uxtb	r3, r3
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005470:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	031b      	lsls	r3, r3, #12
 80054dc:	b29b      	uxth	r3, r3
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	031b      	lsls	r3, r3, #12
 80054f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	f043 0307 	orr.w	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	609a      	str	r2, [r3, #8]
}
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	431a      	orrs	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4313      	orrs	r3, r2
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	609a      	str	r2, [r3, #8]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	2201      	movs	r2, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	401a      	ands	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	431a      	orrs	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e05a      	b.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a21      	ldr	r2, [pc, #132]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d022      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d01d      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d018      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d10c      	bne.n	8005690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4313      	orrs	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40001800 	.word	0x40001800

080056cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e03d      	b.n	8005764 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e03f      	b.n	800582a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fb ffba 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2224      	movs	r2, #36	; 0x24
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd7b 	bl	80062d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08a      	sub	sp, #40	; 0x28
 8005836:	af02      	add	r7, sp, #8
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b20      	cmp	r3, #32
 8005850:	d17c      	bne.n	800594c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_UART_Transmit+0x2c>
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e075      	b.n	800594e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_UART_Transmit+0x3e>
 800586c:	2302      	movs	r3, #2
 800586e:	e06e      	b.n	800594e <HAL_UART_Transmit+0x11c>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2221      	movs	r2, #33	; 0x21
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005886:	f7fc f83d 	bl	8001904 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a0:	d108      	bne.n	80058b4 <HAL_UART_Transmit+0x82>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e003      	b.n	80058bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058c4:	e02a      	b.n	800591c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 faf9 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e036      	b.n	800594e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	3302      	adds	r3, #2
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e007      	b.n	800590e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1cf      	bne.n	80058c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	2140      	movs	r1, #64	; 0x40
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fac9 	bl	8005ec8 <UART_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800594c:	2302      	movs	r3, #2
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b0ba      	sub	sp, #232	; 0xe8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005984:	2300      	movs	r3, #0
 8005986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_UART_IRQHandler+0x66>
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fbd3 	bl	8006162 <UART_Receive_IT>
      return;
 80059bc:	e256      	b.n	8005e6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80de 	beq.w	8005b84 <HAL_UART_IRQHandler+0x22c>
 80059c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80d1 	beq.w	8005b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_UART_IRQHandler+0xae>
 80059ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f043 0201 	orr.w	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_UART_IRQHandler+0xd2>
 8005a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0202 	orr.w	r2, r3, #2
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <HAL_UART_IRQHandler+0xf6>
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0204 	orr.w	r2, r3, #4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d011      	beq.n	8005a7e <HAL_UART_IRQHandler+0x126>
 8005a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0208 	orr.w	r2, r3, #8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 81ed 	beq.w	8005e62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x14e>
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fb5e 	bl	8006162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x17a>
 8005aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d04f      	beq.n	8005b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa66 	bl	8005fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d141      	bne.n	8005b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1d9      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d013      	beq.n	8005b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	4a7d      	ldr	r2, [pc, #500]	; (8005d34 <HAL_UART_IRQHandler+0x3dc>)
 8005b40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fc ffd8 	bl	8002afc <HAL_DMA_Abort_IT>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	e00e      	b.n	8005b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f99a 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	e00a      	b.n	8005b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f996 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	e006      	b.n	8005b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f992 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b7e:	e170      	b.n	8005e62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	bf00      	nop
    return;
 8005b82:	e16e      	b.n	8005e62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	f040 814a 	bne.w	8005e22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8143 	beq.w	8005e22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 813c 	beq.w	8005e22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	f040 80b4 	bne.w	8005d38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8140 	beq.w	8005e66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	f080 8139 	bcs.w	8005e66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c06:	f000 8088 	beq.w	8005d1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1d9      	bne.n	8005c0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e1      	bne.n	8005c56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e3      	bne.n	8005c92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cea:	f023 0310 	bic.w	r3, r3, #16
 8005cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e3      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc fe81 	bl	8002a1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8c0 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d30:	e099      	b.n	8005e66 <HAL_UART_IRQHandler+0x50e>
 8005d32:	bf00      	nop
 8005d34:	0800606b 	.word	0x0800606b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 808b 	beq.w	8005e6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8086 	beq.w	8005e6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d82:	647a      	str	r2, [r7, #68]	; 0x44
 8005d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e3      	bne.n	8005d5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	623b      	str	r3, [r7, #32]
   return(result);
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3314      	adds	r3, #20
 8005db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dba:	633a      	str	r2, [r7, #48]	; 0x30
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e3      	bne.n	8005d96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0310 	bic.w	r3, r3, #16
 8005df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e00:	61fa      	str	r2, [r7, #28]
 8005e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69b9      	ldr	r1, [r7, #24]
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e3      	bne.n	8005ddc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f848 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e20:	e023      	b.n	8005e6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_UART_IRQHandler+0x4ea>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f929 	bl	8006092 <UART_Transmit_IT>
    return;
 8005e40:	e014      	b.n	8005e6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00e      	beq.n	8005e6c <HAL_UART_IRQHandler+0x514>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f969 	bl	8006132 <UART_EndTransmit_IT>
    return;
 8005e60:	e004      	b.n	8005e6c <HAL_UART_IRQHandler+0x514>
    return;
 8005e62:	bf00      	nop
 8005e64:	e002      	b.n	8005e6c <HAL_UART_IRQHandler+0x514>
      return;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <HAL_UART_IRQHandler+0x514>
      return;
 8005e6a:	bf00      	nop
  }
}
 8005e6c:	37e8      	adds	r7, #232	; 0xe8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop

08005e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b090      	sub	sp, #64	; 0x40
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed8:	e050      	b.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d04c      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ee8:	f7fb fd0c 	bl	8001904 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d241      	bcs.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f18:	637a      	str	r2, [r7, #52]	; 0x34
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e5      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f4c:	623a      	str	r2, [r7, #32]
 8005f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e5      	bne.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e00f      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d09f      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3740      	adds	r7, #64	; 0x40
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b095      	sub	sp, #84	; 0x54
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fcc:	643a      	str	r2, [r7, #64]	; 0x40
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3314      	adds	r3, #20
 8005fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3314      	adds	r3, #20
 8005ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	2b01      	cmp	r3, #1
 800601a:	d119      	bne.n	8006050 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	60bb      	str	r3, [r7, #8]
   return(result);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800603c:	61ba      	str	r2, [r7, #24]
 800603e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	613b      	str	r3, [r7, #16]
   return(result);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800605e:	bf00      	nop
 8006060:	3754      	adds	r7, #84	; 0x54
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff09 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b21      	cmp	r3, #33	; 0x21
 80060a4:	d13e      	bne.n	8006124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d114      	bne.n	80060da <UART_Transmit_IT+0x48>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d110      	bne.n	80060da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]
 80060d8:	e008      	b.n	80060ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6211      	str	r1, [r2, #32]
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4619      	mov	r1, r3
 80060fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10f      	bne.n	8006120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800610e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff fe8e 	bl	8005e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b08c      	sub	sp, #48	; 0x30
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b22      	cmp	r3, #34	; 0x22
 8006174:	f040 80ab 	bne.w	80062ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006180:	d117      	bne.n	80061b2 <UART_Receive_IT+0x50>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d113      	bne.n	80061b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	1c9a      	adds	r2, r3, #2
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
 80061b0:	e026      	b.n	8006200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c4:	d007      	beq.n	80061d6 <UART_Receive_IT+0x74>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <UART_Receive_IT+0x82>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e008      	b.n	80061f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29b      	uxth	r3, r3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4619      	mov	r1, r3
 800620e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006210:	2b00      	cmp	r3, #0
 8006212:	d15a      	bne.n	80062ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0220 	bic.w	r2, r2, #32
 8006222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	2b01      	cmp	r3, #1
 8006252:	d135      	bne.n	80062c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	613b      	str	r3, [r7, #16]
   return(result);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f023 0310 	bic.w	r3, r3, #16
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	623a      	str	r2, [r7, #32]
 800627c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	69f9      	ldr	r1, [r7, #28]
 8006280:	6a3a      	ldr	r2, [r7, #32]
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	61bb      	str	r3, [r7, #24]
   return(result);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b10      	cmp	r3, #16
 800629a:	d10a      	bne.n	80062b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff fdf9 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
 80062be:	e002      	b.n	80062c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fde1 	bl	8005e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e002      	b.n	80062d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e000      	b.n	80062d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3730      	adds	r7, #48	; 0x30
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062dc:	b0c0      	sub	sp, #256	; 0x100
 80062de:	af00      	add	r7, sp, #0
 80062e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	ea40 0301 	orr.w	r3, r0, r1
 8006300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	431a      	orrs	r2, r3
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	431a      	orrs	r2, r3
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006330:	f021 010c 	bic.w	r1, r1, #12
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800633e:	430b      	orrs	r3, r1
 8006340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	6999      	ldr	r1, [r3, #24]
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	ea40 0301 	orr.w	r3, r0, r1
 800635e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b8f      	ldr	r3, [pc, #572]	; (80065a4 <UART_SetConfig+0x2cc>)
 8006368:	429a      	cmp	r2, r3
 800636a:	d005      	beq.n	8006378 <UART_SetConfig+0xa0>
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b8d      	ldr	r3, [pc, #564]	; (80065a8 <UART_SetConfig+0x2d0>)
 8006374:	429a      	cmp	r2, r3
 8006376:	d104      	bne.n	8006382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006378:	f7fd fc60 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 800637c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006380:	e003      	b.n	800638a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fd fc47 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8006386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006394:	f040 810c 	bne.w	80065b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639c:	2200      	movs	r2, #0
 800639e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063aa:	4622      	mov	r2, r4
 80063ac:	462b      	mov	r3, r5
 80063ae:	1891      	adds	r1, r2, r2
 80063b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80063b2:	415b      	adcs	r3, r3
 80063b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063ba:	4621      	mov	r1, r4
 80063bc:	eb12 0801 	adds.w	r8, r2, r1
 80063c0:	4629      	mov	r1, r5
 80063c2:	eb43 0901 	adc.w	r9, r3, r1
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063da:	4690      	mov	r8, r2
 80063dc:	4699      	mov	r9, r3
 80063de:	4623      	mov	r3, r4
 80063e0:	eb18 0303 	adds.w	r3, r8, r3
 80063e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063e8:	462b      	mov	r3, r5
 80063ea:	eb49 0303 	adc.w	r3, r9, r3
 80063ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006406:	460b      	mov	r3, r1
 8006408:	18db      	adds	r3, r3, r3
 800640a:	653b      	str	r3, [r7, #80]	; 0x50
 800640c:	4613      	mov	r3, r2
 800640e:	eb42 0303 	adc.w	r3, r2, r3
 8006412:	657b      	str	r3, [r7, #84]	; 0x54
 8006414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800641c:	f7f9 fed8 	bl	80001d0 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4b61      	ldr	r3, [pc, #388]	; (80065ac <UART_SetConfig+0x2d4>)
 8006426:	fba3 2302 	umull	r2, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	011c      	lsls	r4, r3, #4
 800642e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006432:	2200      	movs	r2, #0
 8006434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800643c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	1891      	adds	r1, r2, r2
 8006446:	64b9      	str	r1, [r7, #72]	; 0x48
 8006448:	415b      	adcs	r3, r3
 800644a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800644c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006450:	4641      	mov	r1, r8
 8006452:	eb12 0a01 	adds.w	sl, r2, r1
 8006456:	4649      	mov	r1, r9
 8006458:	eb43 0b01 	adc.w	fp, r3, r1
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800646c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006470:	4692      	mov	sl, r2
 8006472:	469b      	mov	fp, r3
 8006474:	4643      	mov	r3, r8
 8006476:	eb1a 0303 	adds.w	r3, sl, r3
 800647a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800647e:	464b      	mov	r3, r9
 8006480:	eb4b 0303 	adc.w	r3, fp, r3
 8006484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800649c:	460b      	mov	r3, r1
 800649e:	18db      	adds	r3, r3, r3
 80064a0:	643b      	str	r3, [r7, #64]	; 0x40
 80064a2:	4613      	mov	r3, r2
 80064a4:	eb42 0303 	adc.w	r3, r2, r3
 80064a8:	647b      	str	r3, [r7, #68]	; 0x44
 80064aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064b2:	f7f9 fe8d 	bl	80001d0 <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	4b3b      	ldr	r3, [pc, #236]	; (80065ac <UART_SetConfig+0x2d4>)
 80064be:	fba3 2301 	umull	r2, r3, r3, r1
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	2264      	movs	r2, #100	; 0x64
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	1acb      	subs	r3, r1, r3
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064d2:	4b36      	ldr	r3, [pc, #216]	; (80065ac <UART_SetConfig+0x2d4>)
 80064d4:	fba3 2302 	umull	r2, r3, r3, r2
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e0:	441c      	add	r4, r3
 80064e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	1891      	adds	r1, r2, r2
 80064fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80064fc:	415b      	adcs	r3, r3
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006504:	4641      	mov	r1, r8
 8006506:	1851      	adds	r1, r2, r1
 8006508:	6339      	str	r1, [r7, #48]	; 0x30
 800650a:	4649      	mov	r1, r9
 800650c:	414b      	adcs	r3, r1
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800651c:	4659      	mov	r1, fp
 800651e:	00cb      	lsls	r3, r1, #3
 8006520:	4651      	mov	r1, sl
 8006522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006526:	4651      	mov	r1, sl
 8006528:	00ca      	lsls	r2, r1, #3
 800652a:	4610      	mov	r0, r2
 800652c:	4619      	mov	r1, r3
 800652e:	4603      	mov	r3, r0
 8006530:	4642      	mov	r2, r8
 8006532:	189b      	adds	r3, r3, r2
 8006534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006538:	464b      	mov	r3, r9
 800653a:	460a      	mov	r2, r1
 800653c:	eb42 0303 	adc.w	r3, r2, r3
 8006540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006558:	460b      	mov	r3, r1
 800655a:	18db      	adds	r3, r3, r3
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
 800655e:	4613      	mov	r3, r2
 8006560:	eb42 0303 	adc.w	r3, r2, r3
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800656a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800656e:	f7f9 fe2f 	bl	80001d0 <__aeabi_uldivmod>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <UART_SetConfig+0x2d4>)
 8006578:	fba3 1302 	umull	r1, r3, r3, r2
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	2164      	movs	r1, #100	; 0x64
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	3332      	adds	r3, #50	; 0x32
 800658a:	4a08      	ldr	r2, [pc, #32]	; (80065ac <UART_SetConfig+0x2d4>)
 800658c:	fba2 2303 	umull	r2, r3, r2, r3
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	f003 0207 	and.w	r2, r3, #7
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4422      	add	r2, r4
 800659e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a0:	e105      	b.n	80067ae <UART_SetConfig+0x4d6>
 80065a2:	bf00      	nop
 80065a4:	40011000 	.word	0x40011000
 80065a8:	40011400 	.word	0x40011400
 80065ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065c2:	4642      	mov	r2, r8
 80065c4:	464b      	mov	r3, r9
 80065c6:	1891      	adds	r1, r2, r2
 80065c8:	6239      	str	r1, [r7, #32]
 80065ca:	415b      	adcs	r3, r3
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d2:	4641      	mov	r1, r8
 80065d4:	1854      	adds	r4, r2, r1
 80065d6:	4649      	mov	r1, r9
 80065d8:	eb43 0501 	adc.w	r5, r3, r1
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	00eb      	lsls	r3, r5, #3
 80065e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ea:	00e2      	lsls	r2, r4, #3
 80065ec:	4614      	mov	r4, r2
 80065ee:	461d      	mov	r5, r3
 80065f0:	4643      	mov	r3, r8
 80065f2:	18e3      	adds	r3, r4, r3
 80065f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065f8:	464b      	mov	r3, r9
 80065fa:	eb45 0303 	adc.w	r3, r5, r3
 80065fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800660e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800661e:	4629      	mov	r1, r5
 8006620:	008b      	lsls	r3, r1, #2
 8006622:	4621      	mov	r1, r4
 8006624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006628:	4621      	mov	r1, r4
 800662a:	008a      	lsls	r2, r1, #2
 800662c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006630:	f7f9 fdce 	bl	80001d0 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4b60      	ldr	r3, [pc, #384]	; (80067bc <UART_SetConfig+0x4e4>)
 800663a:	fba3 2302 	umull	r2, r3, r3, r2
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	011c      	lsls	r4, r3, #4
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800664c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	1891      	adds	r1, r2, r2
 800665a:	61b9      	str	r1, [r7, #24]
 800665c:	415b      	adcs	r3, r3
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006664:	4641      	mov	r1, r8
 8006666:	1851      	adds	r1, r2, r1
 8006668:	6139      	str	r1, [r7, #16]
 800666a:	4649      	mov	r1, r9
 800666c:	414b      	adcs	r3, r1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800667c:	4659      	mov	r1, fp
 800667e:	00cb      	lsls	r3, r1, #3
 8006680:	4651      	mov	r1, sl
 8006682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006686:	4651      	mov	r1, sl
 8006688:	00ca      	lsls	r2, r1, #3
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	4603      	mov	r3, r0
 8006690:	4642      	mov	r2, r8
 8006692:	189b      	adds	r3, r3, r2
 8006694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006698:	464b      	mov	r3, r9
 800669a:	460a      	mov	r2, r1
 800669c:	eb42 0303 	adc.w	r3, r2, r3
 80066a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80066ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066bc:	4649      	mov	r1, r9
 80066be:	008b      	lsls	r3, r1, #2
 80066c0:	4641      	mov	r1, r8
 80066c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c6:	4641      	mov	r1, r8
 80066c8:	008a      	lsls	r2, r1, #2
 80066ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066ce:	f7f9 fd7f 	bl	80001d0 <__aeabi_uldivmod>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4b39      	ldr	r3, [pc, #228]	; (80067bc <UART_SetConfig+0x4e4>)
 80066d8:	fba3 1302 	umull	r1, r3, r3, r2
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	2164      	movs	r1, #100	; 0x64
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	3332      	adds	r3, #50	; 0x32
 80066ea:	4a34      	ldr	r2, [pc, #208]	; (80067bc <UART_SetConfig+0x4e4>)
 80066ec:	fba2 2303 	umull	r2, r3, r2, r3
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f6:	441c      	add	r4, r3
 80066f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066fc:	2200      	movs	r2, #0
 80066fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006700:	677a      	str	r2, [r7, #116]	; 0x74
 8006702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006706:	4642      	mov	r2, r8
 8006708:	464b      	mov	r3, r9
 800670a:	1891      	adds	r1, r2, r2
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	415b      	adcs	r3, r3
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006716:	4641      	mov	r1, r8
 8006718:	1851      	adds	r1, r2, r1
 800671a:	6039      	str	r1, [r7, #0]
 800671c:	4649      	mov	r1, r9
 800671e:	414b      	adcs	r3, r1
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800672e:	4659      	mov	r1, fp
 8006730:	00cb      	lsls	r3, r1, #3
 8006732:	4651      	mov	r1, sl
 8006734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006738:	4651      	mov	r1, sl
 800673a:	00ca      	lsls	r2, r1, #3
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	4603      	mov	r3, r0
 8006742:	4642      	mov	r2, r8
 8006744:	189b      	adds	r3, r3, r2
 8006746:	66bb      	str	r3, [r7, #104]	; 0x68
 8006748:	464b      	mov	r3, r9
 800674a:	460a      	mov	r2, r1
 800674c:	eb42 0303 	adc.w	r3, r2, r3
 8006750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	663b      	str	r3, [r7, #96]	; 0x60
 800675c:	667a      	str	r2, [r7, #100]	; 0x64
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800676a:	4649      	mov	r1, r9
 800676c:	008b      	lsls	r3, r1, #2
 800676e:	4641      	mov	r1, r8
 8006770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006774:	4641      	mov	r1, r8
 8006776:	008a      	lsls	r2, r1, #2
 8006778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800677c:	f7f9 fd28 	bl	80001d0 <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <UART_SetConfig+0x4e4>)
 8006786:	fba3 1302 	umull	r1, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2164      	movs	r1, #100	; 0x64
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	3332      	adds	r3, #50	; 0x32
 8006798:	4a08      	ldr	r2, [pc, #32]	; (80067bc <UART_SetConfig+0x4e4>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4422      	add	r2, r4
 80067ac:	609a      	str	r2, [r3, #8]
}
 80067ae:	bf00      	nop
 80067b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067b4:	46bd      	mov	sp, r7
 80067b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ba:	bf00      	nop
 80067bc:	51eb851f 	.word	0x51eb851f

080067c0 <__NVIC_SetPriority>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	db0a      	blt.n	80067ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	490c      	ldr	r1, [pc, #48]	; (800680c <__NVIC_SetPriority+0x4c>)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	0112      	lsls	r2, r2, #4
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	440b      	add	r3, r1
 80067e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067e8:	e00a      	b.n	8006800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4908      	ldr	r1, [pc, #32]	; (8006810 <__NVIC_SetPriority+0x50>)
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	3b04      	subs	r3, #4
 80067f8:	0112      	lsls	r2, r2, #4
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	440b      	add	r3, r1
 80067fe:	761a      	strb	r2, [r3, #24]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	e000e100 	.word	0xe000e100
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <SysTick_Handler+0x1c>)
 800681a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800681c:	f001 fdaa 	bl	8008374 <xTaskGetSchedulerState>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d001      	beq.n	800682a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006826:	f002 fb8f 	bl	8008f48 <xPortSysTickHandler>
  }
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000e010 	.word	0xe000e010

08006834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006838:	2100      	movs	r1, #0
 800683a:	f06f 0004 	mvn.w	r0, #4
 800683e:	f7ff ffbf 	bl	80067c0 <__NVIC_SetPriority>
#endif
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684e:	f3ef 8305 	mrs	r3, IPSR
 8006852:	603b      	str	r3, [r7, #0]
  return(result);
 8006854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800685a:	f06f 0305 	mvn.w	r3, #5
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	e00c      	b.n	800687c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <osKernelInitialize+0x44>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <osKernelInitialize+0x44>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006870:	2300      	movs	r3, #0
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	e002      	b.n	800687c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800687c:	687b      	ldr	r3, [r7, #4]
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000420 	.word	0x20000420

08006890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006896:	f3ef 8305 	mrs	r3, IPSR
 800689a:	603b      	str	r3, [r7, #0]
  return(result);
 800689c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80068a2:	f06f 0305 	mvn.w	r3, #5
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e010      	b.n	80068cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <osKernelStart+0x48>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d109      	bne.n	80068c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068b2:	f7ff ffbf 	bl	8006834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <osKernelStart+0x48>)
 80068b8:	2202      	movs	r2, #2
 80068ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068bc:	f001 f8ec 	bl	8007a98 <vTaskStartScheduler>
      stat = osOK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	607b      	str	r3, [r7, #4]
 80068c4:	e002      	b.n	80068cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068cc:	687b      	ldr	r3, [r7, #4]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000420 	.word	0x20000420

080068dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e2:	f3ef 8305 	mrs	r3, IPSR
 80068e6:	603b      	str	r3, [r7, #0]
  return(result);
 80068e8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80068ee:	f001 f9ff 	bl	8007cf0 <xTaskGetTickCountFromISR>
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	e002      	b.n	80068fc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80068f6:	f001 f9eb 	bl	8007cd0 <xTaskGetTickCount>
 80068fa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80068fc:	687b      	ldr	r3, [r7, #4]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006906:	b580      	push	{r7, lr}
 8006908:	b08e      	sub	sp, #56	; 0x38
 800690a:	af04      	add	r7, sp, #16
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	617b      	str	r3, [r7, #20]
  return(result);
 800691c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800691e:	2b00      	cmp	r3, #0
 8006920:	d17e      	bne.n	8006a20 <osThreadNew+0x11a>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d07b      	beq.n	8006a20 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800692c:	2318      	movs	r3, #24
 800692e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006934:	f04f 33ff 	mov.w	r3, #4294967295
 8006938:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d045      	beq.n	80069cc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <osThreadNew+0x48>
        name = attr->name;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <osThreadNew+0x6e>
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b38      	cmp	r3, #56	; 0x38
 8006966:	d805      	bhi.n	8006974 <osThreadNew+0x6e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <osThreadNew+0x72>
        return (NULL);
 8006974:	2300      	movs	r3, #0
 8006976:	e054      	b.n	8006a22 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	089b      	lsrs	r3, r3, #2
 8006986:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00e      	beq.n	80069ae <osThreadNew+0xa8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2bbb      	cmp	r3, #187	; 0xbb
 8006996:	d90a      	bls.n	80069ae <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <osThreadNew+0xa8>
        mem = 1;
 80069a8:	2301      	movs	r3, #1
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e010      	b.n	80069d0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10c      	bne.n	80069d0 <osThreadNew+0xca>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d108      	bne.n	80069d0 <osThreadNew+0xca>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <osThreadNew+0xca>
          mem = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e001      	b.n	80069d0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d110      	bne.n	80069f8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069de:	9202      	str	r2, [sp, #8]
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6a3a      	ldr	r2, [r7, #32]
 80069ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fe1d 	bl	800762c <xTaskCreateStatic>
 80069f2:	4603      	mov	r3, r0
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	e013      	b.n	8006a20 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d110      	bne.n	8006a20 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f107 0310 	add.w	r3, r7, #16
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fe68 	bl	80076e6 <xTaskCreate>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <osThreadNew+0x11a>
            hTask = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a20:	693b      	ldr	r3, [r7, #16]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3728      	adds	r7, #40	; 0x28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a32:	f3ef 8305 	mrs	r3, IPSR
 8006a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a38:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006a3e:	f06f 0305 	mvn.w	r3, #5
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e019      	b.n	8006a7a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006a4a:	f001 f941 	bl	8007cd0 <xTaskGetTickCount>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <osDelayUntil+0x4a>
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	db06      	blt.n	8006a74 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006a66:	f107 0308 	add.w	r3, r7, #8
 8006a6a:	6939      	ldr	r1, [r7, #16]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 ff95 	bl	800799c <vTaskDelayUntil>
 8006a72:	e002      	b.n	8006a7a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006a74:	f06f 0303 	mvn.w	r3, #3
 8006a78:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a7a:	697b      	ldr	r3, [r7, #20]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a07      	ldr	r2, [pc, #28]	; (8006ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a06      	ldr	r2, [pc, #24]	; (8006ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8006a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000424 	.word	0x20000424
 8006ab4:	200004e0 	.word	0x200004e0

08006ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a06      	ldr	r2, [pc, #24]	; (8006ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8006ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	200006e0 	.word	0x200006e0
 8006ae8:	2000079c 	.word	0x2000079c

08006aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f103 0208 	add.w	r2, r3, #8
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f04f 32ff 	mov.w	r2, #4294967295
 8006b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f103 0208 	add.w	r2, r3, #8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0208 	add.w	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d103      	bne.n	8006bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e00c      	b.n	8006bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e002      	b.n	8006bbc <vListInsert+0x2e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d2f6      	bcs.n	8006bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6892      	ldr	r2, [r2, #8]
 8006c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6852      	ldr	r2, [r2, #4]
 8006c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d103      	bne.n	8006c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1e5a      	subs	r2, r3, #1
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c7e:	f002 f8d1 	bl	8008e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	441a      	add	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cb4:	fb01 f303 	mul.w	r3, r1, r3
 8006cb8:	441a      	add	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	; 0xff
 8006cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	22ff      	movs	r2, #255	; 0xff
 8006cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d114      	bne.n	8006cfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01a      	beq.n	8006d12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3310      	adds	r3, #16
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f985 	bl	8007ff0 <xTaskRemoveFromEventList>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d012      	beq.n	8006d12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <xQueueGenericReset+0xcc>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	e009      	b.n	8006d12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3310      	adds	r3, #16
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff fef2 	bl	8006aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3324      	adds	r3, #36	; 0x24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff feed 	bl	8006aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d12:	f002 f8b7 	bl	8008e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d16:	2301      	movs	r3, #1
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08e      	sub	sp, #56	; 0x38
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <xQueueGenericCreateStatic+0x52>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <xQueueGenericCreateStatic+0x56>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <xQueueGenericCreateStatic+0x58>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	623b      	str	r3, [r7, #32]
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xQueueGenericCreateStatic+0x7e>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericCreateStatic+0x82>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericCreateStatic+0x84>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	61fb      	str	r3, [r7, #28]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dc2:	2350      	movs	r3, #80	; 0x50
 8006dc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b50      	cmp	r3, #80	; 0x50
 8006dca:	d00a      	beq.n	8006de2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	61bb      	str	r3, [r7, #24]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006de2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006df6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 f805 	bl	8006e14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3730      	adds	r7, #48	; 0x30
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e002      	b.n	8006e36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e42:	2101      	movs	r1, #1
 8006e44:	69b8      	ldr	r0, [r7, #24]
 8006e46:	f7ff ff05 	bl	8006c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08e      	sub	sp, #56	; 0x38
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <xQueueGenericSend+0x32>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <xQueueGenericSend+0x40>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <xQueueGenericSend+0x44>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <xQueueGenericSend+0x46>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <xQueueGenericSend+0x60>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d103      	bne.n	8006eca <xQueueGenericSend+0x6e>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <xQueueGenericSend+0x72>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <xQueueGenericSend+0x74>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xQueueGenericSend+0x8e>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	623b      	str	r3, [r7, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eea:	f001 fa43 	bl	8008374 <xTaskGetSchedulerState>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <xQueueGenericSend+0x9e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <xQueueGenericSend+0xa2>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueGenericSend+0xa4>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xQueueGenericSend+0xbe>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	61fb      	str	r3, [r7, #28]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f1a:	f001 ff83 	bl	8008e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <xQueueGenericSend+0xd4>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d129      	bne.n	8006f84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f36:	f000 fa0b 	bl	8007350 <prvCopyDataToQueue>
 8006f3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d010      	beq.n	8006f66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	3324      	adds	r3, #36	; 0x24
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 f851 	bl	8007ff0 <xTaskRemoveFromEventList>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f54:	4b3f      	ldr	r3, [pc, #252]	; (8007054 <xQueueGenericSend+0x1f8>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	e00a      	b.n	8006f7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b39      	ldr	r3, [pc, #228]	; (8007054 <xQueueGenericSend+0x1f8>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f7c:	f001 ff82 	bl	8008e84 <vPortExitCritical>
				return pdPASS;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e063      	b.n	800704c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f8a:	f001 ff7b 	bl	8008e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e05c      	b.n	800704c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f98:	f107 0314 	add.w	r3, r7, #20
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 f88b 	bl	80080b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fa6:	f001 ff6d 	bl	8008e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006faa:	f000 fde5 	bl	8007b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fae:	f001 ff39 	bl	8008e24 <vPortEnterCritical>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d103      	bne.n	8006fc8 <xQueueGenericSend+0x16c>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d103      	bne.n	8006fde <xQueueGenericSend+0x182>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fde:	f001 ff51 	bl	8008e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fe2:	1d3a      	adds	r2, r7, #4
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f87a 	bl	80080e4 <xTaskCheckForTimeOut>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d124      	bne.n	8007040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff8:	f000 faa2 	bl	8007540 <prvIsQueueFull>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d018      	beq.n	8007034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	3310      	adds	r3, #16
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 ffa0 	bl	8007f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007012:	f000 fa2d 	bl	8007470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007016:	f000 fdbd 	bl	8007b94 <xTaskResumeAll>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	f47f af7c 	bne.w	8006f1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <xQueueGenericSend+0x1f8>)
 8007024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	e772      	b.n	8006f1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007036:	f000 fa1b 	bl	8007470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800703a:	f000 fdab 	bl	8007b94 <xTaskResumeAll>
 800703e:	e76c      	b.n	8006f1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007042:	f000 fa15 	bl	8007470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007046:	f000 fda5 	bl	8007b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800704a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800704c:	4618      	mov	r0, r3
 800704e:	3738      	adds	r7, #56	; 0x38
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	e000ed04 	.word	0xe000ed04

08007058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b090      	sub	sp, #64	; 0x40
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <xQueueGenericSendFromISR+0x3c>
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <xQueueGenericSendFromISR+0x40>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <xQueueGenericSendFromISR+0x42>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d103      	bne.n	80070c2 <xQueueGenericSendFromISR+0x6a>
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <xQueueGenericSendFromISR+0x6e>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueGenericSendFromISR+0x70>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	623b      	str	r3, [r7, #32]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070e2:	f001 ff81 	bl	8008fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070e6:	f3ef 8211 	mrs	r2, BASEPRI
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	61fa      	str	r2, [r7, #28]
 80070fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <xQueueGenericSendFromISR+0xbc>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d12f      	bne.n	8007174 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800712a:	f000 f911 	bl	8007350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800712e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d112      	bne.n	800715e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d016      	beq.n	800716e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	3324      	adds	r3, #36	; 0x24
 8007144:	4618      	mov	r0, r3
 8007146:	f000 ff53 	bl	8007ff0 <xTaskRemoveFromEventList>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00e      	beq.n	800716e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e007      	b.n	800716e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800715e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007162:	3301      	adds	r3, #1
 8007164:	b2db      	uxtb	r3, r3
 8007166:	b25a      	sxtb	r2, r3
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800716e:	2301      	movs	r3, #1
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007172:	e001      	b.n	8007178 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007182:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007186:	4618      	mov	r0, r3
 8007188:	3740      	adds	r7, #64	; 0x40
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08c      	sub	sp, #48	; 0x30
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <xQueueReceive+0x30>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	623b      	str	r3, [r7, #32]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <xQueueReceive+0x3e>
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <xQueueReceive+0x42>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <xQueueReceive+0x44>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xQueueReceive+0x5e>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	61fb      	str	r3, [r7, #28]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ee:	f001 f8c1 	bl	8008374 <xTaskGetSchedulerState>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <xQueueReceive+0x6e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <xQueueReceive+0x72>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <xQueueReceive+0x74>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xQueueReceive+0x8e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61bb      	str	r3, [r7, #24]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800721e:	f001 fe01 	bl	8008e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01f      	beq.n	800726e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007232:	f000 f8f7 	bl	8007424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	1e5a      	subs	r2, r3, #1
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	3310      	adds	r3, #16
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fed0 	bl	8007ff0 <xTaskRemoveFromEventList>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007256:	4b3d      	ldr	r3, [pc, #244]	; (800734c <xQueueReceive+0x1bc>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007266:	f001 fe0d 	bl	8008e84 <vPortExitCritical>
				return pdPASS;
 800726a:	2301      	movs	r3, #1
 800726c:	e069      	b.n	8007342 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007274:	f001 fe06 	bl	8008e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007278:	2300      	movs	r3, #0
 800727a:	e062      	b.n	8007342 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007282:	f107 0310 	add.w	r3, r7, #16
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ff16 	bl	80080b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007290:	f001 fdf8 	bl	8008e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007294:	f000 fc70 	bl	8007b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007298:	f001 fdc4 	bl	8008e24 <vPortEnterCritical>
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a2:	b25b      	sxtb	r3, r3
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d103      	bne.n	80072b2 <xQueueReceive+0x122>
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d103      	bne.n	80072c8 <xQueueReceive+0x138>
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c8:	f001 fddc 	bl	8008e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072cc:	1d3a      	adds	r2, r7, #4
 80072ce:	f107 0310 	add.w	r3, r7, #16
 80072d2:	4611      	mov	r1, r2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 ff05 	bl	80080e4 <xTaskCheckForTimeOut>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d123      	bne.n	8007328 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e2:	f000 f917 	bl	8007514 <prvIsQueueEmpty>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d017      	beq.n	800731c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fe2b 	bl	8007f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fc:	f000 f8b8 	bl	8007470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007300:	f000 fc48 	bl	8007b94 <xTaskResumeAll>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d189      	bne.n	800721e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800730a:	4b10      	ldr	r3, [pc, #64]	; (800734c <xQueueReceive+0x1bc>)
 800730c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	e780      	b.n	800721e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800731c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800731e:	f000 f8a7 	bl	8007470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007322:	f000 fc37 	bl	8007b94 <xTaskResumeAll>
 8007326:	e77a      	b.n	800721e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800732a:	f000 f8a1 	bl	8007470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800732e:	f000 fc31 	bl	8007b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007334:	f000 f8ee 	bl	8007514 <prvIsQueueEmpty>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	f43f af6f 	beq.w	800721e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007342:	4618      	mov	r0, r3
 8007344:	3730      	adds	r7, #48	; 0x30
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10d      	bne.n	800738a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d14d      	bne.n	8007412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f818 	bl	80083b0 <xTaskPriorityDisinherit>
 8007380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	e043      	b.n	8007412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d119      	bne.n	80073c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6858      	ldr	r0, [r3, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	461a      	mov	r2, r3
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	f002 f971 	bl	8009682 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d32b      	bcc.n	8007412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e026      	b.n	8007412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68d8      	ldr	r0, [r3, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	461a      	mov	r2, r3
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	f002 f957 	bl	8009682 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	425b      	negs	r3, r3
 80073de:	441a      	add	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d207      	bcs.n	8007400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	425b      	negs	r3, r3
 80073fa:	441a      	add	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d105      	bne.n	8007412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	3b01      	subs	r3, #1
 8007410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800741a:	697b      	ldr	r3, [r7, #20]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	441a      	add	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	d303      	bcc.n	8007458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68d9      	ldr	r1, [r3, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	461a      	mov	r2, r3
 8007462:	6838      	ldr	r0, [r7, #0]
 8007464:	f002 f90d 	bl	8009682 <memcpy>
	}
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007478:	f001 fcd4 	bl	8008e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007484:	e011      	b.n	80074aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	2b00      	cmp	r3, #0
 800748c:	d012      	beq.n	80074b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3324      	adds	r3, #36	; 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fdac 	bl	8007ff0 <xTaskRemoveFromEventList>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800749e:	f000 fe83 	bl	80081a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dce9      	bgt.n	8007486 <prvUnlockQueue+0x16>
 80074b2:	e000      	b.n	80074b6 <prvUnlockQueue+0x46>
					break;
 80074b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	22ff      	movs	r2, #255	; 0xff
 80074ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074be:	f001 fce1 	bl	8008e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074c2:	f001 fcaf 	bl	8008e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ce:	e011      	b.n	80074f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d012      	beq.n	80074fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3310      	adds	r3, #16
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fd87 	bl	8007ff0 <xTaskRemoveFromEventList>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074e8:	f000 fe5e 	bl	80081a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dce9      	bgt.n	80074d0 <prvUnlockQueue+0x60>
 80074fc:	e000      	b.n	8007500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	22ff      	movs	r2, #255	; 0xff
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007508:	f001 fcbc 	bl	8008e84 <vPortExitCritical>
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800751c:	f001 fc82 	bl	8008e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007528:	2301      	movs	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e001      	b.n	8007532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007532:	f001 fca7 	bl	8008e84 <vPortExitCritical>

	return xReturn;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007548:	f001 fc6c 	bl	8008e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007554:	429a      	cmp	r2, r3
 8007556:	d102      	bne.n	800755e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e001      	b.n	8007562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007562:	f001 fc8f 	bl	8008e84 <vPortExitCritical>

	return xReturn;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	e014      	b.n	80075aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007580:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <vQueueAddToRegistry+0x50>)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800758c:	490c      	ldr	r1, [pc, #48]	; (80075c0 <vQueueAddToRegistry+0x50>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007596:	4a0a      	ldr	r2, [pc, #40]	; (80075c0 <vQueueAddToRegistry+0x50>)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075a2:	e006      	b.n	80075b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b07      	cmp	r3, #7
 80075ae:	d9e7      	bls.n	8007580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000b9c 	.word	0x20000b9c

080075c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075d4:	f001 fc26 	bl	8008e24 <vPortEnterCritical>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075de:	b25b      	sxtb	r3, r3
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d103      	bne.n	80075ee <vQueueWaitForMessageRestricted+0x2a>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d103      	bne.n	8007604 <vQueueWaitForMessageRestricted+0x40>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007604:	f001 fc3e 	bl	8008e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3324      	adds	r3, #36	; 0x24
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fcbd 	bl	8007f98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff26 	bl	8007470 <prvUnlockQueue>
	}
 8007624:	bf00      	nop
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08e      	sub	sp, #56	; 0x38
 8007630:	af04      	add	r7, sp, #16
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	623b      	str	r3, [r7, #32]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xTaskCreateStatic+0x46>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	61fb      	str	r3, [r7, #28]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007672:	23bc      	movs	r3, #188	; 0xbc
 8007674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2bbc      	cmp	r3, #188	; 0xbc
 800767a:	d00a      	beq.n	8007692 <xTaskCreateStatic+0x66>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	61bb      	str	r3, [r7, #24]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007692:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	2b00      	cmp	r3, #0
 8007698:	d01e      	beq.n	80076d8 <xTaskCreateStatic+0xac>
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01b      	beq.n	80076d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076b2:	2300      	movs	r3, #0
 80076b4:	9303      	str	r3, [sp, #12]
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	9302      	str	r3, [sp, #8]
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f850 	bl	8007770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076d2:	f000 f8f3 	bl	80078bc <prvAddNewTaskToReadyList>
 80076d6:	e001      	b.n	80076dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076dc:	697b      	ldr	r3, [r7, #20]
	}
 80076de:	4618      	mov	r0, r3
 80076e0:	3728      	adds	r7, #40	; 0x28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08c      	sub	sp, #48	; 0x30
 80076ea:	af04      	add	r7, sp, #16
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fcb4 	bl	8009068 <pvPortMalloc>
 8007700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00e      	beq.n	8007726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007708:	20bc      	movs	r0, #188	; 0xbc
 800770a:	f001 fcad 	bl	8009068 <pvPortMalloc>
 800770e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
 800771c:	e005      	b.n	800772a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800771e:	6978      	ldr	r0, [r7, #20]
 8007720:	f001 fd6e 	bl	8009200 <vPortFree>
 8007724:	e001      	b.n	800772a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d017      	beq.n	8007760 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007738:	88fa      	ldrh	r2, [r7, #6]
 800773a:	2300      	movs	r3, #0
 800773c:	9303      	str	r3, [sp, #12]
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f80e 	bl	8007770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007754:	69f8      	ldr	r0, [r7, #28]
 8007756:	f000 f8b1 	bl	80078bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800775a:	2301      	movs	r3, #1
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	e002      	b.n	8007766 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007760:	f04f 33ff 	mov.w	r3, #4294967295
 8007764:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007766:	69bb      	ldr	r3, [r7, #24]
	}
 8007768:	4618      	mov	r0, r3
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	461a      	mov	r2, r3
 8007788:	21a5      	movs	r1, #165	; 0xa5
 800778a:	f001 ff88 	bl	800969e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007798:	3b01      	subs	r3, #1
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	617b      	str	r3, [r7, #20]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01f      	beq.n	800780e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	e012      	b.n	80077fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	7819      	ldrb	r1, [r3, #0]
 80077dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	3334      	adds	r3, #52	; 0x34
 80077e4:	460a      	mov	r2, r1
 80077e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d006      	beq.n	8007802 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	3301      	adds	r3, #1
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	2b0f      	cmp	r3, #15
 80077fe:	d9e9      	bls.n	80077d4 <prvInitialiseNewTask+0x64>
 8007800:	e000      	b.n	8007804 <prvInitialiseNewTask+0x94>
			{
				break;
 8007802:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800780c:	e003      	b.n	8007816 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	2b37      	cmp	r3, #55	; 0x37
 800781a:	d901      	bls.n	8007820 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800781c:	2337      	movs	r3, #55	; 0x37
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007824:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800782a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	2200      	movs	r2, #0
 8007830:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff f978 	bl	8006b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	3318      	adds	r3, #24
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff f973 	bl	8006b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	2200      	movs	r2, #0
 8007868:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	3354      	adds	r3, #84	; 0x54
 8007870:	2260      	movs	r2, #96	; 0x60
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f001 ff12 	bl	800969e <memset>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <prvInitialiseNewTask+0x140>)
 800787e:	659a      	str	r2, [r3, #88]	; 0x58
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	4a0c      	ldr	r2, [pc, #48]	; (80078b4 <prvInitialiseNewTask+0x144>)
 8007884:	65da      	str	r2, [r3, #92]	; 0x5c
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	4a0b      	ldr	r2, [pc, #44]	; (80078b8 <prvInitialiseNewTask+0x148>)
 800788a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	69b8      	ldr	r0, [r7, #24]
 8007892:	f001 f99d 	bl	8008bd0 <pxPortInitialiseStack>
 8007896:	4602      	mov	r2, r0
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a8:	bf00      	nop
 80078aa:	3720      	adds	r7, #32
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	0800a0d0 	.word	0x0800a0d0
 80078b4:	0800a0f0 	.word	0x0800a0f0
 80078b8:	0800a0b0 	.word	0x0800a0b0

080078bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078c4:	f001 faae 	bl	8008e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078c8:	4b2d      	ldr	r3, [pc, #180]	; (8007980 <prvAddNewTaskToReadyList+0xc4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3301      	adds	r3, #1
 80078ce:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <prvAddNewTaskToReadyList+0xc4>)
 80078d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078d2:	4b2c      	ldr	r3, [pc, #176]	; (8007984 <prvAddNewTaskToReadyList+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078da:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <prvAddNewTaskToReadyList+0xc8>)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078e0:	4b27      	ldr	r3, [pc, #156]	; (8007980 <prvAddNewTaskToReadyList+0xc4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d110      	bne.n	800790a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078e8:	f000 fc82 	bl	80081f0 <prvInitialiseTaskLists>
 80078ec:	e00d      	b.n	800790a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ee:	4b26      	ldr	r3, [pc, #152]	; (8007988 <prvAddNewTaskToReadyList+0xcc>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078f6:	4b23      	ldr	r3, [pc, #140]	; (8007984 <prvAddNewTaskToReadyList+0xc8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	429a      	cmp	r2, r3
 8007902:	d802      	bhi.n	800790a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007904:	4a1f      	ldr	r2, [pc, #124]	; (8007984 <prvAddNewTaskToReadyList+0xc8>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <prvAddNewTaskToReadyList+0xd0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3301      	adds	r3, #1
 8007910:	4a1e      	ldr	r2, [pc, #120]	; (800798c <prvAddNewTaskToReadyList+0xd0>)
 8007912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007914:	4b1d      	ldr	r3, [pc, #116]	; (800798c <prvAddNewTaskToReadyList+0xd0>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <prvAddNewTaskToReadyList+0xd4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d903      	bls.n	8007930 <prvAddNewTaskToReadyList+0x74>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a18      	ldr	r2, [pc, #96]	; (8007990 <prvAddNewTaskToReadyList+0xd4>)
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4a15      	ldr	r2, [pc, #84]	; (8007994 <prvAddNewTaskToReadyList+0xd8>)
 800793e:	441a      	add	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7ff f8fd 	bl	8006b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800794c:	f001 fa9a 	bl	8008e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007950:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <prvAddNewTaskToReadyList+0xcc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <prvAddNewTaskToReadyList+0xc8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	429a      	cmp	r2, r3
 8007964:	d207      	bcs.n	8007976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvAddNewTaskToReadyList+0xdc>)
 8007968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	200010b0 	.word	0x200010b0
 8007984:	20000bdc 	.word	0x20000bdc
 8007988:	200010bc 	.word	0x200010bc
 800798c:	200010cc 	.word	0x200010cc
 8007990:	200010b8 	.word	0x200010b8
 8007994:	20000be0 	.word	0x20000be0
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80079a6:	2300      	movs	r3, #0
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	617b      	str	r3, [r7, #20]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <vTaskDelayUntil+0x46>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	613b      	str	r3, [r7, #16]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80079e2:	4b2a      	ldr	r3, [pc, #168]	; (8007a8c <vTaskDelayUntil+0xf0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <vTaskDelayUntil+0x64>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60fb      	str	r3, [r7, #12]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007a00:	f000 f8ba 	bl	8007b78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007a04:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <vTaskDelayUntil+0xf4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	4413      	add	r3, r2
 8007a12:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a3a      	ldr	r2, [r7, #32]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d20b      	bcs.n	8007a36 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d211      	bcs.n	8007a4c <vTaskDelayUntil+0xb0>
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d90d      	bls.n	8007a4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	e00a      	b.n	8007a4c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d303      	bcc.n	8007a48 <vTaskDelayUntil+0xac>
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d901      	bls.n	8007a4c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d006      	beq.n	8007a66 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fd13 	bl	800848c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007a66:	f000 f895 	bl	8007b94 <xTaskResumeAll>
 8007a6a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d107      	bne.n	8007a82 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007a72:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <vTaskDelayUntil+0xf8>)
 8007a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a82:	bf00      	nop
 8007a84:	3728      	adds	r7, #40	; 0x28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200010d8 	.word	0x200010d8
 8007a90:	200010b4 	.word	0x200010b4
 8007a94:	e000ed04 	.word	0xe000ed04

08007a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	1d39      	adds	r1, r7, #4
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe ffe8 	bl	8006a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	9202      	str	r2, [sp, #8]
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	460a      	mov	r2, r1
 8007ac6:	4924      	ldr	r1, [pc, #144]	; (8007b58 <vTaskStartScheduler+0xc0>)
 8007ac8:	4824      	ldr	r0, [pc, #144]	; (8007b5c <vTaskStartScheduler+0xc4>)
 8007aca:	f7ff fdaf 	bl	800762c <xTaskCreateStatic>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4a23      	ldr	r2, [pc, #140]	; (8007b60 <vTaskStartScheduler+0xc8>)
 8007ad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ad4:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <vTaskStartScheduler+0xc8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007adc:	2301      	movs	r3, #1
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e001      	b.n	8007ae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d102      	bne.n	8007af2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007aec:	f000 fd22 	bl	8008534 <xTimerCreateTimerTask>
 8007af0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d11b      	bne.n	8007b30 <vTaskStartScheduler+0x98>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	613b      	str	r3, [r7, #16]
}
 8007b0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b0c:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <vTaskStartScheduler+0xcc>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3354      	adds	r3, #84	; 0x54
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <vTaskStartScheduler+0xd0>)
 8007b14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b16:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <vTaskStartScheduler+0xd4>)
 8007b18:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <vTaskStartScheduler+0xd8>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <vTaskStartScheduler+0xdc>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b2a:	f001 f8d9 	bl	8008ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b2e:	e00e      	b.n	8007b4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d10a      	bne.n	8007b4e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	60fb      	str	r3, [r7, #12]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <vTaskStartScheduler+0xb4>
}
 8007b4e:	bf00      	nop
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	08009fe8 	.word	0x08009fe8
 8007b5c:	080081c1 	.word	0x080081c1
 8007b60:	200010d4 	.word	0x200010d4
 8007b64:	20000bdc 	.word	0x20000bdc
 8007b68:	20000010 	.word	0x20000010
 8007b6c:	200010d0 	.word	0x200010d0
 8007b70:	200010bc 	.word	0x200010bc
 8007b74:	200010b4 	.word	0x200010b4

08007b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <vTaskSuspendAll+0x18>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	4a03      	ldr	r2, [pc, #12]	; (8007b90 <vTaskSuspendAll+0x18>)
 8007b84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b86:	bf00      	nop
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200010d8 	.word	0x200010d8

08007b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ba2:	4b42      	ldr	r3, [pc, #264]	; (8007cac <xTaskResumeAll+0x118>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	603b      	str	r3, [r7, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bc0:	f001 f930 	bl	8008e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bc4:	4b39      	ldr	r3, [pc, #228]	; (8007cac <xTaskResumeAll+0x118>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	4a38      	ldr	r2, [pc, #224]	; (8007cac <xTaskResumeAll+0x118>)
 8007bcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bce:	4b37      	ldr	r3, [pc, #220]	; (8007cac <xTaskResumeAll+0x118>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d162      	bne.n	8007c9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bd6:	4b36      	ldr	r3, [pc, #216]	; (8007cb0 <xTaskResumeAll+0x11c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d05e      	beq.n	8007c9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bde:	e02f      	b.n	8007c40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be0:	4b34      	ldr	r3, [pc, #208]	; (8007cb4 <xTaskResumeAll+0x120>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3318      	adds	r3, #24
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff f807 	bl	8006c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff f802 	bl	8006c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	4b2d      	ldr	r3, [pc, #180]	; (8007cb8 <xTaskResumeAll+0x124>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d903      	bls.n	8007c10 <xTaskResumeAll+0x7c>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <xTaskResumeAll+0x124>)
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4a27      	ldr	r2, [pc, #156]	; (8007cbc <xTaskResumeAll+0x128>)
 8007c1e:	441a      	add	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4610      	mov	r0, r2
 8007c28:	f7fe ff8d 	bl	8006b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c30:	4b23      	ldr	r3, [pc, #140]	; (8007cc0 <xTaskResumeAll+0x12c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d302      	bcc.n	8007c40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c3a:	4b22      	ldr	r3, [pc, #136]	; (8007cc4 <xTaskResumeAll+0x130>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c40:	4b1c      	ldr	r3, [pc, #112]	; (8007cb4 <xTaskResumeAll+0x120>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1cb      	bne.n	8007be0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c4e:	f000 fb71 	bl	8008334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c52:	4b1d      	ldr	r3, [pc, #116]	; (8007cc8 <xTaskResumeAll+0x134>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d010      	beq.n	8007c80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c5e:	f000 f859 	bl	8007d14 <xTaskIncrementTick>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c68:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <xTaskResumeAll+0x130>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f1      	bne.n	8007c5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <xTaskResumeAll+0x134>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c80:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <xTaskResumeAll+0x130>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <xTaskResumeAll+0x138>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c9c:	f001 f8f2 	bl	8008e84 <vPortExitCritical>

	return xAlreadyYielded;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200010d8 	.word	0x200010d8
 8007cb0:	200010b0 	.word	0x200010b0
 8007cb4:	20001070 	.word	0x20001070
 8007cb8:	200010b8 	.word	0x200010b8
 8007cbc:	20000be0 	.word	0x20000be0
 8007cc0:	20000bdc 	.word	0x20000bdc
 8007cc4:	200010c4 	.word	0x200010c4
 8007cc8:	200010c0 	.word	0x200010c0
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <xTaskGetTickCount+0x1c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cdc:	687b      	ldr	r3, [r7, #4]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	200010b4 	.word	0x200010b4

08007cf0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cf6:	f001 f977 	bl	8008fe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <xTaskGetTickCountFromISR+0x20>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d04:	683b      	ldr	r3, [r7, #0]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200010b4 	.word	0x200010b4

08007d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1e:	4b4f      	ldr	r3, [pc, #316]	; (8007e5c <xTaskIncrementTick+0x148>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 808f 	bne.w	8007e46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d28:	4b4d      	ldr	r3, [pc, #308]	; (8007e60 <xTaskIncrementTick+0x14c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d30:	4a4b      	ldr	r2, [pc, #300]	; (8007e60 <xTaskIncrementTick+0x14c>)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d120      	bne.n	8007d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d3c:	4b49      	ldr	r3, [pc, #292]	; (8007e64 <xTaskIncrementTick+0x150>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	603b      	str	r3, [r7, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <xTaskIncrementTick+0x46>
 8007d5c:	4b41      	ldr	r3, [pc, #260]	; (8007e64 <xTaskIncrementTick+0x150>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	4b41      	ldr	r3, [pc, #260]	; (8007e68 <xTaskIncrementTick+0x154>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a3f      	ldr	r2, [pc, #252]	; (8007e64 <xTaskIncrementTick+0x150>)
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	4a3f      	ldr	r2, [pc, #252]	; (8007e68 <xTaskIncrementTick+0x154>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	4b3e      	ldr	r3, [pc, #248]	; (8007e6c <xTaskIncrementTick+0x158>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a3d      	ldr	r2, [pc, #244]	; (8007e6c <xTaskIncrementTick+0x158>)
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	f000 fadb 	bl	8008334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d7e:	4b3c      	ldr	r3, [pc, #240]	; (8007e70 <xTaskIncrementTick+0x15c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d349      	bcc.n	8007e1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d88:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <xTaskIncrementTick+0x150>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d92:	4b37      	ldr	r3, [pc, #220]	; (8007e70 <xTaskIncrementTick+0x15c>)
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	601a      	str	r2, [r3, #0]
					break;
 8007d9a:	e03f      	b.n	8007e1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9c:	4b31      	ldr	r3, [pc, #196]	; (8007e64 <xTaskIncrementTick+0x150>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d203      	bcs.n	8007dbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007db4:	4a2e      	ldr	r2, [pc, #184]	; (8007e70 <xTaskIncrementTick+0x15c>)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dba:	e02f      	b.n	8007e1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe ff1d 	bl	8006c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	3318      	adds	r3, #24
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe ff14 	bl	8006c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <xTaskIncrementTick+0x160>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <xTaskIncrementTick+0xd8>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	4a22      	ldr	r2, [pc, #136]	; (8007e74 <xTaskIncrementTick+0x160>)
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4a1f      	ldr	r2, [pc, #124]	; (8007e78 <xTaskIncrementTick+0x164>)
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fe fe9f 	bl	8006b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <xTaskIncrementTick+0x168>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d3b8      	bcc.n	8007d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1a:	e7b5      	b.n	8007d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e1c:	4b17      	ldr	r3, [pc, #92]	; (8007e7c <xTaskIncrementTick+0x168>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e22:	4915      	ldr	r1, [pc, #84]	; (8007e78 <xTaskIncrementTick+0x164>)
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d901      	bls.n	8007e38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e34:	2301      	movs	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <xTaskIncrementTick+0x16c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	e004      	b.n	8007e50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e46:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <xTaskIncrementTick+0x170>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4a0d      	ldr	r2, [pc, #52]	; (8007e84 <xTaskIncrementTick+0x170>)
 8007e4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e50:	697b      	ldr	r3, [r7, #20]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200010d8 	.word	0x200010d8
 8007e60:	200010b4 	.word	0x200010b4
 8007e64:	20001068 	.word	0x20001068
 8007e68:	2000106c 	.word	0x2000106c
 8007e6c:	200010c8 	.word	0x200010c8
 8007e70:	200010d0 	.word	0x200010d0
 8007e74:	200010b8 	.word	0x200010b8
 8007e78:	20000be0 	.word	0x20000be0
 8007e7c:	20000bdc 	.word	0x20000bdc
 8007e80:	200010c4 	.word	0x200010c4
 8007e84:	200010c0 	.word	0x200010c0

08007e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <vTaskSwitchContext+0xb0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e96:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <vTaskSwitchContext+0xb4>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e9c:	e046      	b.n	8007f2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007e9e:	4b27      	ldr	r3, [pc, #156]	; (8007f3c <vTaskSwitchContext+0xb4>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea4:	4b26      	ldr	r3, [pc, #152]	; (8007f40 <vTaskSwitchContext+0xb8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e010      	b.n	8007ece <vTaskSwitchContext+0x46>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	607b      	str	r3, [r7, #4]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <vTaskSwitchContext+0x3e>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	491d      	ldr	r1, [pc, #116]	; (8007f44 <vTaskSwitchContext+0xbc>)
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	440b      	add	r3, r1
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0e4      	beq.n	8007eac <vTaskSwitchContext+0x24>
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4a15      	ldr	r2, [pc, #84]	; (8007f44 <vTaskSwitchContext+0xbc>)
 8007eee:	4413      	add	r3, r2
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	605a      	str	r2, [r3, #4]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3308      	adds	r3, #8
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d104      	bne.n	8007f12 <vTaskSwitchContext+0x8a>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	605a      	str	r2, [r3, #4]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <vTaskSwitchContext+0xc0>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	4a08      	ldr	r2, [pc, #32]	; (8007f40 <vTaskSwitchContext+0xb8>)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <vTaskSwitchContext+0xc0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3354      	adds	r3, #84	; 0x54
 8007f28:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <vTaskSwitchContext+0xc4>)
 8007f2a:	6013      	str	r3, [r2, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	200010d8 	.word	0x200010d8
 8007f3c:	200010c4 	.word	0x200010c4
 8007f40:	200010b8 	.word	0x200010b8
 8007f44:	20000be0 	.word	0x20000be0
 8007f48:	20000bdc 	.word	0x20000bdc
 8007f4c:	20000010 	.word	0x20000010

08007f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <vTaskPlaceOnEventList+0x44>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3318      	adds	r3, #24
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7fe fe05 	bl	8006b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f84:	2101      	movs	r1, #1
 8007f86:	6838      	ldr	r0, [r7, #0]
 8007f88:	f000 fa80 	bl	800848c <prvAddCurrentTaskToDelayedList>
}
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000bdc 	.word	0x20000bdc

08007f98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	617b      	str	r3, [r7, #20]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <vTaskPlaceOnEventListRestricted+0x54>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7fe fdbc 	bl	8006b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	68b8      	ldr	r0, [r7, #8]
 8007fde:	f000 fa55 	bl	800848c <prvAddCurrentTaskToDelayedList>
	}
 8007fe2:	bf00      	nop
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000bdc 	.word	0x20000bdc

08007ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10a      	bne.n	800801c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60fb      	str	r3, [r7, #12]
}
 8008018:	bf00      	nop
 800801a:	e7fe      	b.n	800801a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3318      	adds	r3, #24
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fded 	bl	8006c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008026:	4b1e      	ldr	r3, [pc, #120]	; (80080a0 <xTaskRemoveFromEventList+0xb0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d11d      	bne.n	800806a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	3304      	adds	r3, #4
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fde4 	bl	8006c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	4b19      	ldr	r3, [pc, #100]	; (80080a4 <xTaskRemoveFromEventList+0xb4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d903      	bls.n	800804c <xTaskRemoveFromEventList+0x5c>
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	4a16      	ldr	r2, [pc, #88]	; (80080a4 <xTaskRemoveFromEventList+0xb4>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <xTaskRemoveFromEventList+0xb8>)
 800805a:	441a      	add	r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fe fd6f 	bl	8006b46 <vListInsertEnd>
 8008068:	e005      	b.n	8008076 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	3318      	adds	r3, #24
 800806e:	4619      	mov	r1, r3
 8008070:	480e      	ldr	r0, [pc, #56]	; (80080ac <xTaskRemoveFromEventList+0xbc>)
 8008072:	f7fe fd68 	bl	8006b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <xTaskRemoveFromEventList+0xc0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	429a      	cmp	r2, r3
 8008082:	d905      	bls.n	8008090 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008088:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <xTaskRemoveFromEventList+0xc4>)
 800808a:	2201      	movs	r2, #1
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e001      	b.n	8008094 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008094:	697b      	ldr	r3, [r7, #20]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200010d8 	.word	0x200010d8
 80080a4:	200010b8 	.word	0x200010b8
 80080a8:	20000be0 	.word	0x20000be0
 80080ac:	20001070 	.word	0x20001070
 80080b0:	20000bdc 	.word	0x20000bdc
 80080b4:	200010c4 	.word	0x200010c4

080080b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <vTaskInternalSetTimeOutState+0x24>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <vTaskInternalSetTimeOutState+0x28>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	605a      	str	r2, [r3, #4]
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	200010c8 	.word	0x200010c8
 80080e0:	200010b4 	.word	0x200010b4

080080e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	613b      	str	r3, [r7, #16]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008126:	f000 fe7d 	bl	8008e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <xTaskCheckForTimeOut+0xbc>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d102      	bne.n	800814a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	e023      	b.n	8008192 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b15      	ldr	r3, [pc, #84]	; (80081a4 <xTaskCheckForTimeOut+0xc0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d007      	beq.n	8008166 <xTaskCheckForTimeOut+0x82>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	429a      	cmp	r2, r3
 800815e:	d302      	bcc.n	8008166 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008160:	2301      	movs	r3, #1
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	e015      	b.n	8008192 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	429a      	cmp	r2, r3
 800816e:	d20b      	bcs.n	8008188 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	1ad2      	subs	r2, r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff ff9b 	bl	80080b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	61fb      	str	r3, [r7, #28]
 8008186:	e004      	b.n	8008192 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800818e:	2301      	movs	r3, #1
 8008190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008192:	f000 fe77 	bl	8008e84 <vPortExitCritical>

	return xReturn;
 8008196:	69fb      	ldr	r3, [r7, #28]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200010b4 	.word	0x200010b4
 80081a4:	200010c8 	.word	0x200010c8

080081a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081ac:	4b03      	ldr	r3, [pc, #12]	; (80081bc <vTaskMissedYield+0x14>)
 80081ae:	2201      	movs	r2, #1
 80081b0:	601a      	str	r2, [r3, #0]
}
 80081b2:	bf00      	nop
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	200010c4 	.word	0x200010c4

080081c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081c8:	f000 f852 	bl	8008270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <prvIdleTask+0x28>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d9f9      	bls.n	80081c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <prvIdleTask+0x2c>)
 80081d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081e4:	e7f0      	b.n	80081c8 <prvIdleTask+0x8>
 80081e6:	bf00      	nop
 80081e8:	20000be0 	.word	0x20000be0
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f6:	2300      	movs	r3, #0
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	e00c      	b.n	8008216 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4a12      	ldr	r2, [pc, #72]	; (8008250 <prvInitialiseTaskLists+0x60>)
 8008208:	4413      	add	r3, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fc6e 	bl	8006aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3301      	adds	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b37      	cmp	r3, #55	; 0x37
 800821a:	d9ef      	bls.n	80081fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800821c:	480d      	ldr	r0, [pc, #52]	; (8008254 <prvInitialiseTaskLists+0x64>)
 800821e:	f7fe fc65 	bl	8006aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008222:	480d      	ldr	r0, [pc, #52]	; (8008258 <prvInitialiseTaskLists+0x68>)
 8008224:	f7fe fc62 	bl	8006aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008228:	480c      	ldr	r0, [pc, #48]	; (800825c <prvInitialiseTaskLists+0x6c>)
 800822a:	f7fe fc5f 	bl	8006aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800822e:	480c      	ldr	r0, [pc, #48]	; (8008260 <prvInitialiseTaskLists+0x70>)
 8008230:	f7fe fc5c 	bl	8006aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008234:	480b      	ldr	r0, [pc, #44]	; (8008264 <prvInitialiseTaskLists+0x74>)
 8008236:	f7fe fc59 	bl	8006aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800823a:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <prvInitialiseTaskLists+0x78>)
 800823c:	4a05      	ldr	r2, [pc, #20]	; (8008254 <prvInitialiseTaskLists+0x64>)
 800823e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <prvInitialiseTaskLists+0x7c>)
 8008242:	4a05      	ldr	r2, [pc, #20]	; (8008258 <prvInitialiseTaskLists+0x68>)
 8008244:	601a      	str	r2, [r3, #0]
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000be0 	.word	0x20000be0
 8008254:	20001040 	.word	0x20001040
 8008258:	20001054 	.word	0x20001054
 800825c:	20001070 	.word	0x20001070
 8008260:	20001084 	.word	0x20001084
 8008264:	2000109c 	.word	0x2000109c
 8008268:	20001068 	.word	0x20001068
 800826c:	2000106c 	.word	0x2000106c

08008270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008276:	e019      	b.n	80082ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008278:	f000 fdd4 	bl	8008e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827c:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <prvCheckTasksWaitingTermination+0x50>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fcb9 	bl	8006c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800828e:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <prvCheckTasksWaitingTermination+0x54>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3b01      	subs	r3, #1
 8008294:	4a0b      	ldr	r2, [pc, #44]	; (80082c4 <prvCheckTasksWaitingTermination+0x54>)
 8008296:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008298:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <prvCheckTasksWaitingTermination+0x58>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	4a0a      	ldr	r2, [pc, #40]	; (80082c8 <prvCheckTasksWaitingTermination+0x58>)
 80082a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082a2:	f000 fdef 	bl	8008e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f810 	bl	80082cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <prvCheckTasksWaitingTermination+0x58>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e1      	bne.n	8008278 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20001084 	.word	0x20001084
 80082c4:	200010b0 	.word	0x200010b0
 80082c8:	20001098 	.word	0x20001098

080082cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3354      	adds	r3, #84	; 0x54
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 fb01 	bl	80098e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 ff87 	bl	8009200 <vPortFree>
				vPortFree( pxTCB );
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 ff84 	bl	8009200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082f8:	e018      	b.n	800832c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008300:	2b01      	cmp	r3, #1
 8008302:	d103      	bne.n	800830c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 ff7b 	bl	8009200 <vPortFree>
	}
 800830a:	e00f      	b.n	800832c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008312:	2b02      	cmp	r3, #2
 8008314:	d00a      	beq.n	800832c <prvDeleteTCB+0x60>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	60fb      	str	r3, [r7, #12]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <prvDeleteTCB+0x5e>
	}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <prvResetNextTaskUnblockTime+0x38>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <prvResetNextTaskUnblockTime+0x3c>)
 8008346:	f04f 32ff 	mov.w	r2, #4294967295
 800834a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800834c:	e008      	b.n	8008360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <prvResetNextTaskUnblockTime+0x38>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	4a04      	ldr	r2, [pc, #16]	; (8008370 <prvResetNextTaskUnblockTime+0x3c>)
 800835e:	6013      	str	r3, [r2, #0]
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20001068 	.word	0x20001068
 8008370:	200010d0 	.word	0x200010d0

08008374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <xTaskGetSchedulerState+0x34>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008382:	2301      	movs	r3, #1
 8008384:	607b      	str	r3, [r7, #4]
 8008386:	e008      	b.n	800839a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008388:	4b08      	ldr	r3, [pc, #32]	; (80083ac <xTaskGetSchedulerState+0x38>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008390:	2302      	movs	r3, #2
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	e001      	b.n	800839a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800839a:	687b      	ldr	r3, [r7, #4]
	}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	200010bc 	.word	0x200010bc
 80083ac:	200010d8 	.word	0x200010d8

080083b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d056      	beq.n	8008474 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083c6:	4b2e      	ldr	r3, [pc, #184]	; (8008480 <xTaskPriorityDisinherit+0xd0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d00a      	beq.n	80083e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	60bb      	str	r3, [r7, #8]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	429a      	cmp	r2, r3
 8008418:	d02c      	beq.n	8008474 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841e:	2b00      	cmp	r3, #0
 8008420:	d128      	bne.n	8008474 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3304      	adds	r3, #4
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fbea 	bl	8006c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <xTaskPriorityDisinherit+0xd4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d903      	bls.n	8008454 <xTaskPriorityDisinherit+0xa4>
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	4a0c      	ldr	r2, [pc, #48]	; (8008484 <xTaskPriorityDisinherit+0xd4>)
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4a09      	ldr	r2, [pc, #36]	; (8008488 <xTaskPriorityDisinherit+0xd8>)
 8008462:	441a      	add	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe fb6b 	bl	8006b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008470:	2301      	movs	r3, #1
 8008472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008474:	697b      	ldr	r3, [r7, #20]
	}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000bdc 	.word	0x20000bdc
 8008484:	200010b8 	.word	0x200010b8
 8008488:	20000be0 	.word	0x20000be0

0800848c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008496:	4b21      	ldr	r3, [pc, #132]	; (800851c <prvAddCurrentTaskToDelayedList+0x90>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800849c:	4b20      	ldr	r3, [pc, #128]	; (8008520 <prvAddCurrentTaskToDelayedList+0x94>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fbac 	bl	8006c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d10a      	bne.n	80084c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084b6:	4b1a      	ldr	r3, [pc, #104]	; (8008520 <prvAddCurrentTaskToDelayedList+0x94>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4619      	mov	r1, r3
 80084be:	4819      	ldr	r0, [pc, #100]	; (8008524 <prvAddCurrentTaskToDelayedList+0x98>)
 80084c0:	f7fe fb41 	bl	8006b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084c4:	e026      	b.n	8008514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4413      	add	r3, r2
 80084cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ce:	4b14      	ldr	r3, [pc, #80]	; (8008520 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d209      	bcs.n	80084f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <prvAddCurrentTaskToDelayedList+0x9c>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4619      	mov	r1, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	f7fe fb4f 	bl	8006b8e <vListInsert>
}
 80084f0:	e010      	b.n	8008514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f2:	4b0e      	ldr	r3, [pc, #56]	; (800852c <prvAddCurrentTaskToDelayedList+0xa0>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <prvAddCurrentTaskToDelayedList+0x94>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3304      	adds	r3, #4
 80084fc:	4619      	mov	r1, r3
 80084fe:	4610      	mov	r0, r2
 8008500:	f7fe fb45 	bl	8006b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	429a      	cmp	r2, r3
 800850c:	d202      	bcs.n	8008514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800850e:	4a08      	ldr	r2, [pc, #32]	; (8008530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	6013      	str	r3, [r2, #0]
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	200010b4 	.word	0x200010b4
 8008520:	20000bdc 	.word	0x20000bdc
 8008524:	2000109c 	.word	0x2000109c
 8008528:	2000106c 	.word	0x2000106c
 800852c:	20001068 	.word	0x20001068
 8008530:	200010d0 	.word	0x200010d0

08008534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800853e:	f000 fb07 	bl	8008b50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <xTimerCreateTimerTask+0x80>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d021      	beq.n	800858e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800854e:	2300      	movs	r3, #0
 8008550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008552:	1d3a      	adds	r2, r7, #4
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	f107 030c 	add.w	r3, r7, #12
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe faab 	bl	8006ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	9202      	str	r2, [sp, #8]
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	2302      	movs	r3, #2
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	2300      	movs	r3, #0
 8008572:	460a      	mov	r2, r1
 8008574:	4910      	ldr	r1, [pc, #64]	; (80085b8 <xTimerCreateTimerTask+0x84>)
 8008576:	4811      	ldr	r0, [pc, #68]	; (80085bc <xTimerCreateTimerTask+0x88>)
 8008578:	f7ff f858 	bl	800762c <xTaskCreateStatic>
 800857c:	4603      	mov	r3, r0
 800857e:	4a10      	ldr	r2, [pc, #64]	; (80085c0 <xTimerCreateTimerTask+0x8c>)
 8008580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008582:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <xTimerCreateTimerTask+0x8c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800858a:	2301      	movs	r3, #1
 800858c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	613b      	str	r3, [r7, #16]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085aa:	697b      	ldr	r3, [r7, #20]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	2000110c 	.word	0x2000110c
 80085b8:	08009ff0 	.word	0x08009ff0
 80085bc:	080086f9 	.word	0x080086f9
 80085c0:	20001110 	.word	0x20001110

080085c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	; 0x28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	623b      	str	r3, [r7, #32]
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085f2:	4b1a      	ldr	r3, [pc, #104]	; (800865c <xTimerGenericCommand+0x98>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d02a      	beq.n	8008650 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b05      	cmp	r3, #5
 800860a:	dc18      	bgt.n	800863e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800860c:	f7ff feb2 	bl	8008374 <xTaskGetSchedulerState>
 8008610:	4603      	mov	r3, r0
 8008612:	2b02      	cmp	r3, #2
 8008614:	d109      	bne.n	800862a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <xTimerGenericCommand+0x98>)
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	f107 0110 	add.w	r1, r7, #16
 800861e:	2300      	movs	r3, #0
 8008620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008622:	f7fe fc1b 	bl	8006e5c <xQueueGenericSend>
 8008626:	6278      	str	r0, [r7, #36]	; 0x24
 8008628:	e012      	b.n	8008650 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800862a:	4b0c      	ldr	r3, [pc, #48]	; (800865c <xTimerGenericCommand+0x98>)
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f107 0110 	add.w	r1, r7, #16
 8008632:	2300      	movs	r3, #0
 8008634:	2200      	movs	r2, #0
 8008636:	f7fe fc11 	bl	8006e5c <xQueueGenericSend>
 800863a:	6278      	str	r0, [r7, #36]	; 0x24
 800863c:	e008      	b.n	8008650 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800863e:	4b07      	ldr	r3, [pc, #28]	; (800865c <xTimerGenericCommand+0x98>)
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f107 0110 	add.w	r1, r7, #16
 8008646:	2300      	movs	r3, #0
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	f7fe fd05 	bl	8007058 <xQueueGenericSendFromISR>
 800864e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008652:	4618      	mov	r0, r3
 8008654:	3728      	adds	r7, #40	; 0x28
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	2000110c 	.word	0x2000110c

08008660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af02      	add	r7, sp, #8
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866a:	4b22      	ldr	r3, [pc, #136]	; (80086f4 <prvProcessExpiredTimer+0x94>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	3304      	adds	r3, #4
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe fac1 	bl	8006c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d022      	beq.n	80086d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	18d1      	adds	r1, r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	6978      	ldr	r0, [r7, #20]
 800869a:	f000 f8d1 	bl	8008840 <prvInsertTimerInActiveList>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01f      	beq.n	80086e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086a4:	2300      	movs	r3, #0
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	2300      	movs	r3, #0
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	2100      	movs	r1, #0
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7ff ff88 	bl	80085c4 <xTimerGenericCommand>
 80086b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d113      	bne.n	80086e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60fb      	str	r3, [r7, #12]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	6978      	ldr	r0, [r7, #20]
 80086ea:	4798      	blx	r3
}
 80086ec:	bf00      	nop
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20001104 	.word	0x20001104

080086f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008700:	f107 0308 	add.w	r3, r7, #8
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f857 	bl	80087b8 <prvGetNextExpireTime>
 800870a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4619      	mov	r1, r3
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 f803 	bl	800871c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008716:	f000 f8d5 	bl	80088c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800871a:	e7f1      	b.n	8008700 <prvTimerTask+0x8>

0800871c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008726:	f7ff fa27 	bl	8007b78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800872a:	f107 0308 	add.w	r3, r7, #8
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f866 	bl	8008800 <prvSampleTimeNow>
 8008734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d130      	bne.n	800879e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <prvProcessTimerOrBlockTask+0x3c>
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	429a      	cmp	r2, r3
 8008748:	d806      	bhi.n	8008758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800874a:	f7ff fa23 	bl	8007b94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ff85 	bl	8008660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008756:	e024      	b.n	80087a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800875e:	4b13      	ldr	r3, [pc, #76]	; (80087ac <prvProcessTimerOrBlockTask+0x90>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <prvProcessTimerOrBlockTask+0x50>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <prvProcessTimerOrBlockTask+0x52>
 800876c:	2300      	movs	r3, #0
 800876e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008770:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <prvProcessTimerOrBlockTask+0x94>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	f7fe ff21 	bl	80075c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f7ff fa07 	bl	8007b94 <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800878c:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <prvProcessTimerOrBlockTask+0x98>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
}
 800879c:	e001      	b.n	80087a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800879e:	f7ff f9f9 	bl	8007b94 <xTaskResumeAll>
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20001108 	.word	0x20001108
 80087b0:	2000110c 	.word	0x2000110c
 80087b4:	e000ed04 	.word	0xe000ed04

080087b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087c0:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <prvGetNextExpireTime+0x44>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <prvGetNextExpireTime+0x16>
 80087ca:	2201      	movs	r2, #1
 80087cc:	e000      	b.n	80087d0 <prvGetNextExpireTime+0x18>
 80087ce:	2200      	movs	r2, #0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087dc:	4b07      	ldr	r3, [pc, #28]	; (80087fc <prvGetNextExpireTime+0x44>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e001      	b.n	80087ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087ec:	68fb      	ldr	r3, [r7, #12]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20001104 	.word	0x20001104

08008800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008808:	f7ff fa62 	bl	8007cd0 <xTaskGetTickCount>
 800880c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800880e:	4b0b      	ldr	r3, [pc, #44]	; (800883c <prvSampleTimeNow+0x3c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	429a      	cmp	r2, r3
 8008816:	d205      	bcs.n	8008824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008818:	f000 f936 	bl	8008a88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e002      	b.n	800882a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800882a:	4a04      	ldr	r2, [pc, #16]	; (800883c <prvSampleTimeNow+0x3c>)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20001114 	.word	0x20001114

08008840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d812      	bhi.n	800888c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	429a      	cmp	r2, r3
 8008872:	d302      	bcc.n	800887a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	e01b      	b.n	80088b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800887a:	4b10      	ldr	r3, [pc, #64]	; (80088bc <prvInsertTimerInActiveList+0x7c>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7fe f982 	bl	8006b8e <vListInsert>
 800888a:	e012      	b.n	80088b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d206      	bcs.n	80088a2 <prvInsertTimerInActiveList+0x62>
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d302      	bcc.n	80088a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e007      	b.n	80088b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <prvInsertTimerInActiveList+0x80>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fe f96e 	bl	8006b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088b2:	697b      	ldr	r3, [r7, #20]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20001108 	.word	0x20001108
 80088c0:	20001104 	.word	0x20001104

080088c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08e      	sub	sp, #56	; 0x38
 80088c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088ca:	e0ca      	b.n	8008a62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da18      	bge.n	8008904 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088d2:	1d3b      	adds	r3, r7, #4
 80088d4:	3304      	adds	r3, #4
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	61fb      	str	r3, [r7, #28]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fa:	6850      	ldr	r0, [r2, #4]
 80088fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fe:	6892      	ldr	r2, [r2, #8]
 8008900:	4611      	mov	r1, r2
 8008902:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f2c0 80aa 	blt.w	8008a60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	3304      	adds	r3, #4
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe f96f 	bl	8006c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008922:	463b      	mov	r3, r7
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff ff6b 	bl	8008800 <prvSampleTimeNow>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b09      	cmp	r3, #9
 8008930:	f200 8097 	bhi.w	8008a62 <prvProcessReceivedCommands+0x19e>
 8008934:	a201      	add	r2, pc, #4	; (adr r2, 800893c <prvProcessReceivedCommands+0x78>)
 8008936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893a:	bf00      	nop
 800893c:	08008965 	.word	0x08008965
 8008940:	08008965 	.word	0x08008965
 8008944:	08008965 	.word	0x08008965
 8008948:	080089d9 	.word	0x080089d9
 800894c:	080089ed 	.word	0x080089ed
 8008950:	08008a37 	.word	0x08008a37
 8008954:	08008965 	.word	0x08008965
 8008958:	08008965 	.word	0x08008965
 800895c:	080089d9 	.word	0x080089d9
 8008960:	080089ed 	.word	0x080089ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	18d1      	adds	r1, r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008984:	f7ff ff5c 	bl	8008840 <prvInsertTimerInActiveList>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d069      	beq.n	8008a62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008994:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d05e      	beq.n	8008a62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	441a      	add	r2, r3
 80089ac:	2300      	movs	r3, #0
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	2100      	movs	r1, #0
 80089b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b6:	f7ff fe05 	bl	80085c4 <xTimerGenericCommand>
 80089ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d14f      	bne.n	8008a62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	61bb      	str	r3, [r7, #24]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089ea:	e03a      	b.n	8008a62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	617b      	str	r3, [r7, #20]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	18d1      	adds	r1, r2, r3
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a30:	f7ff ff06 	bl	8008840 <prvInsertTimerInActiveList>
					break;
 8008a34:	e015      	b.n	8008a62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d103      	bne.n	8008a4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a46:	f000 fbdb 	bl	8009200 <vPortFree>
 8008a4a:	e00a      	b.n	8008a62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a5e:	e000      	b.n	8008a62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a62:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <prvProcessReceivedCommands+0x1c0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	1d39      	adds	r1, r7, #4
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fb90 	bl	8007190 <xQueueReceive>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f47f af2a 	bne.w	80088cc <prvProcessReceivedCommands+0x8>
	}
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	3730      	adds	r7, #48	; 0x30
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	2000110c 	.word	0x2000110c

08008a88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a8e:	e048      	b.n	8008b22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a90:	4b2d      	ldr	r3, [pc, #180]	; (8008b48 <prvSwitchTimerLists+0xc0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a9a:	4b2b      	ldr	r3, [pc, #172]	; (8008b48 <prvSwitchTimerLists+0xc0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe f8a9 	bl	8006c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d02e      	beq.n	8008b22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4413      	add	r3, r2
 8008acc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d90e      	bls.n	8008af4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ae2:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <prvSwitchTimerLists+0xc0>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fe f84e 	bl	8006b8e <vListInsert>
 8008af2:	e016      	b.n	8008b22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008af4:	2300      	movs	r3, #0
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	2300      	movs	r3, #0
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	2100      	movs	r1, #0
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7ff fd60 	bl	80085c4 <xTimerGenericCommand>
 8008b04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	603b      	str	r3, [r7, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <prvSwitchTimerLists+0xc0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1b1      	bne.n	8008a90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <prvSwitchTimerLists+0xc0>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <prvSwitchTimerLists+0xc4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a04      	ldr	r2, [pc, #16]	; (8008b48 <prvSwitchTimerLists+0xc0>)
 8008b38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b3a:	4a04      	ldr	r2, [pc, #16]	; (8008b4c <prvSwitchTimerLists+0xc4>)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	6013      	str	r3, [r2, #0]
}
 8008b40:	bf00      	nop
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20001104 	.word	0x20001104
 8008b4c:	20001108 	.word	0x20001108

08008b50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b56:	f000 f965 	bl	8008e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b5a:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <prvCheckForValidListAndQueue+0x60>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d120      	bne.n	8008ba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b62:	4814      	ldr	r0, [pc, #80]	; (8008bb4 <prvCheckForValidListAndQueue+0x64>)
 8008b64:	f7fd ffc2 	bl	8006aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b68:	4813      	ldr	r0, [pc, #76]	; (8008bb8 <prvCheckForValidListAndQueue+0x68>)
 8008b6a:	f7fd ffbf 	bl	8006aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <prvCheckForValidListAndQueue+0x6c>)
 8008b70:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <prvCheckForValidListAndQueue+0x64>)
 8008b72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b74:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <prvCheckForValidListAndQueue+0x70>)
 8008b76:	4a10      	ldr	r2, [pc, #64]	; (8008bb8 <prvCheckForValidListAndQueue+0x68>)
 8008b78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4b11      	ldr	r3, [pc, #68]	; (8008bc4 <prvCheckForValidListAndQueue+0x74>)
 8008b80:	4a11      	ldr	r2, [pc, #68]	; (8008bc8 <prvCheckForValidListAndQueue+0x78>)
 8008b82:	2110      	movs	r1, #16
 8008b84:	200a      	movs	r0, #10
 8008b86:	f7fe f8cd 	bl	8006d24 <xQueueGenericCreateStatic>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <prvCheckForValidListAndQueue+0x60>)
 8008b8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <prvCheckForValidListAndQueue+0x60>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <prvCheckForValidListAndQueue+0x60>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	490b      	ldr	r1, [pc, #44]	; (8008bcc <prvCheckForValidListAndQueue+0x7c>)
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fce6 	bl	8007570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ba4:	f000 f96e 	bl	8008e84 <vPortExitCritical>
}
 8008ba8:	bf00      	nop
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	2000110c 	.word	0x2000110c
 8008bb4:	200010dc 	.word	0x200010dc
 8008bb8:	200010f0 	.word	0x200010f0
 8008bbc:	20001104 	.word	0x20001104
 8008bc0:	20001108 	.word	0x20001108
 8008bc4:	200011b8 	.word	0x200011b8
 8008bc8:	20001118 	.word	0x20001118
 8008bcc:	08009ff8 	.word	0x08009ff8

08008bd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b04      	subs	r3, #4
 8008be0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f023 0201 	bic.w	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3b04      	subs	r3, #4
 8008bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c00:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <pxPortInitialiseStack+0x64>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3b14      	subs	r3, #20
 8008c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3b04      	subs	r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f06f 0202 	mvn.w	r2, #2
 8008c1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3b20      	subs	r3, #32
 8008c24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c26:	68fb      	ldr	r3, [r7, #12]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	08008c39 	.word	0x08008c39

08008c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c42:	4b12      	ldr	r3, [pc, #72]	; (8008c8c <prvTaskExitError+0x54>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4a:	d00a      	beq.n	8008c62 <prvTaskExitError+0x2a>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <prvTaskExitError+0x28>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	60bb      	str	r3, [r7, #8]
}
 8008c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c76:	bf00      	nop
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0fc      	beq.n	8008c78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	2000000c 	.word	0x2000000c

08008c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <pxCurrentTCBConst2>)
 8008c92:	6819      	ldr	r1, [r3, #0]
 8008c94:	6808      	ldr	r0, [r1, #0]
 8008c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	f380 8809 	msr	PSP, r0
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f380 8811 	msr	BASEPRI, r0
 8008caa:	4770      	bx	lr
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst2>:
 8008cb0:	20000bdc 	.word	0x20000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cb8:	4808      	ldr	r0, [pc, #32]	; (8008cdc <prvPortStartFirstTask+0x24>)
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	6800      	ldr	r0, [r0, #0]
 8008cbe:	f380 8808 	msr	MSP, r0
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8814 	msr	CONTROL, r0
 8008cca:	b662      	cpsie	i
 8008ccc:	b661      	cpsie	f
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	df00      	svc	0
 8008cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cda:	bf00      	nop
 8008cdc:	e000ed08 	.word	0xe000ed08

08008ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ce6:	4b46      	ldr	r3, [pc, #280]	; (8008e00 <xPortStartScheduler+0x120>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a46      	ldr	r2, [pc, #280]	; (8008e04 <xPortStartScheduler+0x124>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10a      	bne.n	8008d06 <xPortStartScheduler+0x26>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d06:	4b3e      	ldr	r3, [pc, #248]	; (8008e00 <xPortStartScheduler+0x120>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a3f      	ldr	r2, [pc, #252]	; (8008e08 <xPortStartScheduler+0x128>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10a      	bne.n	8008d26 <xPortStartScheduler+0x46>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d26:	4b39      	ldr	r3, [pc, #228]	; (8008e0c <xPortStartScheduler+0x12c>)
 8008d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	22ff      	movs	r2, #255	; 0xff
 8008d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <xPortStartScheduler+0x130>)
 8008d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d4e:	4b31      	ldr	r3, [pc, #196]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d54:	e009      	b.n	8008d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d56:	4b2f      	ldr	r3, [pc, #188]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d6a:	78fb      	ldrb	r3, [r7, #3]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d0ef      	beq.n	8008d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d76:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f1c3 0307 	rsb	r3, r3, #7
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d00a      	beq.n	8008d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	60bb      	str	r3, [r7, #8]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d98:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <xPortStartScheduler+0x134>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <xPortStartScheduler+0x134>)
 8008da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008da2:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <xPortStartScheduler+0x134>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008daa:	4a1a      	ldr	r2, [pc, #104]	; (8008e14 <xPortStartScheduler+0x134>)
 8008dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008db6:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <xPortStartScheduler+0x138>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <xPortStartScheduler+0x138>)
 8008dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <xPortStartScheduler+0x138>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <xPortStartScheduler+0x138>)
 8008dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dce:	f000 f8dd 	bl	8008f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <xPortStartScheduler+0x13c>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dd8:	f000 f8fc 	bl	8008fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ddc:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <xPortStartScheduler+0x140>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <xPortStartScheduler+0x140>)
 8008de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008de8:	f7ff ff66 	bl	8008cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dec:	f7ff f84c 	bl	8007e88 <vTaskSwitchContext>
	prvTaskExitError();
 8008df0:	f7ff ff22 	bl	8008c38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	e000ed00 	.word	0xe000ed00
 8008e04:	410fc271 	.word	0x410fc271
 8008e08:	410fc270 	.word	0x410fc270
 8008e0c:	e000e400 	.word	0xe000e400
 8008e10:	20001208 	.word	0x20001208
 8008e14:	2000120c 	.word	0x2000120c
 8008e18:	e000ed20 	.word	0xe000ed20
 8008e1c:	2000000c 	.word	0x2000000c
 8008e20:	e000ef34 	.word	0xe000ef34

08008e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	607b      	str	r3, [r7, #4]
}
 8008e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <vPortEnterCritical+0x58>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a0d      	ldr	r2, [pc, #52]	; (8008e7c <vPortEnterCritical+0x58>)
 8008e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <vPortEnterCritical+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d10f      	bne.n	8008e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e50:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <vPortEnterCritical+0x5c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	603b      	str	r3, [r7, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <vPortEnterCritical+0x4a>
	}
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	2000000c 	.word	0x2000000c
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <vPortExitCritical+0x50>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <vPortExitCritical+0x24>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	607b      	str	r3, [r7, #4]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <vPortExitCritical+0x50>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <vPortExitCritical+0x50>)
 8008eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008eb2:	4b08      	ldr	r3, [pc, #32]	; (8008ed4 <vPortExitCritical+0x50>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d105      	bne.n	8008ec6 <vPortExitCritical+0x42>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f383 8811 	msr	BASEPRI, r3
}
 8008ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	2000000c 	.word	0x2000000c
	...

08008ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ee0:	f3ef 8009 	mrs	r0, PSP
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <pxCurrentTCBConst>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	f01e 0f10 	tst.w	lr, #16
 8008ef0:	bf08      	it	eq
 8008ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	6010      	str	r0, [r2, #0]
 8008efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f04:	f380 8811 	msr	BASEPRI, r0
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f7fe ffba 	bl	8007e88 <vTaskSwitchContext>
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f380 8811 	msr	BASEPRI, r0
 8008f1c:	bc09      	pop	{r0, r3}
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	6808      	ldr	r0, [r1, #0]
 8008f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f26:	f01e 0f10 	tst.w	lr, #16
 8008f2a:	bf08      	it	eq
 8008f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f30:	f380 8809 	msr	PSP, r0
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst>:
 8008f40:	20000bdc 	.word	0x20000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f62:	f7fe fed7 	bl	8007d14 <xTaskIncrementTick>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <xPortSysTickHandler+0x40>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	f383 8811 	msr	BASEPRI, r3
}
 8008f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <vPortSetupTimerInterrupt+0x34>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <vPortSetupTimerInterrupt+0x38>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <vPortSetupTimerInterrupt+0x3c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0a      	ldr	r2, [pc, #40]	; (8008fcc <vPortSetupTimerInterrupt+0x40>)
 8008fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa6:	099b      	lsrs	r3, r3, #6
 8008fa8:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <vPortSetupTimerInterrupt+0x44>)
 8008faa:	3b01      	subs	r3, #1
 8008fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fae:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <vPortSetupTimerInterrupt+0x34>)
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	e000e010 	.word	0xe000e010
 8008fc4:	e000e018 	.word	0xe000e018
 8008fc8:	20000000 	.word	0x20000000
 8008fcc:	10624dd3 	.word	0x10624dd3
 8008fd0:	e000e014 	.word	0xe000e014

08008fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fe4 <vPortEnableVFP+0x10>
 8008fd8:	6801      	ldr	r1, [r0, #0]
 8008fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fde:	6001      	str	r1, [r0, #0]
 8008fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fe2:	bf00      	nop
 8008fe4:	e000ed88 	.word	0xe000ed88

08008fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fee:	f3ef 8305 	mrs	r3, IPSR
 8008ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b0f      	cmp	r3, #15
 8008ff8:	d914      	bls.n	8009024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ffa:	4a17      	ldr	r2, [pc, #92]	; (8009058 <vPortValidateInterruptPriority+0x70>)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009004:	4b15      	ldr	r3, [pc, #84]	; (800905c <vPortValidateInterruptPriority+0x74>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	7afa      	ldrb	r2, [r7, #11]
 800900a:	429a      	cmp	r2, r3
 800900c:	d20a      	bcs.n	8009024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	607b      	str	r3, [r7, #4]
}
 8009020:	bf00      	nop
 8009022:	e7fe      	b.n	8009022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009024:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <vPortValidateInterruptPriority+0x78>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <vPortValidateInterruptPriority+0x7c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d90a      	bls.n	800904a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	603b      	str	r3, [r7, #0]
}
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <vPortValidateInterruptPriority+0x60>
	}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	e000e3f0 	.word	0xe000e3f0
 800905c:	20001208 	.word	0x20001208
 8009060:	e000ed0c 	.word	0xe000ed0c
 8009064:	2000120c 	.word	0x2000120c

08009068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009074:	f7fe fd80 	bl	8007b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009078:	4b5b      	ldr	r3, [pc, #364]	; (80091e8 <pvPortMalloc+0x180>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009080:	f000 f920 	bl	80092c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009084:	4b59      	ldr	r3, [pc, #356]	; (80091ec <pvPortMalloc+0x184>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4013      	ands	r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	f040 8093 	bne.w	80091b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d01d      	beq.n	80090d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009098:	2208      	movs	r2, #8
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d014      	beq.n	80090d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f023 0307 	bic.w	r3, r3, #7
 80090b0:	3308      	adds	r3, #8
 80090b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <pvPortMalloc+0x6c>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	617b      	str	r3, [r7, #20]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d06e      	beq.n	80091b8 <pvPortMalloc+0x150>
 80090da:	4b45      	ldr	r3, [pc, #276]	; (80091f0 <pvPortMalloc+0x188>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d869      	bhi.n	80091b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090e4:	4b43      	ldr	r3, [pc, #268]	; (80091f4 <pvPortMalloc+0x18c>)
 80090e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090e8:	4b42      	ldr	r3, [pc, #264]	; (80091f4 <pvPortMalloc+0x18c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ee:	e004      	b.n	80090fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d903      	bls.n	800910c <pvPortMalloc+0xa4>
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f1      	bne.n	80090f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800910c:	4b36      	ldr	r3, [pc, #216]	; (80091e8 <pvPortMalloc+0x180>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009112:	429a      	cmp	r2, r3
 8009114:	d050      	beq.n	80091b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2208      	movs	r2, #8
 800911c:	4413      	add	r3, r2
 800911e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	2308      	movs	r3, #8
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	429a      	cmp	r2, r3
 8009136:	d91f      	bls.n	8009178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4413      	add	r3, r2
 800913e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <pvPortMalloc+0xf8>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	613b      	str	r3, [r7, #16]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	1ad2      	subs	r2, r2, r3
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009172:	69b8      	ldr	r0, [r7, #24]
 8009174:	f000 f908 	bl	8009388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009178:	4b1d      	ldr	r3, [pc, #116]	; (80091f0 <pvPortMalloc+0x188>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	4a1b      	ldr	r2, [pc, #108]	; (80091f0 <pvPortMalloc+0x188>)
 8009184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009186:	4b1a      	ldr	r3, [pc, #104]	; (80091f0 <pvPortMalloc+0x188>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <pvPortMalloc+0x190>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d203      	bcs.n	800919a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009192:	4b17      	ldr	r3, [pc, #92]	; (80091f0 <pvPortMalloc+0x188>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a18      	ldr	r2, [pc, #96]	; (80091f8 <pvPortMalloc+0x190>)
 8009198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	4b13      	ldr	r3, [pc, #76]	; (80091ec <pvPortMalloc+0x184>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	431a      	orrs	r2, r3
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80091ae:	4b13      	ldr	r3, [pc, #76]	; (80091fc <pvPortMalloc+0x194>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3301      	adds	r3, #1
 80091b4:	4a11      	ldr	r2, [pc, #68]	; (80091fc <pvPortMalloc+0x194>)
 80091b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091b8:	f7fe fcec 	bl	8007b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f003 0307 	and.w	r3, r3, #7
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <pvPortMalloc+0x174>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	60fb      	str	r3, [r7, #12]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <pvPortMalloc+0x172>
	return pvReturn;
 80091dc:	69fb      	ldr	r3, [r7, #28]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3728      	adds	r7, #40	; 0x28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20004e18 	.word	0x20004e18
 80091ec:	20004e2c 	.word	0x20004e2c
 80091f0:	20004e1c 	.word	0x20004e1c
 80091f4:	20004e10 	.word	0x20004e10
 80091f8:	20004e20 	.word	0x20004e20
 80091fc:	20004e24 	.word	0x20004e24

08009200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d04d      	beq.n	80092ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009212:	2308      	movs	r3, #8
 8009214:	425b      	negs	r3, r3
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	4413      	add	r3, r2
 800921a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	4b24      	ldr	r3, [pc, #144]	; (80092b8 <vPortFree+0xb8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4013      	ands	r3, r2
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <vPortFree+0x44>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	60fb      	str	r3, [r7, #12]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <vPortFree+0x62>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	60bb      	str	r3, [r7, #8]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <vPortFree+0xb8>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01e      	beq.n	80092ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d11a      	bne.n	80092ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <vPortFree+0xb8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	43db      	mvns	r3, r3
 8009282:	401a      	ands	r2, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009288:	f7fe fc76 	bl	8007b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <vPortFree+0xbc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4413      	add	r3, r2
 8009296:	4a09      	ldr	r2, [pc, #36]	; (80092bc <vPortFree+0xbc>)
 8009298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f000 f874 	bl	8009388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <vPortFree+0xc0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	4a06      	ldr	r2, [pc, #24]	; (80092c0 <vPortFree+0xc0>)
 80092a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80092aa:	f7fe fc73 	bl	8007b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092ae:	bf00      	nop
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20004e2c 	.word	0x20004e2c
 80092bc:	20004e1c 	.word	0x20004e1c
 80092c0:	20004e28 	.word	0x20004e28

080092c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092d0:	4b27      	ldr	r3, [pc, #156]	; (8009370 <prvHeapInit+0xac>)
 80092d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00c      	beq.n	80092f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3307      	adds	r3, #7
 80092e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0307 	bic.w	r3, r3, #7
 80092ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <prvHeapInit+0xac>)
 80092f4:	4413      	add	r3, r2
 80092f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092fc:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <prvHeapInit+0xb0>)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <prvHeapInit+0xb0>)
 8009304:	2200      	movs	r2, #0
 8009306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4413      	add	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009310:	2208      	movs	r2, #8
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0307 	bic.w	r3, r3, #7
 800931e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4a15      	ldr	r2, [pc, #84]	; (8009378 <prvHeapInit+0xb4>)
 8009324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <prvHeapInit+0xb4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2200      	movs	r2, #0
 800932c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800932e:	4b12      	ldr	r3, [pc, #72]	; (8009378 <prvHeapInit+0xb4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <prvHeapInit+0xb4>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	4a0a      	ldr	r2, [pc, #40]	; (800937c <prvHeapInit+0xb8>)
 8009352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4a09      	ldr	r2, [pc, #36]	; (8009380 <prvHeapInit+0xbc>)
 800935a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <prvHeapInit+0xc0>)
 800935e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	20001210 	.word	0x20001210
 8009374:	20004e10 	.word	0x20004e10
 8009378:	20004e18 	.word	0x20004e18
 800937c:	20004e20 	.word	0x20004e20
 8009380:	20004e1c 	.word	0x20004e1c
 8009384:	20004e2c 	.word	0x20004e2c

08009388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009390:	4b28      	ldr	r3, [pc, #160]	; (8009434 <prvInsertBlockIntoFreeList+0xac>)
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e002      	b.n	800939c <prvInsertBlockIntoFreeList+0x14>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d8f7      	bhi.n	8009396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	4413      	add	r3, r2
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d108      	bne.n	80093ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	441a      	add	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	441a      	add	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d118      	bne.n	8009410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <prvInsertBlockIntoFreeList+0xb0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d00d      	beq.n	8009406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	e008      	b.n	8009418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009406:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <prvInsertBlockIntoFreeList+0xb0>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e003      	b.n	8009418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	429a      	cmp	r2, r3
 800941e:	d002      	beq.n	8009426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20004e10 	.word	0x20004e10
 8009438:	20004e18 	.word	0x20004e18

0800943c <__errno>:
 800943c:	4b01      	ldr	r3, [pc, #4]	; (8009444 <__errno+0x8>)
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000010 	.word	0x20000010

08009448 <std>:
 8009448:	2300      	movs	r3, #0
 800944a:	b510      	push	{r4, lr}
 800944c:	4604      	mov	r4, r0
 800944e:	e9c0 3300 	strd	r3, r3, [r0]
 8009452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009456:	6083      	str	r3, [r0, #8]
 8009458:	8181      	strh	r1, [r0, #12]
 800945a:	6643      	str	r3, [r0, #100]	; 0x64
 800945c:	81c2      	strh	r2, [r0, #14]
 800945e:	6183      	str	r3, [r0, #24]
 8009460:	4619      	mov	r1, r3
 8009462:	2208      	movs	r2, #8
 8009464:	305c      	adds	r0, #92	; 0x5c
 8009466:	f000 f91a 	bl	800969e <memset>
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <std+0x38>)
 800946c:	6263      	str	r3, [r4, #36]	; 0x24
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <std+0x3c>)
 8009470:	62a3      	str	r3, [r4, #40]	; 0x28
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <std+0x40>)
 8009474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009476:	4b05      	ldr	r3, [pc, #20]	; (800948c <std+0x44>)
 8009478:	6224      	str	r4, [r4, #32]
 800947a:	6323      	str	r3, [r4, #48]	; 0x30
 800947c:	bd10      	pop	{r4, pc}
 800947e:	bf00      	nop
 8009480:	080099b9 	.word	0x080099b9
 8009484:	080099db 	.word	0x080099db
 8009488:	08009a13 	.word	0x08009a13
 800948c:	08009a37 	.word	0x08009a37

08009490 <_cleanup_r>:
 8009490:	4901      	ldr	r1, [pc, #4]	; (8009498 <_cleanup_r+0x8>)
 8009492:	f000 b8af 	b.w	80095f4 <_fwalk_reent>
 8009496:	bf00      	nop
 8009498:	08009d11 	.word	0x08009d11

0800949c <__sfmoreglue>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	2268      	movs	r2, #104	; 0x68
 80094a0:	1e4d      	subs	r5, r1, #1
 80094a2:	4355      	muls	r5, r2
 80094a4:	460e      	mov	r6, r1
 80094a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094aa:	f000 f921 	bl	80096f0 <_malloc_r>
 80094ae:	4604      	mov	r4, r0
 80094b0:	b140      	cbz	r0, 80094c4 <__sfmoreglue+0x28>
 80094b2:	2100      	movs	r1, #0
 80094b4:	e9c0 1600 	strd	r1, r6, [r0]
 80094b8:	300c      	adds	r0, #12
 80094ba:	60a0      	str	r0, [r4, #8]
 80094bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094c0:	f000 f8ed 	bl	800969e <memset>
 80094c4:	4620      	mov	r0, r4
 80094c6:	bd70      	pop	{r4, r5, r6, pc}

080094c8 <__sfp_lock_acquire>:
 80094c8:	4801      	ldr	r0, [pc, #4]	; (80094d0 <__sfp_lock_acquire+0x8>)
 80094ca:	f000 b8d8 	b.w	800967e <__retarget_lock_acquire_recursive>
 80094ce:	bf00      	nop
 80094d0:	20004e31 	.word	0x20004e31

080094d4 <__sfp_lock_release>:
 80094d4:	4801      	ldr	r0, [pc, #4]	; (80094dc <__sfp_lock_release+0x8>)
 80094d6:	f000 b8d3 	b.w	8009680 <__retarget_lock_release_recursive>
 80094da:	bf00      	nop
 80094dc:	20004e31 	.word	0x20004e31

080094e0 <__sinit_lock_acquire>:
 80094e0:	4801      	ldr	r0, [pc, #4]	; (80094e8 <__sinit_lock_acquire+0x8>)
 80094e2:	f000 b8cc 	b.w	800967e <__retarget_lock_acquire_recursive>
 80094e6:	bf00      	nop
 80094e8:	20004e32 	.word	0x20004e32

080094ec <__sinit_lock_release>:
 80094ec:	4801      	ldr	r0, [pc, #4]	; (80094f4 <__sinit_lock_release+0x8>)
 80094ee:	f000 b8c7 	b.w	8009680 <__retarget_lock_release_recursive>
 80094f2:	bf00      	nop
 80094f4:	20004e32 	.word	0x20004e32

080094f8 <__sinit>:
 80094f8:	b510      	push	{r4, lr}
 80094fa:	4604      	mov	r4, r0
 80094fc:	f7ff fff0 	bl	80094e0 <__sinit_lock_acquire>
 8009500:	69a3      	ldr	r3, [r4, #24]
 8009502:	b11b      	cbz	r3, 800950c <__sinit+0x14>
 8009504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009508:	f7ff bff0 	b.w	80094ec <__sinit_lock_release>
 800950c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009510:	6523      	str	r3, [r4, #80]	; 0x50
 8009512:	4b13      	ldr	r3, [pc, #76]	; (8009560 <__sinit+0x68>)
 8009514:	4a13      	ldr	r2, [pc, #76]	; (8009564 <__sinit+0x6c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	62a2      	str	r2, [r4, #40]	; 0x28
 800951a:	42a3      	cmp	r3, r4
 800951c:	bf04      	itt	eq
 800951e:	2301      	moveq	r3, #1
 8009520:	61a3      	streq	r3, [r4, #24]
 8009522:	4620      	mov	r0, r4
 8009524:	f000 f820 	bl	8009568 <__sfp>
 8009528:	6060      	str	r0, [r4, #4]
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f81c 	bl	8009568 <__sfp>
 8009530:	60a0      	str	r0, [r4, #8]
 8009532:	4620      	mov	r0, r4
 8009534:	f000 f818 	bl	8009568 <__sfp>
 8009538:	2200      	movs	r2, #0
 800953a:	60e0      	str	r0, [r4, #12]
 800953c:	2104      	movs	r1, #4
 800953e:	6860      	ldr	r0, [r4, #4]
 8009540:	f7ff ff82 	bl	8009448 <std>
 8009544:	68a0      	ldr	r0, [r4, #8]
 8009546:	2201      	movs	r2, #1
 8009548:	2109      	movs	r1, #9
 800954a:	f7ff ff7d 	bl	8009448 <std>
 800954e:	68e0      	ldr	r0, [r4, #12]
 8009550:	2202      	movs	r2, #2
 8009552:	2112      	movs	r1, #18
 8009554:	f7ff ff78 	bl	8009448 <std>
 8009558:	2301      	movs	r3, #1
 800955a:	61a3      	str	r3, [r4, #24]
 800955c:	e7d2      	b.n	8009504 <__sinit+0xc>
 800955e:	bf00      	nop
 8009560:	0800a110 	.word	0x0800a110
 8009564:	08009491 	.word	0x08009491

08009568 <__sfp>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	4607      	mov	r7, r0
 800956c:	f7ff ffac 	bl	80094c8 <__sfp_lock_acquire>
 8009570:	4b1e      	ldr	r3, [pc, #120]	; (80095ec <__sfp+0x84>)
 8009572:	681e      	ldr	r6, [r3, #0]
 8009574:	69b3      	ldr	r3, [r6, #24]
 8009576:	b913      	cbnz	r3, 800957e <__sfp+0x16>
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff ffbd 	bl	80094f8 <__sinit>
 800957e:	3648      	adds	r6, #72	; 0x48
 8009580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009584:	3b01      	subs	r3, #1
 8009586:	d503      	bpl.n	8009590 <__sfp+0x28>
 8009588:	6833      	ldr	r3, [r6, #0]
 800958a:	b30b      	cbz	r3, 80095d0 <__sfp+0x68>
 800958c:	6836      	ldr	r6, [r6, #0]
 800958e:	e7f7      	b.n	8009580 <__sfp+0x18>
 8009590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009594:	b9d5      	cbnz	r5, 80095cc <__sfp+0x64>
 8009596:	4b16      	ldr	r3, [pc, #88]	; (80095f0 <__sfp+0x88>)
 8009598:	60e3      	str	r3, [r4, #12]
 800959a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800959e:	6665      	str	r5, [r4, #100]	; 0x64
 80095a0:	f000 f86c 	bl	800967c <__retarget_lock_init_recursive>
 80095a4:	f7ff ff96 	bl	80094d4 <__sfp_lock_release>
 80095a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095b0:	6025      	str	r5, [r4, #0]
 80095b2:	61a5      	str	r5, [r4, #24]
 80095b4:	2208      	movs	r2, #8
 80095b6:	4629      	mov	r1, r5
 80095b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095bc:	f000 f86f 	bl	800969e <memset>
 80095c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095c8:	4620      	mov	r0, r4
 80095ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095cc:	3468      	adds	r4, #104	; 0x68
 80095ce:	e7d9      	b.n	8009584 <__sfp+0x1c>
 80095d0:	2104      	movs	r1, #4
 80095d2:	4638      	mov	r0, r7
 80095d4:	f7ff ff62 	bl	800949c <__sfmoreglue>
 80095d8:	4604      	mov	r4, r0
 80095da:	6030      	str	r0, [r6, #0]
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1d5      	bne.n	800958c <__sfp+0x24>
 80095e0:	f7ff ff78 	bl	80094d4 <__sfp_lock_release>
 80095e4:	230c      	movs	r3, #12
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	e7ee      	b.n	80095c8 <__sfp+0x60>
 80095ea:	bf00      	nop
 80095ec:	0800a110 	.word	0x0800a110
 80095f0:	ffff0001 	.word	0xffff0001

080095f4 <_fwalk_reent>:
 80095f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f8:	4606      	mov	r6, r0
 80095fa:	4688      	mov	r8, r1
 80095fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009600:	2700      	movs	r7, #0
 8009602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009606:	f1b9 0901 	subs.w	r9, r9, #1
 800960a:	d505      	bpl.n	8009618 <_fwalk_reent+0x24>
 800960c:	6824      	ldr	r4, [r4, #0]
 800960e:	2c00      	cmp	r4, #0
 8009610:	d1f7      	bne.n	8009602 <_fwalk_reent+0xe>
 8009612:	4638      	mov	r0, r7
 8009614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009618:	89ab      	ldrh	r3, [r5, #12]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d907      	bls.n	800962e <_fwalk_reent+0x3a>
 800961e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009622:	3301      	adds	r3, #1
 8009624:	d003      	beq.n	800962e <_fwalk_reent+0x3a>
 8009626:	4629      	mov	r1, r5
 8009628:	4630      	mov	r0, r6
 800962a:	47c0      	blx	r8
 800962c:	4307      	orrs	r7, r0
 800962e:	3568      	adds	r5, #104	; 0x68
 8009630:	e7e9      	b.n	8009606 <_fwalk_reent+0x12>
	...

08009634 <__libc_init_array>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	4d0d      	ldr	r5, [pc, #52]	; (800966c <__libc_init_array+0x38>)
 8009638:	4c0d      	ldr	r4, [pc, #52]	; (8009670 <__libc_init_array+0x3c>)
 800963a:	1b64      	subs	r4, r4, r5
 800963c:	10a4      	asrs	r4, r4, #2
 800963e:	2600      	movs	r6, #0
 8009640:	42a6      	cmp	r6, r4
 8009642:	d109      	bne.n	8009658 <__libc_init_array+0x24>
 8009644:	4d0b      	ldr	r5, [pc, #44]	; (8009674 <__libc_init_array+0x40>)
 8009646:	4c0c      	ldr	r4, [pc, #48]	; (8009678 <__libc_init_array+0x44>)
 8009648:	f000 fca2 	bl	8009f90 <_init>
 800964c:	1b64      	subs	r4, r4, r5
 800964e:	10a4      	asrs	r4, r4, #2
 8009650:	2600      	movs	r6, #0
 8009652:	42a6      	cmp	r6, r4
 8009654:	d105      	bne.n	8009662 <__libc_init_array+0x2e>
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	f855 3b04 	ldr.w	r3, [r5], #4
 800965c:	4798      	blx	r3
 800965e:	3601      	adds	r6, #1
 8009660:	e7ee      	b.n	8009640 <__libc_init_array+0xc>
 8009662:	f855 3b04 	ldr.w	r3, [r5], #4
 8009666:	4798      	blx	r3
 8009668:	3601      	adds	r6, #1
 800966a:	e7f2      	b.n	8009652 <__libc_init_array+0x1e>
 800966c:	0800a11c 	.word	0x0800a11c
 8009670:	0800a11c 	.word	0x0800a11c
 8009674:	0800a11c 	.word	0x0800a11c
 8009678:	0800a120 	.word	0x0800a120

0800967c <__retarget_lock_init_recursive>:
 800967c:	4770      	bx	lr

0800967e <__retarget_lock_acquire_recursive>:
 800967e:	4770      	bx	lr

08009680 <__retarget_lock_release_recursive>:
 8009680:	4770      	bx	lr

08009682 <memcpy>:
 8009682:	440a      	add	r2, r1
 8009684:	4291      	cmp	r1, r2
 8009686:	f100 33ff 	add.w	r3, r0, #4294967295
 800968a:	d100      	bne.n	800968e <memcpy+0xc>
 800968c:	4770      	bx	lr
 800968e:	b510      	push	{r4, lr}
 8009690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009698:	4291      	cmp	r1, r2
 800969a:	d1f9      	bne.n	8009690 <memcpy+0xe>
 800969c:	bd10      	pop	{r4, pc}

0800969e <memset>:
 800969e:	4402      	add	r2, r0
 80096a0:	4603      	mov	r3, r0
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d100      	bne.n	80096a8 <memset+0xa>
 80096a6:	4770      	bx	lr
 80096a8:	f803 1b01 	strb.w	r1, [r3], #1
 80096ac:	e7f9      	b.n	80096a2 <memset+0x4>
	...

080096b0 <sbrk_aligned>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	4e0e      	ldr	r6, [pc, #56]	; (80096ec <sbrk_aligned+0x3c>)
 80096b4:	460c      	mov	r4, r1
 80096b6:	6831      	ldr	r1, [r6, #0]
 80096b8:	4605      	mov	r5, r0
 80096ba:	b911      	cbnz	r1, 80096c2 <sbrk_aligned+0x12>
 80096bc:	f000 f96c 	bl	8009998 <_sbrk_r>
 80096c0:	6030      	str	r0, [r6, #0]
 80096c2:	4621      	mov	r1, r4
 80096c4:	4628      	mov	r0, r5
 80096c6:	f000 f967 	bl	8009998 <_sbrk_r>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	d00a      	beq.n	80096e4 <sbrk_aligned+0x34>
 80096ce:	1cc4      	adds	r4, r0, #3
 80096d0:	f024 0403 	bic.w	r4, r4, #3
 80096d4:	42a0      	cmp	r0, r4
 80096d6:	d007      	beq.n	80096e8 <sbrk_aligned+0x38>
 80096d8:	1a21      	subs	r1, r4, r0
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f95c 	bl	8009998 <_sbrk_r>
 80096e0:	3001      	adds	r0, #1
 80096e2:	d101      	bne.n	80096e8 <sbrk_aligned+0x38>
 80096e4:	f04f 34ff 	mov.w	r4, #4294967295
 80096e8:	4620      	mov	r0, r4
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	20004e38 	.word	0x20004e38

080096f0 <_malloc_r>:
 80096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f4:	1ccd      	adds	r5, r1, #3
 80096f6:	f025 0503 	bic.w	r5, r5, #3
 80096fa:	3508      	adds	r5, #8
 80096fc:	2d0c      	cmp	r5, #12
 80096fe:	bf38      	it	cc
 8009700:	250c      	movcc	r5, #12
 8009702:	2d00      	cmp	r5, #0
 8009704:	4607      	mov	r7, r0
 8009706:	db01      	blt.n	800970c <_malloc_r+0x1c>
 8009708:	42a9      	cmp	r1, r5
 800970a:	d905      	bls.n	8009718 <_malloc_r+0x28>
 800970c:	230c      	movs	r3, #12
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	2600      	movs	r6, #0
 8009712:	4630      	mov	r0, r6
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	4e2e      	ldr	r6, [pc, #184]	; (80097d4 <_malloc_r+0xe4>)
 800971a:	f000 fbad 	bl	8009e78 <__malloc_lock>
 800971e:	6833      	ldr	r3, [r6, #0]
 8009720:	461c      	mov	r4, r3
 8009722:	bb34      	cbnz	r4, 8009772 <_malloc_r+0x82>
 8009724:	4629      	mov	r1, r5
 8009726:	4638      	mov	r0, r7
 8009728:	f7ff ffc2 	bl	80096b0 <sbrk_aligned>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	4604      	mov	r4, r0
 8009730:	d14d      	bne.n	80097ce <_malloc_r+0xde>
 8009732:	6834      	ldr	r4, [r6, #0]
 8009734:	4626      	mov	r6, r4
 8009736:	2e00      	cmp	r6, #0
 8009738:	d140      	bne.n	80097bc <_malloc_r+0xcc>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	4631      	mov	r1, r6
 800973e:	4638      	mov	r0, r7
 8009740:	eb04 0803 	add.w	r8, r4, r3
 8009744:	f000 f928 	bl	8009998 <_sbrk_r>
 8009748:	4580      	cmp	r8, r0
 800974a:	d13a      	bne.n	80097c2 <_malloc_r+0xd2>
 800974c:	6821      	ldr	r1, [r4, #0]
 800974e:	3503      	adds	r5, #3
 8009750:	1a6d      	subs	r5, r5, r1
 8009752:	f025 0503 	bic.w	r5, r5, #3
 8009756:	3508      	adds	r5, #8
 8009758:	2d0c      	cmp	r5, #12
 800975a:	bf38      	it	cc
 800975c:	250c      	movcc	r5, #12
 800975e:	4629      	mov	r1, r5
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ffa5 	bl	80096b0 <sbrk_aligned>
 8009766:	3001      	adds	r0, #1
 8009768:	d02b      	beq.n	80097c2 <_malloc_r+0xd2>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	442b      	add	r3, r5
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	e00e      	b.n	8009790 <_malloc_r+0xa0>
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	1b52      	subs	r2, r2, r5
 8009776:	d41e      	bmi.n	80097b6 <_malloc_r+0xc6>
 8009778:	2a0b      	cmp	r2, #11
 800977a:	d916      	bls.n	80097aa <_malloc_r+0xba>
 800977c:	1961      	adds	r1, r4, r5
 800977e:	42a3      	cmp	r3, r4
 8009780:	6025      	str	r5, [r4, #0]
 8009782:	bf18      	it	ne
 8009784:	6059      	strne	r1, [r3, #4]
 8009786:	6863      	ldr	r3, [r4, #4]
 8009788:	bf08      	it	eq
 800978a:	6031      	streq	r1, [r6, #0]
 800978c:	5162      	str	r2, [r4, r5]
 800978e:	604b      	str	r3, [r1, #4]
 8009790:	4638      	mov	r0, r7
 8009792:	f104 060b 	add.w	r6, r4, #11
 8009796:	f000 fb75 	bl	8009e84 <__malloc_unlock>
 800979a:	f026 0607 	bic.w	r6, r6, #7
 800979e:	1d23      	adds	r3, r4, #4
 80097a0:	1af2      	subs	r2, r6, r3
 80097a2:	d0b6      	beq.n	8009712 <_malloc_r+0x22>
 80097a4:	1b9b      	subs	r3, r3, r6
 80097a6:	50a3      	str	r3, [r4, r2]
 80097a8:	e7b3      	b.n	8009712 <_malloc_r+0x22>
 80097aa:	6862      	ldr	r2, [r4, #4]
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	bf0c      	ite	eq
 80097b0:	6032      	streq	r2, [r6, #0]
 80097b2:	605a      	strne	r2, [r3, #4]
 80097b4:	e7ec      	b.n	8009790 <_malloc_r+0xa0>
 80097b6:	4623      	mov	r3, r4
 80097b8:	6864      	ldr	r4, [r4, #4]
 80097ba:	e7b2      	b.n	8009722 <_malloc_r+0x32>
 80097bc:	4634      	mov	r4, r6
 80097be:	6876      	ldr	r6, [r6, #4]
 80097c0:	e7b9      	b.n	8009736 <_malloc_r+0x46>
 80097c2:	230c      	movs	r3, #12
 80097c4:	603b      	str	r3, [r7, #0]
 80097c6:	4638      	mov	r0, r7
 80097c8:	f000 fb5c 	bl	8009e84 <__malloc_unlock>
 80097cc:	e7a1      	b.n	8009712 <_malloc_r+0x22>
 80097ce:	6025      	str	r5, [r4, #0]
 80097d0:	e7de      	b.n	8009790 <_malloc_r+0xa0>
 80097d2:	bf00      	nop
 80097d4:	20004e34 	.word	0x20004e34

080097d8 <_puts_r>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	460e      	mov	r6, r1
 80097dc:	4605      	mov	r5, r0
 80097de:	b118      	cbz	r0, 80097e8 <_puts_r+0x10>
 80097e0:	6983      	ldr	r3, [r0, #24]
 80097e2:	b90b      	cbnz	r3, 80097e8 <_puts_r+0x10>
 80097e4:	f7ff fe88 	bl	80094f8 <__sinit>
 80097e8:	69ab      	ldr	r3, [r5, #24]
 80097ea:	68ac      	ldr	r4, [r5, #8]
 80097ec:	b913      	cbnz	r3, 80097f4 <_puts_r+0x1c>
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff fe82 	bl	80094f8 <__sinit>
 80097f4:	4b2c      	ldr	r3, [pc, #176]	; (80098a8 <_puts_r+0xd0>)
 80097f6:	429c      	cmp	r4, r3
 80097f8:	d120      	bne.n	800983c <_puts_r+0x64>
 80097fa:	686c      	ldr	r4, [r5, #4]
 80097fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097fe:	07db      	lsls	r3, r3, #31
 8009800:	d405      	bmi.n	800980e <_puts_r+0x36>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	0598      	lsls	r0, r3, #22
 8009806:	d402      	bmi.n	800980e <_puts_r+0x36>
 8009808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800980a:	f7ff ff38 	bl	800967e <__retarget_lock_acquire_recursive>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	0719      	lsls	r1, r3, #28
 8009812:	d51d      	bpl.n	8009850 <_puts_r+0x78>
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	b1db      	cbz	r3, 8009850 <_puts_r+0x78>
 8009818:	3e01      	subs	r6, #1
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009820:	3b01      	subs	r3, #1
 8009822:	60a3      	str	r3, [r4, #8]
 8009824:	bb39      	cbnz	r1, 8009876 <_puts_r+0x9e>
 8009826:	2b00      	cmp	r3, #0
 8009828:	da38      	bge.n	800989c <_puts_r+0xc4>
 800982a:	4622      	mov	r2, r4
 800982c:	210a      	movs	r1, #10
 800982e:	4628      	mov	r0, r5
 8009830:	f000 f906 	bl	8009a40 <__swbuf_r>
 8009834:	3001      	adds	r0, #1
 8009836:	d011      	beq.n	800985c <_puts_r+0x84>
 8009838:	250a      	movs	r5, #10
 800983a:	e011      	b.n	8009860 <_puts_r+0x88>
 800983c:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <_puts_r+0xd4>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <_puts_r+0x6e>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7da      	b.n	80097fc <_puts_r+0x24>
 8009846:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <_puts_r+0xd8>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7d5      	b.n	80097fc <_puts_r+0x24>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f958 	bl	8009b08 <__swsetup_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d0dd      	beq.n	8009818 <_puts_r+0x40>
 800985c:	f04f 35ff 	mov.w	r5, #4294967295
 8009860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009862:	07da      	lsls	r2, r3, #31
 8009864:	d405      	bmi.n	8009872 <_puts_r+0x9a>
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	059b      	lsls	r3, r3, #22
 800986a:	d402      	bmi.n	8009872 <_puts_r+0x9a>
 800986c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986e:	f7ff ff07 	bl	8009680 <__retarget_lock_release_recursive>
 8009872:	4628      	mov	r0, r5
 8009874:	bd70      	pop	{r4, r5, r6, pc}
 8009876:	2b00      	cmp	r3, #0
 8009878:	da04      	bge.n	8009884 <_puts_r+0xac>
 800987a:	69a2      	ldr	r2, [r4, #24]
 800987c:	429a      	cmp	r2, r3
 800987e:	dc06      	bgt.n	800988e <_puts_r+0xb6>
 8009880:	290a      	cmp	r1, #10
 8009882:	d004      	beq.n	800988e <_puts_r+0xb6>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	7019      	strb	r1, [r3, #0]
 800988c:	e7c5      	b.n	800981a <_puts_r+0x42>
 800988e:	4622      	mov	r2, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f000 f8d5 	bl	8009a40 <__swbuf_r>
 8009896:	3001      	adds	r0, #1
 8009898:	d1bf      	bne.n	800981a <_puts_r+0x42>
 800989a:	e7df      	b.n	800985c <_puts_r+0x84>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	250a      	movs	r5, #10
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	701d      	strb	r5, [r3, #0]
 80098a6:	e7db      	b.n	8009860 <_puts_r+0x88>
 80098a8:	0800a0d0 	.word	0x0800a0d0
 80098ac:	0800a0f0 	.word	0x0800a0f0
 80098b0:	0800a0b0 	.word	0x0800a0b0

080098b4 <puts>:
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <puts+0xc>)
 80098b6:	4601      	mov	r1, r0
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f7ff bf8d 	b.w	80097d8 <_puts_r>
 80098be:	bf00      	nop
 80098c0:	20000010 	.word	0x20000010

080098c4 <cleanup_glue>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	460c      	mov	r4, r1
 80098c8:	6809      	ldr	r1, [r1, #0]
 80098ca:	4605      	mov	r5, r0
 80098cc:	b109      	cbz	r1, 80098d2 <cleanup_glue+0xe>
 80098ce:	f7ff fff9 	bl	80098c4 <cleanup_glue>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4628      	mov	r0, r5
 80098d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098da:	f000 bad9 	b.w	8009e90 <_free_r>
	...

080098e0 <_reclaim_reent>:
 80098e0:	4b2c      	ldr	r3, [pc, #176]	; (8009994 <_reclaim_reent+0xb4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4283      	cmp	r3, r0
 80098e6:	b570      	push	{r4, r5, r6, lr}
 80098e8:	4604      	mov	r4, r0
 80098ea:	d051      	beq.n	8009990 <_reclaim_reent+0xb0>
 80098ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80098ee:	b143      	cbz	r3, 8009902 <_reclaim_reent+0x22>
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d14a      	bne.n	800998c <_reclaim_reent+0xac>
 80098f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f8:	6819      	ldr	r1, [r3, #0]
 80098fa:	b111      	cbz	r1, 8009902 <_reclaim_reent+0x22>
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 fac7 	bl	8009e90 <_free_r>
 8009902:	6961      	ldr	r1, [r4, #20]
 8009904:	b111      	cbz	r1, 800990c <_reclaim_reent+0x2c>
 8009906:	4620      	mov	r0, r4
 8009908:	f000 fac2 	bl	8009e90 <_free_r>
 800990c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800990e:	b111      	cbz	r1, 8009916 <_reclaim_reent+0x36>
 8009910:	4620      	mov	r0, r4
 8009912:	f000 fabd 	bl	8009e90 <_free_r>
 8009916:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009918:	b111      	cbz	r1, 8009920 <_reclaim_reent+0x40>
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fab8 	bl	8009e90 <_free_r>
 8009920:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009922:	b111      	cbz	r1, 800992a <_reclaim_reent+0x4a>
 8009924:	4620      	mov	r0, r4
 8009926:	f000 fab3 	bl	8009e90 <_free_r>
 800992a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800992c:	b111      	cbz	r1, 8009934 <_reclaim_reent+0x54>
 800992e:	4620      	mov	r0, r4
 8009930:	f000 faae 	bl	8009e90 <_free_r>
 8009934:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009936:	b111      	cbz	r1, 800993e <_reclaim_reent+0x5e>
 8009938:	4620      	mov	r0, r4
 800993a:	f000 faa9 	bl	8009e90 <_free_r>
 800993e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009940:	b111      	cbz	r1, 8009948 <_reclaim_reent+0x68>
 8009942:	4620      	mov	r0, r4
 8009944:	f000 faa4 	bl	8009e90 <_free_r>
 8009948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800994a:	b111      	cbz	r1, 8009952 <_reclaim_reent+0x72>
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fa9f 	bl	8009e90 <_free_r>
 8009952:	69a3      	ldr	r3, [r4, #24]
 8009954:	b1e3      	cbz	r3, 8009990 <_reclaim_reent+0xb0>
 8009956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009958:	4620      	mov	r0, r4
 800995a:	4798      	blx	r3
 800995c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800995e:	b1b9      	cbz	r1, 8009990 <_reclaim_reent+0xb0>
 8009960:	4620      	mov	r0, r4
 8009962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009966:	f7ff bfad 	b.w	80098c4 <cleanup_glue>
 800996a:	5949      	ldr	r1, [r1, r5]
 800996c:	b941      	cbnz	r1, 8009980 <_reclaim_reent+0xa0>
 800996e:	3504      	adds	r5, #4
 8009970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009972:	2d80      	cmp	r5, #128	; 0x80
 8009974:	68d9      	ldr	r1, [r3, #12]
 8009976:	d1f8      	bne.n	800996a <_reclaim_reent+0x8a>
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fa89 	bl	8009e90 <_free_r>
 800997e:	e7ba      	b.n	80098f6 <_reclaim_reent+0x16>
 8009980:	680e      	ldr	r6, [r1, #0]
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fa84 	bl	8009e90 <_free_r>
 8009988:	4631      	mov	r1, r6
 800998a:	e7ef      	b.n	800996c <_reclaim_reent+0x8c>
 800998c:	2500      	movs	r5, #0
 800998e:	e7ef      	b.n	8009970 <_reclaim_reent+0x90>
 8009990:	bd70      	pop	{r4, r5, r6, pc}
 8009992:	bf00      	nop
 8009994:	20000010 	.word	0x20000010

08009998 <_sbrk_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d06      	ldr	r5, [pc, #24]	; (80099b4 <_sbrk_r+0x1c>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	f7f7 faee 	bl	8000f84 <_sbrk>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_sbrk_r+0x1a>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_sbrk_r+0x1a>
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	20004e3c 	.word	0x20004e3c

080099b8 <__sread>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	460c      	mov	r4, r1
 80099bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c0:	f000 fab2 	bl	8009f28 <_read_r>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	bfab      	itete	ge
 80099c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ca:	89a3      	ldrhlt	r3, [r4, #12]
 80099cc:	181b      	addge	r3, r3, r0
 80099ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099d2:	bfac      	ite	ge
 80099d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099d6:	81a3      	strhlt	r3, [r4, #12]
 80099d8:	bd10      	pop	{r4, pc}

080099da <__swrite>:
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	461f      	mov	r7, r3
 80099e0:	898b      	ldrh	r3, [r1, #12]
 80099e2:	05db      	lsls	r3, r3, #23
 80099e4:	4605      	mov	r5, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	4616      	mov	r6, r2
 80099ea:	d505      	bpl.n	80099f8 <__swrite+0x1e>
 80099ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f0:	2302      	movs	r3, #2
 80099f2:	2200      	movs	r2, #0
 80099f4:	f000 f9c8 	bl	8009d88 <_lseek_r>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	4632      	mov	r2, r6
 8009a06:	463b      	mov	r3, r7
 8009a08:	4628      	mov	r0, r5
 8009a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0e:	f000 b869 	b.w	8009ae4 <_write_r>

08009a12 <__sseek>:
 8009a12:	b510      	push	{r4, lr}
 8009a14:	460c      	mov	r4, r1
 8009a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1a:	f000 f9b5 	bl	8009d88 <_lseek_r>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	bf15      	itete	ne
 8009a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a2e:	81a3      	strheq	r3, [r4, #12]
 8009a30:	bf18      	it	ne
 8009a32:	81a3      	strhne	r3, [r4, #12]
 8009a34:	bd10      	pop	{r4, pc}

08009a36 <__sclose>:
 8009a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3a:	f000 b8d3 	b.w	8009be4 <_close_r>
	...

08009a40 <__swbuf_r>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	460e      	mov	r6, r1
 8009a44:	4614      	mov	r4, r2
 8009a46:	4605      	mov	r5, r0
 8009a48:	b118      	cbz	r0, 8009a52 <__swbuf_r+0x12>
 8009a4a:	6983      	ldr	r3, [r0, #24]
 8009a4c:	b90b      	cbnz	r3, 8009a52 <__swbuf_r+0x12>
 8009a4e:	f7ff fd53 	bl	80094f8 <__sinit>
 8009a52:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <__swbuf_r+0x98>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d12b      	bne.n	8009ab0 <__swbuf_r+0x70>
 8009a58:	686c      	ldr	r4, [r5, #4]
 8009a5a:	69a3      	ldr	r3, [r4, #24]
 8009a5c:	60a3      	str	r3, [r4, #8]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	071a      	lsls	r2, r3, #28
 8009a62:	d52f      	bpl.n	8009ac4 <__swbuf_r+0x84>
 8009a64:	6923      	ldr	r3, [r4, #16]
 8009a66:	b36b      	cbz	r3, 8009ac4 <__swbuf_r+0x84>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	6820      	ldr	r0, [r4, #0]
 8009a6c:	1ac0      	subs	r0, r0, r3
 8009a6e:	6963      	ldr	r3, [r4, #20]
 8009a70:	b2f6      	uxtb	r6, r6
 8009a72:	4283      	cmp	r3, r0
 8009a74:	4637      	mov	r7, r6
 8009a76:	dc04      	bgt.n	8009a82 <__swbuf_r+0x42>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 f948 	bl	8009d10 <_fflush_r>
 8009a80:	bb30      	cbnz	r0, 8009ad0 <__swbuf_r+0x90>
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	60a3      	str	r3, [r4, #8]
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	6022      	str	r2, [r4, #0]
 8009a8e:	701e      	strb	r6, [r3, #0]
 8009a90:	6963      	ldr	r3, [r4, #20]
 8009a92:	3001      	adds	r0, #1
 8009a94:	4283      	cmp	r3, r0
 8009a96:	d004      	beq.n	8009aa2 <__swbuf_r+0x62>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	07db      	lsls	r3, r3, #31
 8009a9c:	d506      	bpl.n	8009aac <__swbuf_r+0x6c>
 8009a9e:	2e0a      	cmp	r6, #10
 8009aa0:	d104      	bne.n	8009aac <__swbuf_r+0x6c>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f933 	bl	8009d10 <_fflush_r>
 8009aaa:	b988      	cbnz	r0, 8009ad0 <__swbuf_r+0x90>
 8009aac:	4638      	mov	r0, r7
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <__swbuf_r+0x9c>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d101      	bne.n	8009aba <__swbuf_r+0x7a>
 8009ab6:	68ac      	ldr	r4, [r5, #8]
 8009ab8:	e7cf      	b.n	8009a5a <__swbuf_r+0x1a>
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <__swbuf_r+0xa0>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	bf08      	it	eq
 8009ac0:	68ec      	ldreq	r4, [r5, #12]
 8009ac2:	e7ca      	b.n	8009a5a <__swbuf_r+0x1a>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 f81e 	bl	8009b08 <__swsetup_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0cb      	beq.n	8009a68 <__swbuf_r+0x28>
 8009ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ad4:	e7ea      	b.n	8009aac <__swbuf_r+0x6c>
 8009ad6:	bf00      	nop
 8009ad8:	0800a0d0 	.word	0x0800a0d0
 8009adc:	0800a0f0 	.word	0x0800a0f0
 8009ae0:	0800a0b0 	.word	0x0800a0b0

08009ae4 <_write_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	; (8009b04 <_write_r+0x20>)
 8009ae8:	4604      	mov	r4, r0
 8009aea:	4608      	mov	r0, r1
 8009aec:	4611      	mov	r1, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	602a      	str	r2, [r5, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f7f7 f87a 	bl	8000bec <_write>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_write_r+0x1e>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_write_r+0x1e>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20004e3c 	.word	0x20004e3c

08009b08 <__swsetup_r>:
 8009b08:	4b32      	ldr	r3, [pc, #200]	; (8009bd4 <__swsetup_r+0xcc>)
 8009b0a:	b570      	push	{r4, r5, r6, lr}
 8009b0c:	681d      	ldr	r5, [r3, #0]
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	b125      	cbz	r5, 8009b1e <__swsetup_r+0x16>
 8009b14:	69ab      	ldr	r3, [r5, #24]
 8009b16:	b913      	cbnz	r3, 8009b1e <__swsetup_r+0x16>
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff fced 	bl	80094f8 <__sinit>
 8009b1e:	4b2e      	ldr	r3, [pc, #184]	; (8009bd8 <__swsetup_r+0xd0>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	d10f      	bne.n	8009b44 <__swsetup_r+0x3c>
 8009b24:	686c      	ldr	r4, [r5, #4]
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b2c:	0719      	lsls	r1, r3, #28
 8009b2e:	d42c      	bmi.n	8009b8a <__swsetup_r+0x82>
 8009b30:	06dd      	lsls	r5, r3, #27
 8009b32:	d411      	bmi.n	8009b58 <__swsetup_r+0x50>
 8009b34:	2309      	movs	r3, #9
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b42:	e03e      	b.n	8009bc2 <__swsetup_r+0xba>
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <__swsetup_r+0xd4>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d101      	bne.n	8009b4e <__swsetup_r+0x46>
 8009b4a:	68ac      	ldr	r4, [r5, #8]
 8009b4c:	e7eb      	b.n	8009b26 <__swsetup_r+0x1e>
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <__swsetup_r+0xd8>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	bf08      	it	eq
 8009b54:	68ec      	ldreq	r4, [r5, #12]
 8009b56:	e7e6      	b.n	8009b26 <__swsetup_r+0x1e>
 8009b58:	0758      	lsls	r0, r3, #29
 8009b5a:	d512      	bpl.n	8009b82 <__swsetup_r+0x7a>
 8009b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b5e:	b141      	cbz	r1, 8009b72 <__swsetup_r+0x6a>
 8009b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b64:	4299      	cmp	r1, r3
 8009b66:	d002      	beq.n	8009b6e <__swsetup_r+0x66>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 f991 	bl	8009e90 <_free_r>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6363      	str	r3, [r4, #52]	; 0x34
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0308 	orr.w	r3, r3, #8
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	b94b      	cbnz	r3, 8009ba2 <__swsetup_r+0x9a>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b98:	d003      	beq.n	8009ba2 <__swsetup_r+0x9a>
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 f92b 	bl	8009df8 <__smakebuf_r>
 8009ba2:	89a0      	ldrh	r0, [r4, #12]
 8009ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba8:	f010 0301 	ands.w	r3, r0, #1
 8009bac:	d00a      	beq.n	8009bc4 <__swsetup_r+0xbc>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	6963      	ldr	r3, [r4, #20]
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	61a3      	str	r3, [r4, #24]
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	b943      	cbnz	r3, 8009bce <__swsetup_r+0xc6>
 8009bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bc0:	d1ba      	bne.n	8009b38 <__swsetup_r+0x30>
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	0781      	lsls	r1, r0, #30
 8009bc6:	bf58      	it	pl
 8009bc8:	6963      	ldrpl	r3, [r4, #20]
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	e7f4      	b.n	8009bb8 <__swsetup_r+0xb0>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e7f7      	b.n	8009bc2 <__swsetup_r+0xba>
 8009bd2:	bf00      	nop
 8009bd4:	20000010 	.word	0x20000010
 8009bd8:	0800a0d0 	.word	0x0800a0d0
 8009bdc:	0800a0f0 	.word	0x0800a0f0
 8009be0:	0800a0b0 	.word	0x0800a0b0

08009be4 <_close_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4d06      	ldr	r5, [pc, #24]	; (8009c00 <_close_r+0x1c>)
 8009be8:	2300      	movs	r3, #0
 8009bea:	4604      	mov	r4, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	602b      	str	r3, [r5, #0]
 8009bf0:	f7f7 f993 	bl	8000f1a <_close>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_close_r+0x1a>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_close_r+0x1a>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	20004e3c 	.word	0x20004e3c

08009c04 <__sflush_r>:
 8009c04:	898a      	ldrh	r2, [r1, #12]
 8009c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	0710      	lsls	r0, r2, #28
 8009c0e:	460c      	mov	r4, r1
 8009c10:	d458      	bmi.n	8009cc4 <__sflush_r+0xc0>
 8009c12:	684b      	ldr	r3, [r1, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dc05      	bgt.n	8009c24 <__sflush_r+0x20>
 8009c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	dc02      	bgt.n	8009c24 <__sflush_r+0x20>
 8009c1e:	2000      	movs	r0, #0
 8009c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	d0f9      	beq.n	8009c1e <__sflush_r+0x1a>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c30:	682f      	ldr	r7, [r5, #0]
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	d032      	beq.n	8009c9c <__sflush_r+0x98>
 8009c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	075a      	lsls	r2, r3, #29
 8009c3c:	d505      	bpl.n	8009c4a <__sflush_r+0x46>
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	1ac0      	subs	r0, r0, r3
 8009c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c44:	b10b      	cbz	r3, 8009c4a <__sflush_r+0x46>
 8009c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c50:	6a21      	ldr	r1, [r4, #32]
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b0      	blx	r6
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	d106      	bne.n	8009c6a <__sflush_r+0x66>
 8009c5c:	6829      	ldr	r1, [r5, #0]
 8009c5e:	291d      	cmp	r1, #29
 8009c60:	d82c      	bhi.n	8009cbc <__sflush_r+0xb8>
 8009c62:	4a2a      	ldr	r2, [pc, #168]	; (8009d0c <__sflush_r+0x108>)
 8009c64:	40ca      	lsrs	r2, r1
 8009c66:	07d6      	lsls	r6, r2, #31
 8009c68:	d528      	bpl.n	8009cbc <__sflush_r+0xb8>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6062      	str	r2, [r4, #4]
 8009c6e:	04d9      	lsls	r1, r3, #19
 8009c70:	6922      	ldr	r2, [r4, #16]
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	d504      	bpl.n	8009c80 <__sflush_r+0x7c>
 8009c76:	1c42      	adds	r2, r0, #1
 8009c78:	d101      	bne.n	8009c7e <__sflush_r+0x7a>
 8009c7a:	682b      	ldr	r3, [r5, #0]
 8009c7c:	b903      	cbnz	r3, 8009c80 <__sflush_r+0x7c>
 8009c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c82:	602f      	str	r7, [r5, #0]
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d0ca      	beq.n	8009c1e <__sflush_r+0x1a>
 8009c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <__sflush_r+0x92>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f8fd 	bl	8009e90 <_free_r>
 8009c96:	2000      	movs	r0, #0
 8009c98:	6360      	str	r0, [r4, #52]	; 0x34
 8009c9a:	e7c1      	b.n	8009c20 <__sflush_r+0x1c>
 8009c9c:	6a21      	ldr	r1, [r4, #32]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b0      	blx	r6
 8009ca4:	1c41      	adds	r1, r0, #1
 8009ca6:	d1c7      	bne.n	8009c38 <__sflush_r+0x34>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c4      	beq.n	8009c38 <__sflush_r+0x34>
 8009cae:	2b1d      	cmp	r3, #29
 8009cb0:	d001      	beq.n	8009cb6 <__sflush_r+0xb2>
 8009cb2:	2b16      	cmp	r3, #22
 8009cb4:	d101      	bne.n	8009cba <__sflush_r+0xb6>
 8009cb6:	602f      	str	r7, [r5, #0]
 8009cb8:	e7b1      	b.n	8009c1e <__sflush_r+0x1a>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7ad      	b.n	8009c20 <__sflush_r+0x1c>
 8009cc4:	690f      	ldr	r7, [r1, #16]
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	d0a9      	beq.n	8009c1e <__sflush_r+0x1a>
 8009cca:	0793      	lsls	r3, r2, #30
 8009ccc:	680e      	ldr	r6, [r1, #0]
 8009cce:	bf08      	it	eq
 8009cd0:	694b      	ldreq	r3, [r1, #20]
 8009cd2:	600f      	str	r7, [r1, #0]
 8009cd4:	bf18      	it	ne
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	eba6 0807 	sub.w	r8, r6, r7
 8009cdc:	608b      	str	r3, [r1, #8]
 8009cde:	f1b8 0f00 	cmp.w	r8, #0
 8009ce2:	dd9c      	ble.n	8009c1e <__sflush_r+0x1a>
 8009ce4:	6a21      	ldr	r1, [r4, #32]
 8009ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ce8:	4643      	mov	r3, r8
 8009cea:	463a      	mov	r2, r7
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b0      	blx	r6
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	dc06      	bgt.n	8009d02 <__sflush_r+0xfe>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e78e      	b.n	8009c20 <__sflush_r+0x1c>
 8009d02:	4407      	add	r7, r0
 8009d04:	eba8 0800 	sub.w	r8, r8, r0
 8009d08:	e7e9      	b.n	8009cde <__sflush_r+0xda>
 8009d0a:	bf00      	nop
 8009d0c:	20400001 	.word	0x20400001

08009d10 <_fflush_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	690b      	ldr	r3, [r1, #16]
 8009d14:	4605      	mov	r5, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b913      	cbnz	r3, 8009d20 <_fflush_r+0x10>
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	b118      	cbz	r0, 8009d2a <_fflush_r+0x1a>
 8009d22:	6983      	ldr	r3, [r0, #24]
 8009d24:	b90b      	cbnz	r3, 8009d2a <_fflush_r+0x1a>
 8009d26:	f7ff fbe7 	bl	80094f8 <__sinit>
 8009d2a:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <_fflush_r+0x6c>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	d11b      	bne.n	8009d68 <_fflush_r+0x58>
 8009d30:	686c      	ldr	r4, [r5, #4]
 8009d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0ef      	beq.n	8009d1a <_fflush_r+0xa>
 8009d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d3c:	07d0      	lsls	r0, r2, #31
 8009d3e:	d404      	bmi.n	8009d4a <_fflush_r+0x3a>
 8009d40:	0599      	lsls	r1, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_fflush_r+0x3a>
 8009d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d46:	f7ff fc9a 	bl	800967e <__retarget_lock_acquire_recursive>
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	f7ff ff59 	bl	8009c04 <__sflush_r>
 8009d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d54:	07da      	lsls	r2, r3, #31
 8009d56:	4605      	mov	r5, r0
 8009d58:	d4e0      	bmi.n	8009d1c <_fflush_r+0xc>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	059b      	lsls	r3, r3, #22
 8009d5e:	d4dd      	bmi.n	8009d1c <_fflush_r+0xc>
 8009d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d62:	f7ff fc8d 	bl	8009680 <__retarget_lock_release_recursive>
 8009d66:	e7d9      	b.n	8009d1c <_fflush_r+0xc>
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <_fflush_r+0x70>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d101      	bne.n	8009d72 <_fflush_r+0x62>
 8009d6e:	68ac      	ldr	r4, [r5, #8]
 8009d70:	e7df      	b.n	8009d32 <_fflush_r+0x22>
 8009d72:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <_fflush_r+0x74>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	bf08      	it	eq
 8009d78:	68ec      	ldreq	r4, [r5, #12]
 8009d7a:	e7da      	b.n	8009d32 <_fflush_r+0x22>
 8009d7c:	0800a0d0 	.word	0x0800a0d0
 8009d80:	0800a0f0 	.word	0x0800a0f0
 8009d84:	0800a0b0 	.word	0x0800a0b0

08009d88 <_lseek_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d07      	ldr	r5, [pc, #28]	; (8009da8 <_lseek_r+0x20>)
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	4608      	mov	r0, r1
 8009d90:	4611      	mov	r1, r2
 8009d92:	2200      	movs	r2, #0
 8009d94:	602a      	str	r2, [r5, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	f7f7 f8e6 	bl	8000f68 <_lseek>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_lseek_r+0x1e>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_lseek_r+0x1e>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	20004e3c 	.word	0x20004e3c

08009dac <__swhatbuf_r>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	460e      	mov	r6, r1
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	2900      	cmp	r1, #0
 8009db6:	b096      	sub	sp, #88	; 0x58
 8009db8:	4614      	mov	r4, r2
 8009dba:	461d      	mov	r5, r3
 8009dbc:	da08      	bge.n	8009dd0 <__swhatbuf_r+0x24>
 8009dbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	602a      	str	r2, [r5, #0]
 8009dc6:	061a      	lsls	r2, r3, #24
 8009dc8:	d410      	bmi.n	8009dec <__swhatbuf_r+0x40>
 8009dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dce:	e00e      	b.n	8009dee <__swhatbuf_r+0x42>
 8009dd0:	466a      	mov	r2, sp
 8009dd2:	f000 f8bb 	bl	8009f4c <_fstat_r>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	dbf1      	blt.n	8009dbe <__swhatbuf_r+0x12>
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009de0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009de4:	425a      	negs	r2, r3
 8009de6:	415a      	adcs	r2, r3
 8009de8:	602a      	str	r2, [r5, #0]
 8009dea:	e7ee      	b.n	8009dca <__swhatbuf_r+0x1e>
 8009dec:	2340      	movs	r3, #64	; 0x40
 8009dee:	2000      	movs	r0, #0
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	b016      	add	sp, #88	; 0x58
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009df8 <__smakebuf_r>:
 8009df8:	898b      	ldrh	r3, [r1, #12]
 8009dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dfc:	079d      	lsls	r5, r3, #30
 8009dfe:	4606      	mov	r6, r0
 8009e00:	460c      	mov	r4, r1
 8009e02:	d507      	bpl.n	8009e14 <__smakebuf_r+0x1c>
 8009e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	6163      	str	r3, [r4, #20]
 8009e10:	b002      	add	sp, #8
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	ab01      	add	r3, sp, #4
 8009e16:	466a      	mov	r2, sp
 8009e18:	f7ff ffc8 	bl	8009dac <__swhatbuf_r>
 8009e1c:	9900      	ldr	r1, [sp, #0]
 8009e1e:	4605      	mov	r5, r0
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7ff fc65 	bl	80096f0 <_malloc_r>
 8009e26:	b948      	cbnz	r0, 8009e3c <__smakebuf_r+0x44>
 8009e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2c:	059a      	lsls	r2, r3, #22
 8009e2e:	d4ef      	bmi.n	8009e10 <__smakebuf_r+0x18>
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	f043 0302 	orr.w	r3, r3, #2
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	e7e3      	b.n	8009e04 <__smakebuf_r+0xc>
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <__smakebuf_r+0x7c>)
 8009e3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	6020      	str	r0, [r4, #0]
 8009e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	6163      	str	r3, [r4, #20]
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	6120      	str	r0, [r4, #16]
 8009e52:	b15b      	cbz	r3, 8009e6c <__smakebuf_r+0x74>
 8009e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 f889 	bl	8009f70 <_isatty_r>
 8009e5e:	b128      	cbz	r0, 8009e6c <__smakebuf_r+0x74>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f023 0303 	bic.w	r3, r3, #3
 8009e66:	f043 0301 	orr.w	r3, r3, #1
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	89a0      	ldrh	r0, [r4, #12]
 8009e6e:	4305      	orrs	r5, r0
 8009e70:	81a5      	strh	r5, [r4, #12]
 8009e72:	e7cd      	b.n	8009e10 <__smakebuf_r+0x18>
 8009e74:	08009491 	.word	0x08009491

08009e78 <__malloc_lock>:
 8009e78:	4801      	ldr	r0, [pc, #4]	; (8009e80 <__malloc_lock+0x8>)
 8009e7a:	f7ff bc00 	b.w	800967e <__retarget_lock_acquire_recursive>
 8009e7e:	bf00      	nop
 8009e80:	20004e30 	.word	0x20004e30

08009e84 <__malloc_unlock>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__malloc_unlock+0x8>)
 8009e86:	f7ff bbfb 	b.w	8009680 <__retarget_lock_release_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20004e30 	.word	0x20004e30

08009e90 <_free_r>:
 8009e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e92:	2900      	cmp	r1, #0
 8009e94:	d044      	beq.n	8009f20 <_free_r+0x90>
 8009e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9a:	9001      	str	r0, [sp, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009ea2:	bfb8      	it	lt
 8009ea4:	18e4      	addlt	r4, r4, r3
 8009ea6:	f7ff ffe7 	bl	8009e78 <__malloc_lock>
 8009eaa:	4a1e      	ldr	r2, [pc, #120]	; (8009f24 <_free_r+0x94>)
 8009eac:	9801      	ldr	r0, [sp, #4]
 8009eae:	6813      	ldr	r3, [r2, #0]
 8009eb0:	b933      	cbnz	r3, 8009ec0 <_free_r+0x30>
 8009eb2:	6063      	str	r3, [r4, #4]
 8009eb4:	6014      	str	r4, [r2, #0]
 8009eb6:	b003      	add	sp, #12
 8009eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ebc:	f7ff bfe2 	b.w	8009e84 <__malloc_unlock>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d908      	bls.n	8009ed6 <_free_r+0x46>
 8009ec4:	6825      	ldr	r5, [r4, #0]
 8009ec6:	1961      	adds	r1, r4, r5
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	bf01      	itttt	eq
 8009ecc:	6819      	ldreq	r1, [r3, #0]
 8009ece:	685b      	ldreq	r3, [r3, #4]
 8009ed0:	1949      	addeq	r1, r1, r5
 8009ed2:	6021      	streq	r1, [r4, #0]
 8009ed4:	e7ed      	b.n	8009eb2 <_free_r+0x22>
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	b10b      	cbz	r3, 8009ee0 <_free_r+0x50>
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	d9fa      	bls.n	8009ed6 <_free_r+0x46>
 8009ee0:	6811      	ldr	r1, [r2, #0]
 8009ee2:	1855      	adds	r5, r2, r1
 8009ee4:	42a5      	cmp	r5, r4
 8009ee6:	d10b      	bne.n	8009f00 <_free_r+0x70>
 8009ee8:	6824      	ldr	r4, [r4, #0]
 8009eea:	4421      	add	r1, r4
 8009eec:	1854      	adds	r4, r2, r1
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	d1e0      	bne.n	8009eb6 <_free_r+0x26>
 8009ef4:	681c      	ldr	r4, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	6053      	str	r3, [r2, #4]
 8009efa:	4421      	add	r1, r4
 8009efc:	6011      	str	r1, [r2, #0]
 8009efe:	e7da      	b.n	8009eb6 <_free_r+0x26>
 8009f00:	d902      	bls.n	8009f08 <_free_r+0x78>
 8009f02:	230c      	movs	r3, #12
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	e7d6      	b.n	8009eb6 <_free_r+0x26>
 8009f08:	6825      	ldr	r5, [r4, #0]
 8009f0a:	1961      	adds	r1, r4, r5
 8009f0c:	428b      	cmp	r3, r1
 8009f0e:	bf04      	itt	eq
 8009f10:	6819      	ldreq	r1, [r3, #0]
 8009f12:	685b      	ldreq	r3, [r3, #4]
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	bf04      	itt	eq
 8009f18:	1949      	addeq	r1, r1, r5
 8009f1a:	6021      	streq	r1, [r4, #0]
 8009f1c:	6054      	str	r4, [r2, #4]
 8009f1e:	e7ca      	b.n	8009eb6 <_free_r+0x26>
 8009f20:	b003      	add	sp, #12
 8009f22:	bd30      	pop	{r4, r5, pc}
 8009f24:	20004e34 	.word	0x20004e34

08009f28 <_read_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	; (8009f48 <_read_r+0x20>)
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7f6 ffd2 	bl	8000ee0 <_read>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_read_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_read_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20004e3c 	.word	0x20004e3c

08009f4c <_fstat_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_fstat_r+0x20>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	4611      	mov	r1, r2
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	f7f6 ffea 	bl	8000f32 <_fstat>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d102      	bne.n	8009f68 <_fstat_r+0x1c>
 8009f62:	682b      	ldr	r3, [r5, #0]
 8009f64:	b103      	cbz	r3, 8009f68 <_fstat_r+0x1c>
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	bd38      	pop	{r3, r4, r5, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20004e3c 	.word	0x20004e3c

08009f70 <_isatty_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d06      	ldr	r5, [pc, #24]	; (8009f8c <_isatty_r+0x1c>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f6 ffe9 	bl	8000f52 <_isatty>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_isatty_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_isatty_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20004e3c 	.word	0x20004e3c

08009f90 <_init>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr

08009f9c <_fini>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr
