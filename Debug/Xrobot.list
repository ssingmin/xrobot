
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b4  0800a5b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5bc  0800a5bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f20  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004f94  20004f94  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff78  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046c2  00000000  00000000  0004001c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  000446e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001750  00000000  00000000  00046008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a7b  00000000  00000000  00047758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7c2  00000000  00000000  0004e1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0f3d  00000000  00000000  0006b995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c8d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ed0  00000000  00000000  0013c924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3f0 	.word	0x0800a3f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a3f0 	.word	0x0800a3f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ws2812Init>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812Init(uint32_t led_cnt)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 80004dc:	23fc      	movs	r3, #252	; 0xfc
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <ws2812Init+0x1c>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <ws2812Init+0x20>)
 80004e4:	f004 f80c 	bl	8004500 <HAL_TIM_PWM_Start_DMA>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000090 	.word	0x20000090
 80004f4:	20000440 	.word	0x20000440

080004f8 <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b08d      	sub	sp, #52	; 0x34
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	4608      	mov	r0, r1
 8000502:	4611      	mov	r1, r2
 8000504:	461a      	mov	r2, r3
 8000506:	4603      	mov	r3, r0
 8000508:	70fb      	strb	r3, [r7, #3]
 800050a:	460b      	mov	r3, r1
 800050c:	70bb      	strb	r3, [r7, #2]
 800050e:	4613      	mov	r3, r2
 8000510:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000512:	78bb      	ldrb	r3, [r7, #2]
 8000514:	021a      	lsls	r2, r3, #8
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	4413      	add	r3, r2
 800051a:	021a      	lsls	r2, r3, #8
 800051c:	787b      	ldrb	r3, [r7, #1]
 800051e:	4413      	add	r3, r2
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	3330      	adds	r3, #48	; 0x30
 8000528:	443b      	add	r3, r7
 800052a:	f843 2c24 	str.w	r2, [r3, #-36]

	for(int i=0;i<24;i++)
 800052e:	2300      	movs	r3, #0
 8000530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000532:	e02a      	b.n	800058a <ws2812SetColor+0x92>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	3330      	adds	r3, #48	; 0x30
 800053a:	443b      	add	r3, r7
 800053c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000540:	2101      	movs	r1, #1
 8000542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	4013      	ands	r3, r2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00d      	beq.n	800056a <ws2812SetColor+0x72>
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4613      	mov	r3, r2
 8000552:	0092      	lsls	r2, r2, #2
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	461a      	mov	r2, r3
 800055a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	33c0      	adds	r3, #192	; 0xc0
 8000560:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <ws2812SetColor+0xa8>)
 8000562:	2143      	movs	r1, #67	; 0x43
 8000564:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000568:	e00c      	b.n	8000584 <ws2812SetColor+0x8c>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4613      	mov	r3, r2
 800056e:	0092      	lsls	r2, r2, #2
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	461a      	mov	r2, r3
 8000576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	33c0      	adds	r3, #192	; 0xc0
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <ws2812SetColor+0xa8>)
 800057e:	2121      	movs	r1, #33	; 0x21
 8000580:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 8000584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000586:	3301      	adds	r3, #1
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058c:	2b17      	cmp	r3, #23
 800058e:	ddd1      	ble.n	8000534 <ws2812SetColor+0x3c>
	}
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3734      	adds	r7, #52	; 0x34
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090

080005a4 <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b087      	sub	sp, #28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	460b      	mov	r3, r1
 80005b0:	71bb      	strb	r3, [r7, #6]
 80005b2:	4613      	mov	r3, r2
 80005b4:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4413      	add	r3, r2
 80005be:	021a      	lsls	r2, r3, #8
 80005c0:	797b      	ldrb	r3, [r7, #5]
 80005c2:	4413      	add	r3, r2
 80005c4:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 80005c6:	2308      	movs	r3, #8
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e02d      	b.n	8000628 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	e024      	b.n	800061c <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 80005d2:	2201      	movs	r2, #1
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4013      	ands	r3, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00c      	beq.n	80005fe <ws2812AllColor+0x5a>
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	461a      	mov	r2, r3
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <ws2812AllColor+0x98>)
 80005f6:	2143      	movs	r1, #67	; 0x43
 80005f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005fc:	e00b      	b.n	8000616 <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	461a      	mov	r2, r3
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <ws2812AllColor+0x98>)
 8000610:	2121      	movs	r1, #33	; 0x21
 8000612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	3301      	adds	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	2b17      	cmp	r3, #23
 8000620:	ddd7      	ble.n	80005d2 <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3b01      	subs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2b00      	cmp	r3, #0
 800062c:	dcce      	bgt.n	80005cc <ws2812AllColor+0x28>
		}
	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	371c      	adds	r7, #28
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000090 	.word	0x20000090

08000640 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <MX_CAN1_Init+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_CAN1_Init+0x64>)
 800064c:	2206      	movs	r2, #6
 800064e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_CAN1_Init+0x64>)
 800065e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000662:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000666:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800066a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_CAN1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000674:	2201      	movs	r2, #1
 8000676:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_CAN1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_CAN1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_CAN1_Init+0x64>)
 8000692:	f001 fb6f 	bl	8001d74 <HAL_CAN_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800069c:	f000 fd82 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200002d8 	.word	0x200002d8
 80006a8:	40006400 	.word	0x40006400

080006ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_CAN_MspInit+0x94>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d134      	bne.n	8000738 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_CAN_MspInit+0x98>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <HAL_CAN_MspInit+0x98>)
 80006d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_CAN_MspInit+0x98>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_CAN_MspInit+0x98>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_CAN_MspInit+0x98>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_CAN_MspInit+0x98>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000718:	2309      	movs	r3, #9
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <HAL_CAN_MspInit+0x9c>)
 8000724:	f002 fea2 	bl	800346c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2105      	movs	r1, #5
 800072c:	2014      	movs	r0, #20
 800072e:	f002 fa71 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000732:	2014      	movs	r0, #20
 8000734:	f002 fa8a 	bl	8002c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40006400 	.word	0x40006400
 8000744:	40023800 	.word	0x40023800
 8000748:	40020400 	.word	0x40020400

0800074c <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <CanInit+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <CanInit+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <CanInit+0x98>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <CanInit+0x98>)
 8000770:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	b29b      	uxth	r3, r3
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <CanInit+0x98>)
 800077e:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	0c1b      	lsrs	r3, r3, #16
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <CanInit+0x98>)
 8000788:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	b29b      	uxth	r3, r3
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <CanInit+0x98>)
 8000796:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <CanInit+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <CanInit+0x98>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <CanInit+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <CanInit+0x9c>)
 80007ac:	f001 fcbe 	bl	800212c <HAL_CAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <CanInit+0x6e>
 80007b6:	f000 fcf5 	bl	80011a4 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 80007ba:	2102      	movs	r1, #2
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <CanInit+0x9c>)
 80007be:	f001 ff1b 	bl	80025f8 <HAL_CAN_ActivateNotification>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d000      	beq.n	80007ca <CanInit+0x7e>
 80007c8:	e7fe      	b.n	80007c8 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80007ca:	4906      	ldr	r1, [pc, #24]	; (80007e4 <CanInit+0x98>)
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <CanInit+0x9c>)
 80007ce:	f001 fbcd 	bl	8001f6c <HAL_CAN_ConfigFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 80007d8:	f000 fce4 	bl	80011a4 <Error_Handler>
    }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200002b0 	.word	0x200002b0
 80007e8:	200002d8 	.word	0x200002d8

080007ec <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4611      	mov	r1, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	4613      	mov	r3, r2
 8000800:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <sendCan+0x2c>
 8000814:	2304      	movs	r3, #4
 8000816:	e000      	b.n	800081a <sendCan+0x2e>
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <sendCan+0x70>)
 8000828:	f001 fd9f 	bl	800236a <HAL_CAN_GetTxMailboxesFreeLevel>
 800082c:	4603      	mov	r3, r0
 800082e:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00d      	beq.n	8000852 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	f107 0114 	add.w	r1, r7, #20
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <sendCan+0x70>)
 8000842:	f001 fcb7 	bl	80021b4 <HAL_CAN_AddTxMessage>
 8000846:	4603      	mov	r3, r0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 800084a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084c:	2b00      	cmp	r3, #0
 800084e:	d000      	beq.n	8000852 <sendCan+0x66>
 8000850:	e7fe      	b.n	8000850 <sendCan+0x64>
    }
}
 8000852:	bf00      	nop
 8000854:	3730      	adds	r7, #48	; 0x30
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002d8 	.word	0x200002d8

08000860 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800086c:	2100      	movs	r1, #0
 800086e:	480a      	ldr	r0, [pc, #40]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000870:	f001 fdb0 	bl	80023d4 <HAL_CAN_GetRxMessage>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d000      	beq.n	800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 800087a:	e7fe      	b.n	800087a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000884:	6013      	str	r3, [r2, #0]

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000028c 	.word	0x2000028c
 8000894:	20000294 	.word	0x20000294
 8000898:	200002d8 	.word	0x200002d8
 800089c:	20000288 	.word	0x20000288

080008a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_DMA_Init+0x3c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <MX_DMA_Init+0x3c>)
 80008b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_DMA_Init+0x3c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2105      	movs	r1, #5
 80008c6:	203a      	movs	r0, #58	; 0x3a
 80008c8:	f002 f9a4 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008cc:	203a      	movs	r0, #58	; 0x3a
 80008ce:	f002 f9bd 	bl	8002c4c <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008e4:	4a10      	ldr	r2, [pc, #64]	; (8000928 <MX_FREERTOS_Init+0x48>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <MX_FREERTOS_Init+0x4c>)
 80008ea:	f006 fa38 	bl	8006d5e <osThreadNew>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_FREERTOS_Init+0x50>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_FREERTOS_Init+0x54>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_FREERTOS_Init+0x58>)
 80008fa:	f006 fa30 	bl	8006d5e <osThreadNew>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <MX_FREERTOS_Init+0x5c>)
 8000902:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <MX_FREERTOS_Init+0x60>)
 8000906:	2100      	movs	r1, #0
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_FREERTOS_Init+0x64>)
 800090a:	f006 fa28 	bl	8006d5e <osThreadNew>
 800090e:	4603      	mov	r3, r0
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <MX_FREERTOS_Init+0x68>)
 8000912:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <MX_FREERTOS_Init+0x6c>)
 8000916:	2100      	movs	r1, #0
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_FREERTOS_Init+0x70>)
 800091a:	f006 fa20 	bl	8006d5e <osThreadNew>
 800091e:	4603      	mov	r3, r0
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <MX_FREERTOS_Init+0x74>)
 8000922:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	0800a4a0 	.word	0x0800a4a0
 800092c:	08000959 	.word	0x08000959
 8000930:	20000300 	.word	0x20000300
 8000934:	0800a4c4 	.word	0x0800a4c4
 8000938:	08000985 	.word	0x08000985
 800093c:	20000304 	.word	0x20000304
 8000940:	0800a4e8 	.word	0x0800a4e8
 8000944:	080009cd 	.word	0x080009cd
 8000948:	20000308 	.word	0x20000308
 800094c:	0800a50c 	.word	0x0800a50c
 8000950:	080009f5 	.word	0x080009f5
 8000954:	2000030c 	.word	0x2000030c

08000958 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t lastTime = osKernelGetTickCount();
 8000960:	f006 f9e8 	bl	8006d34 <osKernelGetTickCount>
 8000964:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += 500U;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800096c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f006 fa87 	bl	8006e82 <osDelayUntil>
	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000974:	2102      	movs	r1, #2
 8000976:	4802      	ldr	r0, [pc, #8]	; (8000980 <StartDefaultTask+0x28>)
 8000978:	f002 ff2d 	bl	80037d6 <HAL_GPIO_TogglePin>
	lastTime += 500U;
 800097c:	e7f3      	b.n	8000966 <StartDefaultTask+0xe>
 800097e:	bf00      	nop
 8000980:	40020800 	.word	0x40020800

08000984 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t lastTime = osKernelGetTickCount();
 800098c:	f006 f9d2 	bl	8006d34 <osKernelGetTickCount>
 8000990:	6178      	str	r0, [r7, #20]

	CanInit(0,0);
 8000992:	2100      	movs	r1, #0
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff fed9 	bl	800074c <CanInit>
  /* Infinite loop */
  for(;;)
  {
	  uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <StartTask02+0x44>)
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a4:	e883 0003 	stmia.w	r3, {r0, r1}

	lastTime += 500U;;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009ae:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 80009b0:	6978      	ldr	r0, [r7, #20]
 80009b2:	f006 fa66 	bl	8006e82 <osDelayUntil>

	//for(int i=0;i<8;i++){canbuf[i]=0;}
	sendCan(0, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext
 80009b6:	f107 010c 	add.w	r1, r7, #12
 80009ba:	2300      	movs	r3, #0
 80009bc:	2208      	movs	r2, #8
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ff14 	bl	80007ec <sendCan>
  {
 80009c4:	e7e9      	b.n	800099a <StartTask02+0x16>
 80009c6:	bf00      	nop
 80009c8:	0800a430 	.word	0x0800a430

080009cc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime = osKernelGetTickCount();
 80009d4:	f006 f9ae 	bl	8006d34 <osKernelGetTickCount>
 80009d8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)//485 task for nuri motor must change uart port
  {
	lastTime += 500U;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009e0:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f006 fa4d 	bl	8006e82 <osDelayUntil>
	  //HAL_UART_Transmit(&huart3, "hihi\n", sizeof("hihi\n"), 10);
	printf("hihihi\n");
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <StartTask03+0x24>)
 80009ea:	f009 f993 	bl	8009d14 <puts>
  {
 80009ee:	e7f4      	b.n	80009da <StartTask03+0xe>
 80009f0:	0800a438 	.word	0x0800a438

080009f4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	uint32_t lastTime = osKernelGetTickCount();
 80009fc:	f006 f99a 	bl	8006d34 <osKernelGetTickCount>
 8000a00:	60f8      	str	r0, [r7, #12]

	static int temp = 0;
	////////////////////////////////
	ws2812Init(24);
 8000a02:	2018      	movs	r0, #24
 8000a04:	f7ff fd66 	bl	80004d4 <ws2812Init>
	//HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);

  /* Infinite loop */
  for(;;)
  {
		lastTime += 500U;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a0e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f006 fa36 	bl	8006e82 <osDelayUntil>

		temp++;
 8000a16:	4be5      	ldr	r3, [pc, #916]	; (8000dac <StartTask04+0x3b8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4ae3      	ldr	r2, [pc, #908]	; (8000dac <StartTask04+0x3b8>)
 8000a1e:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8000a20:	4be2      	ldr	r3, [pc, #904]	; (8000dac <StartTask04+0x3b8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	2b07      	cmp	r3, #7
 8000a28:	f200 81b7 	bhi.w	8000d9a <StartTask04+0x3a6>
 8000a2c:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <StartTask04+0x40>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a55 	.word	0x08000a55
 8000a38:	08000abd 	.word	0x08000abd
 8000a3c:	08000b25 	.word	0x08000b25
 8000a40:	08000b8d 	.word	0x08000b8d
 8000a44:	08000bf5 	.word	0x08000bf5
 8000a48:	08000c5d 	.word	0x08000c5d
 8000a4c:	08000cc5 	.word	0x08000cc5
 8000a50:	08000d2d 	.word	0x08000d2d
			case 1:
				printf("case1\n");
 8000a54:	48d6      	ldr	r0, [pc, #856]	; (8000db0 <StartTask04+0x3bc>)
 8000a56:	f009 f95d 	bl	8009d14 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fd49 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000a66:	2300      	movs	r3, #0
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fd43 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000a72:	2300      	movs	r3, #0
 8000a74:	2200      	movs	r2, #0
 8000a76:	2101      	movs	r1, #1
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f7ff fd3d 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2003      	movs	r0, #3
 8000a86:	f7ff fd37 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2004      	movs	r0, #4
 8000a92:	f7ff fd31 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000a96:	2300      	movs	r3, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f7ff fd2b 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f7ff fd25 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2007      	movs	r0, #7
 8000ab6:	f7ff fd1f 	bl	80004f8 <ws2812SetColor>
				break;
 8000aba:	e16e      	b.n	8000d9a <StartTask04+0x3a6>
			case 2:
				printf("case2\n");
 8000abc:	48bd      	ldr	r0, [pc, #756]	; (8000db4 <StartTask04+0x3c0>)
 8000abe:	f009 f929 	bl	8009d14 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2007      	movs	r0, #7
 8000aca:	f7ff fd15 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fd0f 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000ada:	2300      	movs	r3, #0
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fd09 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fd03 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000af2:	2300      	movs	r3, #0
 8000af4:	2201      	movs	r2, #1
 8000af6:	2100      	movs	r1, #0
 8000af8:	2003      	movs	r0, #3
 8000afa:	f7ff fcfd 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000afe:	2300      	movs	r3, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	2101      	movs	r1, #1
 8000b04:	2004      	movs	r0, #4
 8000b06:	f7ff fcf7 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2005      	movs	r0, #5
 8000b12:	f7ff fcf1 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000b16:	2300      	movs	r3, #0
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2006      	movs	r0, #6
 8000b1e:	f7ff fceb 	bl	80004f8 <ws2812SetColor>
				break;
 8000b22:	e13a      	b.n	8000d9a <StartTask04+0x3a6>
			case 3:
				printf("case3\n");
 8000b24:	48a4      	ldr	r0, [pc, #656]	; (8000db8 <StartTask04+0x3c4>)
 8000b26:	f009 f8f5 	bl	8009d14 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2006      	movs	r0, #6
 8000b32:	f7ff fce1 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000b36:	2300      	movs	r3, #0
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	f7ff fcdb 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fcd5 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fccf 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fcc9 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f7ff fcc3 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000b72:	2301      	movs	r3, #1
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f7ff fcbd 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2201      	movs	r2, #1
 8000b82:	2100      	movs	r1, #0
 8000b84:	2005      	movs	r0, #5
 8000b86:	f7ff fcb7 	bl	80004f8 <ws2812SetColor>
				break;
 8000b8a:	e106      	b.n	8000d9a <StartTask04+0x3a6>
			case 4:
				printf("case4\n");
 8000b8c:	488b      	ldr	r0, [pc, #556]	; (8000dbc <StartTask04+0x3c8>)
 8000b8e:	f009 f8c1 	bl	8009d14 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000b92:	2301      	movs	r3, #1
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2005      	movs	r0, #5
 8000b9a:	f7ff fcad 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2006      	movs	r0, #6
 8000ba6:	f7ff fca7 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000baa:	2300      	movs	r3, #0
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	f7ff fca1 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fc9b 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fc95 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fc8f 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000bda:	2301      	movs	r3, #1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff fc89 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000be6:	2300      	movs	r3, #0
 8000be8:	2201      	movs	r2, #1
 8000bea:	2100      	movs	r1, #0
 8000bec:	2004      	movs	r0, #4
 8000bee:	f7ff fc83 	bl	80004f8 <ws2812SetColor>
				break;
 8000bf2:	e0d2      	b.n	8000d9a <StartTask04+0x3a6>
			case 5:
				printf("case5\n");
 8000bf4:	4872      	ldr	r0, [pc, #456]	; (8000dc0 <StartTask04+0x3cc>)
 8000bf6:	f009 f88d 	bl	8009d14 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2004      	movs	r0, #4
 8000c02:	f7ff fc79 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000c06:	2300      	movs	r3, #0
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f7ff fc73 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000c12:	2300      	movs	r3, #0
 8000c14:	2200      	movs	r2, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f7ff fc6d 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2007      	movs	r0, #7
 8000c26:	f7ff fc67 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff fc61 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000c36:	2300      	movs	r3, #0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fc5b 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000c42:	2301      	movs	r3, #1
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fc55 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2201      	movs	r2, #1
 8000c52:	2100      	movs	r1, #0
 8000c54:	2003      	movs	r0, #3
 8000c56:	f7ff fc4f 	bl	80004f8 <ws2812SetColor>
				break;
 8000c5a:	e09e      	b.n	8000d9a <StartTask04+0x3a6>
			case 6:
				printf("case6\n");
 8000c5c:	4859      	ldr	r0, [pc, #356]	; (8000dc4 <StartTask04+0x3d0>)
 8000c5e:	f009 f859 	bl	8009d14 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000c62:	2301      	movs	r3, #1
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f7ff fc45 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2201      	movs	r2, #1
 8000c72:	2100      	movs	r1, #0
 8000c74:	2004      	movs	r0, #4
 8000c76:	f7ff fc3f 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2005      	movs	r0, #5
 8000c82:	f7ff fc39 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000c86:	2301      	movs	r3, #1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f7ff fc33 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000c92:	2300      	movs	r3, #0
 8000c94:	2201      	movs	r2, #1
 8000c96:	2100      	movs	r1, #0
 8000c98:	2007      	movs	r0, #7
 8000c9a:	f7ff fc2d 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fc27 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000caa:	2301      	movs	r3, #1
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fc21 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff fc1b 	bl	80004f8 <ws2812SetColor>
				break;
 8000cc2:	e06a      	b.n	8000d9a <StartTask04+0x3a6>
			case 7:
				printf("case7\n");
 8000cc4:	4840      	ldr	r0, [pc, #256]	; (8000dc8 <StartTask04+0x3d4>)
 8000cc6:	f009 f825 	bl	8009d14 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000cca:	2301      	movs	r3, #1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fc11 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff fc0b 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff fc05 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2005      	movs	r0, #5
 8000cf6:	f7ff fbff 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2006      	movs	r0, #6
 8000d02:	f7ff fbf9 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000d06:	2300      	movs	r3, #0
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2007      	movs	r0, #7
 8000d0e:	f7ff fbf3 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000d12:	2301      	movs	r3, #1
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fbed 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2201      	movs	r2, #1
 8000d22:	2100      	movs	r1, #0
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fbe7 	bl	80004f8 <ws2812SetColor>
				break;
 8000d2a:	e036      	b.n	8000d9a <StartTask04+0x3a6>
			case 8:
				printf("case8\n");
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <StartTask04+0x3d8>)
 8000d2e:	f008 fff1 	bl	8009d14 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000d32:	2301      	movs	r3, #1
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fbdd 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2201      	movs	r2, #1
 8000d42:	2100      	movs	r1, #0
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff fbd7 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2003      	movs	r0, #3
 8000d52:	f7ff fbd1 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000d56:	2301      	movs	r3, #1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f7ff fbcb 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000d62:	2300      	movs	r3, #0
 8000d64:	2201      	movs	r2, #1
 8000d66:	2100      	movs	r1, #0
 8000d68:	2005      	movs	r0, #5
 8000d6a:	f7ff fbc5 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2101      	movs	r1, #1
 8000d74:	2006      	movs	r0, #6
 8000d76:	f7ff fbbf 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2007      	movs	r0, #7
 8000d82:	f7ff fbb9 	bl	80004f8 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000d86:	2300      	movs	r3, #0
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fbb3 	bl	80004f8 <ws2812SetColor>
				temp=1;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <StartTask04+0x3b8>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
				break;
 8000d98:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fc00 	bl	80005a4 <ws2812AllColor>
		printf("task4\n");
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <StartTask04+0x3dc>)
 8000da6:	f008 ffb5 	bl	8009d14 <puts>
  {
 8000daa:	e62d      	b.n	8000a08 <StartTask04+0x14>
 8000dac:	20000310 	.word	0x20000310
 8000db0:	0800a440 	.word	0x0800a440
 8000db4:	0800a448 	.word	0x0800a448
 8000db8:	0800a450 	.word	0x0800a450
 8000dbc:	0800a458 	.word	0x0800a458
 8000dc0:	0800a460 	.word	0x0800a460
 8000dc4:	0800a468 	.word	0x0800a468
 8000dc8:	0800a470 	.word	0x0800a470
 8000dcc:	0800a478 	.word	0x0800a478
 8000dd0:	0800a480 	.word	0x0800a480

08000dd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <MX_GPIO_Init+0x158>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|testled_Pin
 8000e76:	2200      	movs	r2, #0
 8000e78:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8000e7c:	482c      	ldr	r0, [pc, #176]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e7e:	f002 fc91 	bl	80037a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f244 0110 	movw	r1, #16400	; 0x4010
 8000e88:	482a      	ldr	r0, [pc, #168]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000e8a:	f002 fc8b 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2104      	movs	r1, #4
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000e94:	f002 fc86 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PCPin
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|testled_Pin
 8000e98:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8000e9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481f      	ldr	r0, [pc, #124]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000eb2:	f002 fadb 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4819      	ldr	r0, [pc, #100]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000eca:	f002 facf 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ece:	23f0      	movs	r3, #240	; 0xf0
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4816      	ldr	r0, [pc, #88]	; (8000f3c <MX_GPIO_Init+0x168>)
 8000ee4:	f002 fac2 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8000ee8:	f244 0310 	movw	r3, #16400	; 0x4010
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000f02:	f002 fab3 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f06:	2304      	movs	r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000f1e:	f002 faa5 	bl	800346c <HAL_GPIO_Init>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40020000 	.word	0x40020000

08000f40 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f46:	4a19      	ldr	r2, [pc, #100]	; (8000fac <MX_I2C1_SMBUS_Init+0x6c>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <MX_I2C1_SMBUS_Init+0x70>)
 8000f4e:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f84:	f003 f8cc 	bl	8004120 <HAL_SMBUS_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 f909 	bl	80011a4 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_I2C1_SMBUS_Init+0x68>)
 8000f94:	f003 f97a 	bl	800428c <HAL_SMBUS_EnableAlert_IT>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 8000f9e:	f000 f901 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000314 	.word	0x20000314
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	000186a0 	.word	0x000186a0

08000fb4 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_SMBUS_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_SMBUS_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <HAL_SMBUS_MspInit+0x88>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_SMBUS_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ff2:	23e0      	movs	r3, #224	; 0xe0
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001002:	2304      	movs	r3, #4
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_SMBUS_MspInit+0x8c>)
 800100e:	f002 fa2d 	bl	800346c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_SMBUS_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_SMBUS_MspInit+0x88>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_SMBUS_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40005400 	.word	0x40005400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020400 	.word	0x40020400

08001044 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, (uint16_t)len, 100);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	b29a      	uxth	r2, r3
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <_write+0x24>)
 800105a:	f004 fe16 	bl	8005c8a <HAL_UART_Transmit>
	return (len);
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000052c 	.word	0x2000052c

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fe3e 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f81a 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f7ff feac 	bl	8000dd4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800107c:	f7ff fae0 	bl	8000640 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001080:	f000 fd5c 	bl	8001b3c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001084:	f000 fd30 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001088:	f000 f9f0 	bl	800146c <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 800108c:	f7ff ff58 	bl	8000f40 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8001090:	f7ff fc06 	bl	80008a0 <MX_DMA_Init>
  MX_TIM8_Init();
 8001094:	f000 fb36 	bl	8001704 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001098:	f000 fab8 	bl	800160c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800109c:	f005 fe00 	bl	8006ca0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80010a0:	f7ff fc1e 	bl	80008e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010a4:	f005 fe20 	bl	8006ce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <main+0x3c>
	...

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fd1f 	bl	8009afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <SystemClock_Config+0xcc>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <SystemClock_Config+0xcc>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xd0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xd0>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800111c:	2306      	movs	r3, #6
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001120:	23a8      	movs	r3, #168	; 0xa8
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fb6b 	bl	800380c <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800113c:	f000 f832 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2105      	movs	r1, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fdcc 	bl	8003cfc <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800116a:	f000 f81b 	bl	80011a4 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001192:	f000 fdcf 	bl	8001d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40001000 	.word	0x40001000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_MspInit+0x54>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_MspInit+0x54>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_MspInit+0x54>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_MspInit+0x54>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_MspInit+0x54>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_MspInit+0x54>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	210f      	movs	r1, #15
 80011f2:	f06f 0001 	mvn.w	r0, #1
 80011f6:	f001 fd0d 	bl	8002c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	2036      	movs	r0, #54	; 0x36
 800121e:	f001 fcf9 	bl	8002c14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001222:	2036      	movs	r0, #54	; 0x36
 8001224:	f001 fd12 	bl	8002c4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_InitTick+0xa4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_InitTick+0xa4>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_InitTick+0xa4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001244:	f107 0210 	add.w	r2, r7, #16
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f002 ff34 	bl	80040bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001254:	f002 ff0a 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8001258:	4603      	mov	r3, r0
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <HAL_InitTick+0xa8>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9b      	lsrs	r3, r3, #18
 8001268:	3b01      	subs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_InitTick+0xac>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_InitTick+0xb0>)
 8001270:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_InitTick+0xac>)
 8001274:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001278:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_InitTick+0xac>)
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_InitTick+0xac>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_InitTick+0xac>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_InitTick+0xac>)
 800128e:	f003 f81d 	bl	80042cc <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <HAL_InitTick+0xac>)
 800129a:	f003 f867 	bl	800436c <HAL_TIM_Base_Start_IT>
 800129e:	4603      	mov	r3, r0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	20000364 	.word	0x20000364
 80012b8:	40001000 	.word	0x40001000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <CAN1_RX0_IRQHandler+0x10>)
 80012ee:	f001 f9a9 	bl	8002644 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002d8 	.word	0x200002d8

080012fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USART2_IRQHandler+0x10>)
 8001302:	f004 fd55 	bl	8005db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200004e8 	.word	0x200004e8

08001310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM6_DAC_IRQHandler+0x10>)
 8001316:	f003 fb14 	bl	8004942 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000364 	.word	0x20000364

08001324 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream2_IRQHandler+0x10>)
 800132a:	f001 fe35 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000488 	.word	0x20000488

08001338 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
	}

return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f008 fa46 	bl	800989c <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	200003ac 	.word	0x200003ac
 8001444:	20004f98 	.word	0x20004f98

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b09a      	sub	sp, #104	; 0x68
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2220      	movs	r2, #32
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 fb23 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b8:	4b52      	ldr	r3, [pc, #328]	; (8001604 <MX_TIM1_Init+0x198>)
 80014ba:	4a53      	ldr	r2, [pc, #332]	; (8001608 <MX_TIM1_Init+0x19c>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014be:	4b51      	ldr	r3, [pc, #324]	; (8001604 <MX_TIM1_Init+0x198>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <MX_TIM1_Init+0x198>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ca:	4b4e      	ldr	r3, [pc, #312]	; (8001604 <MX_TIM1_Init+0x198>)
 80014cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <MX_TIM1_Init+0x198>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <MX_TIM1_Init+0x198>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <MX_TIM1_Init+0x198>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e4:	4847      	ldr	r0, [pc, #284]	; (8001604 <MX_TIM1_Init+0x198>)
 80014e6:	f002 fef1 	bl	80042cc <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80014f0:	f7ff fe58 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014fe:	4619      	mov	r1, r3
 8001500:	4840      	ldr	r0, [pc, #256]	; (8001604 <MX_TIM1_Init+0x198>)
 8001502:	f003 fc85 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800150c:	f7ff fe4a 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001510:	483c      	ldr	r0, [pc, #240]	; (8001604 <MX_TIM1_Init+0x198>)
 8001512:	f002 ff9b 	bl	800444c <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800151c:	f7ff fe42 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001520:	4838      	ldr	r0, [pc, #224]	; (8001604 <MX_TIM1_Init+0x198>)
 8001522:	f003 f9b5 	bl	8004890 <HAL_TIM_IC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800152c:	f7ff fe3a 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001538:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800153c:	4619      	mov	r1, r3
 800153e:	4831      	ldr	r0, [pc, #196]	; (8001604 <MX_TIM1_Init+0x198>)
 8001540:	f004 fa74 	bl	8005a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800154a:	f7ff fe2b 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154e:	2360      	movs	r3, #96	; 0x60
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800156e:	2200      	movs	r2, #0
 8001570:	4619      	mov	r1, r3
 8001572:	4824      	ldr	r0, [pc, #144]	; (8001604 <MX_TIM1_Init+0x198>)
 8001574:	f003 fb8a 	bl	8004c8c <HAL_TIM_PWM_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800157e:	f7ff fe11 	bl	80011a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	2204      	movs	r2, #4
 8001598:	4619      	mov	r1, r3
 800159a:	481a      	ldr	r0, [pc, #104]	; (8001604 <MX_TIM1_Init+0x198>)
 800159c:	f003 fad9 	bl	8004b52 <HAL_TIM_IC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80015a6:	f7ff fdfd 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	2208      	movs	r2, #8
 80015b0:	4619      	mov	r1, r3
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <MX_TIM1_Init+0x198>)
 80015b4:	f003 facd 	bl	8004b52 <HAL_TIM_IC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 80015be:	f7ff fdf1 	bl	80011a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <MX_TIM1_Init+0x198>)
 80015e6:	f004 fa9d 	bl	8005b24 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80015f0:	f7ff fdd8 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <MX_TIM1_Init+0x198>)
 80015f6:	f000 fa13 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 80015fa:	bf00      	nop
 80015fc:	3768      	adds	r7, #104	; 0x68
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200003b0 	.word	0x200003b0
 8001608:	40010000 	.word	0x40010000

0800160c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800162a:	463b      	mov	r3, r7
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <MX_TIM3_Init+0xf0>)
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <MX_TIM3_Init+0xf4>)
 800163a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <MX_TIM3_Init+0xf0>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <MX_TIM3_Init+0xf0>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <MX_TIM3_Init+0xf0>)
 800164a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <MX_TIM3_Init+0xf0>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <MX_TIM3_Init+0xf0>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165c:	4827      	ldr	r0, [pc, #156]	; (80016fc <MX_TIM3_Init+0xf0>)
 800165e:	f002 fe35 	bl	80042cc <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001668:	f7ff fd9c 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	4619      	mov	r1, r3
 8001678:	4820      	ldr	r0, [pc, #128]	; (80016fc <MX_TIM3_Init+0xf0>)
 800167a:	f003 fbc9 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001684:	f7ff fd8e 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001688:	481c      	ldr	r0, [pc, #112]	; (80016fc <MX_TIM3_Init+0xf0>)
 800168a:	f003 f901 	bl	8004890 <HAL_TIM_IC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001694:	f7ff fd86 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4619      	mov	r1, r3
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <MX_TIM3_Init+0xf0>)
 80016a8:	f004 f9c0 	bl	8005a2c <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80016b2:	f7ff fd77 	bl	80011a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ba:	2301      	movs	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	2208      	movs	r2, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_TIM3_Init+0xf0>)
 80016ce:	f003 fa40 	bl	8004b52 <HAL_TIM_IC_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80016d8:	f7ff fd64 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	220c      	movs	r2, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <MX_TIM3_Init+0xf0>)
 80016e4:	f003 fa35 	bl	8004b52 <HAL_TIM_IC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80016ee:	f7ff fd59 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200003f8 	.word	0x200003f8
 8001700:	40000400 	.word	0x40000400

08001704 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f008 f9de 	bl	8009afe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001742:	4b50      	ldr	r3, [pc, #320]	; (8001884 <MX_TIM8_Init+0x180>)
 8001744:	4a50      	ldr	r2, [pc, #320]	; (8001888 <MX_TIM8_Init+0x184>)
 8001746:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001748:	4b4e      	ldr	r3, [pc, #312]	; (8001884 <MX_TIM8_Init+0x180>)
 800174a:	2201      	movs	r2, #1
 800174c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <MX_TIM8_Init+0x180>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <MX_TIM8_Init+0x180>)
 8001756:	2268      	movs	r2, #104	; 0x68
 8001758:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <MX_TIM8_Init+0x180>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001760:	4b48      	ldr	r3, [pc, #288]	; (8001884 <MX_TIM8_Init+0x180>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <MX_TIM8_Init+0x180>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800176c:	4845      	ldr	r0, [pc, #276]	; (8001884 <MX_TIM8_Init+0x180>)
 800176e:	f002 fdad 	bl	80042cc <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001778:	f7ff fd14 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001782:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001786:	4619      	mov	r1, r3
 8001788:	483e      	ldr	r0, [pc, #248]	; (8001884 <MX_TIM8_Init+0x180>)
 800178a:	f003 fb41 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001794:	f7ff fd06 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001798:	483a      	ldr	r0, [pc, #232]	; (8001884 <MX_TIM8_Init+0x180>)
 800179a:	f002 fe57 	bl	800444c <HAL_TIM_PWM_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80017a4:	f7ff fcfe 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b4:	4619      	mov	r1, r3
 80017b6:	4833      	ldr	r0, [pc, #204]	; (8001884 <MX_TIM8_Init+0x180>)
 80017b8:	f004 f938 	bl	8005a2c <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80017c2:	f7ff fcef 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c6:	2360      	movs	r3, #96	; 0x60
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	4826      	ldr	r0, [pc, #152]	; (8001884 <MX_TIM8_Init+0x180>)
 80017ec:	f003 fa4e 	bl	8004c8c <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80017f6:	f7ff fcd5 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	2204      	movs	r2, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4820      	ldr	r0, [pc, #128]	; (8001884 <MX_TIM8_Init+0x180>)
 8001804:	f003 fa42 	bl	8004c8c <HAL_TIM_PWM_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800180e:	f7ff fcc9 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	2208      	movs	r2, #8
 8001818:	4619      	mov	r1, r3
 800181a:	481a      	ldr	r0, [pc, #104]	; (8001884 <MX_TIM8_Init+0x180>)
 800181c:	f003 fa36 	bl	8004c8c <HAL_TIM_PWM_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001826:	f7ff fcbd 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	220c      	movs	r2, #12
 8001830:	4619      	mov	r1, r3
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <MX_TIM8_Init+0x180>)
 8001834:	f003 fa2a 	bl	8004c8c <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800183e:	f7ff fcb1 	bl	80011a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM8_Init+0x180>)
 8001866:	f004 f95d 	bl	8005b24 <HAL_TIMEx_ConfigBreakDeadTime>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001870:	f7ff fc98 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM8_Init+0x180>)
 8001876:	f000 f8d3 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 800187a:	bf00      	nop
 800187c:	3758      	adds	r7, #88	; 0x58
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000440 	.word	0x20000440
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <HAL_TIM_Base_MspInit+0x174>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12d      	bne.n	800190a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a53      	ldr	r2, [pc, #332]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	4841      	ldr	r0, [pc, #260]	; (8001a08 <HAL_TIM_Base_MspInit+0x17c>)
 8001904:	f001 fdb2 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001908:	e075      	b.n	80019f6 <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a3f      	ldr	r2, [pc, #252]	; (8001a0c <HAL_TIM_Base_MspInit+0x180>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d12c      	bne.n	800196e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800194c:	2303      	movs	r3, #3
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800195c:	2302      	movs	r3, #2
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	482a      	ldr	r0, [pc, #168]	; (8001a10 <HAL_TIM_Base_MspInit+0x184>)
 8001968:	f001 fd80 	bl	800346c <HAL_GPIO_Init>
}
 800196c:	e043      	b.n	80019f6 <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM8)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_TIM_Base_MspInit+0x188>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d13e      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6453      	str	r3, [r2, #68]	; 0x44
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_TIM_Base_MspInit+0x178>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_TIM_Base_MspInit+0x190>)
 8001998:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 800199c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80019a0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80019da:	480f      	ldr	r0, [pc, #60]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019dc:	f001 f944 	bl	8002c68 <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_TIM_Base_MspInit+0x15e>
      Error_Handler();
 80019e6:	f7ff fbdd 	bl	80011a4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_TIM_Base_MspInit+0x18c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40010400 	.word	0x40010400
 8001a18:	20000488 	.word	0x20000488
 8001a1c:	40026440 	.word	0x40026440

08001a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11f      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4818      	ldr	r0, [pc, #96]	; (8001adc <HAL_TIM_MspPostInit+0xbc>)
 8001a7c:	f001 fcf6 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a80:	e023      	b.n	8001aca <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_TIM_MspPostInit+0xc0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d11e      	bne.n	8001aca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001aa8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001aba:	2303      	movs	r3, #3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <HAL_TIM_MspPostInit+0xc4>)
 8001ac6:	f001 fcd1 	bl	800346c <HAL_GPIO_Init>
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40010400 	.word	0x40010400
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_USART2_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f004 f866 	bl	8005bf0 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f7ff fb3b 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200004e8 	.word	0x200004e8
 8001b38:	40004400 	.word	0x40004400

08001b3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART3_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b74:	f004 f83c 	bl	8005bf0 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f7ff fb11 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000052c 	.word	0x2000052c
 8001b8c:	40004800 	.word	0x40004800

08001b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <HAL_UART_MspInit+0xf8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d134      	bne.n	8001c1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bea:	230c      	movs	r3, #12
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4822      	ldr	r0, [pc, #136]	; (8001c90 <HAL_UART_MspInit+0x100>)
 8001c06:	f001 fc31 	bl	800346c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	2026      	movs	r0, #38	; 0x26
 8001c10:	f001 f800 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c14:	2026      	movs	r0, #38	; 0x26
 8001c16:	f001 f819 	bl	8002c4c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c1a:	e031      	b.n	8001c80 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_UART_MspInit+0x104>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12c      	bne.n	8001c80 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_UART_MspInit+0xfc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c70:	2307      	movs	r3, #7
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4807      	ldr	r0, [pc, #28]	; (8001c98 <HAL_UART_MspInit+0x108>)
 8001c7c:	f001 fbf6 	bl	800346c <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40004800 	.word	0x40004800
 8001c98:	40020400 	.word	0x40020400

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc6:	f7ff fbbf 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f007 fee3 	bl	8009a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff f9cd 	bl	800106c <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ce0:	0800a5c4 	.word	0x0800a5c4
  ldr r2, =_sbss
 8001ce4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ce8:	20004f94 	.word	0x20004f94

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_Init+0x40>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_Init+0x40>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_Init+0x40>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 ff70 	bl	8002bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f7ff fa72 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fa44 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000570 	.word	0x20000570

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000570 	.word	0x20000570

08001d74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0ed      	b.n	8001f62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fc8a 	bl	80006ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da8:	f7ff ffd8 	bl	8001d5c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dae:	e012      	b.n	8001dd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db0:	f7ff ffd4 	bl	8001d5c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d90b      	bls.n	8001dd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2205      	movs	r2, #5
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0c5      	b.n	8001f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0e5      	beq.n	8001db0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0202 	bic.w	r2, r2, #2
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7ff ffb2 	bl	8001d5c <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dfa:	e012      	b.n	8001e22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dfc:	f7ff ffae 	bl	8001d5c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b0a      	cmp	r3, #10
 8001e08:	d90b      	bls.n	8001e22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e09f      	b.n	8001f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e5      	bne.n	8001dfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e1b      	ldrb	r3, [r3, #24]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7e5b      	ldrb	r3, [r3, #25]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e007      	b.n	8001e84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e9b      	ldrb	r3, [r3, #26]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d108      	bne.n	8001e9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e007      	b.n	8001eae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0220 	bic.w	r2, r2, #32
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7edb      	ldrb	r3, [r3, #27]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0210 	bic.w	r2, r2, #16
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0210 	orr.w	r2, r2, #16
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d108      	bne.n	8001ef2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e007      	b.n	8001f02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0208 	bic.w	r2, r2, #8
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7f5b      	ldrb	r3, [r3, #29]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d108      	bne.n	8001f1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0204 	orr.w	r2, r2, #4
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e007      	b.n	8001f2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	ea42 0103 	orr.w	r1, r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d003      	beq.n	8001f92 <HAL_CAN_ConfigFilter+0x26>
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	f040 80be 	bne.w	800210e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f94:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d123      	bne.n	800203c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002016:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3248      	adds	r2, #72	; 0x48
 800201c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002030:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	3348      	adds	r3, #72	; 0x48
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d122      	bne.n	800208a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	431a      	orrs	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002064:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3248      	adds	r2, #72	; 0x48
 800206a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800207e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002080:	6979      	ldr	r1, [r7, #20]
 8002082:	3348      	adds	r3, #72	; 0x48
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	401a      	ands	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020a4:	e007      	b.n	80020b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	401a      	ands	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020d0:	e007      	b.n	80020e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	431a      	orrs	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002100:	f023 0201 	bic.w	r2, r3, #1
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e006      	b.n	800211c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40006400 	.word	0x40006400

0800212c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d12e      	bne.n	800219e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002158:	f7ff fe00 	bl	8001d5c <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800215e:	e012      	b.n	8002186 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002160:	f7ff fdfc 	bl	8001d5c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b0a      	cmp	r3, #10
 800216c:	d90b      	bls.n	8002186 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2205      	movs	r2, #5
 800217e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e012      	b.n	80021ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e5      	bne.n	8002160 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e006      	b.n	80021ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d003      	beq.n	80021e0 <HAL_CAN_AddTxMessage+0x2c>
 80021d8:	7ffb      	ldrb	r3, [r7, #31]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	f040 80b8 	bne.w	8002350 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80a0 	beq.w	8002340 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	0e1b      	lsrs	r3, r3, #24
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d907      	bls.n	8002220 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e09e      	b.n	800235e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002220:	2201      	movs	r2, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	409a      	lsls	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800223c:	68f9      	ldr	r1, [r7, #12]
 800223e:	6809      	ldr	r1, [r1, #0]
 8002240:	431a      	orrs	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3318      	adds	r3, #24
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	440b      	add	r3, r1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e00f      	b.n	800226e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002258:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225e:	68f9      	ldr	r1, [r7, #12]
 8002260:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002262:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3318      	adds	r3, #24
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	440b      	add	r3, r1
 800226c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3318      	adds	r3, #24
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	440b      	add	r3, r1
 800227e:	3304      	adds	r3, #4
 8002280:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	7d1b      	ldrb	r3, [r3, #20]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d111      	bne.n	80022ae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3318      	adds	r3, #24
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	3304      	adds	r3, #4
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3318      	adds	r3, #24
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	440b      	add	r3, r1
 80022aa:	3304      	adds	r3, #4
 80022ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3307      	adds	r3, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	061a      	lsls	r2, r3, #24
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3306      	adds	r3, #6
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3305      	adds	r3, #5
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	3204      	adds	r2, #4
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	4610      	mov	r0, r2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	6811      	ldr	r1, [r2, #0]
 80022d6:	ea43 0200 	orr.w	r2, r3, r0
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	440b      	add	r3, r1
 80022e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3303      	adds	r3, #3
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	061a      	lsls	r2, r3, #24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3302      	adds	r3, #2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3301      	adds	r3, #1
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4313      	orrs	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	4610      	mov	r0, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6811      	ldr	r1, [r2, #0]
 800230c:	ea43 0200 	orr.w	r2, r3, r0
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	440b      	add	r3, r1
 8002316:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800231a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3318      	adds	r3, #24
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4413      	add	r3, r2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3318      	adds	r3, #24
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	440b      	add	r3, r1
 800233a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e00e      	b.n	800235e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e006      	b.n	800235e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d002      	beq.n	800238a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d11d      	bne.n	80023c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3301      	adds	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d003      	beq.n	80023f8 <HAL_CAN_GetRxMessage+0x24>
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f040 80f3 	bne.w	80025de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0e7      	b.n	80025ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0d8      	b.n	80025ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	331b      	adds	r3, #27
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4413      	add	r3, r2
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0204 	and.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10c      	bne.n	8002472 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	331b      	adds	r3, #27
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0d5b      	lsrs	r3, r3, #21
 8002468:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e00b      	b.n	800248a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	331b      	adds	r3, #27
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	331b      	adds	r3, #27
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0202 	and.w	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	331b      	adds	r3, #27
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	331b      	adds	r3, #27
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	331b      	adds	r3, #27
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	3304      	adds	r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	4413      	add	r3, r2
 8002508:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0a1a      	lsrs	r2, r3, #8
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0c1a      	lsrs	r2, r3, #16
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	3302      	adds	r3, #2
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0e1a      	lsrs	r2, r3, #24
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	3303      	adds	r3, #3
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	4413      	add	r3, r2
 8002556:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3304      	adds	r3, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0a1a      	lsrs	r2, r3, #8
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	3305      	adds	r3, #5
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	4413      	add	r3, r2
 8002588:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0c1a      	lsrs	r2, r3, #16
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3306      	adds	r3, #6
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e1a      	lsrs	r2, r3, #24
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	3307      	adds	r3, #7
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d108      	bne.n	80025ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	e007      	b.n	80025da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e006      	b.n	80025ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
  }
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002608:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d002      	beq.n	8002616 <HAL_CAN_ActivateNotification+0x1e>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d109      	bne.n	800262a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6959      	ldr	r1, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e006      	b.n	8002638 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d07c      	beq.n	8002784 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f983 	bl	80029b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80026ac:	e016      	b.n	80026dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
 80026c0:	e00c      	b.n	80026dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	e002      	b.n	80026dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f989 	bl	80029ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d024      	beq.n	8002730 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f963 	bl	80029c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002700:	e016      	b.n	8002730 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
 8002714:	e00c      	b.n	8002730 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e002      	b.n	8002730 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f969 	bl	8002a02 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d024      	beq.n	8002784 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002742:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f943 	bl	80029da <HAL_CAN_TxMailbox2CompleteCallback>
 8002754:	e016      	b.n	8002784 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	e00c      	b.n	8002784 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	e002      	b.n	8002784 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f949 	bl	8002a16 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2210      	movs	r2, #16
 80027a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2208      	movs	r2, #8
 80027c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f930 	bl	8002a2a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe f83c 	bl	8000860 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00c      	beq.n	800280c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2210      	movs	r2, #16
 800280a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2208      	movs	r2, #8
 8002826:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f912 	bl	8002a52 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8f9 	bl	8002a3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2210      	movs	r2, #16
 8002866:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f8fc 	bl	8002a66 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2208      	movs	r2, #8
 8002888:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8f5 	bl	8002a7a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07b      	beq.n	8002992 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d072      	beq.n	800298a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d043      	beq.n	800298a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002908:	2b00      	cmp	r3, #0
 800290a:	d03e      	beq.n	800298a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002912:	2b60      	cmp	r3, #96	; 0x60
 8002914:	d02b      	beq.n	800296e <HAL_CAN_IRQHandler+0x32a>
 8002916:	2b60      	cmp	r3, #96	; 0x60
 8002918:	d82e      	bhi.n	8002978 <HAL_CAN_IRQHandler+0x334>
 800291a:	2b50      	cmp	r3, #80	; 0x50
 800291c:	d022      	beq.n	8002964 <HAL_CAN_IRQHandler+0x320>
 800291e:	2b50      	cmp	r3, #80	; 0x50
 8002920:	d82a      	bhi.n	8002978 <HAL_CAN_IRQHandler+0x334>
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d019      	beq.n	800295a <HAL_CAN_IRQHandler+0x316>
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d826      	bhi.n	8002978 <HAL_CAN_IRQHandler+0x334>
 800292a:	2b30      	cmp	r3, #48	; 0x30
 800292c:	d010      	beq.n	8002950 <HAL_CAN_IRQHandler+0x30c>
 800292e:	2b30      	cmp	r3, #48	; 0x30
 8002930:	d822      	bhi.n	8002978 <HAL_CAN_IRQHandler+0x334>
 8002932:	2b10      	cmp	r3, #16
 8002934:	d002      	beq.n	800293c <HAL_CAN_IRQHandler+0x2f8>
 8002936:	2b20      	cmp	r3, #32
 8002938:	d005      	beq.n	8002946 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800293a:	e01d      	b.n	8002978 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	f043 0308 	orr.w	r3, r3, #8
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002944:	e019      	b.n	800297a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	f043 0310 	orr.w	r3, r3, #16
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800294e:	e014      	b.n	800297a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	f043 0320 	orr.w	r3, r3, #32
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002958:	e00f      	b.n	800297a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002962:	e00a      	b.n	800297a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800296c:	e005      	b.n	800297a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002976:	e000      	b.n	800297a <HAL_CAN_IRQHandler+0x336>
            break;
 8002978:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002988:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2204      	movs	r2, #4
 8002990:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f872 	bl	8002a8e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ff4c 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c26:	f7ff ff61 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	6978      	ldr	r0, [r7, #20]
 8002c32:	f7ff ffb1 	bl	8002b98 <NVIC_EncodePriority>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff80 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff54 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff f872 	bl	8001d5c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e099      	b.n	8002db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff f859 	bl	8001d5c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d908      	bls.n	8002cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e078      	b.n	8002db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e8      	bne.n	8002ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_DMA_Init+0x158>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d117      	bne.n	8002d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fb01 	bl	8003374 <DMA_CheckFifoParam>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d86:	2301      	movs	r3, #1
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fab8 	bl	8003308 <DMA_CalcBaseAndBitshift>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	223f      	movs	r2, #63	; 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	f010803f 	.word	0xf010803f

08002dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Start_IT+0x26>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e040      	b.n	8002e6c <HAL_DMA_Start_IT+0xa8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12f      	bne.n	8002e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fa4a 	bl	80032ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	223f      	movs	r2, #63	; 0x3f
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0216 	orr.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e005      	b.n	8002e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e82:	f7fe ff6b 	bl	8001d5c <HAL_GetTick>
 8002e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d008      	beq.n	8002ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e052      	b.n	8002f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0216 	bic.w	r2, r2, #22
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_DMA_Abort+0x62>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef6:	e013      	b.n	8002f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef8:	f7fe ff30 	bl	8001d5c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d90c      	bls.n	8002f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e015      	b.n	8002f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e4      	bne.n	8002ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	223f      	movs	r2, #63	; 0x3f
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00c      	b.n	8002f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b8e      	ldr	r3, [pc, #568]	; (80031e0 <HAL_DMA_IRQHandler+0x248>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8e      	ldr	r2, [pc, #568]	; (80031e4 <HAL_DMA_IRQHandler+0x24c>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	2210      	movs	r2, #16
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	2210      	movs	r2, #16
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e01f      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e016      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2220      	movs	r2, #32
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 808f 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8087 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	2220      	movs	r2, #32
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d136      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_IRQHandler+0x1da>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	223f      	movs	r2, #63	; 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
        }
        return;
 80031ae:	e079      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e02c      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000
 80031e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e01e      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	2b00      	cmp	r3, #0
 800323e:	d032      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d307      	bcc.n	8003280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_DMA_IRQHandler+0x2cc>
 800327e:	e000      	b.n	8003282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032a4:	bf00      	nop
    }
  }
}
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d108      	bne.n	80032ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ea:	e007      	b.n	80032fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b10      	subs	r3, #16
 8003318:	4a14      	ldr	r2, [pc, #80]	; (800336c <DMA_CalcBaseAndBitshift+0x64>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003322:	4a13      	ldr	r2, [pc, #76]	; (8003370 <DMA_CalcBaseAndBitshift+0x68>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d909      	bls.n	800334a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	659a      	str	r2, [r3, #88]	; 0x58
 8003348:	e007      	b.n	800335a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	0800a548 	.word	0x0800a548

08003374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11f      	bne.n	80033ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d856      	bhi.n	8003442 <DMA_CheckFifoParam+0xce>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <DMA_CheckFifoParam+0x28>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033bf 	.word	0x080033bf
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	08003443 	.word	0x08003443
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d046      	beq.n	8003446 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e043      	b.n	8003446 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c6:	d140      	bne.n	800344a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033cc:	e03d      	b.n	800344a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d6:	d121      	bne.n	800341c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d837      	bhi.n	800344e <DMA_CheckFifoParam+0xda>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <DMA_CheckFifoParam+0x70>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	080033fb 	.word	0x080033fb
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800340d 	.word	0x0800340d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e030      	b.n	800345c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d025      	beq.n	8003452 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340a:	e022      	b.n	8003452 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003414:	d11f      	bne.n	8003456 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800341a:	e01c      	b.n	8003456 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d903      	bls.n	800342a <DMA_CheckFifoParam+0xb6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003428:	e018      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
      break;
 800342e:	e015      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e00b      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003442:	bf00      	nop
 8003444:	e00a      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e008      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
 800344c:	e006      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;   
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
    }
  } 
  
  return status; 
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e16b      	b.n	8003760 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f040 815a 	bne.w	800375a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d005      	beq.n	80034be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d130      	bne.n	8003520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f4:	2201      	movs	r2, #1
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 0201 	and.w	r2, r3, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b03      	cmp	r3, #3
 800352a:	d017      	beq.n	800355c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d123      	bne.n	80035b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80b4 	beq.w	800375a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b60      	ldr	r3, [pc, #384]	; (8003778 <HAL_GPIO_Init+0x30c>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4a5f      	ldr	r2, [pc, #380]	; (8003778 <HAL_GPIO_Init+0x30c>)
 80035fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003600:	6453      	str	r3, [r2, #68]	; 0x44
 8003602:	4b5d      	ldr	r3, [pc, #372]	; (8003778 <HAL_GPIO_Init+0x30c>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360e:	4a5b      	ldr	r2, [pc, #364]	; (800377c <HAL_GPIO_Init+0x310>)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	220f      	movs	r2, #15
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_GPIO_Init+0x314>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02b      	beq.n	8003692 <HAL_GPIO_Init+0x226>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a51      	ldr	r2, [pc, #324]	; (8003784 <HAL_GPIO_Init+0x318>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d025      	beq.n	800368e <HAL_GPIO_Init+0x222>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a50      	ldr	r2, [pc, #320]	; (8003788 <HAL_GPIO_Init+0x31c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <HAL_GPIO_Init+0x21e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a4f      	ldr	r2, [pc, #316]	; (800378c <HAL_GPIO_Init+0x320>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x21a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a4e      	ldr	r2, [pc, #312]	; (8003790 <HAL_GPIO_Init+0x324>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x216>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4d      	ldr	r2, [pc, #308]	; (8003794 <HAL_GPIO_Init+0x328>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x212>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4c      	ldr	r2, [pc, #304]	; (8003798 <HAL_GPIO_Init+0x32c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x20e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4b      	ldr	r2, [pc, #300]	; (800379c <HAL_GPIO_Init+0x330>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x20a>
 8003672:	2307      	movs	r3, #7
 8003674:	e00e      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003676:	2308      	movs	r3, #8
 8003678:	e00c      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800367a:	2306      	movs	r3, #6
 800367c:	e00a      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800367e:	2305      	movs	r3, #5
 8003680:	e008      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003682:	2304      	movs	r3, #4
 8003684:	e006      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x228>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x228>
 8003692:	2300      	movs	r3, #0
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a4:	4935      	ldr	r1, [pc, #212]	; (800377c <HAL_GPIO_Init+0x310>)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_GPIO_Init+0x334>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036d6:	4a32      	ldr	r2, [pc, #200]	; (80037a0 <HAL_GPIO_Init+0x334>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036dc:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_GPIO_Init+0x334>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_GPIO_Init+0x334>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_GPIO_Init+0x334>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_GPIO_Init+0x334>)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_GPIO_Init+0x334>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003754:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <HAL_GPIO_Init+0x334>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f67f ae90 	bls.w	8003488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40013800 	.word	0x40013800
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40021000 	.word	0x40021000
 8003794:	40021400 	.word	0x40021400
 8003798:	40021800 	.word	0x40021800
 800379c:	40021c00 	.word	0x40021c00
 80037a0:	40013c00 	.word	0x40013c00

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c0:	e003      	b.n	80037ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	041a      	lsls	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4013      	ands	r3, r2
 80037ee:	041a      	lsls	r2, r3, #16
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	400b      	ands	r3, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e267      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382a:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00c      	beq.n	8003850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b85      	ldr	r3, [pc, #532]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800383e:	2b08      	cmp	r3, #8
 8003840:	d112      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4b82      	ldr	r3, [pc, #520]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384e:	d10b      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	4b7e      	ldr	r3, [pc, #504]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05b      	beq.n	8003914 <HAL_RCC_OscConfig+0x108>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d157      	bne.n	8003914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e242      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x74>
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x98>
 800388a:	4b70      	ldr	r3, [pc, #448]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6f      	ldr	r2, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6d      	ldr	r3, [pc, #436]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6c      	ldr	r2, [pc, #432]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 80038a4:	4b69      	ldr	r3, [pc, #420]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a68      	ldr	r2, [pc, #416]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a65      	ldr	r2, [pc, #404]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fa4a 	bl	8001d5c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fe fa46 	bl	8001d5c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e207      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xc0>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fa36 	bl	8001d5c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fa32 	bl	8001d5c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1f3      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0xe8>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003922:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1c7      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4937      	ldr	r1, [pc, #220]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_OscConfig+0x244>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe f9eb 	bl	8001d5c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398a:	f7fe f9e7 	bl	8001d5c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1a8      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4925      	ldr	r1, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x244>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe f9ca 	bl	8001d5c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe f9c6 	bl	8001d5c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e187      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fe f9aa 	bl	8001d5c <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fe f9a6 	bl	8001d5c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e167      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x200>
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fe f993 	bl	8001d5c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00e      	b.n	8003a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe f98f 	bl	8001d5c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d907      	bls.n	8003a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e150      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ea      	bne.n	8003a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8097 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b7a      	ldr	r3, [pc, #488]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b77      	ldr	r3, [pc, #476]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b74      	ldr	r3, [pc, #464]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe f94f 	bl	8001d5c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe f94b 	bl	8001d5c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e10c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2ea>
 8003ae8:	4b64      	ldr	r3, [pc, #400]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a63      	ldr	r2, [pc, #396]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x30c>
 8003afe:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a5e      	ldr	r2, [pc, #376]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003b18:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a57      	ldr	r2, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b55      	ldr	r3, [pc, #340]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fe f910 	bl	8001d5c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fe f90c 	bl	8001d5c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0cb      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x334>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fe f8fa 	bl	8001d5c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fe f8f6 	bl	8001d5c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b5      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a1 	beq.w	8003cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003baa:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d05c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d141      	bne.n	8003c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe f8ca 	bl	8001d5c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe f8c6 	bl	8001d5c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e087      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	491b      	ldr	r1, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe f89f 	bl	8001d5c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe f89b 	bl	8001d5c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e05c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x416>
 8003c40:	e054      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe f888 	bl	8001d5c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe f884 	bl	8001d5c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e045      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x444>
 8003c6e:	e03d      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e038      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x4ec>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d121      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d11a      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0cc      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d90c      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d50:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	494d      	ldr	r1, [pc, #308]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d119      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e067      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4934      	ldr	r1, [pc, #208]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fd ffb6 	bl	8001d5c <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fd ffb2 	bl	8001d5c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e04f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d20c      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490e      	ldr	r1, [pc, #56]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f821 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490a      	ldr	r1, [pc, #40]	; (8003ebc <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd f9b0 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800a530 	.word	0x0800a530
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b090      	sub	sp, #64	; 0x40
 8003ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed8:	2300      	movs	r3, #0
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x40>
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	f200 80a1 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003efa:	e09b      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_GetSysClockFreq+0x184>)
 8003efe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f00:	e09b      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f02:	4b53      	ldr	r3, [pc, #332]	; (8004050 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f06:	e098      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f08:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f12:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d028      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	627a      	str	r2, [r7, #36]	; 0x24
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f30:	2100      	movs	r1, #0
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f34:	fb03 f201 	mul.w	r2, r3, r1
 8003f38:	2300      	movs	r3, #0
 8003f3a:	fb00 f303 	mul.w	r3, r0, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a43      	ldr	r2, [pc, #268]	; (8004050 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f42:	fba0 1202 	umull	r1, r2, r0, r2
 8003f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f48:	460a      	mov	r2, r1
 8003f4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4e:	4413      	add	r3, r2
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	2200      	movs	r2, #0
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	61fa      	str	r2, [r7, #28]
 8003f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f62:	f7fc f935 	bl	80001d0 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6e:	e053      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f70:	4b35      	ldr	r3, [pc, #212]	; (8004048 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	2200      	movs	r2, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	617a      	str	r2, [r7, #20]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f82:	f04f 0b00 	mov.w	fp, #0
 8003f86:	4652      	mov	r2, sl
 8003f88:	465b      	mov	r3, fp
 8003f8a:	f04f 0000 	mov.w	r0, #0
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	0159      	lsls	r1, r3, #5
 8003f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f98:	0150      	lsls	r0, r2, #5
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003fa2:	eb63 090b 	sbc.w	r9, r3, fp
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fba:	ebb2 0408 	subs.w	r4, r2, r8
 8003fbe:	eb63 0509 	sbc.w	r5, r3, r9
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	00eb      	lsls	r3, r5, #3
 8003fcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd0:	00e2      	lsls	r2, r4, #3
 8003fd2:	4614      	mov	r4, r2
 8003fd4:	461d      	mov	r5, r3
 8003fd6:	eb14 030a 	adds.w	r3, r4, sl
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	eb45 030b 	adc.w	r3, r5, fp
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	028b      	lsls	r3, r1, #10
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	028a      	lsls	r2, r1, #10
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	2200      	movs	r2, #0
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	60fa      	str	r2, [r7, #12]
 8004008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800400c:	f7fc f8e0 	bl	80001d0 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_GetSysClockFreq+0x180>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetSysClockFreq+0x184>)
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800403c:	4618      	mov	r0, r3
 800403e:	3740      	adds	r7, #64	; 0x40
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400
 8004050:	00b71b00 	.word	0x00b71b00

08004054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_RCC_GetHCLKFreq+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000000 	.word	0x20000000

0800406c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004070:	f7ff fff0 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0a9b      	lsrs	r3, r3, #10
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	0800a540 	.word	0x0800a540

08004094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004098:	f7ff ffdc 	bl	8004054 <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0b5b      	lsrs	r3, r3, #13
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	0800a540 	.word	0x0800a540

080040bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	220f      	movs	r2, #15
 80040ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0203 	and.w	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCC_GetClockConfig+0x60>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0207 	and.w	r2, r3, #7
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40023c00 	.word	0x40023c00

08004120 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0a1      	b.n	800427e <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fc ff30 	bl	8000fb4 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff ff7e 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 8004170:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4a44      	ldr	r2, [pc, #272]	; (8004288 <HAL_SMBUS_Init+0x168>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80041b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	0052      	lsls	r2, r2, #1
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	fbb1 f1f2 	udiv	r1, r1, r2
 80041c2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80041c6:	400a      	ands	r2, r1
 80041c8:	2a00      	cmp	r2, #0
 80041ca:	d006      	beq.n	80041da <HAL_SMBUS_Init+0xba>
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6852      	ldr	r2, [r2, #4]
 80041d0:	0052      	lsls	r2, r2, #1
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80041d8:	e000      	b.n	80041dc <HAL_SMBUS_Init+0xbc>
 80041da:	2204      	movs	r2, #4
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	6809      	ldr	r1, [r1, #0]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6911      	ldr	r1, [r2, #16]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68d2      	ldr	r2, [r2, #12]
 8004222:	4311      	orrs	r1, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	431bde83 	.word	0x431bde83

0800428c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a2:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 80042ac:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e041      	b.n	8004362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd faca 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f000 ff54 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d001      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e04e      	b.n	8004422 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <HAL_TIM_Base_Start_IT+0xc4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d01d      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <HAL_TIM_Base_Start_IT+0xc8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <HAL_TIM_Base_Start_IT+0xcc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_TIM_Base_Start_IT+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_TIM_Base_Start_IT+0xd4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_TIM_Base_Start_IT+0xd8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x80>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d111      	bne.n	8004410 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d010      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	e007      	b.n	8004420 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40010400 	.word	0x40010400
 8004444:	40014000 	.word	0x40014000
 8004448:	40001800 	.word	0x40001800

0800444c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e041      	b.n	80044e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f839 	bl	80044ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fe94 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e022      	b.n	8004572 <HAL_TIM_PWM_Start_DMA+0x72>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d109      	bne.n	8004546 <HAL_TIM_PWM_Start_DMA+0x46>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e015      	b.n	8004572 <HAL_TIM_PWM_Start_DMA+0x72>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start_DMA+0x60>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e008      	b.n	8004572 <HAL_TIM_PWM_Start_DMA+0x72>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
 8004578:	e171      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_TIM_PWM_Start_DMA+0x94>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e022      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0xda>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d109      	bne.n	80045ae <HAL_TIM_PWM_Start_DMA+0xae>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e015      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0xda>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d109      	bne.n	80045c8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e008      	b.n	80045da <HAL_TIM_PWM_Start_DMA+0xda>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d024      	beq.n	8004628 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start_DMA+0xee>
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e137      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_PWM_Start_DMA+0xfe>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045fc:	e016      	b.n	800462c <HAL_TIM_PWM_Start_DMA+0x12c>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d104      	bne.n	800460e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800460c:	e00e      	b.n	800462c <HAL_TIM_PWM_Start_DMA+0x12c>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d104      	bne.n	800461e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800461c:	e006      	b.n	800462c <HAL_TIM_PWM_Start_DMA+0x12c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004626:	e001      	b.n	800462c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e118      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	f200 80ae 	bhi.w	8004790 <HAL_TIM_PWM_Start_DMA+0x290>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004671 	.word	0x08004671
 8004640:	08004791 	.word	0x08004791
 8004644:	08004791 	.word	0x08004791
 8004648:	08004791 	.word	0x08004791
 800464c:	080046b9 	.word	0x080046b9
 8004650:	08004791 	.word	0x08004791
 8004654:	08004791 	.word	0x08004791
 8004658:	08004791 	.word	0x08004791
 800465c:	08004701 	.word	0x08004701
 8004660:	08004791 	.word	0x08004791
 8004664:	08004791 	.word	0x08004791
 8004668:	08004791 	.word	0x08004791
 800466c:	08004749 	.word	0x08004749
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	4a7c      	ldr	r2, [pc, #496]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	4a7b      	ldr	r2, [pc, #492]	; (800486c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	4a7a      	ldr	r2, [pc, #488]	; (8004870 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004686:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3334      	adds	r3, #52	; 0x34
 8004694:	461a      	mov	r2, r3
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	f7fe fb94 	bl	8002dc4 <HAL_DMA_Start_IT>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e0db      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b4:	60da      	str	r2, [r3, #12]
      break;
 80046b6:	e06e      	b.n	8004796 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	4a6a      	ldr	r2, [pc, #424]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x368>)
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	4a69      	ldr	r2, [pc, #420]	; (800486c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	4a68      	ldr	r2, [pc, #416]	; (8004870 <HAL_TIM_PWM_Start_DMA+0x370>)
 80046ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3338      	adds	r3, #56	; 0x38
 80046dc:	461a      	mov	r2, r3
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	f7fe fb70 	bl	8002dc4 <HAL_DMA_Start_IT>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0b7      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046fc:	60da      	str	r2, [r3, #12]
      break;
 80046fe:	e04a      	b.n	8004796 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	4a58      	ldr	r2, [pc, #352]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a57      	ldr	r2, [pc, #348]	; (800486c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4a56      	ldr	r2, [pc, #344]	; (8004870 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	333c      	adds	r3, #60	; 0x3c
 8004724:	461a      	mov	r2, r3
 8004726:	887b      	ldrh	r3, [r7, #2]
 8004728:	f7fe fb4c 	bl	8002dc4 <HAL_DMA_Start_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e093      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004744:	60da      	str	r2, [r3, #12]
      break;
 8004746:	e026      	b.n	8004796 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	4a46      	ldr	r2, [pc, #280]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x368>)
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a45      	ldr	r2, [pc, #276]	; (800486c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	4a44      	ldr	r2, [pc, #272]	; (8004870 <HAL_TIM_PWM_Start_DMA+0x370>)
 800475e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3340      	adds	r3, #64	; 0x40
 800476c:	461a      	mov	r2, r3
 800476e:	887b      	ldrh	r3, [r7, #2]
 8004770:	f7fe fb28 	bl	8002dc4 <HAL_DMA_Start_IT>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06f      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800478c:	60da      	str	r2, [r3, #12]
      break;
 800478e:	e002      	b.n	8004796 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
      break;
 8004794:	bf00      	nop
  }

  if (status == HAL_OK)
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d15f      	bne.n	800485c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f91b 	bl	80059e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a31      	ldr	r2, [pc, #196]	; (8004874 <HAL_TIM_PWM_Start_DMA+0x374>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIM_PWM_Start_DMA+0x2be>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <HAL_TIM_PWM_Start_DMA+0x378>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <HAL_TIM_PWM_Start_DMA+0x374>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d022      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d01d      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a22      	ldr	r2, [pc, #136]	; (800487c <HAL_TIM_PWM_Start_DMA+0x37c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <HAL_TIM_PWM_Start_DMA+0x380>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIM_PWM_Start_DMA+0x388>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_TIM_PWM_Start_DMA+0x328>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b06      	cmp	r3, #6
 8004838:	d010      	beq.n	800485c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e007      	b.n	800485c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800485c:	7dfb      	ldrb	r3, [r7, #23]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	080050a9 	.word	0x080050a9
 800486c:	08005151 	.word	0x08005151
 8004870:	08005017 	.word	0x08005017
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40001800 	.word	0x40001800

08004890 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e041      	b.n	8004926 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f839 	bl	800492e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 fc72 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d122      	bne.n	800499e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d11b      	bne.n	800499e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0202 	mvn.w	r2, #2
 800496e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fb14 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 800498a:	e005      	b.n	8004998 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fb06 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fb17 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d122      	bne.n	80049f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d11b      	bne.n	80049f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0204 	mvn.w	r2, #4
 80049c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 faea 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 80049de:	e005      	b.n	80049ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fadc 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 faed 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d122      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d11b      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0208 	mvn.w	r2, #8
 8004a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fac0 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 8004a32:	e005      	b.n	8004a40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fab2 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fac3 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d122      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d11b      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0210 	mvn.w	r2, #16
 8004a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fa96 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 8004a86:	e005      	b.n	8004a94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa88 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa99 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0201 	mvn.w	r2, #1
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc fb5d 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d10e      	bne.n	8004af2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d107      	bne.n	8004af2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 f875 	bl	8005bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d10e      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d107      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa68 	bl	8004fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d10e      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0220 	mvn.w	r2, #32
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 f83f 	bl	8005bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e088      	b.n	8004c82 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f000 fd63 	bl	8005658 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 020c 	bic.w	r2, r2, #12
 8004ba0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6999      	ldr	r1, [r3, #24]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	619a      	str	r2, [r3, #24]
 8004bb4:	e060      	b.n	8004c78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d11c      	bne.n	8004bf6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f000 fde7 	bl	800579e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bde:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	619a      	str	r2, [r3, #24]
 8004bf4:	e040      	b.n	8004c78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f000 fe34 	bl	8005878 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 020c 	bic.w	r2, r2, #12
 8004c1e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69d9      	ldr	r1, [r3, #28]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	61da      	str	r2, [r3, #28]
 8004c32:	e021      	b.n	8004c78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d11c      	bne.n	8004c74 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f000 fe51 	bl	80058f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
 8004c72:	e001      	b.n	8004c78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e0ae      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	f200 809f 	bhi.w	8004df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cf5 	.word	0x08004cf5
 8004cc4:	08004df9 	.word	0x08004df9
 8004cc8:	08004df9 	.word	0x08004df9
 8004ccc:	08004df9 	.word	0x08004df9
 8004cd0:	08004d35 	.word	0x08004d35
 8004cd4:	08004df9 	.word	0x08004df9
 8004cd8:	08004df9 	.word	0x08004df9
 8004cdc:	08004df9 	.word	0x08004df9
 8004ce0:	08004d77 	.word	0x08004d77
 8004ce4:	08004df9 	.word	0x08004df9
 8004ce8:	08004df9 	.word	0x08004df9
 8004cec:	08004df9 	.word	0x08004df9
 8004cf0:	08004db7 	.word	0x08004db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fafc 	bl	80052f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0208 	orr.w	r2, r2, #8
 8004d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0204 	bic.w	r2, r2, #4
 8004d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6999      	ldr	r1, [r3, #24]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	619a      	str	r2, [r3, #24]
      break;
 8004d32:	e064      	b.n	8004dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fb4c 	bl	80053d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
      break;
 8004d74:	e043      	b.n	8004dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fba1 	bl	80054c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0208 	orr.w	r2, r2, #8
 8004d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0204 	bic.w	r2, r2, #4
 8004da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	61da      	str	r2, [r3, #28]
      break;
 8004db4:	e023      	b.n	8004dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fbf5 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	021a      	lsls	r2, r3, #8
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	61da      	str	r2, [r3, #28]
      break;
 8004df6:	e002      	b.n	8004dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_ConfigClockSource+0x1c>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e0b4      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x186>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e64:	d03e      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6a:	f200 8087 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	f000 8086 	beq.w	8004f82 <HAL_TIM_ConfigClockSource+0x172>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7a:	d87f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b70      	cmp	r3, #112	; 0x70
 8004e7e:	d01a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d87b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b60      	cmp	r3, #96	; 0x60
 8004e86:	d050      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x11a>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d877      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b50      	cmp	r3, #80	; 0x50
 8004e8e:	d03c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0xfa>
 8004e90:	2b50      	cmp	r3, #80	; 0x50
 8004e92:	d873      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d058      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x13a>
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d86f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b30      	cmp	r3, #48	; 0x30
 8004e9e:	d064      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	2b30      	cmp	r3, #48	; 0x30
 8004ea2:	d86b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d060      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d867      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05c      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15a>
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d05a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	e062      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f000 fd6b 	bl	80059a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	609a      	str	r2, [r3, #8]
      break;
 8004ee2:	e04f      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f000 fd54 	bl	80059a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f06:	609a      	str	r2, [r3, #8]
      break;
 8004f08:	e03c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 fc12 	bl	8005740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2150      	movs	r1, #80	; 0x50
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd21 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f28:	e02c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 fc6e 	bl	8005818 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2160      	movs	r1, #96	; 0x60
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd11 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f48:	e01c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fbf2 	bl	8005740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2140      	movs	r1, #64	; 0x40
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd01 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f68:	e00c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f000 fcf8 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f7a:	e003      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e000      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d107      	bne.n	800503e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	e02a      	b.n	8005094 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	429a      	cmp	r2, r3
 8005046:	d107      	bne.n	8005058 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2202      	movs	r2, #2
 800504c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005056:	e01d      	b.n	8005094 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d107      	bne.n	8005072 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2204      	movs	r2, #4
 8005066:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	e010      	b.n	8005094 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2208      	movs	r2, #8
 8005080:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800508a:	e003      	b.n	8005094 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff ffb4 	bl	8005002 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d10b      	bne.n	80050d8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d136      	bne.n	800513c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d6:	e031      	b.n	800513c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d10b      	bne.n	80050fa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2202      	movs	r2, #2
 80050e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d125      	bne.n	800513c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	e020      	b.n	800513c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d10b      	bne.n	800511c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2204      	movs	r2, #4
 8005108:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d114      	bne.n	800513c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511a:	e00f      	b.n	800513c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d10a      	bne.n	800513c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2208      	movs	r2, #8
 800512a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff ff42 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d103      	bne.n	8005170 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	771a      	strb	r2, [r3, #28]
 800516e:	e019      	b.n	80051a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d103      	bne.n	8005182 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2202      	movs	r2, #2
 800517e:	771a      	strb	r2, [r3, #28]
 8005180:	e010      	b.n	80051a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d103      	bne.n	8005194 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2204      	movs	r2, #4
 8005190:	771a      	strb	r2, [r3, #28]
 8005192:	e007      	b.n	80051a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d102      	bne.n	80051a4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2208      	movs	r2, #8
 80051a2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff ff18 	bl	8004fda <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <TIM_Base_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d00f      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3a      	ldr	r2, [pc, #232]	; (80052dc <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <TIM_Base_SetConfig+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d02b      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d027      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d023      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01f      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01b      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <TIM_Base_SetConfig+0x124>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d017      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <TIM_Base_SetConfig+0x128>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <TIM_Base_SetConfig+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00f      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <TIM_Base_SetConfig+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00b      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a25      	ldr	r2, [pc, #148]	; (80052ec <TIM_Base_SetConfig+0x134>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <TIM_Base_SetConfig+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <TIM_Base_SetConfig+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d108      	bne.n	800527c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <TIM_Base_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <TIM_Base_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40010400 	.word	0x40010400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	40001800 	.word	0x40001800
 80052f0:	40001c00 	.word	0x40001c00
 80052f4:	40002000 	.word	0x40002000

080052f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 0302 	bic.w	r3, r3, #2
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <TIM_OC1_SetConfig+0xd8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_OC1_SetConfig+0x64>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <TIM_OC1_SetConfig+0xdc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10c      	bne.n	8005376 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0308 	bic.w	r3, r3, #8
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <TIM_OC1_SetConfig+0xd8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC1_SetConfig+0x8e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <TIM_OC1_SetConfig+0xdc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d111      	bne.n	80053aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400

080053d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0210 	bic.w	r2, r3, #16
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0320 	bic.w	r3, r3, #32
 8005422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a22      	ldr	r2, [pc, #136]	; (80054bc <TIM_OC2_SetConfig+0xe4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_OC2_SetConfig+0x68>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <TIM_OC2_SetConfig+0xe8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10d      	bne.n	800545c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a17      	ldr	r2, [pc, #92]	; (80054bc <TIM_OC2_SetConfig+0xe4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC2_SetConfig+0x94>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <TIM_OC2_SetConfig+0xe8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d113      	bne.n	8005494 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400

080054c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0303 	bic.w	r3, r3, #3
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800550c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <TIM_OC3_SetConfig+0xe0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC3_SetConfig+0x66>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a20      	ldr	r2, [pc, #128]	; (80055a8 <TIM_OC3_SetConfig+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d10d      	bne.n	8005546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <TIM_OC3_SetConfig+0xe0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_OC3_SetConfig+0x92>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <TIM_OC3_SetConfig+0xe4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d113      	bne.n	800557e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40010400 	.word	0x40010400

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a12      	ldr	r2, [pc, #72]	; (8005650 <TIM_OC4_SetConfig+0xa4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC4_SetConfig+0x68>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a11      	ldr	r2, [pc, #68]	; (8005654 <TIM_OC4_SetConfig+0xa8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a28      	ldr	r2, [pc, #160]	; (8005724 <TIM_TI1_SetConfig+0xcc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01b      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568c:	d017      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a25      	ldr	r2, [pc, #148]	; (8005728 <TIM_TI1_SetConfig+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a24      	ldr	r2, [pc, #144]	; (800572c <TIM_TI1_SetConfig+0xd4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a23      	ldr	r2, [pc, #140]	; (8005730 <TIM_TI1_SetConfig+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a22      	ldr	r2, [pc, #136]	; (8005734 <TIM_TI1_SetConfig+0xdc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a21      	ldr	r2, [pc, #132]	; (8005738 <TIM_TI1_SetConfig+0xe0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a20      	ldr	r2, [pc, #128]	; (800573c <TIM_TI1_SetConfig+0xe4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <TIM_TI1_SetConfig+0x6a>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <TIM_TI1_SetConfig+0x6c>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e003      	b.n	80056e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f023 030a 	bic.w	r3, r3, #10
 80056fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f003 030a 	and.w	r3, r3, #10
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 030a 	bic.w	r3, r3, #10
 800577c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f023 0210 	bic.w	r2, r3, #16
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f023 0210 	bic.w	r2, r3, #16
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005842:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	031b      	lsls	r3, r3, #12
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005854:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	621a      	str	r2, [r3, #32]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800592e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	031b      	lsls	r3, r3, #12
 8005934:	b29b      	uxth	r3, r3
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005942:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	031b      	lsls	r3, r3, #12
 8005948:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	f043 0307 	orr.w	r3, r3, #7
 800598c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2201      	movs	r2, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	401a      	ands	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	fa01 f303 	lsl.w	r3, r1, r3
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e05a      	b.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d01d      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10c      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40010400 	.word	0x40010400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40001800 	.word	0x40001800

08005b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e03d      	b.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e03f      	b.n	8005c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb ffba 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2224      	movs	r2, #36	; 0x24
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fd7b 	bl	8006730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b08a      	sub	sp, #40	; 0x28
 8005c8e:	af02      	add	r7, sp, #8
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d17c      	bne.n	8005da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_UART_Transmit+0x2c>
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e075      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Transmit+0x3e>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e06e      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2221      	movs	r2, #33	; 0x21
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cde:	f7fc f83d 	bl	8001d5c <HAL_GetTick>
 8005ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	88fa      	ldrh	r2, [r7, #6]
 8005cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d108      	bne.n	8005d0c <HAL_UART_Transmit+0x82>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e003      	b.n	8005d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d1c:	e02a      	b.n	8005d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	; 0x80
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 faf9 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e036      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	3302      	adds	r3, #2
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e007      	b.n	8005d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	3301      	adds	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1cf      	bne.n	8005d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2140      	movs	r1, #64	; 0x40
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fac9 	bl	8006320 <UART_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b0ba      	sub	sp, #232	; 0xe8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10f      	bne.n	8005e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_UART_IRQHandler+0x66>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fbd3 	bl	80065ba <UART_Receive_IT>
      return;
 8005e14:	e256      	b.n	80062c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80de 	beq.w	8005fdc <HAL_UART_IRQHandler+0x22c>
 8005e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80d1 	beq.w	8005fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <HAL_UART_IRQHandler+0xae>
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <HAL_UART_IRQHandler+0xd2>
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f043 0202 	orr.w	r2, r3, #2
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xf6>
 8005e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0204 	orr.w	r2, r3, #4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x126>
 8005eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d105      	bne.n	8005eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f043 0208 	orr.w	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 81ed 	beq.w	80062ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <HAL_UART_IRQHandler+0x14e>
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fb5e 	bl	80065ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <HAL_UART_IRQHandler+0x17a>
 8005f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d04f      	beq.n	8005fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa66 	bl	80063fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d141      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3314      	adds	r3, #20
 8005f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1d9      	bne.n	8005f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d013      	beq.n	8005fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	4a7d      	ldr	r2, [pc, #500]	; (800618c <HAL_UART_IRQHandler+0x3dc>)
 8005f98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc ffd8 	bl	8002f54 <HAL_DMA_Abort_IT>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00e      	b.n	8005fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f99a 	bl	80062f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00a      	b.n	8005fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f996 	bl	80062f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e006      	b.n	8005fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f992 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fd6:	e170      	b.n	80062ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	bf00      	nop
    return;
 8005fda:	e16e      	b.n	80062ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	f040 814a 	bne.w	800627a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8143 	beq.w	800627a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 813c 	beq.w	800627a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	f040 80b4 	bne.w	8006190 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8140 	beq.w	80062be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006046:	429a      	cmp	r2, r3
 8006048:	f080 8139 	bcs.w	80062be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	f000 8088 	beq.w	8006172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800607c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800608e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800609a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1d9      	bne.n	8006062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e1      	bne.n	80060ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3314      	adds	r3, #20
 80060f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800610e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800611c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e3      	bne.n	80060ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006142:	f023 0310 	bic.w	r3, r3, #16
 8006146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006154:	65ba      	str	r2, [r7, #88]	; 0x58
 8006156:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800615a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e3      	bne.n	8006130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	4618      	mov	r0, r3
 800616e:	f7fc fe81 	bl	8002e74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800617a:	b29b      	uxth	r3, r3
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	b29b      	uxth	r3, r3
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8c0 	bl	8006308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006188:	e099      	b.n	80062be <HAL_UART_IRQHandler+0x50e>
 800618a:	bf00      	nop
 800618c:	080064c3 	.word	0x080064c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006198:	b29b      	uxth	r3, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 808b 	beq.w	80062c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8086 	beq.w	80062c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061da:	647a      	str	r2, [r7, #68]	; 0x44
 80061dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e3      	bne.n	80061b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3314      	adds	r3, #20
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	623b      	str	r3, [r7, #32]
   return(result);
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3314      	adds	r3, #20
 800620e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006212:	633a      	str	r2, [r7, #48]	; 0x30
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e3      	bne.n	80061ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	60fb      	str	r3, [r7, #12]
   return(result);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0310 	bic.w	r3, r3, #16
 800624a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006258:	61fa      	str	r2, [r7, #28]
 800625a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	617b      	str	r3, [r7, #20]
   return(result);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e3      	bne.n	8006234 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800626c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f848 	bl	8006308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006278:	e023      	b.n	80062c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <HAL_UART_IRQHandler+0x4ea>
 8006286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f929 	bl	80064ea <UART_Transmit_IT>
    return;
 8006298:	e014      	b.n	80062c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00e      	beq.n	80062c4 <HAL_UART_IRQHandler+0x514>
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f969 	bl	800658a <UART_EndTransmit_IT>
    return;
 80062b8:	e004      	b.n	80062c4 <HAL_UART_IRQHandler+0x514>
    return;
 80062ba:	bf00      	nop
 80062bc:	e002      	b.n	80062c4 <HAL_UART_IRQHandler+0x514>
      return;
 80062be:	bf00      	nop
 80062c0:	e000      	b.n	80062c4 <HAL_UART_IRQHandler+0x514>
      return;
 80062c2:	bf00      	nop
  }
}
 80062c4:	37e8      	adds	r7, #232	; 0xe8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop

080062cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b090      	sub	sp, #64	; 0x40
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	e050      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d04c      	beq.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800633a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
 8006340:	f7fb fd0c 	bl	8001d5c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634c:	429a      	cmp	r2, r3
 800634e:	d241      	bcs.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006370:	637a      	str	r2, [r7, #52]	; 0x34
 8006372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e5      	bne.n	8006350 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	613b      	str	r3, [r7, #16]
   return(result);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3314      	adds	r3, #20
 80063a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a4:	623a      	str	r2, [r7, #32]
 80063a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e00f      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d09f      	beq.n	8006332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3740      	adds	r7, #64	; 0x40
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b095      	sub	sp, #84	; 0x54
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800641a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006424:	643a      	str	r2, [r7, #64]	; 0x40
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800642a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e5      	bne.n	8006404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3314      	adds	r3, #20
 800643e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	61fb      	str	r3, [r7, #28]
   return(result);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800645e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	2b01      	cmp	r3, #1
 8006472:	d119      	bne.n	80064a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	60bb      	str	r3, [r7, #8]
   return(result);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	647b      	str	r3, [r7, #68]	; 0x44
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006494:	61ba      	str	r2, [r7, #24]
 8006496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	613b      	str	r3, [r7, #16]
   return(result);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e5      	bne.n	8006474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064b6:	bf00      	nop
 80064b8:	3754      	adds	r7, #84	; 0x54
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff09 	bl	80062f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b21      	cmp	r3, #33	; 0x21
 80064fc:	d13e      	bne.n	800657c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006506:	d114      	bne.n	8006532 <UART_Transmit_IT+0x48>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d110      	bne.n	8006532 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	621a      	str	r2, [r3, #32]
 8006530:	e008      	b.n	8006544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6211      	str	r1, [r2, #32]
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29b      	uxth	r3, r3
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	4619      	mov	r1, r3
 8006552:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10f      	bne.n	8006578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	e000      	b.n	800657e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
  }
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fe8e 	bl	80062cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b08c      	sub	sp, #48	; 0x30
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b22      	cmp	r3, #34	; 0x22
 80065cc:	f040 80ab 	bne.w	8006726 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d8:	d117      	bne.n	800660a <UART_Receive_IT+0x50>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d113      	bne.n	800660a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
 8006608:	e026      	b.n	8006658 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006610:	2300      	movs	r3, #0
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661c:	d007      	beq.n	800662e <UART_Receive_IT+0x74>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <UART_Receive_IT+0x82>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	e008      	b.n	800664e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29b      	uxth	r3, r3
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4619      	mov	r1, r3
 8006666:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006668:	2b00      	cmp	r3, #0
 800666a:	d15a      	bne.n	8006722 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0220 	bic.w	r2, r2, #32
 800667a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d135      	bne.n	8006718 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	613b      	str	r3, [r7, #16]
   return(result);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f023 0310 	bic.w	r3, r3, #16
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	623a      	str	r2, [r7, #32]
 80066d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e5      	bne.n	80066b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d10a      	bne.n	800670a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fdf9 	bl	8006308 <HAL_UARTEx_RxEventCallback>
 8006716:	e002      	b.n	800671e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff fde1 	bl	80062e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e002      	b.n	8006728 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3730      	adds	r7, #48	; 0x30
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006734:	b0c0      	sub	sp, #256	; 0x100
 8006736:	af00      	add	r7, sp, #0
 8006738:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	68d9      	ldr	r1, [r3, #12]
 800674e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	ea40 0301 	orr.w	r3, r0, r1
 8006758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	431a      	orrs	r2, r3
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	431a      	orrs	r2, r3
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006788:	f021 010c 	bic.w	r1, r1, #12
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006796:	430b      	orrs	r3, r1
 8006798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067aa:	6999      	ldr	r1, [r3, #24]
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	ea40 0301 	orr.w	r3, r0, r1
 80067b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b8f      	ldr	r3, [pc, #572]	; (80069fc <UART_SetConfig+0x2cc>)
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d005      	beq.n	80067d0 <UART_SetConfig+0xa0>
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b8d      	ldr	r3, [pc, #564]	; (8006a00 <UART_SetConfig+0x2d0>)
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d104      	bne.n	80067da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fd fc60 	bl	8004094 <HAL_RCC_GetPCLK2Freq>
 80067d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067d8:	e003      	b.n	80067e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067da:	f7fd fc47 	bl	800406c <HAL_RCC_GetPCLK1Freq>
 80067de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ec:	f040 810c 	bne.w	8006a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006802:	4622      	mov	r2, r4
 8006804:	462b      	mov	r3, r5
 8006806:	1891      	adds	r1, r2, r2
 8006808:	65b9      	str	r1, [r7, #88]	; 0x58
 800680a:	415b      	adcs	r3, r3
 800680c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800680e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006812:	4621      	mov	r1, r4
 8006814:	eb12 0801 	adds.w	r8, r2, r1
 8006818:	4629      	mov	r1, r5
 800681a:	eb43 0901 	adc.w	r9, r3, r1
 800681e:	f04f 0200 	mov.w	r2, #0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800682a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800682e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006832:	4690      	mov	r8, r2
 8006834:	4699      	mov	r9, r3
 8006836:	4623      	mov	r3, r4
 8006838:	eb18 0303 	adds.w	r3, r8, r3
 800683c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006840:	462b      	mov	r3, r5
 8006842:	eb49 0303 	adc.w	r3, r9, r3
 8006846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006856:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800685a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800685e:	460b      	mov	r3, r1
 8006860:	18db      	adds	r3, r3, r3
 8006862:	653b      	str	r3, [r7, #80]	; 0x50
 8006864:	4613      	mov	r3, r2
 8006866:	eb42 0303 	adc.w	r3, r2, r3
 800686a:	657b      	str	r3, [r7, #84]	; 0x54
 800686c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006874:	f7f9 fcac 	bl	80001d0 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <UART_SetConfig+0x2d4>)
 800687e:	fba3 2302 	umull	r2, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	011c      	lsls	r4, r3, #4
 8006886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006890:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	1891      	adds	r1, r2, r2
 800689e:	64b9      	str	r1, [r7, #72]	; 0x48
 80068a0:	415b      	adcs	r3, r3
 80068a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068a8:	4641      	mov	r1, r8
 80068aa:	eb12 0a01 	adds.w	sl, r2, r1
 80068ae:	4649      	mov	r1, r9
 80068b0:	eb43 0b01 	adc.w	fp, r3, r1
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c8:	4692      	mov	sl, r2
 80068ca:	469b      	mov	fp, r3
 80068cc:	4643      	mov	r3, r8
 80068ce:	eb1a 0303 	adds.w	r3, sl, r3
 80068d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068d6:	464b      	mov	r3, r9
 80068d8:	eb4b 0303 	adc.w	r3, fp, r3
 80068dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068f4:	460b      	mov	r3, r1
 80068f6:	18db      	adds	r3, r3, r3
 80068f8:	643b      	str	r3, [r7, #64]	; 0x40
 80068fa:	4613      	mov	r3, r2
 80068fc:	eb42 0303 	adc.w	r3, r2, r3
 8006900:	647b      	str	r3, [r7, #68]	; 0x44
 8006902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800690a:	f7f9 fc61 	bl	80001d0 <__aeabi_uldivmod>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4611      	mov	r1, r2
 8006914:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <UART_SetConfig+0x2d4>)
 8006916:	fba3 2301 	umull	r2, r3, r3, r1
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	2264      	movs	r2, #100	; 0x64
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	1acb      	subs	r3, r1, r3
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800692a:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <UART_SetConfig+0x2d4>)
 800692c:	fba3 2302 	umull	r2, r3, r3, r2
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006938:	441c      	add	r4, r3
 800693a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800693e:	2200      	movs	r2, #0
 8006940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006944:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	1891      	adds	r1, r2, r2
 8006952:	63b9      	str	r1, [r7, #56]	; 0x38
 8006954:	415b      	adcs	r3, r3
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800695c:	4641      	mov	r1, r8
 800695e:	1851      	adds	r1, r2, r1
 8006960:	6339      	str	r1, [r7, #48]	; 0x30
 8006962:	4649      	mov	r1, r9
 8006964:	414b      	adcs	r3, r1
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006974:	4659      	mov	r1, fp
 8006976:	00cb      	lsls	r3, r1, #3
 8006978:	4651      	mov	r1, sl
 800697a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800697e:	4651      	mov	r1, sl
 8006980:	00ca      	lsls	r2, r1, #3
 8006982:	4610      	mov	r0, r2
 8006984:	4619      	mov	r1, r3
 8006986:	4603      	mov	r3, r0
 8006988:	4642      	mov	r2, r8
 800698a:	189b      	adds	r3, r3, r2
 800698c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006990:	464b      	mov	r3, r9
 8006992:	460a      	mov	r2, r1
 8006994:	eb42 0303 	adc.w	r3, r2, r3
 8006998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069b0:	460b      	mov	r3, r1
 80069b2:	18db      	adds	r3, r3, r3
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b6:	4613      	mov	r3, r2
 80069b8:	eb42 0303 	adc.w	r3, r2, r3
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069c6:	f7f9 fc03 	bl	80001d0 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <UART_SetConfig+0x2d4>)
 80069d0:	fba3 1302 	umull	r1, r3, r3, r2
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	2164      	movs	r1, #100	; 0x64
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	3332      	adds	r3, #50	; 0x32
 80069e2:	4a08      	ldr	r2, [pc, #32]	; (8006a04 <UART_SetConfig+0x2d4>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	f003 0207 	and.w	r2, r3, #7
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4422      	add	r2, r4
 80069f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069f8:	e105      	b.n	8006c06 <UART_SetConfig+0x4d6>
 80069fa:	bf00      	nop
 80069fc:	40011000 	.word	0x40011000
 8006a00:	40011400 	.word	0x40011400
 8006a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	1891      	adds	r1, r2, r2
 8006a20:	6239      	str	r1, [r7, #32]
 8006a22:	415b      	adcs	r3, r3
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
 8006a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	1854      	adds	r4, r2, r1
 8006a2e:	4649      	mov	r1, r9
 8006a30:	eb43 0501 	adc.w	r5, r3, r1
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	00eb      	lsls	r3, r5, #3
 8006a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a42:	00e2      	lsls	r2, r4, #3
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	4643      	mov	r3, r8
 8006a4a:	18e3      	adds	r3, r4, r3
 8006a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a50:	464b      	mov	r3, r9
 8006a52:	eb45 0303 	adc.w	r3, r5, r3
 8006a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a76:	4629      	mov	r1, r5
 8006a78:	008b      	lsls	r3, r1, #2
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a80:	4621      	mov	r1, r4
 8006a82:	008a      	lsls	r2, r1, #2
 8006a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a88:	f7f9 fba2 	bl	80001d0 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4b60      	ldr	r3, [pc, #384]	; (8006c14 <UART_SetConfig+0x4e4>)
 8006a92:	fba3 2302 	umull	r2, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	011c      	lsls	r4, r3, #4
 8006a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006aa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	1891      	adds	r1, r2, r2
 8006ab2:	61b9      	str	r1, [r7, #24]
 8006ab4:	415b      	adcs	r3, r3
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006abc:	4641      	mov	r1, r8
 8006abe:	1851      	adds	r1, r2, r1
 8006ac0:	6139      	str	r1, [r7, #16]
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	414b      	adcs	r3, r1
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	00cb      	lsls	r3, r1, #3
 8006ad8:	4651      	mov	r1, sl
 8006ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ade:	4651      	mov	r1, sl
 8006ae0:	00ca      	lsls	r2, r1, #3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4642      	mov	r2, r8
 8006aea:	189b      	adds	r3, r3, r2
 8006aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af0:	464b      	mov	r3, r9
 8006af2:	460a      	mov	r2, r1
 8006af4:	eb42 0303 	adc.w	r3, r2, r3
 8006af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b14:	4649      	mov	r1, r9
 8006b16:	008b      	lsls	r3, r1, #2
 8006b18:	4641      	mov	r1, r8
 8006b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b1e:	4641      	mov	r1, r8
 8006b20:	008a      	lsls	r2, r1, #2
 8006b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b26:	f7f9 fb53 	bl	80001d0 <__aeabi_uldivmod>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4b39      	ldr	r3, [pc, #228]	; (8006c14 <UART_SetConfig+0x4e4>)
 8006b30:	fba3 1302 	umull	r1, r3, r3, r2
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	2164      	movs	r1, #100	; 0x64
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	3332      	adds	r3, #50	; 0x32
 8006b42:	4a34      	ldr	r2, [pc, #208]	; (8006c14 <UART_SetConfig+0x4e4>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4e:	441c      	add	r4, r3
 8006b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b54:	2200      	movs	r2, #0
 8006b56:	673b      	str	r3, [r7, #112]	; 0x70
 8006b58:	677a      	str	r2, [r7, #116]	; 0x74
 8006b5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	1891      	adds	r1, r2, r2
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	415b      	adcs	r3, r3
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b6e:	4641      	mov	r1, r8
 8006b70:	1851      	adds	r1, r2, r1
 8006b72:	6039      	str	r1, [r7, #0]
 8006b74:	4649      	mov	r1, r9
 8006b76:	414b      	adcs	r3, r1
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b86:	4659      	mov	r1, fp
 8006b88:	00cb      	lsls	r3, r1, #3
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b90:	4651      	mov	r1, sl
 8006b92:	00ca      	lsls	r2, r1, #3
 8006b94:	4610      	mov	r0, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb4:	667a      	str	r2, [r7, #100]	; 0x64
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	008b      	lsls	r3, r1, #2
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bcc:	4641      	mov	r1, r8
 8006bce:	008a      	lsls	r2, r1, #2
 8006bd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bd4:	f7f9 fafc 	bl	80001d0 <__aeabi_uldivmod>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <UART_SetConfig+0x4e4>)
 8006bde:	fba3 1302 	umull	r1, r3, r3, r2
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	2164      	movs	r1, #100	; 0x64
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	3332      	adds	r3, #50	; 0x32
 8006bf0:	4a08      	ldr	r2, [pc, #32]	; (8006c14 <UART_SetConfig+0x4e4>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	f003 020f 	and.w	r2, r3, #15
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4422      	add	r2, r4
 8006c04:	609a      	str	r2, [r3, #8]
}
 8006c06:	bf00      	nop
 8006c08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c12:	bf00      	nop
 8006c14:	51eb851f 	.word	0x51eb851f

08006c18 <__NVIC_SetPriority>:
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db0a      	blt.n	8006c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	490c      	ldr	r1, [pc, #48]	; (8006c64 <__NVIC_SetPriority+0x4c>)
 8006c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c36:	0112      	lsls	r2, r2, #4
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c40:	e00a      	b.n	8006c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	4908      	ldr	r1, [pc, #32]	; (8006c68 <__NVIC_SetPriority+0x50>)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	3b04      	subs	r3, #4
 8006c50:	0112      	lsls	r2, r2, #4
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	440b      	add	r3, r1
 8006c56:	761a      	strb	r2, [r3, #24]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	e000e100 	.word	0xe000e100
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <SysTick_Handler+0x1c>)
 8006c72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c74:	f001 fdaa 	bl	80087cc <xTaskGetSchedulerState>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d001      	beq.n	8006c82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c7e:	f002 fb93 	bl	80093a8 <xPortSysTickHandler>
  }
}
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	e000e010 	.word	0xe000e010

08006c8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c90:	2100      	movs	r1, #0
 8006c92:	f06f 0004 	mvn.w	r0, #4
 8006c96:	f7ff ffbf 	bl	8006c18 <__NVIC_SetPriority>
#endif
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca6:	f3ef 8305 	mrs	r3, IPSR
 8006caa:	603b      	str	r3, [r7, #0]
  return(result);
 8006cac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006cb2:	f06f 0305 	mvn.w	r3, #5
 8006cb6:	607b      	str	r3, [r7, #4]
 8006cb8:	e00c      	b.n	8006cd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <osKernelInitialize+0x44>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d105      	bne.n	8006cce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cc2:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <osKernelInitialize+0x44>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	e002      	b.n	8006cd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006cce:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cd4:	687b      	ldr	r3, [r7, #4]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000574 	.word	0x20000574

08006ce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cee:	f3ef 8305 	mrs	r3, IPSR
 8006cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8006cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006cfa:	f06f 0305 	mvn.w	r3, #5
 8006cfe:	607b      	str	r3, [r7, #4]
 8006d00:	e010      	b.n	8006d24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <osKernelStart+0x48>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d109      	bne.n	8006d1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d0a:	f7ff ffbf 	bl	8006c8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <osKernelStart+0x48>)
 8006d10:	2202      	movs	r2, #2
 8006d12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d14:	f001 f8ec 	bl	8007ef0 <vTaskStartScheduler>
      stat = osOK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	607b      	str	r3, [r7, #4]
 8006d1c:	e002      	b.n	8006d24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d24:	687b      	ldr	r3, [r7, #4]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000574 	.word	0x20000574

08006d34 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d3a:	f3ef 8305 	mrs	r3, IPSR
 8006d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d40:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006d46:	f001 f9ff 	bl	8008148 <xTaskGetTickCountFromISR>
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	e002      	b.n	8006d54 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006d4e:	f001 f9eb 	bl	8008128 <xTaskGetTickCount>
 8006d52:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006d54:	687b      	ldr	r3, [r7, #4]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b08e      	sub	sp, #56	; 0x38
 8006d62:	af04      	add	r7, sp, #16
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6e:	f3ef 8305 	mrs	r3, IPSR
 8006d72:	617b      	str	r3, [r7, #20]
  return(result);
 8006d74:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d17e      	bne.n	8006e78 <osThreadNew+0x11a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d07b      	beq.n	8006e78 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d84:	2318      	movs	r3, #24
 8006d86:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d045      	beq.n	8006e24 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <osThreadNew+0x48>
        name = attr->name;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <osThreadNew+0x6e>
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b38      	cmp	r3, #56	; 0x38
 8006dbe:	d805      	bhi.n	8006dcc <osThreadNew+0x6e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <osThreadNew+0x72>
        return (NULL);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e054      	b.n	8006e7a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <osThreadNew+0xa8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2bbb      	cmp	r3, #187	; 0xbb
 8006dee:	d90a      	bls.n	8006e06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <osThreadNew+0xa8>
        mem = 1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	e010      	b.n	8006e28 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10c      	bne.n	8006e28 <osThreadNew+0xca>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <osThreadNew+0xca>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <osThreadNew+0xca>
          mem = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	e001      	b.n	8006e28 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d110      	bne.n	8006e50 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e36:	9202      	str	r2, [sp, #8]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fe1d 	bl	8007a84 <xTaskCreateStatic>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	e013      	b.n	8006e78 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d110      	bne.n	8006e78 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	f107 0310 	add.w	r3, r7, #16
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fe68 	bl	8007b3e <xTaskCreate>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d001      	beq.n	8006e78 <osThreadNew+0x11a>
            hTask = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e78:	693b      	ldr	r3, [r7, #16]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3728      	adds	r7, #40	; 0x28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e8a:	f3ef 8305 	mrs	r3, IPSR
 8006e8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e90:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006e96:	f06f 0305 	mvn.w	r3, #5
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e019      	b.n	8006ed2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006ea2:	f001 f941 	bl	8008128 <xTaskGetTickCount>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <osDelayUntil+0x4a>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	db06      	blt.n	8006ecc <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006ebe:	f107 0308 	add.w	r3, r7, #8
 8006ec2:	6939      	ldr	r1, [r7, #16]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 ff95 	bl	8007df4 <vTaskDelayUntil>
 8006eca:	e002      	b.n	8006ed2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006ecc:	f06f 0303 	mvn.w	r3, #3
 8006ed0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006ed2:	697b      	ldr	r3, [r7, #20]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a07      	ldr	r2, [pc, #28]	; (8006f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <vApplicationGetIdleTaskMemory+0x30>)
 8006ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2280      	movs	r2, #128	; 0x80
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20000578 	.word	0x20000578
 8006f0c:	20000634 	.word	0x20000634

08006f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <vApplicationGetTimerTaskMemory+0x30>)
 8006f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f2e:	601a      	str	r2, [r3, #0]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000834 	.word	0x20000834
 8006f40:	200008f0 	.word	0x200008f0

08006f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f103 0208 	add.w	r2, r3, #8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f103 0208 	add.w	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e00c      	b.n	8007020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3308      	adds	r3, #8
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e002      	b.n	8007014 <vListInsert+0x2e>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	429a      	cmp	r2, r3
 800701e:	d2f6      	bcs.n	800700e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6892      	ldr	r2, [r2, #8]
 800706e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6852      	ldr	r2, [r2, #4]
 8007078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d103      	bne.n	800708c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070d6:	f002 f8d5 	bl	8009284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070e6:	fb01 f303 	mul.w	r3, r1, r3
 80070ea:	441a      	add	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	3b01      	subs	r3, #1
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	441a      	add	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	22ff      	movs	r2, #255	; 0xff
 800711a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	22ff      	movs	r2, #255	; 0xff
 8007122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d114      	bne.n	8007156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01a      	beq.n	800716a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3310      	adds	r3, #16
 8007138:	4618      	mov	r0, r3
 800713a:	f001 f985 	bl	8008448 <xTaskRemoveFromEventList>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <xQueueGenericReset+0xcc>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	e009      	b.n	800716a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3310      	adds	r3, #16
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fef2 	bl	8006f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3324      	adds	r3, #36	; 0x24
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff feed 	bl	8006f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800716a:	f002 f8bb 	bl	80092e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800716e:	2301      	movs	r3, #1
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <xQueueGenericCreateStatic+0x52>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <xQueueGenericCreateStatic+0x56>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <xQueueGenericCreateStatic+0x58>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	623b      	str	r3, [r7, #32]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <xQueueGenericCreateStatic+0x7e>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <xQueueGenericCreateStatic+0x82>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <xQueueGenericCreateStatic+0x84>
 80071fe:	2300      	movs	r3, #0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	61fb      	str	r3, [r7, #28]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800721a:	2350      	movs	r3, #80	; 0x50
 800721c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b50      	cmp	r3, #80	; 0x50
 8007222:	d00a      	beq.n	800723a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61bb      	str	r3, [r7, #24]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800723a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00d      	beq.n	8007262 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800724e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f805 	bl	800726c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007264:	4618      	mov	r0, r3
 8007266:	3730      	adds	r7, #48	; 0x30
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d103      	bne.n	8007288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	e002      	b.n	800728e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800729a:	2101      	movs	r1, #1
 800729c:	69b8      	ldr	r0, [r7, #24]
 800729e:	f7ff ff05 	bl	80070ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08e      	sub	sp, #56	; 0x38
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072c2:	2300      	movs	r3, #0
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xQueueGenericSend+0x32>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <xQueueGenericSend+0x40>
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <xQueueGenericSend+0x44>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <xQueueGenericSend+0x46>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <xQueueGenericSend+0x60>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d103      	bne.n	8007322 <xQueueGenericSend+0x6e>
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <xQueueGenericSend+0x72>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueGenericSend+0x74>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xQueueGenericSend+0x8e>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007342:	f001 fa43 	bl	80087cc <xTaskGetSchedulerState>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <xQueueGenericSend+0x9e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <xQueueGenericSend+0xa2>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <xQueueGenericSend+0xa4>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueGenericSend+0xbe>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	61fb      	str	r3, [r7, #28]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007372:	f001 ff87 	bl	8009284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	429a      	cmp	r2, r3
 8007380:	d302      	bcc.n	8007388 <xQueueGenericSend+0xd4>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d129      	bne.n	80073dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800738e:	f000 fa0b 	bl	80077a8 <prvCopyDataToQueue>
 8007392:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d010      	beq.n	80073be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f851 	bl	8008448 <xTaskRemoveFromEventList>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d013      	beq.n	80073d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073ac:	4b3f      	ldr	r3, [pc, #252]	; (80074ac <xQueueGenericSend+0x1f8>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	e00a      	b.n	80073d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073c4:	4b39      	ldr	r3, [pc, #228]	; (80074ac <xQueueGenericSend+0x1f8>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073d4:	f001 ff86 	bl	80092e4 <vPortExitCritical>
				return pdPASS;
 80073d8:	2301      	movs	r3, #1
 80073da:	e063      	b.n	80074a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073e2:	f001 ff7f 	bl	80092e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e05c      	b.n	80074a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073f0:	f107 0314 	add.w	r3, r7, #20
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 f88b 	bl	8008510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073fe:	f001 ff71 	bl	80092e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007402:	f000 fde5 	bl	8007fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007406:	f001 ff3d 	bl	8009284 <vPortEnterCritical>
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007410:	b25b      	sxtb	r3, r3
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d103      	bne.n	8007420 <xQueueGenericSend+0x16c>
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d103      	bne.n	8007436 <xQueueGenericSend+0x182>
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007436:	f001 ff55 	bl	80092e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800743a:	1d3a      	adds	r2, r7, #4
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f87a 	bl	800853c <xTaskCheckForTimeOut>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d124      	bne.n	8007498 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800744e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007450:	f000 faa2 	bl	8007998 <prvIsQueueFull>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d018      	beq.n	800748c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	3310      	adds	r3, #16
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f000 ffa0 	bl	80083a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800746a:	f000 fa2d 	bl	80078c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800746e:	f000 fdbd 	bl	8007fec <xTaskResumeAll>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	f47f af7c 	bne.w	8007372 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <xQueueGenericSend+0x1f8>)
 800747c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	e772      	b.n	8007372 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800748c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800748e:	f000 fa1b 	bl	80078c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007492:	f000 fdab 	bl	8007fec <xTaskResumeAll>
 8007496:	e76c      	b.n	8007372 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749a:	f000 fa15 	bl	80078c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800749e:	f000 fda5 	bl	8007fec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3738      	adds	r7, #56	; 0x38
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	e000ed04 	.word	0xe000ed04

080074b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b090      	sub	sp, #64	; 0x40
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <xQueueGenericSendFromISR+0x3c>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <xQueueGenericSendFromISR+0x40>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xQueueGenericSendFromISR+0x42>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d103      	bne.n	800751a <xQueueGenericSendFromISR+0x6a>
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <xQueueGenericSendFromISR+0x6e>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <xQueueGenericSendFromISR+0x70>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	623b      	str	r3, [r7, #32]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800753a:	f001 ff85 	bl	8009448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800753e:	f3ef 8211 	mrs	r2, BASEPRI
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	61fa      	str	r2, [r7, #28]
 8007554:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007556:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <xQueueGenericSendFromISR+0xbc>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d12f      	bne.n	80075cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007582:	f000 f911 	bl	80077a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d112      	bne.n	80075b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d016      	beq.n	80075c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	3324      	adds	r3, #36	; 0x24
 800759c:	4618      	mov	r0, r3
 800759e:	f000 ff53 	bl	8008448 <xTaskRemoveFromEventList>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00e      	beq.n	80075c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e007      	b.n	80075c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075ba:	3301      	adds	r3, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	b25a      	sxtb	r2, r3
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075c6:	2301      	movs	r3, #1
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80075ca:	e001      	b.n	80075d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3740      	adds	r7, #64	; 0x40
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xQueueReceive+0x30>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	623b      	str	r3, [r7, #32]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <xQueueReceive+0x3e>
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <xQueueReceive+0x42>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <xQueueReceive+0x44>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xQueueReceive+0x5e>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	61fb      	str	r3, [r7, #28]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007646:	f001 f8c1 	bl	80087cc <xTaskGetSchedulerState>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <xQueueReceive+0x6e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <xQueueReceive+0x72>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <xQueueReceive+0x74>
 800765a:	2300      	movs	r3, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueReceive+0x8e>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	61bb      	str	r3, [r7, #24]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007676:	f001 fe05 	bl	8009284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01f      	beq.n	80076c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768a:	f000 f8f7 	bl	800787c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00f      	beq.n	80076be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	3310      	adds	r3, #16
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fed0 	bl	8008448 <xTaskRemoveFromEventList>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076ae:	4b3d      	ldr	r3, [pc, #244]	; (80077a4 <xQueueReceive+0x1bc>)
 80076b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076be:	f001 fe11 	bl	80092e4 <vPortExitCritical>
				return pdPASS;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e069      	b.n	800779a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076cc:	f001 fe0a 	bl	80092e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e062      	b.n	800779a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076da:	f107 0310 	add.w	r3, r7, #16
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 ff16 	bl	8008510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076e4:	2301      	movs	r3, #1
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076e8:	f001 fdfc 	bl	80092e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076ec:	f000 fc70 	bl	8007fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076f0:	f001 fdc8 	bl	8009284 <vPortEnterCritical>
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d103      	bne.n	800770a <xQueueReceive+0x122>
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007710:	b25b      	sxtb	r3, r3
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d103      	bne.n	8007720 <xQueueReceive+0x138>
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007720:	f001 fde0 	bl	80092e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007724:	1d3a      	adds	r2, r7, #4
 8007726:	f107 0310 	add.w	r3, r7, #16
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ff05 	bl	800853c <xTaskCheckForTimeOut>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d123      	bne.n	8007780 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773a:	f000 f917 	bl	800796c <prvIsQueueEmpty>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	3324      	adds	r3, #36	; 0x24
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fe2b 	bl	80083a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007754:	f000 f8b8 	bl	80078c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007758:	f000 fc48 	bl	8007fec <xTaskResumeAll>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d189      	bne.n	8007676 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007762:	4b10      	ldr	r3, [pc, #64]	; (80077a4 <xQueueReceive+0x1bc>)
 8007764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	e780      	b.n	8007676 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007776:	f000 f8a7 	bl	80078c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800777a:	f000 fc37 	bl	8007fec <xTaskResumeAll>
 800777e:	e77a      	b.n	8007676 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007782:	f000 f8a1 	bl	80078c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007786:	f000 fc31 	bl	8007fec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800778a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800778c:	f000 f8ee 	bl	800796c <prvIsQueueEmpty>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	f43f af6f 	beq.w	8007676 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800779a:	4618      	mov	r0, r3
 800779c:	3730      	adds	r7, #48	; 0x30
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10d      	bne.n	80077e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d14d      	bne.n	800786a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f001 f818 	bl	8008808 <xTaskPriorityDisinherit>
 80077d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	609a      	str	r2, [r3, #8]
 80077e0:	e043      	b.n	800786a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d119      	bne.n	800781c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6858      	ldr	r0, [r3, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	461a      	mov	r2, r3
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	f002 f975 	bl	8009ae2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	441a      	add	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	429a      	cmp	r2, r3
 8007810:	d32b      	bcc.n	800786a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	e026      	b.n	800786a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68d8      	ldr	r0, [r3, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	461a      	mov	r2, r3
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	f002 f95b 	bl	8009ae2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	425b      	negs	r3, r3
 8007836:	441a      	add	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d207      	bcs.n	8007858 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	425b      	negs	r3, r3
 8007852:	441a      	add	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d105      	bne.n	800786a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	3b01      	subs	r3, #1
 8007868:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007872:	697b      	ldr	r3, [r7, #20]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d018      	beq.n	80078c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	441a      	add	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d303      	bcc.n	80078b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68d9      	ldr	r1, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	461a      	mov	r2, r3
 80078ba:	6838      	ldr	r0, [r7, #0]
 80078bc:	f002 f911 	bl	8009ae2 <memcpy>
	}
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078d0:	f001 fcd8 	bl	8009284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078dc:	e011      	b.n	8007902 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d012      	beq.n	800790c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 fdac 	bl	8008448 <xTaskRemoveFromEventList>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078f6:	f000 fe83 	bl	8008600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	dce9      	bgt.n	80078de <prvUnlockQueue+0x16>
 800790a:	e000      	b.n	800790e <prvUnlockQueue+0x46>
					break;
 800790c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	22ff      	movs	r2, #255	; 0xff
 8007912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007916:	f001 fce5 	bl	80092e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800791a:	f001 fcb3 	bl	8009284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007924:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007926:	e011      	b.n	800794c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d012      	beq.n	8007956 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3310      	adds	r3, #16
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fd87 	bl	8008448 <xTaskRemoveFromEventList>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007940:	f000 fe5e 	bl	8008600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	3b01      	subs	r3, #1
 8007948:	b2db      	uxtb	r3, r3
 800794a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800794c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	dce9      	bgt.n	8007928 <prvUnlockQueue+0x60>
 8007954:	e000      	b.n	8007958 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007956:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	22ff      	movs	r2, #255	; 0xff
 800795c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007960:	f001 fcc0 	bl	80092e4 <vPortExitCritical>
}
 8007964:	bf00      	nop
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007974:	f001 fc86 	bl	8009284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007980:	2301      	movs	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e001      	b.n	800798a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800798a:	f001 fcab 	bl	80092e4 <vPortExitCritical>

	return xReturn;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079a0:	f001 fc70 	bl	8009284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d102      	bne.n	80079b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e001      	b.n	80079ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ba:	f001 fc93 	bl	80092e4 <vPortExitCritical>

	return xReturn;
 80079be:	68fb      	ldr	r3, [r7, #12]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	e014      	b.n	8007a02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079d8:	4a0f      	ldr	r2, [pc, #60]	; (8007a18 <vQueueAddToRegistry+0x50>)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10b      	bne.n	80079fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079e4:	490c      	ldr	r1, [pc, #48]	; (8007a18 <vQueueAddToRegistry+0x50>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079ee:	4a0a      	ldr	r2, [pc, #40]	; (8007a18 <vQueueAddToRegistry+0x50>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	4413      	add	r3, r2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079fa:	e006      	b.n	8007a0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b07      	cmp	r3, #7
 8007a06:	d9e7      	bls.n	80079d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	20000cf0 	.word	0x20000cf0

08007a1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a2c:	f001 fc2a 	bl	8009284 <vPortEnterCritical>
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a36:	b25b      	sxtb	r3, r3
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d103      	bne.n	8007a46 <vQueueWaitForMessageRestricted+0x2a>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d103      	bne.n	8007a5c <vQueueWaitForMessageRestricted+0x40>
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a5c:	f001 fc42 	bl	80092e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	3324      	adds	r3, #36	; 0x24
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fcbd 	bl	80083f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a76:	6978      	ldr	r0, [r7, #20]
 8007a78:	f7ff ff26 	bl	80078c8 <prvUnlockQueue>
	}
 8007a7c:	bf00      	nop
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08e      	sub	sp, #56	; 0x38
 8007a88:	af04      	add	r7, sp, #16
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	623b      	str	r3, [r7, #32]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <xTaskCreateStatic+0x46>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	61fb      	str	r3, [r7, #28]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007aca:	23bc      	movs	r3, #188	; 0xbc
 8007acc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2bbc      	cmp	r3, #188	; 0xbc
 8007ad2:	d00a      	beq.n	8007aea <xTaskCreateStatic+0x66>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	61bb      	str	r3, [r7, #24]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007aea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01e      	beq.n	8007b30 <xTaskCreateStatic+0xac>
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	2202      	movs	r2, #2
 8007b06:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9303      	str	r3, [sp, #12]
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	9302      	str	r3, [sp, #8]
 8007b12:	f107 0314 	add.w	r3, r7, #20
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f850 	bl	8007bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b2a:	f000 f8f3 	bl	8007d14 <prvAddNewTaskToReadyList>
 8007b2e:	e001      	b.n	8007b34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b34:	697b      	ldr	r3, [r7, #20]
	}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3728      	adds	r7, #40	; 0x28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08c      	sub	sp, #48	; 0x30
 8007b42:	af04      	add	r7, sp, #16
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 fcb8 	bl	80094c8 <pvPortMalloc>
 8007b58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b60:	20bc      	movs	r0, #188	; 0xbc
 8007b62:	f001 fcb1 	bl	80094c8 <pvPortMalloc>
 8007b66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
 8007b74:	e005      	b.n	8007b82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b76:	6978      	ldr	r0, [r7, #20]
 8007b78:	f001 fd72 	bl	8009660 <vPortFree>
 8007b7c:	e001      	b.n	8007b82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d017      	beq.n	8007bb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	2300      	movs	r3, #0
 8007b94:	9303      	str	r3, [sp, #12]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	9302      	str	r3, [sp, #8]
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f80e 	bl	8007bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bac:	69f8      	ldr	r0, [r7, #28]
 8007bae:	f000 f8b1 	bl	8007d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	e002      	b.n	8007bbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
	}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	461a      	mov	r2, r3
 8007be0:	21a5      	movs	r1, #165	; 0xa5
 8007be2:	f001 ff8c 	bl	8009afe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	f023 0307 	bic.w	r3, r3, #7
 8007bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	617b      	str	r3, [r7, #20]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01f      	beq.n	8007c66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	e012      	b.n	8007c52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	7819      	ldrb	r1, [r3, #0]
 8007c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	3334      	adds	r3, #52	; 0x34
 8007c3c:	460a      	mov	r2, r1
 8007c3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d006      	beq.n	8007c5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	61fb      	str	r3, [r7, #28]
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b0f      	cmp	r3, #15
 8007c56:	d9e9      	bls.n	8007c2c <prvInitialiseNewTask+0x64>
 8007c58:	e000      	b.n	8007c5c <prvInitialiseNewTask+0x94>
			{
				break;
 8007c5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c64:	e003      	b.n	8007c6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2b37      	cmp	r3, #55	; 0x37
 8007c72:	d901      	bls.n	8007c78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c74:	2337      	movs	r3, #55	; 0x37
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2200      	movs	r2, #0
 8007c88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff f978 	bl	8006f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	3318      	adds	r3, #24
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff f973 	bl	8006f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	3354      	adds	r3, #84	; 0x54
 8007cc8:	2260      	movs	r2, #96	; 0x60
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 ff16 	bl	8009afe <memset>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	4a0c      	ldr	r2, [pc, #48]	; (8007d08 <prvInitialiseNewTask+0x140>)
 8007cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	4a0c      	ldr	r2, [pc, #48]	; (8007d0c <prvInitialiseNewTask+0x144>)
 8007cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	4a0b      	ldr	r2, [pc, #44]	; (8007d10 <prvInitialiseNewTask+0x148>)
 8007ce2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	68f9      	ldr	r1, [r7, #12]
 8007ce8:	69b8      	ldr	r0, [r7, #24]
 8007cea:	f001 f99d 	bl	8009028 <pxPortInitialiseStack>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d00:	bf00      	nop
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	0800a570 	.word	0x0800a570
 8007d0c:	0800a590 	.word	0x0800a590
 8007d10:	0800a550 	.word	0x0800a550

08007d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d1c:	f001 fab2 	bl	8009284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d20:	4b2d      	ldr	r3, [pc, #180]	; (8007dd8 <prvAddNewTaskToReadyList+0xc4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	4a2c      	ldr	r2, [pc, #176]	; (8007dd8 <prvAddNewTaskToReadyList+0xc4>)
 8007d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d2a:	4b2c      	ldr	r3, [pc, #176]	; (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d32:	4a2a      	ldr	r2, [pc, #168]	; (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d38:	4b27      	ldr	r3, [pc, #156]	; (8007dd8 <prvAddNewTaskToReadyList+0xc4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d110      	bne.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d40:	f000 fc82 	bl	8008648 <prvInitialiseTaskLists>
 8007d44:	e00d      	b.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d46:	4b26      	ldr	r3, [pc, #152]	; (8007de0 <prvAddNewTaskToReadyList+0xcc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d4e:	4b23      	ldr	r3, [pc, #140]	; (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d802      	bhi.n	8007d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d5c:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d62:	4b20      	ldr	r3, [pc, #128]	; (8007de4 <prvAddNewTaskToReadyList+0xd0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3301      	adds	r3, #1
 8007d68:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <prvAddNewTaskToReadyList+0xd0>)
 8007d6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <prvAddNewTaskToReadyList+0xd0>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d78:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <prvAddNewTaskToReadyList+0xd4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d903      	bls.n	8007d88 <prvAddNewTaskToReadyList+0x74>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <prvAddNewTaskToReadyList+0xd4>)
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4a15      	ldr	r2, [pc, #84]	; (8007dec <prvAddNewTaskToReadyList+0xd8>)
 8007d96:	441a      	add	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7ff f8fd 	bl	8006f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007da4:	f001 fa9e 	bl	80092e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007da8:	4b0d      	ldr	r3, [pc, #52]	; (8007de0 <prvAddNewTaskToReadyList+0xcc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00e      	beq.n	8007dce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <prvAddNewTaskToReadyList+0xc8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d207      	bcs.n	8007dce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <prvAddNewTaskToReadyList+0xdc>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20001204 	.word	0x20001204
 8007ddc:	20000d30 	.word	0x20000d30
 8007de0:	20001210 	.word	0x20001210
 8007de4:	20001220 	.word	0x20001220
 8007de8:	2000120c 	.word	0x2000120c
 8007dec:	20000d34 	.word	0x20000d34
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	617b      	str	r3, [r7, #20]
}
 8007e1a:	bf00      	nop
 8007e1c:	e7fe      	b.n	8007e1c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <vTaskDelayUntil+0x46>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	613b      	str	r3, [r7, #16]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007e3a:	4b2a      	ldr	r3, [pc, #168]	; (8007ee4 <vTaskDelayUntil+0xf0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <vTaskDelayUntil+0x64>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60fb      	str	r3, [r7, #12]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007e58:	f000 f8ba 	bl	8007fd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007e5c:	4b22      	ldr	r3, [pc, #136]	; (8007ee8 <vTaskDelayUntil+0xf4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4413      	add	r3, r2
 8007e6a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a3a      	ldr	r2, [r7, #32]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d20b      	bcs.n	8007e8e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d211      	bcs.n	8007ea4 <vTaskDelayUntil+0xb0>
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d90d      	bls.n	8007ea4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	e00a      	b.n	8007ea4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d303      	bcc.n	8007ea0 <vTaskDelayUntil+0xac>
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d901      	bls.n	8007ea4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d006      	beq.n	8007ebe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fd13 	bl	80088e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007ebe:	f000 f895 	bl	8007fec <xTaskResumeAll>
 8007ec2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007eca:	4b08      	ldr	r3, [pc, #32]	; (8007eec <vTaskDelayUntil+0xf8>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eda:	bf00      	nop
 8007edc:	3728      	adds	r7, #40	; 0x28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	2000122c 	.word	0x2000122c
 8007ee8:	20001208 	.word	0x20001208
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007efe:	463a      	mov	r2, r7
 8007f00:	1d39      	adds	r1, r7, #4
 8007f02:	f107 0308 	add.w	r3, r7, #8
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe ffe8 	bl	8006edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	9202      	str	r2, [sp, #8]
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	460a      	mov	r2, r1
 8007f1e:	4924      	ldr	r1, [pc, #144]	; (8007fb0 <vTaskStartScheduler+0xc0>)
 8007f20:	4824      	ldr	r0, [pc, #144]	; (8007fb4 <vTaskStartScheduler+0xc4>)
 8007f22:	f7ff fdaf 	bl	8007a84 <xTaskCreateStatic>
 8007f26:	4603      	mov	r3, r0
 8007f28:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <vTaskStartScheduler+0xc8>)
 8007f2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f2c:	4b22      	ldr	r3, [pc, #136]	; (8007fb8 <vTaskStartScheduler+0xc8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f34:	2301      	movs	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e001      	b.n	8007f3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d102      	bne.n	8007f4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f44:	f000 fd22 	bl	800898c <xTimerCreateTimerTask>
 8007f48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d11b      	bne.n	8007f88 <vTaskStartScheduler+0x98>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	613b      	str	r3, [r7, #16]
}
 8007f62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f64:	4b15      	ldr	r3, [pc, #84]	; (8007fbc <vTaskStartScheduler+0xcc>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3354      	adds	r3, #84	; 0x54
 8007f6a:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <vTaskStartScheduler+0xd0>)
 8007f6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f6e:	4b15      	ldr	r3, [pc, #84]	; (8007fc4 <vTaskStartScheduler+0xd4>)
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <vTaskStartScheduler+0xd8>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f7c:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <vTaskStartScheduler+0xdc>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f82:	f001 f8dd 	bl	8009140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f86:	e00e      	b.n	8007fa6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d10a      	bne.n	8007fa6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60fb      	str	r3, [r7, #12]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <vTaskStartScheduler+0xb4>
}
 8007fa6:	bf00      	nop
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	0800a488 	.word	0x0800a488
 8007fb4:	08008619 	.word	0x08008619
 8007fb8:	20001228 	.word	0x20001228
 8007fbc:	20000d30 	.word	0x20000d30
 8007fc0:	20000010 	.word	0x20000010
 8007fc4:	20001224 	.word	0x20001224
 8007fc8:	20001210 	.word	0x20001210
 8007fcc:	20001208 	.word	0x20001208

08007fd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fd4:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <vTaskSuspendAll+0x18>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a03      	ldr	r2, [pc, #12]	; (8007fe8 <vTaskSuspendAll+0x18>)
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fde:	bf00      	nop
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	2000122c 	.word	0x2000122c

08007fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ffa:	4b42      	ldr	r3, [pc, #264]	; (8008104 <xTaskResumeAll+0x118>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <xTaskResumeAll+0x2c>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	603b      	str	r3, [r7, #0]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008018:	f001 f934 	bl	8009284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800801c:	4b39      	ldr	r3, [pc, #228]	; (8008104 <xTaskResumeAll+0x118>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3b01      	subs	r3, #1
 8008022:	4a38      	ldr	r2, [pc, #224]	; (8008104 <xTaskResumeAll+0x118>)
 8008024:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008026:	4b37      	ldr	r3, [pc, #220]	; (8008104 <xTaskResumeAll+0x118>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d162      	bne.n	80080f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800802e:	4b36      	ldr	r3, [pc, #216]	; (8008108 <xTaskResumeAll+0x11c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d05e      	beq.n	80080f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008036:	e02f      	b.n	8008098 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008038:	4b34      	ldr	r3, [pc, #208]	; (800810c <xTaskResumeAll+0x120>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3318      	adds	r3, #24
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff f807 	bl	8007058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3304      	adds	r3, #4
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff f802 	bl	8007058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	4b2d      	ldr	r3, [pc, #180]	; (8008110 <xTaskResumeAll+0x124>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	429a      	cmp	r2, r3
 800805e:	d903      	bls.n	8008068 <xTaskResumeAll+0x7c>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <xTaskResumeAll+0x124>)
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4a27      	ldr	r2, [pc, #156]	; (8008114 <xTaskResumeAll+0x128>)
 8008076:	441a      	add	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7fe ff8d 	bl	8006f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	4b23      	ldr	r3, [pc, #140]	; (8008118 <xTaskResumeAll+0x12c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	429a      	cmp	r2, r3
 8008090:	d302      	bcc.n	8008098 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008092:	4b22      	ldr	r3, [pc, #136]	; (800811c <xTaskResumeAll+0x130>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008098:	4b1c      	ldr	r3, [pc, #112]	; (800810c <xTaskResumeAll+0x120>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1cb      	bne.n	8008038 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080a6:	f000 fb71 	bl	800878c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080aa:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <xTaskResumeAll+0x134>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d010      	beq.n	80080d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080b6:	f000 f859 	bl	800816c <xTaskIncrementTick>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080c0:	4b16      	ldr	r3, [pc, #88]	; (800811c <xTaskResumeAll+0x130>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1f1      	bne.n	80080b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080d2:	4b13      	ldr	r3, [pc, #76]	; (8008120 <xTaskResumeAll+0x134>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080d8:	4b10      	ldr	r3, [pc, #64]	; (800811c <xTaskResumeAll+0x130>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <xTaskResumeAll+0x138>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080f4:	f001 f8f6 	bl	80092e4 <vPortExitCritical>

	return xAlreadyYielded;
 80080f8:	68bb      	ldr	r3, [r7, #8]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	2000122c 	.word	0x2000122c
 8008108:	20001204 	.word	0x20001204
 800810c:	200011c4 	.word	0x200011c4
 8008110:	2000120c 	.word	0x2000120c
 8008114:	20000d34 	.word	0x20000d34
 8008118:	20000d30 	.word	0x20000d30
 800811c:	20001218 	.word	0x20001218
 8008120:	20001214 	.word	0x20001214
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800812e:	4b05      	ldr	r3, [pc, #20]	; (8008144 <xTaskGetTickCount+0x1c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008134:	687b      	ldr	r3, [r7, #4]
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20001208 	.word	0x20001208

08008148 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800814e:	f001 f97b 	bl	8009448 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008156:	4b04      	ldr	r3, [pc, #16]	; (8008168 <xTaskGetTickCountFromISR+0x20>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800815c:	683b      	ldr	r3, [r7, #0]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20001208 	.word	0x20001208

0800816c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008176:	4b4f      	ldr	r3, [pc, #316]	; (80082b4 <xTaskIncrementTick+0x148>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 808f 	bne.w	800829e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008180:	4b4d      	ldr	r3, [pc, #308]	; (80082b8 <xTaskIncrementTick+0x14c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008188:	4a4b      	ldr	r2, [pc, #300]	; (80082b8 <xTaskIncrementTick+0x14c>)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d120      	bne.n	80081d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008194:	4b49      	ldr	r3, [pc, #292]	; (80082bc <xTaskIncrementTick+0x150>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	603b      	str	r3, [r7, #0]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <xTaskIncrementTick+0x46>
 80081b4:	4b41      	ldr	r3, [pc, #260]	; (80082bc <xTaskIncrementTick+0x150>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	4b41      	ldr	r3, [pc, #260]	; (80082c0 <xTaskIncrementTick+0x154>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a3f      	ldr	r2, [pc, #252]	; (80082bc <xTaskIncrementTick+0x150>)
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	4a3f      	ldr	r2, [pc, #252]	; (80082c0 <xTaskIncrementTick+0x154>)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	4b3e      	ldr	r3, [pc, #248]	; (80082c4 <xTaskIncrementTick+0x158>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	4a3d      	ldr	r2, [pc, #244]	; (80082c4 <xTaskIncrementTick+0x158>)
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	f000 fadb 	bl	800878c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081d6:	4b3c      	ldr	r3, [pc, #240]	; (80082c8 <xTaskIncrementTick+0x15c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d349      	bcc.n	8008274 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e0:	4b36      	ldr	r3, [pc, #216]	; (80082bc <xTaskIncrementTick+0x150>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ea:	4b37      	ldr	r3, [pc, #220]	; (80082c8 <xTaskIncrementTick+0x15c>)
 80081ec:	f04f 32ff 	mov.w	r2, #4294967295
 80081f0:	601a      	str	r2, [r3, #0]
					break;
 80081f2:	e03f      	b.n	8008274 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f4:	4b31      	ldr	r3, [pc, #196]	; (80082bc <xTaskIncrementTick+0x150>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	d203      	bcs.n	8008214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800820c:	4a2e      	ldr	r2, [pc, #184]	; (80082c8 <xTaskIncrementTick+0x15c>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008212:	e02f      	b.n	8008274 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe ff1d 	bl	8007058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	3318      	adds	r3, #24
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe ff14 	bl	8007058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	4b25      	ldr	r3, [pc, #148]	; (80082cc <xTaskIncrementTick+0x160>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	d903      	bls.n	8008244 <xTaskIncrementTick+0xd8>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	4a22      	ldr	r2, [pc, #136]	; (80082cc <xTaskIncrementTick+0x160>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4a1f      	ldr	r2, [pc, #124]	; (80082d0 <xTaskIncrementTick+0x164>)
 8008252:	441a      	add	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7fe fe9f 	bl	8006f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <xTaskIncrementTick+0x168>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	429a      	cmp	r2, r3
 800826c:	d3b8      	bcc.n	80081e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008272:	e7b5      	b.n	80081e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <xTaskIncrementTick+0x168>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	4915      	ldr	r1, [pc, #84]	; (80082d0 <xTaskIncrementTick+0x164>)
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d901      	bls.n	8008290 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800828c:	2301      	movs	r3, #1
 800828e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008290:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <xTaskIncrementTick+0x16c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d007      	beq.n	80082a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e004      	b.n	80082a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <xTaskIncrementTick+0x170>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <xTaskIncrementTick+0x170>)
 80082a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082a8:	697b      	ldr	r3, [r7, #20]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2000122c 	.word	0x2000122c
 80082b8:	20001208 	.word	0x20001208
 80082bc:	200011bc 	.word	0x200011bc
 80082c0:	200011c0 	.word	0x200011c0
 80082c4:	2000121c 	.word	0x2000121c
 80082c8:	20001224 	.word	0x20001224
 80082cc:	2000120c 	.word	0x2000120c
 80082d0:	20000d34 	.word	0x20000d34
 80082d4:	20000d30 	.word	0x20000d30
 80082d8:	20001218 	.word	0x20001218
 80082dc:	20001214 	.word	0x20001214

080082e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082e6:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <vTaskSwitchContext+0xb0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082ee:	4b29      	ldr	r3, [pc, #164]	; (8008394 <vTaskSwitchContext+0xb4>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082f4:	e046      	b.n	8008384 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80082f6:	4b27      	ldr	r3, [pc, #156]	; (8008394 <vTaskSwitchContext+0xb4>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fc:	4b26      	ldr	r3, [pc, #152]	; (8008398 <vTaskSwitchContext+0xb8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e010      	b.n	8008326 <vTaskSwitchContext+0x46>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <vTaskSwitchContext+0x40>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	607b      	str	r3, [r7, #4]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <vTaskSwitchContext+0x3e>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3b01      	subs	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	491d      	ldr	r1, [pc, #116]	; (800839c <vTaskSwitchContext+0xbc>)
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0e4      	beq.n	8008304 <vTaskSwitchContext+0x24>
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4a15      	ldr	r2, [pc, #84]	; (800839c <vTaskSwitchContext+0xbc>)
 8008346:	4413      	add	r3, r2
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	605a      	str	r2, [r3, #4]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	3308      	adds	r3, #8
 800835c:	429a      	cmp	r2, r3
 800835e:	d104      	bne.n	800836a <vTaskSwitchContext+0x8a>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4a0b      	ldr	r2, [pc, #44]	; (80083a0 <vTaskSwitchContext+0xc0>)
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	4a08      	ldr	r2, [pc, #32]	; (8008398 <vTaskSwitchContext+0xb8>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <vTaskSwitchContext+0xc0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3354      	adds	r3, #84	; 0x54
 8008380:	4a08      	ldr	r2, [pc, #32]	; (80083a4 <vTaskSwitchContext+0xc4>)
 8008382:	6013      	str	r3, [r2, #0]
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	2000122c 	.word	0x2000122c
 8008394:	20001218 	.word	0x20001218
 8008398:	2000120c 	.word	0x2000120c
 800839c:	20000d34 	.word	0x20000d34
 80083a0:	20000d30 	.word	0x20000d30
 80083a4:	20000010 	.word	0x20000010

080083a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	60fb      	str	r3, [r7, #12]
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083ce:	4b07      	ldr	r3, [pc, #28]	; (80083ec <vTaskPlaceOnEventList+0x44>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3318      	adds	r3, #24
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fe fe05 	bl	8006fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083dc:	2101      	movs	r1, #1
 80083de:	6838      	ldr	r0, [r7, #0]
 80083e0:	f000 fa80 	bl	80088e4 <prvAddCurrentTaskToDelayedList>
}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000d30 	.word	0x20000d30

080083f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	617b      	str	r3, [r7, #20]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <vTaskPlaceOnEventListRestricted+0x54>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3318      	adds	r3, #24
 800841e:	4619      	mov	r1, r3
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7fe fdbc 	bl	8006f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800842c:	f04f 33ff 	mov.w	r3, #4294967295
 8008430:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	68b8      	ldr	r0, [r7, #8]
 8008436:	f000 fa55 	bl	80088e4 <prvAddCurrentTaskToDelayedList>
	}
 800843a:	bf00      	nop
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000d30 	.word	0x20000d30

08008448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60fb      	str	r3, [r7, #12]
}
 8008470:	bf00      	nop
 8008472:	e7fe      	b.n	8008472 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	3318      	adds	r3, #24
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fded 	bl	8007058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800847e:	4b1e      	ldr	r3, [pc, #120]	; (80084f8 <xTaskRemoveFromEventList+0xb0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11d      	bne.n	80084c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	3304      	adds	r3, #4
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fde4 	bl	8007058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4b19      	ldr	r3, [pc, #100]	; (80084fc <xTaskRemoveFromEventList+0xb4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d903      	bls.n	80084a4 <xTaskRemoveFromEventList+0x5c>
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4a16      	ldr	r2, [pc, #88]	; (80084fc <xTaskRemoveFromEventList+0xb4>)
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4a13      	ldr	r2, [pc, #76]	; (8008500 <xTaskRemoveFromEventList+0xb8>)
 80084b2:	441a      	add	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f7fe fd6f 	bl	8006f9e <vListInsertEnd>
 80084c0:	e005      	b.n	80084ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	3318      	adds	r3, #24
 80084c6:	4619      	mov	r1, r3
 80084c8:	480e      	ldr	r0, [pc, #56]	; (8008504 <xTaskRemoveFromEventList+0xbc>)
 80084ca:	f7fe fd68 	bl	8006f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d2:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <xTaskRemoveFromEventList+0xc0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	429a      	cmp	r2, r3
 80084da:	d905      	bls.n	80084e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084e0:	4b0a      	ldr	r3, [pc, #40]	; (800850c <xTaskRemoveFromEventList+0xc4>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	e001      	b.n	80084ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084ec:	697b      	ldr	r3, [r7, #20]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2000122c 	.word	0x2000122c
 80084fc:	2000120c 	.word	0x2000120c
 8008500:	20000d34 	.word	0x20000d34
 8008504:	200011c4 	.word	0x200011c4
 8008508:	20000d30 	.word	0x20000d30
 800850c:	20001218 	.word	0x20001218

08008510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <vTaskInternalSetTimeOutState+0x24>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <vTaskInternalSetTimeOutState+0x28>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	605a      	str	r2, [r3, #4]
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	2000121c 	.word	0x2000121c
 8008538:	20001208 	.word	0x20001208

0800853c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b088      	sub	sp, #32
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	613b      	str	r3, [r7, #16]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	60fb      	str	r3, [r7, #12]
}
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800857e:	f000 fe81 	bl	8009284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008582:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <xTaskCheckForTimeOut+0xbc>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d102      	bne.n	80085a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	e023      	b.n	80085ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	4b15      	ldr	r3, [pc, #84]	; (80085fc <xTaskCheckForTimeOut+0xc0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d007      	beq.n	80085be <xTaskCheckForTimeOut+0x82>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d302      	bcc.n	80085be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085b8:	2301      	movs	r3, #1
 80085ba:	61fb      	str	r3, [r7, #28]
 80085bc:	e015      	b.n	80085ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d20b      	bcs.n	80085e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff ff9b 	bl	8008510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	e004      	b.n	80085ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085ea:	f000 fe7b 	bl	80092e4 <vPortExitCritical>

	return xReturn;
 80085ee:	69fb      	ldr	r3, [r7, #28]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3720      	adds	r7, #32
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20001208 	.word	0x20001208
 80085fc:	2000121c 	.word	0x2000121c

08008600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008604:	4b03      	ldr	r3, [pc, #12]	; (8008614 <vTaskMissedYield+0x14>)
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
}
 800860a:	bf00      	nop
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	20001218 	.word	0x20001218

08008618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008620:	f000 f852 	bl	80086c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008624:	4b06      	ldr	r3, [pc, #24]	; (8008640 <prvIdleTask+0x28>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d9f9      	bls.n	8008620 <prvIdleTask+0x8>
			{
				taskYIELD();
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <prvIdleTask+0x2c>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800863c:	e7f0      	b.n	8008620 <prvIdleTask+0x8>
 800863e:	bf00      	nop
 8008640:	20000d34 	.word	0x20000d34
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	e00c      	b.n	800866e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4a12      	ldr	r2, [pc, #72]	; (80086a8 <prvInitialiseTaskLists+0x60>)
 8008660:	4413      	add	r3, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fc6e 	bl	8006f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3301      	adds	r3, #1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b37      	cmp	r3, #55	; 0x37
 8008672:	d9ef      	bls.n	8008654 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008674:	480d      	ldr	r0, [pc, #52]	; (80086ac <prvInitialiseTaskLists+0x64>)
 8008676:	f7fe fc65 	bl	8006f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800867a:	480d      	ldr	r0, [pc, #52]	; (80086b0 <prvInitialiseTaskLists+0x68>)
 800867c:	f7fe fc62 	bl	8006f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008680:	480c      	ldr	r0, [pc, #48]	; (80086b4 <prvInitialiseTaskLists+0x6c>)
 8008682:	f7fe fc5f 	bl	8006f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008686:	480c      	ldr	r0, [pc, #48]	; (80086b8 <prvInitialiseTaskLists+0x70>)
 8008688:	f7fe fc5c 	bl	8006f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800868c:	480b      	ldr	r0, [pc, #44]	; (80086bc <prvInitialiseTaskLists+0x74>)
 800868e:	f7fe fc59 	bl	8006f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008692:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <prvInitialiseTaskLists+0x78>)
 8008694:	4a05      	ldr	r2, [pc, #20]	; (80086ac <prvInitialiseTaskLists+0x64>)
 8008696:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <prvInitialiseTaskLists+0x7c>)
 800869a:	4a05      	ldr	r2, [pc, #20]	; (80086b0 <prvInitialiseTaskLists+0x68>)
 800869c:	601a      	str	r2, [r3, #0]
}
 800869e:	bf00      	nop
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000d34 	.word	0x20000d34
 80086ac:	20001194 	.word	0x20001194
 80086b0:	200011a8 	.word	0x200011a8
 80086b4:	200011c4 	.word	0x200011c4
 80086b8:	200011d8 	.word	0x200011d8
 80086bc:	200011f0 	.word	0x200011f0
 80086c0:	200011bc 	.word	0x200011bc
 80086c4:	200011c0 	.word	0x200011c0

080086c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ce:	e019      	b.n	8008704 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086d0:	f000 fdd8 	bl	8009284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d4:	4b10      	ldr	r3, [pc, #64]	; (8008718 <prvCheckTasksWaitingTermination+0x50>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe fcb9 	bl	8007058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <prvCheckTasksWaitingTermination+0x54>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	4a0b      	ldr	r2, [pc, #44]	; (800871c <prvCheckTasksWaitingTermination+0x54>)
 80086ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <prvCheckTasksWaitingTermination+0x58>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	4a0a      	ldr	r2, [pc, #40]	; (8008720 <prvCheckTasksWaitingTermination+0x58>)
 80086f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086fa:	f000 fdf3 	bl	80092e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f810 	bl	8008724 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <prvCheckTasksWaitingTermination+0x58>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e1      	bne.n	80086d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200011d8 	.word	0x200011d8
 800871c:	20001204 	.word	0x20001204
 8008720:	200011ec 	.word	0x200011ec

08008724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3354      	adds	r3, #84	; 0x54
 8008730:	4618      	mov	r0, r3
 8008732:	f001 fb05 	bl	8009d40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008744:	4618      	mov	r0, r3
 8008746:	f000 ff8b 	bl	8009660 <vPortFree>
				vPortFree( pxTCB );
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 ff88 	bl	8009660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008750:	e018      	b.n	8008784 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008758:	2b01      	cmp	r3, #1
 800875a:	d103      	bne.n	8008764 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 ff7f 	bl	8009660 <vPortFree>
	}
 8008762:	e00f      	b.n	8008784 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800876a:	2b02      	cmp	r3, #2
 800876c:	d00a      	beq.n	8008784 <prvDeleteTCB+0x60>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	60fb      	str	r3, [r7, #12]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <prvDeleteTCB+0x5e>
	}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008792:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <prvResetNextTaskUnblockTime+0x38>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <prvResetNextTaskUnblockTime+0x3c>)
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087a4:	e008      	b.n	80087b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a6:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <prvResetNextTaskUnblockTime+0x38>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4a04      	ldr	r2, [pc, #16]	; (80087c8 <prvResetNextTaskUnblockTime+0x3c>)
 80087b6:	6013      	str	r3, [r2, #0]
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	200011bc 	.word	0x200011bc
 80087c8:	20001224 	.word	0x20001224

080087cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <xTaskGetSchedulerState+0x34>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087da:	2301      	movs	r3, #1
 80087dc:	607b      	str	r3, [r7, #4]
 80087de:	e008      	b.n	80087f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <xTaskGetSchedulerState+0x38>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087e8:	2302      	movs	r3, #2
 80087ea:	607b      	str	r3, [r7, #4]
 80087ec:	e001      	b.n	80087f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087ee:	2300      	movs	r3, #0
 80087f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087f2:	687b      	ldr	r3, [r7, #4]
	}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	20001210 	.word	0x20001210
 8008804:	2000122c 	.word	0x2000122c

08008808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d056      	beq.n	80088cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800881e:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <xTaskPriorityDisinherit+0xd0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	429a      	cmp	r2, r3
 8008826:	d00a      	beq.n	800883e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	60fb      	str	r3, [r7, #12]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	1e5a      	subs	r2, r3, #1
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886e:	429a      	cmp	r2, r3
 8008870:	d02c      	beq.n	80088cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	2b00      	cmp	r3, #0
 8008878:	d128      	bne.n	80088cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3304      	adds	r3, #4
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fbea 	bl	8007058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <xTaskPriorityDisinherit+0xd4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d903      	bls.n	80088ac <xTaskPriorityDisinherit+0xa4>
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	4a0c      	ldr	r2, [pc, #48]	; (80088dc <xTaskPriorityDisinherit+0xd4>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <xTaskPriorityDisinherit+0xd8>)
 80088ba:	441a      	add	r2, r3
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f7fe fb6b 	bl	8006f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088c8:	2301      	movs	r3, #1
 80088ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088cc:	697b      	ldr	r3, [r7, #20]
	}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000d30 	.word	0x20000d30
 80088dc:	2000120c 	.word	0x2000120c
 80088e0:	20000d34 	.word	0x20000d34

080088e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088ee:	4b21      	ldr	r3, [pc, #132]	; (8008974 <prvAddCurrentTaskToDelayedList+0x90>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088f4:	4b20      	ldr	r3, [pc, #128]	; (8008978 <prvAddCurrentTaskToDelayedList+0x94>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fbac 	bl	8007058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008906:	d10a      	bne.n	800891e <prvAddCurrentTaskToDelayedList+0x3a>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800890e:	4b1a      	ldr	r3, [pc, #104]	; (8008978 <prvAddCurrentTaskToDelayedList+0x94>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4819      	ldr	r0, [pc, #100]	; (800897c <prvAddCurrentTaskToDelayedList+0x98>)
 8008918:	f7fe fb41 	bl	8006f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800891c:	e026      	b.n	800896c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <prvAddCurrentTaskToDelayedList+0x94>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	429a      	cmp	r2, r3
 8008934:	d209      	bcs.n	800894a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008936:	4b12      	ldr	r3, [pc, #72]	; (8008980 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	4b0f      	ldr	r3, [pc, #60]	; (8008978 <prvAddCurrentTaskToDelayedList+0x94>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fe fb4f 	bl	8006fe6 <vListInsert>
}
 8008948:	e010      	b.n	800896c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <prvAddCurrentTaskToDelayedList+0xa0>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <prvAddCurrentTaskToDelayedList+0x94>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f7fe fb45 	bl	8006fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <prvAddCurrentTaskToDelayedList+0xa4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d202      	bcs.n	800896c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008966:	4a08      	ldr	r2, [pc, #32]	; (8008988 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6013      	str	r3, [r2, #0]
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20001208 	.word	0x20001208
 8008978:	20000d30 	.word	0x20000d30
 800897c:	200011f0 	.word	0x200011f0
 8008980:	200011c0 	.word	0x200011c0
 8008984:	200011bc 	.word	0x200011bc
 8008988:	20001224 	.word	0x20001224

0800898c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08a      	sub	sp, #40	; 0x28
 8008990:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008996:	f000 fb07 	bl	8008fa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <xTimerCreateTimerTask+0x80>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d021      	beq.n	80089e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089aa:	1d3a      	adds	r2, r7, #4
 80089ac:	f107 0108 	add.w	r1, r7, #8
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe faab 	bl	8006f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	9202      	str	r2, [sp, #8]
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	2302      	movs	r3, #2
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	460a      	mov	r2, r1
 80089cc:	4910      	ldr	r1, [pc, #64]	; (8008a10 <xTimerCreateTimerTask+0x84>)
 80089ce:	4811      	ldr	r0, [pc, #68]	; (8008a14 <xTimerCreateTimerTask+0x88>)
 80089d0:	f7ff f858 	bl	8007a84 <xTaskCreateStatic>
 80089d4:	4603      	mov	r3, r0
 80089d6:	4a10      	ldr	r2, [pc, #64]	; (8008a18 <xTimerCreateTimerTask+0x8c>)
 80089d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089da:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <xTimerCreateTimerTask+0x8c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	613b      	str	r3, [r7, #16]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a02:	697b      	ldr	r3, [r7, #20]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20001260 	.word	0x20001260
 8008a10:	0800a490 	.word	0x0800a490
 8008a14:	08008b51 	.word	0x08008b51
 8008a18:	20001264 	.word	0x20001264

08008a1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	623b      	str	r3, [r7, #32]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a4a:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <xTimerGenericCommand+0x98>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d02a      	beq.n	8008aa8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b05      	cmp	r3, #5
 8008a62:	dc18      	bgt.n	8008a96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a64:	f7ff feb2 	bl	80087cc <xTaskGetSchedulerState>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d109      	bne.n	8008a82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <xTimerGenericCommand+0x98>)
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f107 0110 	add.w	r1, r7, #16
 8008a76:	2300      	movs	r3, #0
 8008a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a7a:	f7fe fc1b 	bl	80072b4 <xQueueGenericSend>
 8008a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8008a80:	e012      	b.n	8008aa8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a82:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <xTimerGenericCommand+0x98>)
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f107 0110 	add.w	r1, r7, #16
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f7fe fc11 	bl	80072b4 <xQueueGenericSend>
 8008a92:	6278      	str	r0, [r7, #36]	; 0x24
 8008a94:	e008      	b.n	8008aa8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a96:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <xTimerGenericCommand+0x98>)
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	f107 0110 	add.w	r1, r7, #16
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	f7fe fd05 	bl	80074b0 <xQueueGenericSendFromISR>
 8008aa6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3728      	adds	r7, #40	; 0x28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20001260 	.word	0x20001260

08008ab8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <prvProcessExpiredTimer+0x94>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe fac1 	bl	8007058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d022      	beq.n	8008b2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	699a      	ldr	r2, [r3, #24]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	18d1      	adds	r1, r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	6978      	ldr	r0, [r7, #20]
 8008af2:	f000 f8d1 	bl	8008c98 <prvInsertTimerInActiveList>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01f      	beq.n	8008b3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008afc:	2300      	movs	r3, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	2100      	movs	r1, #0
 8008b06:	6978      	ldr	r0, [r7, #20]
 8008b08:	f7ff ff88 	bl	8008a1c <xTimerGenericCommand>
 8008b0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d113      	bne.n	8008b3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	6978      	ldr	r0, [r7, #20]
 8008b42:	4798      	blx	r3
}
 8008b44:	bf00      	nop
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20001258 	.word	0x20001258

08008b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b58:	f107 0308 	add.w	r3, r7, #8
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 f857 	bl	8008c10 <prvGetNextExpireTime>
 8008b62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4619      	mov	r1, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f803 	bl	8008b74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b6e:	f000 f8d5 	bl	8008d1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b72:	e7f1      	b.n	8008b58 <prvTimerTask+0x8>

08008b74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b7e:	f7ff fa27 	bl	8007fd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f866 	bl	8008c58 <prvSampleTimeNow>
 8008b8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d130      	bne.n	8008bf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <prvProcessTimerOrBlockTask+0x3c>
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d806      	bhi.n	8008bb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ba2:	f7ff fa23 	bl	8007fec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff85 	bl	8008ab8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bae:	e024      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d008      	beq.n	8008bc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bb6:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <prvProcessTimerOrBlockTask+0x90>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <prvProcessTimerOrBlockTask+0x50>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <prvProcessTimerOrBlockTask+0x52>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <prvProcessTimerOrBlockTask+0x94>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7fe ff21 	bl	8007a1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bda:	f7ff fa07 	bl	8007fec <xTaskResumeAll>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008be4:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <prvProcessTimerOrBlockTask+0x98>)
 8008be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	f3bf 8f6f 	isb	sy
}
 8008bf4:	e001      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bf6:	f7ff f9f9 	bl	8007fec <xTaskResumeAll>
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	2000125c 	.word	0x2000125c
 8008c08:	20001260 	.word	0x20001260
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c18:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <prvGetNextExpireTime+0x44>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <prvGetNextExpireTime+0x16>
 8008c22:	2201      	movs	r2, #1
 8008c24:	e000      	b.n	8008c28 <prvGetNextExpireTime+0x18>
 8008c26:	2200      	movs	r2, #0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <prvGetNextExpireTime+0x44>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e001      	b.n	8008c44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c44:	68fb      	ldr	r3, [r7, #12]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20001258 	.word	0x20001258

08008c58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c60:	f7ff fa62 	bl	8008128 <xTaskGetTickCount>
 8008c64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <prvSampleTimeNow+0x3c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d205      	bcs.n	8008c7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c70:	f000 f936 	bl	8008ee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c82:	4a04      	ldr	r2, [pc, #16]	; (8008c94 <prvSampleTimeNow+0x3c>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20001268 	.word	0x20001268

08008c98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d812      	bhi.n	8008ce4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	1ad2      	subs	r2, r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d302      	bcc.n	8008cd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	e01b      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <prvInsertTimerInActiveList+0x7c>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fe f982 	bl	8006fe6 <vListInsert>
 8008ce2:	e012      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d206      	bcs.n	8008cfa <prvInsertTimerInActiveList+0x62>
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e007      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <prvInsertTimerInActiveList+0x80>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fe f96e 	bl	8006fe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d0a:	697b      	ldr	r3, [r7, #20]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	2000125c 	.word	0x2000125c
 8008d18:	20001258 	.word	0x20001258

08008d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	; 0x38
 8008d20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d22:	e0ca      	b.n	8008eba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	da18      	bge.n	8008d5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	61fb      	str	r3, [r7, #28]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d52:	6850      	ldr	r0, [r2, #4]
 8008d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d56:	6892      	ldr	r2, [r2, #8]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f2c0 80aa 	blt.w	8008eb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	3304      	adds	r3, #4
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe f96f 	bl	8007058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d7a:	463b      	mov	r3, r7
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff ff6b 	bl	8008c58 <prvSampleTimeNow>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	f200 8097 	bhi.w	8008eba <prvProcessReceivedCommands+0x19e>
 8008d8c:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <prvProcessReceivedCommands+0x78>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008dbd 	.word	0x08008dbd
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008dbd 	.word	0x08008dbd
 8008da0:	08008e31 	.word	0x08008e31
 8008da4:	08008e45 	.word	0x08008e45
 8008da8:	08008e8f 	.word	0x08008e8f
 8008dac:	08008dbd 	.word	0x08008dbd
 8008db0:	08008dbd 	.word	0x08008dbd
 8008db4:	08008e31 	.word	0x08008e31
 8008db8:	08008e45 	.word	0x08008e45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	18d1      	adds	r1, r2, r3
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ddc:	f7ff ff5c 	bl	8008c98 <prvInsertTimerInActiveList>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d069      	beq.n	8008eba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d05e      	beq.n	8008eba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	441a      	add	r2, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e0e:	f7ff fe05 	bl	8008a1c <xTimerGenericCommand>
 8008e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d14f      	bne.n	8008eba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	61bb      	str	r3, [r7, #24]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e42:	e03a      	b.n	8008eba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e4a:	f043 0301 	orr.w	r3, r3, #1
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	617b      	str	r3, [r7, #20]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	18d1      	adds	r1, r2, r3
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e88:	f7ff ff06 	bl	8008c98 <prvInsertTimerInActiveList>
					break;
 8008e8c:	e015      	b.n	8008eba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d103      	bne.n	8008ea4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e9e:	f000 fbdf 	bl	8009660 <vPortFree>
 8008ea2:	e00a      	b.n	8008eba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008eb6:	e000      	b.n	8008eba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008eb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eba:	4b08      	ldr	r3, [pc, #32]	; (8008edc <prvProcessReceivedCommands+0x1c0>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	1d39      	adds	r1, r7, #4
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fb90 	bl	80075e8 <xQueueReceive>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f af2a 	bne.w	8008d24 <prvProcessReceivedCommands+0x8>
	}
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	3730      	adds	r7, #48	; 0x30
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20001260 	.word	0x20001260

08008ee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ee6:	e048      	b.n	8008f7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ee8:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <prvSwitchTimerLists+0xc0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef2:	4b2b      	ldr	r3, [pc, #172]	; (8008fa0 <prvSwitchTimerLists+0xc0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3304      	adds	r3, #4
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe f8a9 	bl	8007058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d02e      	beq.n	8008f7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4413      	add	r3, r2
 8008f24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d90e      	bls.n	8008f4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f3a:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <prvSwitchTimerLists+0xc0>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fe f84e 	bl	8006fe6 <vListInsert>
 8008f4a:	e016      	b.n	8008f7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	2300      	movs	r3, #0
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	2100      	movs	r1, #0
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7ff fd60 	bl	8008a1c <xTimerGenericCommand>
 8008f5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10a      	bne.n	8008f7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	603b      	str	r3, [r7, #0]
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <prvSwitchTimerLists+0xc0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1b1      	bne.n	8008ee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f84:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <prvSwitchTimerLists+0xc0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <prvSwitchTimerLists+0xc4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <prvSwitchTimerLists+0xc0>)
 8008f90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f92:	4a04      	ldr	r2, [pc, #16]	; (8008fa4 <prvSwitchTimerLists+0xc4>)
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	6013      	str	r3, [r2, #0]
}
 8008f98:	bf00      	nop
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20001258 	.word	0x20001258
 8008fa4:	2000125c 	.word	0x2000125c

08008fa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fae:	f000 f969 	bl	8009284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fb2:	4b15      	ldr	r3, [pc, #84]	; (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d120      	bne.n	8008ffc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fba:	4814      	ldr	r0, [pc, #80]	; (800900c <prvCheckForValidListAndQueue+0x64>)
 8008fbc:	f7fd ffc2 	bl	8006f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fc0:	4813      	ldr	r0, [pc, #76]	; (8009010 <prvCheckForValidListAndQueue+0x68>)
 8008fc2:	f7fd ffbf 	bl	8006f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fc6:	4b13      	ldr	r3, [pc, #76]	; (8009014 <prvCheckForValidListAndQueue+0x6c>)
 8008fc8:	4a10      	ldr	r2, [pc, #64]	; (800900c <prvCheckForValidListAndQueue+0x64>)
 8008fca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fcc:	4b12      	ldr	r3, [pc, #72]	; (8009018 <prvCheckForValidListAndQueue+0x70>)
 8008fce:	4a10      	ldr	r2, [pc, #64]	; (8009010 <prvCheckForValidListAndQueue+0x68>)
 8008fd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4b11      	ldr	r3, [pc, #68]	; (800901c <prvCheckForValidListAndQueue+0x74>)
 8008fd8:	4a11      	ldr	r2, [pc, #68]	; (8009020 <prvCheckForValidListAndQueue+0x78>)
 8008fda:	2110      	movs	r1, #16
 8008fdc:	200a      	movs	r0, #10
 8008fde:	f7fe f8cd 	bl	800717c <xQueueGenericCreateStatic>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008fe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <prvCheckForValidListAndQueue+0x60>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	490b      	ldr	r1, [pc, #44]	; (8009024 <prvCheckForValidListAndQueue+0x7c>)
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fce6 	bl	80079c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ffc:	f000 f972 	bl	80092e4 <vPortExitCritical>
}
 8009000:	bf00      	nop
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20001260 	.word	0x20001260
 800900c:	20001230 	.word	0x20001230
 8009010:	20001244 	.word	0x20001244
 8009014:	20001258 	.word	0x20001258
 8009018:	2000125c 	.word	0x2000125c
 800901c:	2000130c 	.word	0x2000130c
 8009020:	2000126c 	.word	0x2000126c
 8009024:	0800a498 	.word	0x0800a498

08009028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3b04      	subs	r3, #4
 8009038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3b04      	subs	r3, #4
 8009046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f023 0201 	bic.w	r2, r3, #1
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b04      	subs	r3, #4
 8009056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009058:	4a0c      	ldr	r2, [pc, #48]	; (800908c <pxPortInitialiseStack+0x64>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3b14      	subs	r3, #20
 8009062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3b04      	subs	r3, #4
 800906e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f06f 0202 	mvn.w	r2, #2
 8009076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3b20      	subs	r3, #32
 800907c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800907e:	68fb      	ldr	r3, [r7, #12]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	08009091 	.word	0x08009091

08009090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800909a:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <prvTaskExitError+0x54>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d00a      	beq.n	80090ba <prvTaskExitError+0x2a>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	60fb      	str	r3, [r7, #12]
}
 80090b6:	bf00      	nop
 80090b8:	e7fe      	b.n	80090b8 <prvTaskExitError+0x28>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	60bb      	str	r3, [r7, #8]
}
 80090cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090ce:	bf00      	nop
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0fc      	beq.n	80090d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	2000000c 	.word	0x2000000c
	...

080090f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <pxCurrentTCBConst2>)
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	6808      	ldr	r0, [r1, #0]
 80090f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	f380 8809 	msr	PSP, r0
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f04f 0000 	mov.w	r0, #0
 8009106:	f380 8811 	msr	BASEPRI, r0
 800910a:	4770      	bx	lr
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst2>:
 8009110:	20000d30 	.word	0x20000d30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009118:	4808      	ldr	r0, [pc, #32]	; (800913c <prvPortStartFirstTask+0x24>)
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	6800      	ldr	r0, [r0, #0]
 800911e:	f380 8808 	msr	MSP, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8814 	msr	CONTROL, r0
 800912a:	b662      	cpsie	i
 800912c:	b661      	cpsie	f
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	df00      	svc	0
 8009138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800913a:	bf00      	nop
 800913c:	e000ed08 	.word	0xe000ed08

08009140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009146:	4b46      	ldr	r3, [pc, #280]	; (8009260 <xPortStartScheduler+0x120>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a46      	ldr	r2, [pc, #280]	; (8009264 <xPortStartScheduler+0x124>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d10a      	bne.n	8009166 <xPortStartScheduler+0x26>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	613b      	str	r3, [r7, #16]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009166:	4b3e      	ldr	r3, [pc, #248]	; (8009260 <xPortStartScheduler+0x120>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a3f      	ldr	r2, [pc, #252]	; (8009268 <xPortStartScheduler+0x128>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10a      	bne.n	8009186 <xPortStartScheduler+0x46>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009186:	4b39      	ldr	r3, [pc, #228]	; (800926c <xPortStartScheduler+0x12c>)
 8009188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	22ff      	movs	r2, #255	; 0xff
 8009196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b2db      	uxtb	r3, r3
 800919e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	4b31      	ldr	r3, [pc, #196]	; (8009270 <xPortStartScheduler+0x130>)
 80091ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091ae:	4b31      	ldr	r3, [pc, #196]	; (8009274 <xPortStartScheduler+0x134>)
 80091b0:	2207      	movs	r2, #7
 80091b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091b4:	e009      	b.n	80091ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80091b6:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <xPortStartScheduler+0x134>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4a2d      	ldr	r2, [pc, #180]	; (8009274 <xPortStartScheduler+0x134>)
 80091be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d0ef      	beq.n	80091b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091d6:	4b27      	ldr	r3, [pc, #156]	; (8009274 <xPortStartScheduler+0x134>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f1c3 0307 	rsb	r3, r3, #7
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d00a      	beq.n	80091f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	60bb      	str	r3, [r7, #8]
}
 80091f4:	bf00      	nop
 80091f6:	e7fe      	b.n	80091f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091f8:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <xPortStartScheduler+0x134>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	4a1d      	ldr	r2, [pc, #116]	; (8009274 <xPortStartScheduler+0x134>)
 8009200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009202:	4b1c      	ldr	r3, [pc, #112]	; (8009274 <xPortStartScheduler+0x134>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800920a:	4a1a      	ldr	r2, [pc, #104]	; (8009274 <xPortStartScheduler+0x134>)
 800920c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	b2da      	uxtb	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009216:	4b18      	ldr	r3, [pc, #96]	; (8009278 <xPortStartScheduler+0x138>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <xPortStartScheduler+0x138>)
 800921c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <xPortStartScheduler+0x138>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a14      	ldr	r2, [pc, #80]	; (8009278 <xPortStartScheduler+0x138>)
 8009228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800922c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800922e:	f000 f8dd 	bl	80093ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009232:	4b12      	ldr	r3, [pc, #72]	; (800927c <xPortStartScheduler+0x13c>)
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009238:	f000 f8fc 	bl	8009434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800923c:	4b10      	ldr	r3, [pc, #64]	; (8009280 <xPortStartScheduler+0x140>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a0f      	ldr	r2, [pc, #60]	; (8009280 <xPortStartScheduler+0x140>)
 8009242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009248:	f7ff ff66 	bl	8009118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800924c:	f7ff f848 	bl	80082e0 <vTaskSwitchContext>
	prvTaskExitError();
 8009250:	f7ff ff1e 	bl	8009090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	e000ed00 	.word	0xe000ed00
 8009264:	410fc271 	.word	0x410fc271
 8009268:	410fc270 	.word	0x410fc270
 800926c:	e000e400 	.word	0xe000e400
 8009270:	2000135c 	.word	0x2000135c
 8009274:	20001360 	.word	0x20001360
 8009278:	e000ed20 	.word	0xe000ed20
 800927c:	2000000c 	.word	0x2000000c
 8009280:	e000ef34 	.word	0xe000ef34

08009284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	607b      	str	r3, [r7, #4]
}
 800929c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800929e:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <vPortEnterCritical+0x58>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3301      	adds	r3, #1
 80092a4:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <vPortEnterCritical+0x58>)
 80092a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <vPortEnterCritical+0x58>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d10f      	bne.n	80092d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <vPortEnterCritical+0x5c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	603b      	str	r3, [r7, #0]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <vPortEnterCritical+0x4a>
	}
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	2000000c 	.word	0x2000000c
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092ea:	4b12      	ldr	r3, [pc, #72]	; (8009334 <vPortExitCritical+0x50>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <vPortExitCritical+0x24>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	607b      	str	r3, [r7, #4]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <vPortExitCritical+0x50>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3b01      	subs	r3, #1
 800930e:	4a09      	ldr	r2, [pc, #36]	; (8009334 <vPortExitCritical+0x50>)
 8009310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <vPortExitCritical+0x50>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d105      	bne.n	8009326 <vPortExitCritical+0x42>
 800931a:	2300      	movs	r3, #0
 800931c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	f383 8811 	msr	BASEPRI, r3
}
 8009324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	2000000c 	.word	0x2000000c
	...

08009340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009340:	f3ef 8009 	mrs	r0, PSP
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	4b15      	ldr	r3, [pc, #84]	; (80093a0 <pxCurrentTCBConst>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	f01e 0f10 	tst.w	lr, #16
 8009350:	bf08      	it	eq
 8009352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	6010      	str	r0, [r2, #0]
 800935c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009364:	f380 8811 	msr	BASEPRI, r0
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f7fe ffb6 	bl	80082e0 <vTaskSwitchContext>
 8009374:	f04f 0000 	mov.w	r0, #0
 8009378:	f380 8811 	msr	BASEPRI, r0
 800937c:	bc09      	pop	{r0, r3}
 800937e:	6819      	ldr	r1, [r3, #0]
 8009380:	6808      	ldr	r0, [r1, #0]
 8009382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009386:	f01e 0f10 	tst.w	lr, #16
 800938a:	bf08      	it	eq
 800938c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009390:	f380 8809 	msr	PSP, r0
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w

080093a0 <pxCurrentTCBConst>:
 80093a0:	20000d30 	.word	0x20000d30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop

080093a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	607b      	str	r3, [r7, #4]
}
 80093c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093c2:	f7fe fed3 	bl	800816c <xTaskIncrementTick>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <xPortSysTickHandler+0x40>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f383 8811 	msr	BASEPRI, r3
}
 80093de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	e000ed04 	.word	0xe000ed04

080093ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093f0:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <vPortSetupTimerInterrupt+0x34>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093f6:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <vPortSetupTimerInterrupt+0x38>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <vPortSetupTimerInterrupt+0x3c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0a      	ldr	r2, [pc, #40]	; (800942c <vPortSetupTimerInterrupt+0x40>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	099b      	lsrs	r3, r3, #6
 8009408:	4a09      	ldr	r2, [pc, #36]	; (8009430 <vPortSetupTimerInterrupt+0x44>)
 800940a:	3b01      	subs	r3, #1
 800940c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800940e:	4b04      	ldr	r3, [pc, #16]	; (8009420 <vPortSetupTimerInterrupt+0x34>)
 8009410:	2207      	movs	r2, #7
 8009412:	601a      	str	r2, [r3, #0]
}
 8009414:	bf00      	nop
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	e000e010 	.word	0xe000e010
 8009424:	e000e018 	.word	0xe000e018
 8009428:	20000000 	.word	0x20000000
 800942c:	10624dd3 	.word	0x10624dd3
 8009430:	e000e014 	.word	0xe000e014

08009434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009444 <vPortEnableVFP+0x10>
 8009438:	6801      	ldr	r1, [r0, #0]
 800943a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800943e:	6001      	str	r1, [r0, #0]
 8009440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009442:	bf00      	nop
 8009444:	e000ed88 	.word	0xe000ed88

08009448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800944e:	f3ef 8305 	mrs	r3, IPSR
 8009452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b0f      	cmp	r3, #15
 8009458:	d914      	bls.n	8009484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800945a:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <vPortValidateInterruptPriority+0x70>)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009464:	4b15      	ldr	r3, [pc, #84]	; (80094bc <vPortValidateInterruptPriority+0x74>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	7afa      	ldrb	r2, [r7, #11]
 800946a:	429a      	cmp	r2, r3
 800946c:	d20a      	bcs.n	8009484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009484:	4b0e      	ldr	r3, [pc, #56]	; (80094c0 <vPortValidateInterruptPriority+0x78>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800948c:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <vPortValidateInterruptPriority+0x7c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d90a      	bls.n	80094aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	603b      	str	r3, [r7, #0]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <vPortValidateInterruptPriority+0x60>
	}
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	e000e3f0 	.word	0xe000e3f0
 80094bc:	2000135c 	.word	0x2000135c
 80094c0:	e000ed0c 	.word	0xe000ed0c
 80094c4:	20001360 	.word	0x20001360

080094c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	; 0x28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094d4:	f7fe fd7c 	bl	8007fd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094d8:	4b5b      	ldr	r3, [pc, #364]	; (8009648 <pvPortMalloc+0x180>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094e0:	f000 f920 	bl	8009724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094e4:	4b59      	ldr	r3, [pc, #356]	; (800964c <pvPortMalloc+0x184>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4013      	ands	r3, r2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 8093 	bne.w	8009618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01d      	beq.n	8009534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80094f8:	2208      	movs	r2, #8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4413      	add	r3, r2
 80094fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d014      	beq.n	8009534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	3308      	adds	r3, #8
 8009512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <pvPortMalloc+0x6c>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	617b      	str	r3, [r7, #20]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d06e      	beq.n	8009618 <pvPortMalloc+0x150>
 800953a:	4b45      	ldr	r3, [pc, #276]	; (8009650 <pvPortMalloc+0x188>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d869      	bhi.n	8009618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009544:	4b43      	ldr	r3, [pc, #268]	; (8009654 <pvPortMalloc+0x18c>)
 8009546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009548:	4b42      	ldr	r3, [pc, #264]	; (8009654 <pvPortMalloc+0x18c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800954e:	e004      	b.n	800955a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d903      	bls.n	800956c <pvPortMalloc+0xa4>
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f1      	bne.n	8009550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800956c:	4b36      	ldr	r3, [pc, #216]	; (8009648 <pvPortMalloc+0x180>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	429a      	cmp	r2, r3
 8009574:	d050      	beq.n	8009618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2208      	movs	r2, #8
 800957c:	4413      	add	r3, r2
 800957e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	2308      	movs	r3, #8
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	429a      	cmp	r2, r3
 8009596:	d91f      	bls.n	80095d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <pvPortMalloc+0xf8>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	613b      	str	r3, [r7, #16]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	1ad2      	subs	r2, r2, r3
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095d2:	69b8      	ldr	r0, [r7, #24]
 80095d4:	f000 f908 	bl	80097e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095d8:	4b1d      	ldr	r3, [pc, #116]	; (8009650 <pvPortMalloc+0x188>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <pvPortMalloc+0x188>)
 80095e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095e6:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <pvPortMalloc+0x188>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <pvPortMalloc+0x190>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d203      	bcs.n	80095fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095f2:	4b17      	ldr	r3, [pc, #92]	; (8009650 <pvPortMalloc+0x188>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a18      	ldr	r2, [pc, #96]	; (8009658 <pvPortMalloc+0x190>)
 80095f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	4b13      	ldr	r3, [pc, #76]	; (800964c <pvPortMalloc+0x184>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	431a      	orrs	r2, r3
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800960e:	4b13      	ldr	r3, [pc, #76]	; (800965c <pvPortMalloc+0x194>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3301      	adds	r3, #1
 8009614:	4a11      	ldr	r2, [pc, #68]	; (800965c <pvPortMalloc+0x194>)
 8009616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009618:	f7fe fce8 	bl	8007fec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <pvPortMalloc+0x174>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60fb      	str	r3, [r7, #12]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <pvPortMalloc+0x172>
	return pvReturn;
 800963c:	69fb      	ldr	r3, [r7, #28]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3728      	adds	r7, #40	; 0x28
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20004f6c 	.word	0x20004f6c
 800964c:	20004f80 	.word	0x20004f80
 8009650:	20004f70 	.word	0x20004f70
 8009654:	20004f64 	.word	0x20004f64
 8009658:	20004f74 	.word	0x20004f74
 800965c:	20004f78 	.word	0x20004f78

08009660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d04d      	beq.n	800970e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009672:	2308      	movs	r3, #8
 8009674:	425b      	negs	r3, r3
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	4413      	add	r3, r2
 800967a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <vPortFree+0xb8>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4013      	ands	r3, r2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <vPortFree+0x44>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	60fb      	str	r3, [r7, #12]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <vPortFree+0x62>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	60bb      	str	r3, [r7, #8]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	4b14      	ldr	r3, [pc, #80]	; (8009718 <vPortFree+0xb8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4013      	ands	r3, r2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01e      	beq.n	800970e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11a      	bne.n	800970e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <vPortFree+0xb8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	401a      	ands	r2, r3
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096e8:	f7fe fc72 	bl	8007fd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <vPortFree+0xbc>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	4a09      	ldr	r2, [pc, #36]	; (800971c <vPortFree+0xbc>)
 80096f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096fa:	6938      	ldr	r0, [r7, #16]
 80096fc:	f000 f874 	bl	80097e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <vPortFree+0xc0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	4a06      	ldr	r2, [pc, #24]	; (8009720 <vPortFree+0xc0>)
 8009708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800970a:	f7fe fc6f 	bl	8007fec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800970e:	bf00      	nop
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20004f80 	.word	0x20004f80
 800971c:	20004f70 	.word	0x20004f70
 8009720:	20004f7c 	.word	0x20004f7c

08009724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800972a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800972e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009730:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <prvHeapInit+0xac>)
 8009732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3307      	adds	r3, #7
 8009742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <prvHeapInit+0xac>)
 8009754:	4413      	add	r3, r2
 8009756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800975c:	4a1d      	ldr	r2, [pc, #116]	; (80097d4 <prvHeapInit+0xb0>)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <prvHeapInit+0xb0>)
 8009764:	2200      	movs	r2, #0
 8009766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009770:	2208      	movs	r2, #8
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0307 	bic.w	r3, r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <prvHeapInit+0xb4>)
 8009784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009786:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <prvHeapInit+0xb4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <prvHeapInit+0xb4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <prvHeapInit+0xb4>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <prvHeapInit+0xb8>)
 80097b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <prvHeapInit+0xbc>)
 80097ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <prvHeapInit+0xc0>)
 80097be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	20001364 	.word	0x20001364
 80097d4:	20004f64 	.word	0x20004f64
 80097d8:	20004f6c 	.word	0x20004f6c
 80097dc:	20004f74 	.word	0x20004f74
 80097e0:	20004f70 	.word	0x20004f70
 80097e4:	20004f80 	.word	0x20004f80

080097e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <prvInsertBlockIntoFreeList+0xac>)
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <prvInsertBlockIntoFreeList+0x14>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d8f7      	bhi.n	80097f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d108      	bne.n	800982a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	441a      	add	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	441a      	add	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d118      	bne.n	8009870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <prvInsertBlockIntoFreeList+0xb0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d00d      	beq.n	8009866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	441a      	add	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e008      	b.n	8009878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009866:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <prvInsertBlockIntoFreeList+0xb0>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e003      	b.n	8009878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	d002      	beq.n	8009886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20004f64 	.word	0x20004f64
 8009898:	20004f6c 	.word	0x20004f6c

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	; (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000010 	.word	0x20000010

080098a8 <std>:
 80098a8:	2300      	movs	r3, #0
 80098aa:	b510      	push	{r4, lr}
 80098ac:	4604      	mov	r4, r0
 80098ae:	e9c0 3300 	strd	r3, r3, [r0]
 80098b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098b6:	6083      	str	r3, [r0, #8]
 80098b8:	8181      	strh	r1, [r0, #12]
 80098ba:	6643      	str	r3, [r0, #100]	; 0x64
 80098bc:	81c2      	strh	r2, [r0, #14]
 80098be:	6183      	str	r3, [r0, #24]
 80098c0:	4619      	mov	r1, r3
 80098c2:	2208      	movs	r2, #8
 80098c4:	305c      	adds	r0, #92	; 0x5c
 80098c6:	f000 f91a 	bl	8009afe <memset>
 80098ca:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <std+0x38>)
 80098cc:	6263      	str	r3, [r4, #36]	; 0x24
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <std+0x3c>)
 80098d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <std+0x40>)
 80098d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <std+0x44>)
 80098d8:	6224      	str	r4, [r4, #32]
 80098da:	6323      	str	r3, [r4, #48]	; 0x30
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	bf00      	nop
 80098e0:	08009e19 	.word	0x08009e19
 80098e4:	08009e3b 	.word	0x08009e3b
 80098e8:	08009e73 	.word	0x08009e73
 80098ec:	08009e97 	.word	0x08009e97

080098f0 <_cleanup_r>:
 80098f0:	4901      	ldr	r1, [pc, #4]	; (80098f8 <_cleanup_r+0x8>)
 80098f2:	f000 b8af 	b.w	8009a54 <_fwalk_reent>
 80098f6:	bf00      	nop
 80098f8:	0800a171 	.word	0x0800a171

080098fc <__sfmoreglue>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	2268      	movs	r2, #104	; 0x68
 8009900:	1e4d      	subs	r5, r1, #1
 8009902:	4355      	muls	r5, r2
 8009904:	460e      	mov	r6, r1
 8009906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800990a:	f000 f921 	bl	8009b50 <_malloc_r>
 800990e:	4604      	mov	r4, r0
 8009910:	b140      	cbz	r0, 8009924 <__sfmoreglue+0x28>
 8009912:	2100      	movs	r1, #0
 8009914:	e9c0 1600 	strd	r1, r6, [r0]
 8009918:	300c      	adds	r0, #12
 800991a:	60a0      	str	r0, [r4, #8]
 800991c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009920:	f000 f8ed 	bl	8009afe <memset>
 8009924:	4620      	mov	r0, r4
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <__sfp_lock_acquire>:
 8009928:	4801      	ldr	r0, [pc, #4]	; (8009930 <__sfp_lock_acquire+0x8>)
 800992a:	f000 b8d8 	b.w	8009ade <__retarget_lock_acquire_recursive>
 800992e:	bf00      	nop
 8009930:	20004f85 	.word	0x20004f85

08009934 <__sfp_lock_release>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__sfp_lock_release+0x8>)
 8009936:	f000 b8d3 	b.w	8009ae0 <__retarget_lock_release_recursive>
 800993a:	bf00      	nop
 800993c:	20004f85 	.word	0x20004f85

08009940 <__sinit_lock_acquire>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__sinit_lock_acquire+0x8>)
 8009942:	f000 b8cc 	b.w	8009ade <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	20004f86 	.word	0x20004f86

0800994c <__sinit_lock_release>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__sinit_lock_release+0x8>)
 800994e:	f000 b8c7 	b.w	8009ae0 <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	20004f86 	.word	0x20004f86

08009958 <__sinit>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4604      	mov	r4, r0
 800995c:	f7ff fff0 	bl	8009940 <__sinit_lock_acquire>
 8009960:	69a3      	ldr	r3, [r4, #24]
 8009962:	b11b      	cbz	r3, 800996c <__sinit+0x14>
 8009964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009968:	f7ff bff0 	b.w	800994c <__sinit_lock_release>
 800996c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009970:	6523      	str	r3, [r4, #80]	; 0x50
 8009972:	4b13      	ldr	r3, [pc, #76]	; (80099c0 <__sinit+0x68>)
 8009974:	4a13      	ldr	r2, [pc, #76]	; (80099c4 <__sinit+0x6c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	62a2      	str	r2, [r4, #40]	; 0x28
 800997a:	42a3      	cmp	r3, r4
 800997c:	bf04      	itt	eq
 800997e:	2301      	moveq	r3, #1
 8009980:	61a3      	streq	r3, [r4, #24]
 8009982:	4620      	mov	r0, r4
 8009984:	f000 f820 	bl	80099c8 <__sfp>
 8009988:	6060      	str	r0, [r4, #4]
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f81c 	bl	80099c8 <__sfp>
 8009990:	60a0      	str	r0, [r4, #8]
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f818 	bl	80099c8 <__sfp>
 8009998:	2200      	movs	r2, #0
 800999a:	60e0      	str	r0, [r4, #12]
 800999c:	2104      	movs	r1, #4
 800999e:	6860      	ldr	r0, [r4, #4]
 80099a0:	f7ff ff82 	bl	80098a8 <std>
 80099a4:	68a0      	ldr	r0, [r4, #8]
 80099a6:	2201      	movs	r2, #1
 80099a8:	2109      	movs	r1, #9
 80099aa:	f7ff ff7d 	bl	80098a8 <std>
 80099ae:	68e0      	ldr	r0, [r4, #12]
 80099b0:	2202      	movs	r2, #2
 80099b2:	2112      	movs	r1, #18
 80099b4:	f7ff ff78 	bl	80098a8 <std>
 80099b8:	2301      	movs	r3, #1
 80099ba:	61a3      	str	r3, [r4, #24]
 80099bc:	e7d2      	b.n	8009964 <__sinit+0xc>
 80099be:	bf00      	nop
 80099c0:	0800a5b0 	.word	0x0800a5b0
 80099c4:	080098f1 	.word	0x080098f1

080099c8 <__sfp>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	4607      	mov	r7, r0
 80099cc:	f7ff ffac 	bl	8009928 <__sfp_lock_acquire>
 80099d0:	4b1e      	ldr	r3, [pc, #120]	; (8009a4c <__sfp+0x84>)
 80099d2:	681e      	ldr	r6, [r3, #0]
 80099d4:	69b3      	ldr	r3, [r6, #24]
 80099d6:	b913      	cbnz	r3, 80099de <__sfp+0x16>
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff ffbd 	bl	8009958 <__sinit>
 80099de:	3648      	adds	r6, #72	; 0x48
 80099e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	d503      	bpl.n	80099f0 <__sfp+0x28>
 80099e8:	6833      	ldr	r3, [r6, #0]
 80099ea:	b30b      	cbz	r3, 8009a30 <__sfp+0x68>
 80099ec:	6836      	ldr	r6, [r6, #0]
 80099ee:	e7f7      	b.n	80099e0 <__sfp+0x18>
 80099f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099f4:	b9d5      	cbnz	r5, 8009a2c <__sfp+0x64>
 80099f6:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <__sfp+0x88>)
 80099f8:	60e3      	str	r3, [r4, #12]
 80099fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009a00:	f000 f86c 	bl	8009adc <__retarget_lock_init_recursive>
 8009a04:	f7ff ff96 	bl	8009934 <__sfp_lock_release>
 8009a08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a10:	6025      	str	r5, [r4, #0]
 8009a12:	61a5      	str	r5, [r4, #24]
 8009a14:	2208      	movs	r2, #8
 8009a16:	4629      	mov	r1, r5
 8009a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a1c:	f000 f86f 	bl	8009afe <memset>
 8009a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2c:	3468      	adds	r4, #104	; 0x68
 8009a2e:	e7d9      	b.n	80099e4 <__sfp+0x1c>
 8009a30:	2104      	movs	r1, #4
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff ff62 	bl	80098fc <__sfmoreglue>
 8009a38:	4604      	mov	r4, r0
 8009a3a:	6030      	str	r0, [r6, #0]
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d1d5      	bne.n	80099ec <__sfp+0x24>
 8009a40:	f7ff ff78 	bl	8009934 <__sfp_lock_release>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	e7ee      	b.n	8009a28 <__sfp+0x60>
 8009a4a:	bf00      	nop
 8009a4c:	0800a5b0 	.word	0x0800a5b0
 8009a50:	ffff0001 	.word	0xffff0001

08009a54 <_fwalk_reent>:
 8009a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4606      	mov	r6, r0
 8009a5a:	4688      	mov	r8, r1
 8009a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a60:	2700      	movs	r7, #0
 8009a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a66:	f1b9 0901 	subs.w	r9, r9, #1
 8009a6a:	d505      	bpl.n	8009a78 <_fwalk_reent+0x24>
 8009a6c:	6824      	ldr	r4, [r4, #0]
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d1f7      	bne.n	8009a62 <_fwalk_reent+0xe>
 8009a72:	4638      	mov	r0, r7
 8009a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a78:	89ab      	ldrh	r3, [r5, #12]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d907      	bls.n	8009a8e <_fwalk_reent+0x3a>
 8009a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a82:	3301      	adds	r3, #1
 8009a84:	d003      	beq.n	8009a8e <_fwalk_reent+0x3a>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4630      	mov	r0, r6
 8009a8a:	47c0      	blx	r8
 8009a8c:	4307      	orrs	r7, r0
 8009a8e:	3568      	adds	r5, #104	; 0x68
 8009a90:	e7e9      	b.n	8009a66 <_fwalk_reent+0x12>
	...

08009a94 <__libc_init_array>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	4d0d      	ldr	r5, [pc, #52]	; (8009acc <__libc_init_array+0x38>)
 8009a98:	4c0d      	ldr	r4, [pc, #52]	; (8009ad0 <__libc_init_array+0x3c>)
 8009a9a:	1b64      	subs	r4, r4, r5
 8009a9c:	10a4      	asrs	r4, r4, #2
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	42a6      	cmp	r6, r4
 8009aa2:	d109      	bne.n	8009ab8 <__libc_init_array+0x24>
 8009aa4:	4d0b      	ldr	r5, [pc, #44]	; (8009ad4 <__libc_init_array+0x40>)
 8009aa6:	4c0c      	ldr	r4, [pc, #48]	; (8009ad8 <__libc_init_array+0x44>)
 8009aa8:	f000 fca2 	bl	800a3f0 <_init>
 8009aac:	1b64      	subs	r4, r4, r5
 8009aae:	10a4      	asrs	r4, r4, #2
 8009ab0:	2600      	movs	r6, #0
 8009ab2:	42a6      	cmp	r6, r4
 8009ab4:	d105      	bne.n	8009ac2 <__libc_init_array+0x2e>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009abc:	4798      	blx	r3
 8009abe:	3601      	adds	r6, #1
 8009ac0:	e7ee      	b.n	8009aa0 <__libc_init_array+0xc>
 8009ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac6:	4798      	blx	r3
 8009ac8:	3601      	adds	r6, #1
 8009aca:	e7f2      	b.n	8009ab2 <__libc_init_array+0x1e>
 8009acc:	0800a5bc 	.word	0x0800a5bc
 8009ad0:	0800a5bc 	.word	0x0800a5bc
 8009ad4:	0800a5bc 	.word	0x0800a5bc
 8009ad8:	0800a5c0 	.word	0x0800a5c0

08009adc <__retarget_lock_init_recursive>:
 8009adc:	4770      	bx	lr

08009ade <__retarget_lock_acquire_recursive>:
 8009ade:	4770      	bx	lr

08009ae0 <__retarget_lock_release_recursive>:
 8009ae0:	4770      	bx	lr

08009ae2 <memcpy>:
 8009ae2:	440a      	add	r2, r1
 8009ae4:	4291      	cmp	r1, r2
 8009ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aea:	d100      	bne.n	8009aee <memcpy+0xc>
 8009aec:	4770      	bx	lr
 8009aee:	b510      	push	{r4, lr}
 8009af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af8:	4291      	cmp	r1, r2
 8009afa:	d1f9      	bne.n	8009af0 <memcpy+0xe>
 8009afc:	bd10      	pop	{r4, pc}

08009afe <memset>:
 8009afe:	4402      	add	r2, r0
 8009b00:	4603      	mov	r3, r0
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d100      	bne.n	8009b08 <memset+0xa>
 8009b06:	4770      	bx	lr
 8009b08:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0c:	e7f9      	b.n	8009b02 <memset+0x4>
	...

08009b10 <sbrk_aligned>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4e0e      	ldr	r6, [pc, #56]	; (8009b4c <sbrk_aligned+0x3c>)
 8009b14:	460c      	mov	r4, r1
 8009b16:	6831      	ldr	r1, [r6, #0]
 8009b18:	4605      	mov	r5, r0
 8009b1a:	b911      	cbnz	r1, 8009b22 <sbrk_aligned+0x12>
 8009b1c:	f000 f96c 	bl	8009df8 <_sbrk_r>
 8009b20:	6030      	str	r0, [r6, #0]
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 f967 	bl	8009df8 <_sbrk_r>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d00a      	beq.n	8009b44 <sbrk_aligned+0x34>
 8009b2e:	1cc4      	adds	r4, r0, #3
 8009b30:	f024 0403 	bic.w	r4, r4, #3
 8009b34:	42a0      	cmp	r0, r4
 8009b36:	d007      	beq.n	8009b48 <sbrk_aligned+0x38>
 8009b38:	1a21      	subs	r1, r4, r0
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 f95c 	bl	8009df8 <_sbrk_r>
 8009b40:	3001      	adds	r0, #1
 8009b42:	d101      	bne.n	8009b48 <sbrk_aligned+0x38>
 8009b44:	f04f 34ff 	mov.w	r4, #4294967295
 8009b48:	4620      	mov	r0, r4
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	20004f8c 	.word	0x20004f8c

08009b50 <_malloc_r>:
 8009b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b54:	1ccd      	adds	r5, r1, #3
 8009b56:	f025 0503 	bic.w	r5, r5, #3
 8009b5a:	3508      	adds	r5, #8
 8009b5c:	2d0c      	cmp	r5, #12
 8009b5e:	bf38      	it	cc
 8009b60:	250c      	movcc	r5, #12
 8009b62:	2d00      	cmp	r5, #0
 8009b64:	4607      	mov	r7, r0
 8009b66:	db01      	blt.n	8009b6c <_malloc_r+0x1c>
 8009b68:	42a9      	cmp	r1, r5
 8009b6a:	d905      	bls.n	8009b78 <_malloc_r+0x28>
 8009b6c:	230c      	movs	r3, #12
 8009b6e:	603b      	str	r3, [r7, #0]
 8009b70:	2600      	movs	r6, #0
 8009b72:	4630      	mov	r0, r6
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b78:	4e2e      	ldr	r6, [pc, #184]	; (8009c34 <_malloc_r+0xe4>)
 8009b7a:	f000 fbad 	bl	800a2d8 <__malloc_lock>
 8009b7e:	6833      	ldr	r3, [r6, #0]
 8009b80:	461c      	mov	r4, r3
 8009b82:	bb34      	cbnz	r4, 8009bd2 <_malloc_r+0x82>
 8009b84:	4629      	mov	r1, r5
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7ff ffc2 	bl	8009b10 <sbrk_aligned>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	4604      	mov	r4, r0
 8009b90:	d14d      	bne.n	8009c2e <_malloc_r+0xde>
 8009b92:	6834      	ldr	r4, [r6, #0]
 8009b94:	4626      	mov	r6, r4
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	d140      	bne.n	8009c1c <_malloc_r+0xcc>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	eb04 0803 	add.w	r8, r4, r3
 8009ba4:	f000 f928 	bl	8009df8 <_sbrk_r>
 8009ba8:	4580      	cmp	r8, r0
 8009baa:	d13a      	bne.n	8009c22 <_malloc_r+0xd2>
 8009bac:	6821      	ldr	r1, [r4, #0]
 8009bae:	3503      	adds	r5, #3
 8009bb0:	1a6d      	subs	r5, r5, r1
 8009bb2:	f025 0503 	bic.w	r5, r5, #3
 8009bb6:	3508      	adds	r5, #8
 8009bb8:	2d0c      	cmp	r5, #12
 8009bba:	bf38      	it	cc
 8009bbc:	250c      	movcc	r5, #12
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f7ff ffa5 	bl	8009b10 <sbrk_aligned>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d02b      	beq.n	8009c22 <_malloc_r+0xd2>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	442b      	add	r3, r5
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	e00e      	b.n	8009bf0 <_malloc_r+0xa0>
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	1b52      	subs	r2, r2, r5
 8009bd6:	d41e      	bmi.n	8009c16 <_malloc_r+0xc6>
 8009bd8:	2a0b      	cmp	r2, #11
 8009bda:	d916      	bls.n	8009c0a <_malloc_r+0xba>
 8009bdc:	1961      	adds	r1, r4, r5
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	6025      	str	r5, [r4, #0]
 8009be2:	bf18      	it	ne
 8009be4:	6059      	strne	r1, [r3, #4]
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	bf08      	it	eq
 8009bea:	6031      	streq	r1, [r6, #0]
 8009bec:	5162      	str	r2, [r4, r5]
 8009bee:	604b      	str	r3, [r1, #4]
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f104 060b 	add.w	r6, r4, #11
 8009bf6:	f000 fb75 	bl	800a2e4 <__malloc_unlock>
 8009bfa:	f026 0607 	bic.w	r6, r6, #7
 8009bfe:	1d23      	adds	r3, r4, #4
 8009c00:	1af2      	subs	r2, r6, r3
 8009c02:	d0b6      	beq.n	8009b72 <_malloc_r+0x22>
 8009c04:	1b9b      	subs	r3, r3, r6
 8009c06:	50a3      	str	r3, [r4, r2]
 8009c08:	e7b3      	b.n	8009b72 <_malloc_r+0x22>
 8009c0a:	6862      	ldr	r2, [r4, #4]
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	bf0c      	ite	eq
 8009c10:	6032      	streq	r2, [r6, #0]
 8009c12:	605a      	strne	r2, [r3, #4]
 8009c14:	e7ec      	b.n	8009bf0 <_malloc_r+0xa0>
 8009c16:	4623      	mov	r3, r4
 8009c18:	6864      	ldr	r4, [r4, #4]
 8009c1a:	e7b2      	b.n	8009b82 <_malloc_r+0x32>
 8009c1c:	4634      	mov	r4, r6
 8009c1e:	6876      	ldr	r6, [r6, #4]
 8009c20:	e7b9      	b.n	8009b96 <_malloc_r+0x46>
 8009c22:	230c      	movs	r3, #12
 8009c24:	603b      	str	r3, [r7, #0]
 8009c26:	4638      	mov	r0, r7
 8009c28:	f000 fb5c 	bl	800a2e4 <__malloc_unlock>
 8009c2c:	e7a1      	b.n	8009b72 <_malloc_r+0x22>
 8009c2e:	6025      	str	r5, [r4, #0]
 8009c30:	e7de      	b.n	8009bf0 <_malloc_r+0xa0>
 8009c32:	bf00      	nop
 8009c34:	20004f88 	.word	0x20004f88

08009c38 <_puts_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	b118      	cbz	r0, 8009c48 <_puts_r+0x10>
 8009c40:	6983      	ldr	r3, [r0, #24]
 8009c42:	b90b      	cbnz	r3, 8009c48 <_puts_r+0x10>
 8009c44:	f7ff fe88 	bl	8009958 <__sinit>
 8009c48:	69ab      	ldr	r3, [r5, #24]
 8009c4a:	68ac      	ldr	r4, [r5, #8]
 8009c4c:	b913      	cbnz	r3, 8009c54 <_puts_r+0x1c>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f7ff fe82 	bl	8009958 <__sinit>
 8009c54:	4b2c      	ldr	r3, [pc, #176]	; (8009d08 <_puts_r+0xd0>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d120      	bne.n	8009c9c <_puts_r+0x64>
 8009c5a:	686c      	ldr	r4, [r5, #4]
 8009c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c5e:	07db      	lsls	r3, r3, #31
 8009c60:	d405      	bmi.n	8009c6e <_puts_r+0x36>
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	0598      	lsls	r0, r3, #22
 8009c66:	d402      	bmi.n	8009c6e <_puts_r+0x36>
 8009c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6a:	f7ff ff38 	bl	8009ade <__retarget_lock_acquire_recursive>
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	0719      	lsls	r1, r3, #28
 8009c72:	d51d      	bpl.n	8009cb0 <_puts_r+0x78>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b1db      	cbz	r3, 8009cb0 <_puts_r+0x78>
 8009c78:	3e01      	subs	r6, #1
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c80:	3b01      	subs	r3, #1
 8009c82:	60a3      	str	r3, [r4, #8]
 8009c84:	bb39      	cbnz	r1, 8009cd6 <_puts_r+0x9e>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da38      	bge.n	8009cfc <_puts_r+0xc4>
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	210a      	movs	r1, #10
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 f906 	bl	8009ea0 <__swbuf_r>
 8009c94:	3001      	adds	r0, #1
 8009c96:	d011      	beq.n	8009cbc <_puts_r+0x84>
 8009c98:	250a      	movs	r5, #10
 8009c9a:	e011      	b.n	8009cc0 <_puts_r+0x88>
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <_puts_r+0xd4>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	d101      	bne.n	8009ca6 <_puts_r+0x6e>
 8009ca2:	68ac      	ldr	r4, [r5, #8]
 8009ca4:	e7da      	b.n	8009c5c <_puts_r+0x24>
 8009ca6:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <_puts_r+0xd8>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	bf08      	it	eq
 8009cac:	68ec      	ldreq	r4, [r5, #12]
 8009cae:	e7d5      	b.n	8009c5c <_puts_r+0x24>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f000 f958 	bl	8009f68 <__swsetup_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0dd      	beq.n	8009c78 <_puts_r+0x40>
 8009cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8009cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cc2:	07da      	lsls	r2, r3, #31
 8009cc4:	d405      	bmi.n	8009cd2 <_puts_r+0x9a>
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	059b      	lsls	r3, r3, #22
 8009cca:	d402      	bmi.n	8009cd2 <_puts_r+0x9a>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cce:	f7ff ff07 	bl	8009ae0 <__retarget_lock_release_recursive>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	bd70      	pop	{r4, r5, r6, pc}
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	da04      	bge.n	8009ce4 <_puts_r+0xac>
 8009cda:	69a2      	ldr	r2, [r4, #24]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	dc06      	bgt.n	8009cee <_puts_r+0xb6>
 8009ce0:	290a      	cmp	r1, #10
 8009ce2:	d004      	beq.n	8009cee <_puts_r+0xb6>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	6022      	str	r2, [r4, #0]
 8009cea:	7019      	strb	r1, [r3, #0]
 8009cec:	e7c5      	b.n	8009c7a <_puts_r+0x42>
 8009cee:	4622      	mov	r2, r4
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f000 f8d5 	bl	8009ea0 <__swbuf_r>
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d1bf      	bne.n	8009c7a <_puts_r+0x42>
 8009cfa:	e7df      	b.n	8009cbc <_puts_r+0x84>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	250a      	movs	r5, #10
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	6022      	str	r2, [r4, #0]
 8009d04:	701d      	strb	r5, [r3, #0]
 8009d06:	e7db      	b.n	8009cc0 <_puts_r+0x88>
 8009d08:	0800a570 	.word	0x0800a570
 8009d0c:	0800a590 	.word	0x0800a590
 8009d10:	0800a550 	.word	0x0800a550

08009d14 <puts>:
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <puts+0xc>)
 8009d16:	4601      	mov	r1, r0
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	f7ff bf8d 	b.w	8009c38 <_puts_r>
 8009d1e:	bf00      	nop
 8009d20:	20000010 	.word	0x20000010

08009d24 <cleanup_glue>:
 8009d24:	b538      	push	{r3, r4, r5, lr}
 8009d26:	460c      	mov	r4, r1
 8009d28:	6809      	ldr	r1, [r1, #0]
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b109      	cbz	r1, 8009d32 <cleanup_glue+0xe>
 8009d2e:	f7ff fff9 	bl	8009d24 <cleanup_glue>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d3a:	f000 bad9 	b.w	800a2f0 <_free_r>
	...

08009d40 <_reclaim_reent>:
 8009d40:	4b2c      	ldr	r3, [pc, #176]	; (8009df4 <_reclaim_reent+0xb4>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4283      	cmp	r3, r0
 8009d46:	b570      	push	{r4, r5, r6, lr}
 8009d48:	4604      	mov	r4, r0
 8009d4a:	d051      	beq.n	8009df0 <_reclaim_reent+0xb0>
 8009d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d4e:	b143      	cbz	r3, 8009d62 <_reclaim_reent+0x22>
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d14a      	bne.n	8009dec <_reclaim_reent+0xac>
 8009d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d58:	6819      	ldr	r1, [r3, #0]
 8009d5a:	b111      	cbz	r1, 8009d62 <_reclaim_reent+0x22>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 fac7 	bl	800a2f0 <_free_r>
 8009d62:	6961      	ldr	r1, [r4, #20]
 8009d64:	b111      	cbz	r1, 8009d6c <_reclaim_reent+0x2c>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 fac2 	bl	800a2f0 <_free_r>
 8009d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d6e:	b111      	cbz	r1, 8009d76 <_reclaim_reent+0x36>
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 fabd 	bl	800a2f0 <_free_r>
 8009d76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d78:	b111      	cbz	r1, 8009d80 <_reclaim_reent+0x40>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fab8 	bl	800a2f0 <_free_r>
 8009d80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d82:	b111      	cbz	r1, 8009d8a <_reclaim_reent+0x4a>
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 fab3 	bl	800a2f0 <_free_r>
 8009d8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d8c:	b111      	cbz	r1, 8009d94 <_reclaim_reent+0x54>
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 faae 	bl	800a2f0 <_free_r>
 8009d94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d96:	b111      	cbz	r1, 8009d9e <_reclaim_reent+0x5e>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 faa9 	bl	800a2f0 <_free_r>
 8009d9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009da0:	b111      	cbz	r1, 8009da8 <_reclaim_reent+0x68>
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 faa4 	bl	800a2f0 <_free_r>
 8009da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009daa:	b111      	cbz	r1, 8009db2 <_reclaim_reent+0x72>
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 fa9f 	bl	800a2f0 <_free_r>
 8009db2:	69a3      	ldr	r3, [r4, #24]
 8009db4:	b1e3      	cbz	r3, 8009df0 <_reclaim_reent+0xb0>
 8009db6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009db8:	4620      	mov	r0, r4
 8009dba:	4798      	blx	r3
 8009dbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009dbe:	b1b9      	cbz	r1, 8009df0 <_reclaim_reent+0xb0>
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dc6:	f7ff bfad 	b.w	8009d24 <cleanup_glue>
 8009dca:	5949      	ldr	r1, [r1, r5]
 8009dcc:	b941      	cbnz	r1, 8009de0 <_reclaim_reent+0xa0>
 8009dce:	3504      	adds	r5, #4
 8009dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd2:	2d80      	cmp	r5, #128	; 0x80
 8009dd4:	68d9      	ldr	r1, [r3, #12]
 8009dd6:	d1f8      	bne.n	8009dca <_reclaim_reent+0x8a>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fa89 	bl	800a2f0 <_free_r>
 8009dde:	e7ba      	b.n	8009d56 <_reclaim_reent+0x16>
 8009de0:	680e      	ldr	r6, [r1, #0]
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 fa84 	bl	800a2f0 <_free_r>
 8009de8:	4631      	mov	r1, r6
 8009dea:	e7ef      	b.n	8009dcc <_reclaim_reent+0x8c>
 8009dec:	2500      	movs	r5, #0
 8009dee:	e7ef      	b.n	8009dd0 <_reclaim_reent+0x90>
 8009df0:	bd70      	pop	{r4, r5, r6, pc}
 8009df2:	bf00      	nop
 8009df4:	20000010 	.word	0x20000010

08009df8 <_sbrk_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	; (8009e14 <_sbrk_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f7 faea 	bl	80013dc <_sbrk>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_sbrk_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_sbrk_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20004f90 	.word	0x20004f90

08009e18 <__sread>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e20:	f000 fab2 	bl	800a388 <_read_r>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	bfab      	itete	ge
 8009e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e2c:	181b      	addge	r3, r3, r0
 8009e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e32:	bfac      	ite	ge
 8009e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e36:	81a3      	strhlt	r3, [r4, #12]
 8009e38:	bd10      	pop	{r4, pc}

08009e3a <__swrite>:
 8009e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	461f      	mov	r7, r3
 8009e40:	898b      	ldrh	r3, [r1, #12]
 8009e42:	05db      	lsls	r3, r3, #23
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	4616      	mov	r6, r2
 8009e4a:	d505      	bpl.n	8009e58 <__swrite+0x1e>
 8009e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e50:	2302      	movs	r3, #2
 8009e52:	2200      	movs	r2, #0
 8009e54:	f000 f9c8 	bl	800a1e8 <_lseek_r>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	4632      	mov	r2, r6
 8009e66:	463b      	mov	r3, r7
 8009e68:	4628      	mov	r0, r5
 8009e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	f000 b869 	b.w	8009f44 <_write_r>

08009e72 <__sseek>:
 8009e72:	b510      	push	{r4, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7a:	f000 f9b5 	bl	800a1e8 <_lseek_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	bf15      	itete	ne
 8009e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e8e:	81a3      	strheq	r3, [r4, #12]
 8009e90:	bf18      	it	ne
 8009e92:	81a3      	strhne	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__sclose>:
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	f000 b8d3 	b.w	800a044 <_close_r>
	...

08009ea0 <__swbuf_r>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	460e      	mov	r6, r1
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	b118      	cbz	r0, 8009eb2 <__swbuf_r+0x12>
 8009eaa:	6983      	ldr	r3, [r0, #24]
 8009eac:	b90b      	cbnz	r3, 8009eb2 <__swbuf_r+0x12>
 8009eae:	f7ff fd53 	bl	8009958 <__sinit>
 8009eb2:	4b21      	ldr	r3, [pc, #132]	; (8009f38 <__swbuf_r+0x98>)
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	d12b      	bne.n	8009f10 <__swbuf_r+0x70>
 8009eb8:	686c      	ldr	r4, [r5, #4]
 8009eba:	69a3      	ldr	r3, [r4, #24]
 8009ebc:	60a3      	str	r3, [r4, #8]
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	071a      	lsls	r2, r3, #28
 8009ec2:	d52f      	bpl.n	8009f24 <__swbuf_r+0x84>
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	b36b      	cbz	r3, 8009f24 <__swbuf_r+0x84>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	6820      	ldr	r0, [r4, #0]
 8009ecc:	1ac0      	subs	r0, r0, r3
 8009ece:	6963      	ldr	r3, [r4, #20]
 8009ed0:	b2f6      	uxtb	r6, r6
 8009ed2:	4283      	cmp	r3, r0
 8009ed4:	4637      	mov	r7, r6
 8009ed6:	dc04      	bgt.n	8009ee2 <__swbuf_r+0x42>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 f948 	bl	800a170 <_fflush_r>
 8009ee0:	bb30      	cbnz	r0, 8009f30 <__swbuf_r+0x90>
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	60a3      	str	r3, [r4, #8]
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	6022      	str	r2, [r4, #0]
 8009eee:	701e      	strb	r6, [r3, #0]
 8009ef0:	6963      	ldr	r3, [r4, #20]
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	4283      	cmp	r3, r0
 8009ef6:	d004      	beq.n	8009f02 <__swbuf_r+0x62>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	07db      	lsls	r3, r3, #31
 8009efc:	d506      	bpl.n	8009f0c <__swbuf_r+0x6c>
 8009efe:	2e0a      	cmp	r6, #10
 8009f00:	d104      	bne.n	8009f0c <__swbuf_r+0x6c>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4628      	mov	r0, r5
 8009f06:	f000 f933 	bl	800a170 <_fflush_r>
 8009f0a:	b988      	cbnz	r0, 8009f30 <__swbuf_r+0x90>
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f10:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <__swbuf_r+0x9c>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d101      	bne.n	8009f1a <__swbuf_r+0x7a>
 8009f16:	68ac      	ldr	r4, [r5, #8]
 8009f18:	e7cf      	b.n	8009eba <__swbuf_r+0x1a>
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <__swbuf_r+0xa0>)
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	bf08      	it	eq
 8009f20:	68ec      	ldreq	r4, [r5, #12]
 8009f22:	e7ca      	b.n	8009eba <__swbuf_r+0x1a>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 f81e 	bl	8009f68 <__swsetup_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d0cb      	beq.n	8009ec8 <__swbuf_r+0x28>
 8009f30:	f04f 37ff 	mov.w	r7, #4294967295
 8009f34:	e7ea      	b.n	8009f0c <__swbuf_r+0x6c>
 8009f36:	bf00      	nop
 8009f38:	0800a570 	.word	0x0800a570
 8009f3c:	0800a590 	.word	0x0800a590
 8009f40:	0800a550 	.word	0x0800a550

08009f44 <_write_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d07      	ldr	r5, [pc, #28]	; (8009f64 <_write_r+0x20>)
 8009f48:	4604      	mov	r4, r0
 8009f4a:	4608      	mov	r0, r1
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	602a      	str	r2, [r5, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	f7f7 f876 	bl	8001044 <_write>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_write_r+0x1e>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_write_r+0x1e>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	20004f90 	.word	0x20004f90

08009f68 <__swsetup_r>:
 8009f68:	4b32      	ldr	r3, [pc, #200]	; (800a034 <__swsetup_r+0xcc>)
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	b125      	cbz	r5, 8009f7e <__swsetup_r+0x16>
 8009f74:	69ab      	ldr	r3, [r5, #24]
 8009f76:	b913      	cbnz	r3, 8009f7e <__swsetup_r+0x16>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff fced 	bl	8009958 <__sinit>
 8009f7e:	4b2e      	ldr	r3, [pc, #184]	; (800a038 <__swsetup_r+0xd0>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d10f      	bne.n	8009fa4 <__swsetup_r+0x3c>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	d42c      	bmi.n	8009fea <__swsetup_r+0x82>
 8009f90:	06dd      	lsls	r5, r3, #27
 8009f92:	d411      	bmi.n	8009fb8 <__swsetup_r+0x50>
 8009f94:	2309      	movs	r3, #9
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa2:	e03e      	b.n	800a022 <__swsetup_r+0xba>
 8009fa4:	4b25      	ldr	r3, [pc, #148]	; (800a03c <__swsetup_r+0xd4>)
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	d101      	bne.n	8009fae <__swsetup_r+0x46>
 8009faa:	68ac      	ldr	r4, [r5, #8]
 8009fac:	e7eb      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fae:	4b24      	ldr	r3, [pc, #144]	; (800a040 <__swsetup_r+0xd8>)
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	bf08      	it	eq
 8009fb4:	68ec      	ldreq	r4, [r5, #12]
 8009fb6:	e7e6      	b.n	8009f86 <__swsetup_r+0x1e>
 8009fb8:	0758      	lsls	r0, r3, #29
 8009fba:	d512      	bpl.n	8009fe2 <__swsetup_r+0x7a>
 8009fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fbe:	b141      	cbz	r1, 8009fd2 <__swsetup_r+0x6a>
 8009fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	d002      	beq.n	8009fce <__swsetup_r+0x66>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f000 f991 	bl	800a2f0 <_free_r>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f043 0308 	orr.w	r3, r3, #8
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	b94b      	cbnz	r3, 800a002 <__swsetup_r+0x9a>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d003      	beq.n	800a002 <__swsetup_r+0x9a>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 f92b 	bl	800a258 <__smakebuf_r>
 800a002:	89a0      	ldrh	r0, [r4, #12]
 800a004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a008:	f010 0301 	ands.w	r3, r0, #1
 800a00c:	d00a      	beq.n	800a024 <__swsetup_r+0xbc>
 800a00e:	2300      	movs	r3, #0
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	6963      	ldr	r3, [r4, #20]
 800a014:	425b      	negs	r3, r3
 800a016:	61a3      	str	r3, [r4, #24]
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swsetup_r+0xc6>
 800a01c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a020:	d1ba      	bne.n	8009f98 <__swsetup_r+0x30>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	0781      	lsls	r1, r0, #30
 800a026:	bf58      	it	pl
 800a028:	6963      	ldrpl	r3, [r4, #20]
 800a02a:	60a3      	str	r3, [r4, #8]
 800a02c:	e7f4      	b.n	800a018 <__swsetup_r+0xb0>
 800a02e:	2000      	movs	r0, #0
 800a030:	e7f7      	b.n	800a022 <__swsetup_r+0xba>
 800a032:	bf00      	nop
 800a034:	20000010 	.word	0x20000010
 800a038:	0800a570 	.word	0x0800a570
 800a03c:	0800a590 	.word	0x0800a590
 800a040:	0800a550 	.word	0x0800a550

0800a044 <_close_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	; (800a060 <_close_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f7 f98f 	bl	8001372 <_close>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_close_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_close_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	20004f90 	.word	0x20004f90

0800a064 <__sflush_r>:
 800a064:	898a      	ldrh	r2, [r1, #12]
 800a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	4605      	mov	r5, r0
 800a06c:	0710      	lsls	r0, r2, #28
 800a06e:	460c      	mov	r4, r1
 800a070:	d458      	bmi.n	800a124 <__sflush_r+0xc0>
 800a072:	684b      	ldr	r3, [r1, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	dc05      	bgt.n	800a084 <__sflush_r+0x20>
 800a078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	dc02      	bgt.n	800a084 <__sflush_r+0x20>
 800a07e:	2000      	movs	r0, #0
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a086:	2e00      	cmp	r6, #0
 800a088:	d0f9      	beq.n	800a07e <__sflush_r+0x1a>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a090:	682f      	ldr	r7, [r5, #0]
 800a092:	602b      	str	r3, [r5, #0]
 800a094:	d032      	beq.n	800a0fc <__sflush_r+0x98>
 800a096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	075a      	lsls	r2, r3, #29
 800a09c:	d505      	bpl.n	800a0aa <__sflush_r+0x46>
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	1ac0      	subs	r0, r0, r3
 800a0a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a4:	b10b      	cbz	r3, 800a0aa <__sflush_r+0x46>
 800a0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0a8:	1ac0      	subs	r0, r0, r3
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b0:	6a21      	ldr	r1, [r4, #32]
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b0      	blx	r6
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	d106      	bne.n	800a0ca <__sflush_r+0x66>
 800a0bc:	6829      	ldr	r1, [r5, #0]
 800a0be:	291d      	cmp	r1, #29
 800a0c0:	d82c      	bhi.n	800a11c <__sflush_r+0xb8>
 800a0c2:	4a2a      	ldr	r2, [pc, #168]	; (800a16c <__sflush_r+0x108>)
 800a0c4:	40ca      	lsrs	r2, r1
 800a0c6:	07d6      	lsls	r6, r2, #31
 800a0c8:	d528      	bpl.n	800a11c <__sflush_r+0xb8>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6062      	str	r2, [r4, #4]
 800a0ce:	04d9      	lsls	r1, r3, #19
 800a0d0:	6922      	ldr	r2, [r4, #16]
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	d504      	bpl.n	800a0e0 <__sflush_r+0x7c>
 800a0d6:	1c42      	adds	r2, r0, #1
 800a0d8:	d101      	bne.n	800a0de <__sflush_r+0x7a>
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	b903      	cbnz	r3, 800a0e0 <__sflush_r+0x7c>
 800a0de:	6560      	str	r0, [r4, #84]	; 0x54
 800a0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e2:	602f      	str	r7, [r5, #0]
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	d0ca      	beq.n	800a07e <__sflush_r+0x1a>
 800a0e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ec:	4299      	cmp	r1, r3
 800a0ee:	d002      	beq.n	800a0f6 <__sflush_r+0x92>
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 f8fd 	bl	800a2f0 <_free_r>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fa:	e7c1      	b.n	800a080 <__sflush_r+0x1c>
 800a0fc:	6a21      	ldr	r1, [r4, #32]
 800a0fe:	2301      	movs	r3, #1
 800a100:	4628      	mov	r0, r5
 800a102:	47b0      	blx	r6
 800a104:	1c41      	adds	r1, r0, #1
 800a106:	d1c7      	bne.n	800a098 <__sflush_r+0x34>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0c4      	beq.n	800a098 <__sflush_r+0x34>
 800a10e:	2b1d      	cmp	r3, #29
 800a110:	d001      	beq.n	800a116 <__sflush_r+0xb2>
 800a112:	2b16      	cmp	r3, #22
 800a114:	d101      	bne.n	800a11a <__sflush_r+0xb6>
 800a116:	602f      	str	r7, [r5, #0]
 800a118:	e7b1      	b.n	800a07e <__sflush_r+0x1a>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	e7ad      	b.n	800a080 <__sflush_r+0x1c>
 800a124:	690f      	ldr	r7, [r1, #16]
 800a126:	2f00      	cmp	r7, #0
 800a128:	d0a9      	beq.n	800a07e <__sflush_r+0x1a>
 800a12a:	0793      	lsls	r3, r2, #30
 800a12c:	680e      	ldr	r6, [r1, #0]
 800a12e:	bf08      	it	eq
 800a130:	694b      	ldreq	r3, [r1, #20]
 800a132:	600f      	str	r7, [r1, #0]
 800a134:	bf18      	it	ne
 800a136:	2300      	movne	r3, #0
 800a138:	eba6 0807 	sub.w	r8, r6, r7
 800a13c:	608b      	str	r3, [r1, #8]
 800a13e:	f1b8 0f00 	cmp.w	r8, #0
 800a142:	dd9c      	ble.n	800a07e <__sflush_r+0x1a>
 800a144:	6a21      	ldr	r1, [r4, #32]
 800a146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a148:	4643      	mov	r3, r8
 800a14a:	463a      	mov	r2, r7
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b0      	blx	r6
 800a150:	2800      	cmp	r0, #0
 800a152:	dc06      	bgt.n	800a162 <__sflush_r+0xfe>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295
 800a160:	e78e      	b.n	800a080 <__sflush_r+0x1c>
 800a162:	4407      	add	r7, r0
 800a164:	eba8 0800 	sub.w	r8, r8, r0
 800a168:	e7e9      	b.n	800a13e <__sflush_r+0xda>
 800a16a:	bf00      	nop
 800a16c:	20400001 	.word	0x20400001

0800a170 <_fflush_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	690b      	ldr	r3, [r1, #16]
 800a174:	4605      	mov	r5, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b913      	cbnz	r3, 800a180 <_fflush_r+0x10>
 800a17a:	2500      	movs	r5, #0
 800a17c:	4628      	mov	r0, r5
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	b118      	cbz	r0, 800a18a <_fflush_r+0x1a>
 800a182:	6983      	ldr	r3, [r0, #24]
 800a184:	b90b      	cbnz	r3, 800a18a <_fflush_r+0x1a>
 800a186:	f7ff fbe7 	bl	8009958 <__sinit>
 800a18a:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <_fflush_r+0x6c>)
 800a18c:	429c      	cmp	r4, r3
 800a18e:	d11b      	bne.n	800a1c8 <_fflush_r+0x58>
 800a190:	686c      	ldr	r4, [r5, #4]
 800a192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0ef      	beq.n	800a17a <_fflush_r+0xa>
 800a19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a19c:	07d0      	lsls	r0, r2, #31
 800a19e:	d404      	bmi.n	800a1aa <_fflush_r+0x3a>
 800a1a0:	0599      	lsls	r1, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_fflush_r+0x3a>
 800a1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1a6:	f7ff fc9a 	bl	8009ade <__retarget_lock_acquire_recursive>
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	f7ff ff59 	bl	800a064 <__sflush_r>
 800a1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b4:	07da      	lsls	r2, r3, #31
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	d4e0      	bmi.n	800a17c <_fflush_r+0xc>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	059b      	lsls	r3, r3, #22
 800a1be:	d4dd      	bmi.n	800a17c <_fflush_r+0xc>
 800a1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c2:	f7ff fc8d 	bl	8009ae0 <__retarget_lock_release_recursive>
 800a1c6:	e7d9      	b.n	800a17c <_fflush_r+0xc>
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <_fflush_r+0x70>)
 800a1ca:	429c      	cmp	r4, r3
 800a1cc:	d101      	bne.n	800a1d2 <_fflush_r+0x62>
 800a1ce:	68ac      	ldr	r4, [r5, #8]
 800a1d0:	e7df      	b.n	800a192 <_fflush_r+0x22>
 800a1d2:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <_fflush_r+0x74>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	bf08      	it	eq
 800a1d8:	68ec      	ldreq	r4, [r5, #12]
 800a1da:	e7da      	b.n	800a192 <_fflush_r+0x22>
 800a1dc:	0800a570 	.word	0x0800a570
 800a1e0:	0800a590 	.word	0x0800a590
 800a1e4:	0800a550 	.word	0x0800a550

0800a1e8 <_lseek_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <_lseek_r+0x20>)
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	4608      	mov	r0, r1
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	602a      	str	r2, [r5, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f7f7 f8e2 	bl	80013c0 <_lseek>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_lseek_r+0x1e>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_lseek_r+0x1e>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20004f90 	.word	0x20004f90

0800a20c <__swhatbuf_r>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	460e      	mov	r6, r1
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	2900      	cmp	r1, #0
 800a216:	b096      	sub	sp, #88	; 0x58
 800a218:	4614      	mov	r4, r2
 800a21a:	461d      	mov	r5, r3
 800a21c:	da08      	bge.n	800a230 <__swhatbuf_r+0x24>
 800a21e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	602a      	str	r2, [r5, #0]
 800a226:	061a      	lsls	r2, r3, #24
 800a228:	d410      	bmi.n	800a24c <__swhatbuf_r+0x40>
 800a22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22e:	e00e      	b.n	800a24e <__swhatbuf_r+0x42>
 800a230:	466a      	mov	r2, sp
 800a232:	f000 f8bb 	bl	800a3ac <_fstat_r>
 800a236:	2800      	cmp	r0, #0
 800a238:	dbf1      	blt.n	800a21e <__swhatbuf_r+0x12>
 800a23a:	9a01      	ldr	r2, [sp, #4]
 800a23c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a240:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a244:	425a      	negs	r2, r3
 800a246:	415a      	adcs	r2, r3
 800a248:	602a      	str	r2, [r5, #0]
 800a24a:	e7ee      	b.n	800a22a <__swhatbuf_r+0x1e>
 800a24c:	2340      	movs	r3, #64	; 0x40
 800a24e:	2000      	movs	r0, #0
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	b016      	add	sp, #88	; 0x58
 800a254:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a258 <__smakebuf_r>:
 800a258:	898b      	ldrh	r3, [r1, #12]
 800a25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a25c:	079d      	lsls	r5, r3, #30
 800a25e:	4606      	mov	r6, r0
 800a260:	460c      	mov	r4, r1
 800a262:	d507      	bpl.n	800a274 <__smakebuf_r+0x1c>
 800a264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	2301      	movs	r3, #1
 800a26e:	6163      	str	r3, [r4, #20]
 800a270:	b002      	add	sp, #8
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	ab01      	add	r3, sp, #4
 800a276:	466a      	mov	r2, sp
 800a278:	f7ff ffc8 	bl	800a20c <__swhatbuf_r>
 800a27c:	9900      	ldr	r1, [sp, #0]
 800a27e:	4605      	mov	r5, r0
 800a280:	4630      	mov	r0, r6
 800a282:	f7ff fc65 	bl	8009b50 <_malloc_r>
 800a286:	b948      	cbnz	r0, 800a29c <__smakebuf_r+0x44>
 800a288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a28c:	059a      	lsls	r2, r3, #22
 800a28e:	d4ef      	bmi.n	800a270 <__smakebuf_r+0x18>
 800a290:	f023 0303 	bic.w	r3, r3, #3
 800a294:	f043 0302 	orr.w	r3, r3, #2
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	e7e3      	b.n	800a264 <__smakebuf_r+0xc>
 800a29c:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <__smakebuf_r+0x7c>)
 800a29e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	6020      	str	r0, [r4, #0]
 800a2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	9b00      	ldr	r3, [sp, #0]
 800a2ac:	6163      	str	r3, [r4, #20]
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	6120      	str	r0, [r4, #16]
 800a2b2:	b15b      	cbz	r3, 800a2cc <__smakebuf_r+0x74>
 800a2b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 f889 	bl	800a3d0 <_isatty_r>
 800a2be:	b128      	cbz	r0, 800a2cc <__smakebuf_r+0x74>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	f043 0301 	orr.w	r3, r3, #1
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	89a0      	ldrh	r0, [r4, #12]
 800a2ce:	4305      	orrs	r5, r0
 800a2d0:	81a5      	strh	r5, [r4, #12]
 800a2d2:	e7cd      	b.n	800a270 <__smakebuf_r+0x18>
 800a2d4:	080098f1 	.word	0x080098f1

0800a2d8 <__malloc_lock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_lock+0x8>)
 800a2da:	f7ff bc00 	b.w	8009ade <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20004f84 	.word	0x20004f84

0800a2e4 <__malloc_unlock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__malloc_unlock+0x8>)
 800a2e6:	f7ff bbfb 	b.w	8009ae0 <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20004f84 	.word	0x20004f84

0800a2f0 <_free_r>:
 800a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2f2:	2900      	cmp	r1, #0
 800a2f4:	d044      	beq.n	800a380 <_free_r+0x90>
 800a2f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2fa:	9001      	str	r0, [sp, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a302:	bfb8      	it	lt
 800a304:	18e4      	addlt	r4, r4, r3
 800a306:	f7ff ffe7 	bl	800a2d8 <__malloc_lock>
 800a30a:	4a1e      	ldr	r2, [pc, #120]	; (800a384 <_free_r+0x94>)
 800a30c:	9801      	ldr	r0, [sp, #4]
 800a30e:	6813      	ldr	r3, [r2, #0]
 800a310:	b933      	cbnz	r3, 800a320 <_free_r+0x30>
 800a312:	6063      	str	r3, [r4, #4]
 800a314:	6014      	str	r4, [r2, #0]
 800a316:	b003      	add	sp, #12
 800a318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a31c:	f7ff bfe2 	b.w	800a2e4 <__malloc_unlock>
 800a320:	42a3      	cmp	r3, r4
 800a322:	d908      	bls.n	800a336 <_free_r+0x46>
 800a324:	6825      	ldr	r5, [r4, #0]
 800a326:	1961      	adds	r1, r4, r5
 800a328:	428b      	cmp	r3, r1
 800a32a:	bf01      	itttt	eq
 800a32c:	6819      	ldreq	r1, [r3, #0]
 800a32e:	685b      	ldreq	r3, [r3, #4]
 800a330:	1949      	addeq	r1, r1, r5
 800a332:	6021      	streq	r1, [r4, #0]
 800a334:	e7ed      	b.n	800a312 <_free_r+0x22>
 800a336:	461a      	mov	r2, r3
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	b10b      	cbz	r3, 800a340 <_free_r+0x50>
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	d9fa      	bls.n	800a336 <_free_r+0x46>
 800a340:	6811      	ldr	r1, [r2, #0]
 800a342:	1855      	adds	r5, r2, r1
 800a344:	42a5      	cmp	r5, r4
 800a346:	d10b      	bne.n	800a360 <_free_r+0x70>
 800a348:	6824      	ldr	r4, [r4, #0]
 800a34a:	4421      	add	r1, r4
 800a34c:	1854      	adds	r4, r2, r1
 800a34e:	42a3      	cmp	r3, r4
 800a350:	6011      	str	r1, [r2, #0]
 800a352:	d1e0      	bne.n	800a316 <_free_r+0x26>
 800a354:	681c      	ldr	r4, [r3, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	6053      	str	r3, [r2, #4]
 800a35a:	4421      	add	r1, r4
 800a35c:	6011      	str	r1, [r2, #0]
 800a35e:	e7da      	b.n	800a316 <_free_r+0x26>
 800a360:	d902      	bls.n	800a368 <_free_r+0x78>
 800a362:	230c      	movs	r3, #12
 800a364:	6003      	str	r3, [r0, #0]
 800a366:	e7d6      	b.n	800a316 <_free_r+0x26>
 800a368:	6825      	ldr	r5, [r4, #0]
 800a36a:	1961      	adds	r1, r4, r5
 800a36c:	428b      	cmp	r3, r1
 800a36e:	bf04      	itt	eq
 800a370:	6819      	ldreq	r1, [r3, #0]
 800a372:	685b      	ldreq	r3, [r3, #4]
 800a374:	6063      	str	r3, [r4, #4]
 800a376:	bf04      	itt	eq
 800a378:	1949      	addeq	r1, r1, r5
 800a37a:	6021      	streq	r1, [r4, #0]
 800a37c:	6054      	str	r4, [r2, #4]
 800a37e:	e7ca      	b.n	800a316 <_free_r+0x26>
 800a380:	b003      	add	sp, #12
 800a382:	bd30      	pop	{r4, r5, pc}
 800a384:	20004f88 	.word	0x20004f88

0800a388 <_read_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_read_r+0x20>)
 800a38c:	4604      	mov	r4, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	602a      	str	r2, [r5, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f6 ffce 	bl	8001338 <_read>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_read_r+0x1e>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_read_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20004f90 	.word	0x20004f90

0800a3ac <_fstat_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_fstat_r+0x20>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	f7f6 ffe6 	bl	800138a <_fstat>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	d102      	bne.n	800a3c8 <_fstat_r+0x1c>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b103      	cbz	r3, 800a3c8 <_fstat_r+0x1c>
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20004f90 	.word	0x20004f90

0800a3d0 <_isatty_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d06      	ldr	r5, [pc, #24]	; (800a3ec <_isatty_r+0x1c>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	f7f6 ffe5 	bl	80013aa <_isatty>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_isatty_r+0x1a>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_isatty_r+0x1a>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20004f90 	.word	0x20004f90

0800a3f0 <_init>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	bf00      	nop
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr

0800a3fc <_fini>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr
