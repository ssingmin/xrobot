
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d4  0800a0d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0dc  0800a0dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004d24  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d98  20004d98  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fce5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000450b  00000000  00000000  0003fd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  00044298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001730  00000000  00000000  00045b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006859  00000000  00000000  000472c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d043  00000000  00000000  0004db19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0e78  00000000  00000000  0006ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b9d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e4c  00000000  00000000  0013ba24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f50 	.word	0x08009f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009f50 	.word	0x08009f50

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d8:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_CAN1_Init+0x64>)
 80004da:	4a18      	ldr	r2, [pc, #96]	; (800053c <MX_CAN1_Init+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_CAN1_Init+0x64>)
 80004e0:	2206      	movs	r2, #6
 80004e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_CAN1_Init+0x64>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_CAN1_Init+0x64>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_CAN1_Init+0x64>)
 80004f2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80004f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_CAN1_Init+0x64>)
 80004fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_CAN1_Init+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_CAN1_Init+0x64>)
 8000508:	2201      	movs	r2, #1
 800050a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_CAN1_Init+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_CAN1_Init+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_CAN1_Init+0x64>)
 8000526:	f001 f9d7 	bl	80018d8 <HAL_CAN_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000530:	f000 fbea 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000e0 	.word	0x200000e0
 800053c:	40006400 	.word	0x40006400

08000540 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <HAL_CAN_MspInit+0x94>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d134      	bne.n	80005cc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <HAL_CAN_MspInit+0x98>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <HAL_CAN_MspInit+0x98>)
 800056c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <HAL_CAN_MspInit+0x98>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_CAN_MspInit+0x98>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <HAL_CAN_MspInit+0x98>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_CAN_MspInit+0x98>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800059a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005ac:	2309      	movs	r3, #9
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <HAL_CAN_MspInit+0x9c>)
 80005b8:	f002 fd0a 	bl	8002fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2105      	movs	r1, #5
 80005c0:	2014      	movs	r0, #20
 80005c2:	f002 f8d9 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005c6:	2014      	movs	r0, #20
 80005c8:	f002 f8f2 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40006400 	.word	0x40006400
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020400 	.word	0x40020400

080005e0 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <CanInit+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <CanInit+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <CanInit+0x98>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <CanInit+0x98>)
 8000604:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	b29b      	uxth	r3, r3
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <CanInit+0x98>)
 8000612:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	0c1b      	lsrs	r3, r3, #16
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <CanInit+0x98>)
 800061c:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	00db      	lsls	r3, r3, #3
 8000622:	b29b      	uxth	r3, r3
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <CanInit+0x98>)
 800062a:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <CanInit+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <CanInit+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <CanInit+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800063e:	480f      	ldr	r0, [pc, #60]	; (800067c <CanInit+0x9c>)
 8000640:	f001 fb26 	bl	8001c90 <HAL_CAN_Start>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <CanInit+0x6e>
 800064a:	f000 fb5d 	bl	8000d08 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800064e:	2102      	movs	r1, #2
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <CanInit+0x9c>)
 8000652:	f001 fd83 	bl	800215c <HAL_CAN_ActivateNotification>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d000      	beq.n	800065e <CanInit+0x7e>
 800065c:	e7fe      	b.n	800065c <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800065e:	4906      	ldr	r1, [pc, #24]	; (8000678 <CanInit+0x98>)
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <CanInit+0x9c>)
 8000662:	f001 fa35 	bl	8001ad0 <HAL_CAN_ConfigFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 800066c:	f000 fb4c 	bl	8000d08 <Error_Handler>
    }
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000b8 	.word	0x200000b8
 800067c:	200000e0 	.word	0x200000e0

08000680 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	; 0x30
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	460b      	mov	r3, r1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	4613      	mov	r3, r2
 8000694:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <sendCan+0x2c>
 80006a8:	2304      	movs	r3, #4
 80006aa:	e000      	b.n	80006ae <sendCan+0x2e>
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <sendCan+0x70>)
 80006bc:	f001 fc07 	bl	8001ece <HAL_CAN_GetTxMailboxesFreeLevel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00d      	beq.n	80006e6 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	f107 0114 	add.w	r1, r7, #20
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <sendCan+0x70>)
 80006d6:	f001 fb1f 	bl	8001d18 <HAL_CAN_AddTxMessage>
 80006da:	4603      	mov	r3, r0
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80006de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d000      	beq.n	80006e6 <sendCan+0x66>
 80006e4:	e7fe      	b.n	80006e4 <sendCan+0x64>
    }
}
 80006e6:	bf00      	nop
 80006e8:	3730      	adds	r7, #48	; 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000e0 	.word	0x200000e0

080006f4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000700:	2100      	movs	r1, #0
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000704:	f001 fc18 	bl	8001f38 <HAL_CAN_GetRxMessage>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 800070e:	e7fe      	b.n	800070e <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000718:	6013      	str	r3, [r2, #0]

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000094 	.word	0x20000094
 8000728:	2000009c 	.word	0x2000009c
 800072c:	200000e0 	.word	0x200000e0
 8000730:	20000090 	.word	0x20000090

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_DMA_Init+0x3c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <MX_DMA_Init+0x3c>)
 8000744:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2105      	movs	r1, #5
 800075a:	203a      	movs	r0, #58	; 0x3a
 800075c:	f002 f80c 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000760:	203a      	movs	r0, #58	; 0x3a
 8000762:	f002 f825 	bl	80027b0 <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000778:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MX_FREERTOS_Init+0x48>)
 800077a:	2100      	movs	r1, #0
 800077c:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_FREERTOS_Init+0x4c>)
 800077e:	f006 f8a0 	bl	80068c2 <osThreadNew>
 8000782:	4603      	mov	r3, r0
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_FREERTOS_Init+0x50>)
 8000786:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000788:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_FREERTOS_Init+0x54>)
 800078a:	2100      	movs	r1, #0
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <MX_FREERTOS_Init+0x58>)
 800078e:	f006 f898 	bl	80068c2 <osThreadNew>
 8000792:	4603      	mov	r3, r0
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <MX_FREERTOS_Init+0x5c>)
 8000796:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <MX_FREERTOS_Init+0x60>)
 800079a:	2100      	movs	r1, #0
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_FREERTOS_Init+0x64>)
 800079e:	f006 f890 	bl	80068c2 <osThreadNew>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <MX_FREERTOS_Init+0x68>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <MX_FREERTOS_Init+0x6c>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_FREERTOS_Init+0x70>)
 80007ae:	f006 f888 	bl	80068c2 <osThreadNew>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <MX_FREERTOS_Init+0x74>)
 80007b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	08009fc0 	.word	0x08009fc0
 80007c0:	080007ed 	.word	0x080007ed
 80007c4:	20000108 	.word	0x20000108
 80007c8:	08009fe4 	.word	0x08009fe4
 80007cc:	08000819 	.word	0x08000819
 80007d0:	2000010c 	.word	0x2000010c
 80007d4:	0800a008 	.word	0x0800a008
 80007d8:	08000861 	.word	0x08000861
 80007dc:	20000110 	.word	0x20000110
 80007e0:	0800a02c 	.word	0x0800a02c
 80007e4:	08000889 	.word	0x08000889
 80007e8:	20000114 	.word	0x20000114

080007ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t lastTime = osKernelGetTickCount();
 80007f4:	f006 f850 	bl	8006898 <osKernelGetTickCount>
 80007f8:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += 500U;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000800:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f006 f8ef 	bl	80069e6 <osDelayUntil>
	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000808:	2102      	movs	r1, #2
 800080a:	4802      	ldr	r0, [pc, #8]	; (8000814 <StartDefaultTask+0x28>)
 800080c:	f002 fd95 	bl	800333a <HAL_GPIO_TogglePin>
	lastTime += 500U;
 8000810:	e7f3      	b.n	80007fa <StartDefaultTask+0xe>
 8000812:	bf00      	nop
 8000814:	40020800 	.word	0x40020800

08000818 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t lastTime = osKernelGetTickCount();
 8000820:	f006 f83a 	bl	8006898 <osKernelGetTickCount>
 8000824:	6178      	str	r0, [r7, #20]

	CanInit(0,0);
 8000826:	2100      	movs	r1, #0
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fed9 	bl	80005e0 <CanInit>
  /* Infinite loop */
  for(;;)
  {
	  uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <StartTask02+0x44>)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000838:	e883 0003 	stmia.w	r3, {r0, r1}

	lastTime += 500U;;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000842:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 8000844:	6978      	ldr	r0, [r7, #20]
 8000846:	f006 f8ce 	bl	80069e6 <osDelayUntil>

	//for(int i=0;i<8;i++){canbuf[i]=0;}
	sendCan(0, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	2300      	movs	r3, #0
 8000850:	2208      	movs	r2, #8
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff ff14 	bl	8000680 <sendCan>
  {
 8000858:	e7e9      	b.n	800082e <StartTask02+0x16>
 800085a:	bf00      	nop
 800085c:	08009f90 	.word	0x08009f90

08000860 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime = osKernelGetTickCount();
 8000868:	f006 f816 	bl	8006898 <osKernelGetTickCount>
 800086c:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)//485 task for nuri motor must change uart port
  {
	lastTime += 500U;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000874:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f006 f8b5 	bl	80069e6 <osDelayUntil>
	  //HAL_UART_Transmit(&huart3, "hihi\n", sizeof("hihi\n"), 10);
	printf("hihihi\n");
 800087c:	4801      	ldr	r0, [pc, #4]	; (8000884 <StartTask03+0x24>)
 800087e:	f008 fff9 	bl	8009874 <puts>
  {
 8000882:	e7f4      	b.n	800086e <StartTask03+0xe>
 8000884:	08009f98 	.word	0x08009f98

08000888 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0ae      	sub	sp, #184	; 0xb8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	uint32_t lastTime = osKernelGetTickCount();
 8000890:	f006 f802 	bl	8006898 <osKernelGetTickCount>
 8000894:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

	uint16_t value[60+24]={0,};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	22a8      	movs	r2, #168	; 0xa8
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f008 fedc 	bl	800965e <memset>

	////////////////////////////////
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)value, 60+24);
 80008a6:	f107 020c 	add.w	r2, r7, #12
 80008aa:	2354      	movs	r3, #84	; 0x54
 80008ac:	2100      	movs	r1, #0
 80008ae:	4820      	ldr	r0, [pc, #128]	; (8000930 <StartTask04+0xa8>)
 80008b0:	f003 fbd8 	bl	8004064 <HAL_TIM_PWM_Start_DMA>
	//HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);

  /* Infinite loop */
  for(;;)
  {
		lastTime += 500U;
 80008b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80008b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		osDelayUntil(lastTime);
 80008c0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80008c4:	f006 f88f 	bl	80069e6 <osDelayUntil>

		value[0]=30;
 80008c8:	231e      	movs	r3, #30
 80008ca:	81bb      	strh	r3, [r7, #12]
		value[1]=30;
 80008cc:	231e      	movs	r3, #30
 80008ce:	81fb      	strh	r3, [r7, #14]
		value[2]=30;
 80008d0:	231e      	movs	r3, #30
 80008d2:	823b      	strh	r3, [r7, #16]
		value[3]=30;
 80008d4:	231e      	movs	r3, #30
 80008d6:	827b      	strh	r3, [r7, #18]
		value[4]=30;
 80008d8:	231e      	movs	r3, #30
 80008da:	82bb      	strh	r3, [r7, #20]
		value[5]=30;
 80008dc:	231e      	movs	r3, #30
 80008de:	82fb      	strh	r3, [r7, #22]
		value[6]=30;
 80008e0:	231e      	movs	r3, #30
 80008e2:	833b      	strh	r3, [r7, #24]
		value[7]=30;
 80008e4:	231e      	movs	r3, #30
 80008e6:	837b      	strh	r3, [r7, #26]
		value[8]=30;
 80008e8:	231e      	movs	r3, #30
 80008ea:	83bb      	strh	r3, [r7, #28]
		value[9]=30;
 80008ec:	231e      	movs	r3, #30
 80008ee:	83fb      	strh	r3, [r7, #30]
		value[10]=30;
 80008f0:	231e      	movs	r3, #30
 80008f2:	843b      	strh	r3, [r7, #32]
		value[11]=30;
 80008f4:	231e      	movs	r3, #30
 80008f6:	847b      	strh	r3, [r7, #34]	; 0x22
		value[12]=30;
 80008f8:	231e      	movs	r3, #30
 80008fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		value[13]=30;
 80008fc:	231e      	movs	r3, #30
 80008fe:	84fb      	strh	r3, [r7, #38]	; 0x26
		value[14]=30;
 8000900:	231e      	movs	r3, #30
 8000902:	853b      	strh	r3, [r7, #40]	; 0x28
		value[15]=30;
 8000904:	231e      	movs	r3, #30
 8000906:	857b      	strh	r3, [r7, #42]	; 0x2a
		value[16]=59;
 8000908:	233b      	movs	r3, #59	; 0x3b
 800090a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		value[17]=59;
 800090c:	233b      	movs	r3, #59	; 0x3b
 800090e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		value[18]=59;
 8000910:	233b      	movs	r3, #59	; 0x3b
 8000912:	863b      	strh	r3, [r7, #48]	; 0x30
		value[19]=59;
 8000914:	233b      	movs	r3, #59	; 0x3b
 8000916:	867b      	strh	r3, [r7, #50]	; 0x32
		value[20]=59;
 8000918:	233b      	movs	r3, #59	; 0x3b
 800091a:	86bb      	strh	r3, [r7, #52]	; 0x34
		value[21]=59;
 800091c:	233b      	movs	r3, #59	; 0x3b
 800091e:	86fb      	strh	r3, [r7, #54]	; 0x36
		value[22]=59;
 8000920:	233b      	movs	r3, #59	; 0x3b
 8000922:	873b      	strh	r3, [r7, #56]	; 0x38
		value[23]=59;
 8000924:	233b      	movs	r3, #59	; 0x3b
 8000926:	877b      	strh	r3, [r7, #58]	; 0x3a

//		value+=50;
//		if(value>100){value=0;}
		//htim8.Instance->CCR1 = value;

		printf("task4\n");
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <StartTask04+0xac>)
 800092a:	f008 ffa3 	bl	8009874 <puts>
  {
 800092e:	e7c1      	b.n	80008b4 <StartTask04+0x2c>
 8000930:	20000244 	.word	0x20000244
 8000934:	08009fa0 	.word	0x08009fa0

08000938 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a4e      	ldr	r2, [pc, #312]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a47      	ldr	r2, [pc, #284]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <MX_GPIO_Init+0x158>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <MX_GPIO_Init+0x158>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a40      	ldr	r2, [pc, #256]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <MX_GPIO_Init+0x158>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a39      	ldr	r2, [pc, #228]	; (8000a90 <MX_GPIO_Init+0x158>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x158>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <MX_GPIO_Init+0x158>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <MX_GPIO_Init+0x158>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_GPIO_Init+0x158>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|testled_Pin
 80009da:	2200      	movs	r2, #0
 80009dc:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 80009e0:	482c      	ldr	r0, [pc, #176]	; (8000a94 <MX_GPIO_Init+0x15c>)
 80009e2:	f002 fc91 	bl	8003308 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0110 	movw	r1, #16400	; 0x4010
 80009ec:	482a      	ldr	r0, [pc, #168]	; (8000a98 <MX_GPIO_Init+0x160>)
 80009ee:	f002 fc8b 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2104      	movs	r1, #4
 80009f6:	4829      	ldr	r0, [pc, #164]	; (8000a9c <MX_GPIO_Init+0x164>)
 80009f8:	f002 fc86 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PCPin
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|testled_Pin
 80009fc:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8000a00:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	481f      	ldr	r0, [pc, #124]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000a16:	f002 fadb 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000a2e:	f002 facf 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a32:	23f0      	movs	r3, #240	; 0xf0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0x168>)
 8000a48:	f002 fac2 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8000a4c:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0x160>)
 8000a66:	f002 fab3 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_GPIO_Init+0x164>)
 8000a82:	f002 faa5 	bl	8002fd0 <HAL_GPIO_Init>

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000aaa:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <MX_I2C1_SMBUS_Init+0x6c>)
 8000aac:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ab0:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <MX_I2C1_SMBUS_Init+0x70>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000abc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000ae8:	f003 f8cc 	bl	8003c84 <HAL_SMBUS_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f909 	bl	8000d08 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_I2C1_SMBUS_Init+0x68>)
 8000af8:	f003 f97a 	bl	8003df0 <HAL_SMBUS_EnableAlert_IT>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 8000b02:	f000 f901 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000118 	.word	0x20000118
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_SMBUS_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_SMBUS_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_SMBUS_MspInit+0x88>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_SMBUS_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b56:	23e0      	movs	r3, #224	; 0xe0
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b66:	2304      	movs	r3, #4
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <HAL_SMBUS_MspInit+0x8c>)
 8000b72:	f002 fa2d 	bl	8002fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_SMBUS_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_SMBUS_MspInit+0x88>)
 8000b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_SMBUS_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, (uint16_t)len, 100);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <_write+0x24>)
 8000bbe:	f004 fe16 	bl	80057ee <HAL_UART_Transmit>
	return (len);
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000330 	.word	0x20000330

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fe3e 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f81a 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f7ff feac 	bl	8000938 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000be0:	f7ff fc78 	bl	80004d4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000be4:	f000 fd5c 	bl	80016a0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 fd30 	bl	800164c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000bec:	f000 f9f0 	bl	8000fd0 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8000bf0:	f7ff ff58 	bl	8000aa4 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8000bf4:	f7ff fd9e 	bl	8000734 <MX_DMA_Init>
  MX_TIM8_Init();
 8000bf8:	f000 fb36 	bl	8001268 <MX_TIM8_Init>
  MX_TIM3_Init();
 8000bfc:	f000 fab8 	bl	8001170 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c00:	f005 fe00 	bl	8006804 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c04:	f7ff fdb6 	bl	8000774 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c08:	f005 fe20 	bl	800684c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x3c>
	...

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	; 0x50
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	2230      	movs	r2, #48	; 0x30
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 fd1d 	bl	800965e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <SystemClock_Config+0xcc>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <SystemClock_Config+0xcc>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <SystemClock_Config+0xcc>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <SystemClock_Config+0xd0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <SystemClock_Config+0xd0>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <SystemClock_Config+0xd0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000c80:	2306      	movs	r3, #6
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c84:	23a8      	movs	r3, #168	; 0xa8
 8000c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fb6b 	bl	8003370 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ca0:	f000 f832 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fdcc 	bl	8003860 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cce:	f000 f81b 	bl	8000d08 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d101      	bne.n	8000cfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf6:	f000 fdcf 	bl	8001898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40001000 	.word	0x40001000

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_MspInit+0x54>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_MspInit+0x54>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x54>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_MspInit+0x54>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_MspInit+0x54>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_MspInit+0x54>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	210f      	movs	r1, #15
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	f001 fd0d 	bl	8002778 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2036      	movs	r0, #54	; 0x36
 8000d82:	f001 fcf9 	bl	8002778 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d86:	2036      	movs	r0, #54	; 0x36
 8000d88:	f001 fd12 	bl	80027b0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <HAL_InitTick+0xa4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_InitTick+0xa4>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_InitTick+0xa4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 ff34 	bl	8003c20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000db8:	f002 ff0a 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_InitTick+0xa8>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9b      	lsrs	r3, r3, #18
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_InitTick+0xac>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <HAL_InitTick+0xb0>)
 8000dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_InitTick+0xac>)
 8000dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ddc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_InitTick+0xac>)
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_InitTick+0xac>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_InitTick+0xac>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <HAL_InitTick+0xac>)
 8000df2:	f003 f81d 	bl	8003e30 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <HAL_InitTick+0xac>)
 8000dfe:	f003 f867 	bl	8003ed0 <HAL_TIM_Base_Start_IT>
 8000e02:	4603      	mov	r3, r0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	20000168 	.word	0x20000168
 8000e1c:	40001000 	.word	0x40001000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <CAN1_RX0_IRQHandler+0x10>)
 8000e52:	f001 f9a9 	bl	80021a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000e0 	.word	0x200000e0

08000e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	f004 fd55 	bl	8005914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002ec 	.word	0x200002ec

08000e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM6_DAC_IRQHandler+0x10>)
 8000e7a:	f003 fb14 	bl	80044a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000168 	.word	0x20000168

08000e88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <DMA2_Stream2_IRQHandler+0x10>)
 8000e8e:	f001 fe35 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000028c 	.word	0x2000028c

08000e9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e00a      	b.n	8000ec4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eae:	f3af 8000 	nop.w
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	b2ca      	uxtb	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf0      	blt.n	8000eae <_read+0x12>
	}

return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return 1;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f008 fa44 	bl	80093fc <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	200001b0 	.word	0x200001b0
 8000fa8:	20004d98 	.word	0x20004d98

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09a      	sub	sp, #104	; 0x68
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2220      	movs	r2, #32
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f008 fb21 	bl	800965e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101c:	4b52      	ldr	r3, [pc, #328]	; (8001168 <MX_TIM1_Init+0x198>)
 800101e:	4a53      	ldr	r2, [pc, #332]	; (800116c <MX_TIM1_Init+0x19c>)
 8001020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <MX_TIM1_Init+0x198>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <MX_TIM1_Init+0x198>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <MX_TIM1_Init+0x198>)
 8001030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <MX_TIM1_Init+0x198>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <MX_TIM1_Init+0x198>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <MX_TIM1_Init+0x198>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001048:	4847      	ldr	r0, [pc, #284]	; (8001168 <MX_TIM1_Init+0x198>)
 800104a:	f002 fef1 	bl	8003e30 <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001054:	f7ff fe58 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001062:	4619      	mov	r1, r3
 8001064:	4840      	ldr	r0, [pc, #256]	; (8001168 <MX_TIM1_Init+0x198>)
 8001066:	f003 fc85 	bl	8004974 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001070:	f7ff fe4a 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001074:	483c      	ldr	r0, [pc, #240]	; (8001168 <MX_TIM1_Init+0x198>)
 8001076:	f002 ff9b 	bl	8003fb0 <HAL_TIM_PWM_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001080:	f7ff fe42 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001084:	4838      	ldr	r0, [pc, #224]	; (8001168 <MX_TIM1_Init+0x198>)
 8001086:	f003 f9b5 	bl	80043f4 <HAL_TIM_IC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001090:	f7ff fe3a 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010a0:	4619      	mov	r1, r3
 80010a2:	4831      	ldr	r0, [pc, #196]	; (8001168 <MX_TIM1_Init+0x198>)
 80010a4:	f004 fa74 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80010ae:	f7ff fe2b 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b2:	2360      	movs	r3, #96	; 0x60
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4824      	ldr	r0, [pc, #144]	; (8001168 <MX_TIM1_Init+0x198>)
 80010d8:	f003 fb8a 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010e2:	f7ff fe11 	bl	8000d08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <MX_TIM1_Init+0x198>)
 8001100:	f003 fad9 	bl	80046b6 <HAL_TIM_IC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800110a:	f7ff fdfd 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	2208      	movs	r2, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_TIM1_Init+0x198>)
 8001118:	f003 facd 	bl	80046b6 <HAL_TIM_IC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001122:	f7ff fdf1 	bl	8000d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM1_Init+0x198>)
 800114a:	f004 fa9d 	bl	8005688 <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001154:	f7ff fdd8 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM1_Init+0x198>)
 800115a:	f000 fa13 	bl	8001584 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3768      	adds	r7, #104	; 0x68
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001b4 	.word	0x200001b4
 800116c:	40010000 	.word	0x40010000

08001170 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MX_TIM3_Init+0xf0>)
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <MX_TIM3_Init+0xf4>)
 800119e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c0:	4827      	ldr	r0, [pc, #156]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011c2:	f002 fe35 	bl	8003e30 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80011cc:	f7ff fd9c 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	4619      	mov	r1, r3
 80011dc:	4820      	ldr	r0, [pc, #128]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011de:	f003 fbc9 	bl	8004974 <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f7ff fd8e 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011ec:	481c      	ldr	r0, [pc, #112]	; (8001260 <MX_TIM3_Init+0xf0>)
 80011ee:	f003 f901 	bl	80043f4 <HAL_TIM_IC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011f8:	f7ff fd86 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	4815      	ldr	r0, [pc, #84]	; (8001260 <MX_TIM3_Init+0xf0>)
 800120c:	f004 f9c0 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001216:	f7ff fd77 	bl	8000d08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800121e:	2301      	movs	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2208      	movs	r2, #8
 800122e:	4619      	mov	r1, r3
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001232:	f003 fa40 	bl	80046b6 <HAL_TIM_IC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800123c:	f7ff fd64 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	220c      	movs	r2, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM3_Init+0xf0>)
 8001248:	f003 fa35 	bl	80046b6 <HAL_TIM_IC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001252:	f7ff fd59 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200001fc 	.word	0x200001fc
 8001264:	40000400 	.word	0x40000400

08001268 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b096      	sub	sp, #88	; 0x58
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2220      	movs	r2, #32
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f008 f9dc 	bl	800965e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012a6:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012a8:	4a50      	ldr	r2, [pc, #320]	; (80013ec <MX_TIM8_Init+0x184>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 109;
 80012b8:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012ba:	226d      	movs	r2, #109	; 0x6d
 80012bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012c4:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012d2:	f002 fdad 	bl	8003e30 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80012dc:	f7ff fd14 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ea:	4619      	mov	r1, r3
 80012ec:	483e      	ldr	r0, [pc, #248]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012ee:	f003 fb41 	bl	8004974 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80012f8:	f7ff fd06 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012fc:	483a      	ldr	r0, [pc, #232]	; (80013e8 <MX_TIM8_Init+0x180>)
 80012fe:	f002 fe57 	bl	8003fb0 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001308:	f7ff fcfe 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001318:	4619      	mov	r1, r3
 800131a:	4833      	ldr	r0, [pc, #204]	; (80013e8 <MX_TIM8_Init+0x180>)
 800131c:	f004 f938 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001326:	f7ff fcef 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4826      	ldr	r0, [pc, #152]	; (80013e8 <MX_TIM8_Init+0x180>)
 8001350:	f003 fa4e 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800135a:	f7ff fcd5 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4820      	ldr	r0, [pc, #128]	; (80013e8 <MX_TIM8_Init+0x180>)
 8001368:	f003 fa42 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001372:	f7ff fcc9 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	2208      	movs	r2, #8
 800137c:	4619      	mov	r1, r3
 800137e:	481a      	ldr	r0, [pc, #104]	; (80013e8 <MX_TIM8_Init+0x180>)
 8001380:	f003 fa36 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800138a:	f7ff fcbd 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	220c      	movs	r2, #12
 8001394:	4619      	mov	r1, r3
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM8_Init+0x180>)
 8001398:	f003 fa2a 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80013a2:	f7ff fcb1 	bl	8000d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM8_Init+0x180>)
 80013ca:	f004 f95d 	bl	8005688 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 80013d4:	f7ff fc98 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM8_Init+0x180>)
 80013da:	f000 f8d3 	bl	8001584 <HAL_TIM_MspPostInit>

}
 80013de:	bf00      	nop
 80013e0:	3758      	adds	r7, #88	; 0x58
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000244 	.word	0x20000244
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_TIM_Base_MspInit+0x174>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12d      	bne.n	800146e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b54      	ldr	r3, [pc, #336]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a53      	ldr	r2, [pc, #332]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800144a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800145c:	2301      	movs	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4841      	ldr	r0, [pc, #260]	; (800156c <HAL_TIM_Base_MspInit+0x17c>)
 8001468:	f001 fdb2 	bl	8002fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800146c:	e075      	b.n	800155a <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <HAL_TIM_Base_MspInit+0x180>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d12c      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a39      	ldr	r2, [pc, #228]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b0:	2303      	movs	r3, #3
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	482a      	ldr	r0, [pc, #168]	; (8001574 <HAL_TIM_Base_MspInit+0x184>)
 80014cc:	f001 fd80 	bl	8002fd0 <HAL_GPIO_Init>
}
 80014d0:	e043      	b.n	800155a <HAL_TIM_Base_MspInit+0x16a>
  else if(tim_baseHandle->Instance==TIM8)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <HAL_TIM_Base_MspInit+0x188>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d13e      	bne.n	800155a <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6453      	str	r3, [r2, #68]	; 0x44
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_TIM_Base_MspInit+0x178>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_TIM_Base_MspInit+0x190>)
 80014fc:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001500:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001504:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001508:	2240      	movs	r2, #64	; 0x40
 800150a:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001518:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800151c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001520:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001528:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001540:	f001 f944 	bl	80027cc <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_TIM_Base_MspInit+0x15e>
      Error_Handler();
 800154a:	f7ff fbdd 	bl	8000d08 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
 8001554:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_TIM_Base_MspInit+0x18c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6393      	str	r3, [r2, #56]	; 0x38
}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000
 8001570:	40000400 	.word	0x40000400
 8001574:	40020400 	.word	0x40020400
 8001578:	40010400 	.word	0x40010400
 800157c:	2000028c 	.word	0x2000028c
 8001580:	40026440 	.word	0x40026440

08001584 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a25      	ldr	r2, [pc, #148]	; (8001638 <HAL_TIM_MspPostInit+0xb4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11f      	bne.n	80015e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_TIM_MspPostInit+0xb8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_TIM_MspPostInit+0xb8>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_TIM_MspPostInit+0xb8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <HAL_TIM_MspPostInit+0xbc>)
 80015e0:	f001 fcf6 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80015e4:	e023      	b.n	800162e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_TIM_MspPostInit+0xc0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d11e      	bne.n	800162e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_TIM_MspPostInit+0xb8>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_TIM_MspPostInit+0xb8>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_TIM_MspPostInit+0xb8>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800160c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800161e:	2303      	movs	r3, #3
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <HAL_TIM_MspPostInit+0xc4>)
 800162a:	f001 fcd1 	bl	8002fd0 <HAL_GPIO_Init>
}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010000 	.word	0x40010000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40010400 	.word	0x40010400
 8001648:	40020800 	.word	0x40020800

0800164c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_USART2_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001684:	f004 f866 	bl	8005754 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f7ff fb3b 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002ec 	.word	0x200002ec
 800169c:	40004400 	.word	0x40004400

080016a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_USART3_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART3_UART_Init+0x4c>)
 80016d8:	f004 f83c 	bl	8005754 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016e2:	f7ff fb11 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000330 	.word	0x20000330
 80016f0:	40004800 	.word	0x40004800

080016f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a36      	ldr	r2, [pc, #216]	; (80017ec <HAL_UART_MspInit+0xf8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d134      	bne.n	8001780 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a34      	ldr	r2, [pc, #208]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a2d      	ldr	r2, [pc, #180]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174e:	230c      	movs	r3, #12
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4822      	ldr	r0, [pc, #136]	; (80017f4 <HAL_UART_MspInit+0x100>)
 800176a:	f001 fc31 	bl	8002fd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	2026      	movs	r0, #38	; 0x26
 8001774:	f001 f800 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001778:	2026      	movs	r0, #38	; 0x26
 800177a:	f001 f819 	bl	80027b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800177e:	e031      	b.n	80017e4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_UART_MspInit+0x104>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12c      	bne.n	80017e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_UART_MspInit+0xfc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d4:	2307      	movs	r3, #7
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <HAL_UART_MspInit+0x108>)
 80017e0:	f001 fbf6 	bl	8002fd0 <HAL_GPIO_Init>
}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40004400 	.word	0x40004400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40004800 	.word	0x40004800
 80017fc:	40020400 	.word	0x40020400

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopFillZerobss+0x26>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182a:	f7ff fbbf 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f007 fee1 	bl	80095f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff f9cd 	bl	8000bd0 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001844:	0800a0e4 	.word	0x0800a0e4
  ldr r2, =_sbss
 8001848:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800184c:	20004d98 	.word	0x20004d98

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 ff70 	bl	8002762 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f7ff fa72 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fa44 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000374 	.word	0x20000374

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000374 	.word	0x20000374

080018d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ed      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe fe22 	bl	8000540 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff ffd8 	bl	80018c0 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff ffd4 	bl	80018c0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0c5      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0e5      	beq.n	8001914 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0202 	bic.w	r2, r2, #2
 8001956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff ffb2 	bl	80018c0 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	e012      	b.n	8001986 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001960:	f7ff ffae 	bl	80018c0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d90b      	bls.n	8001986 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e09f      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e5      	bne.n	8001960 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7e5b      	ldrb	r3, [r3, #25]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0220 	bic.w	r2, r2, #32
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7edb      	ldrb	r3, [r3, #27]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0210 	bic.w	r2, r2, #16
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0210 	orr.w	r2, r2, #16
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7f1b      	ldrb	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0208 	orr.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d003      	beq.n	8001af6 <HAL_CAN_ConfigFilter+0x26>
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f040 80be 	bne.w	8001c72 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001af6:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <HAL_CAN_ConfigFilter+0x1bc>)
 8001af8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2201      	movs	r2, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d123      	bne.n	8001ba0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3248      	adds	r2, #72	; 0x48
 8001b80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	3348      	adds	r3, #72	; 0x48
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d122      	bne.n	8001bee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3248      	adds	r2, #72	; 0x48
 8001bce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be4:	6979      	ldr	r1, [r7, #20]
 8001be6:	3348      	adds	r3, #72	; 0x48
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c34:	e007      	b.n	8001c46 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c64:	f023 0201 	bic.w	r2, r3, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e006      	b.n	8001c80 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40006400 	.word	0x40006400

08001c90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d12e      	bne.n	8001d02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff fe00 	bl	80018c0 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cc2:	e012      	b.n	8001cea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc4:	f7ff fdfc 	bl	80018c0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b0a      	cmp	r3, #10
 8001cd0:	d90b      	bls.n	8001cea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e012      	b.n	8001d10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e5      	bne.n	8001cc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e006      	b.n	8001d10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_AddTxMessage+0x2c>
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 80b8 	bne.w	8001eb4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80a0 	beq.w	8001ea4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	0e1b      	lsrs	r3, r3, #24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d907      	bls.n	8001d84 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e09e      	b.n	8001ec2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d84:	2201      	movs	r2, #1
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	6809      	ldr	r1, [r1, #0]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3318      	adds	r3, #24
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	440b      	add	r3, r1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e00f      	b.n	8001dd2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dbc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dc6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3318      	adds	r3, #24
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	440b      	add	r3, r1
 8001dd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3318      	adds	r3, #24
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	440b      	add	r3, r1
 8001de2:	3304      	adds	r3, #4
 8001de4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	7d1b      	ldrb	r3, [r3, #20]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d111      	bne.n	8001e12 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3318      	adds	r3, #24
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3318      	adds	r3, #24
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3304      	adds	r3, #4
 8001e10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3307      	adds	r3, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	061a      	lsls	r2, r3, #24
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3305      	adds	r3, #5
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	3204      	adds	r2, #4
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	4610      	mov	r0, r2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	ea43 0200 	orr.w	r2, r3, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3302      	adds	r3, #2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	ea43 0200 	orr.w	r2, r3, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3318      	adds	r3, #24
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	6811      	ldr	r1, [r2, #0]
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3318      	adds	r3, #24
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	440b      	add	r3, r1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e00e      	b.n	8001ec2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e006      	b.n	8001ec2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d002      	beq.n	8001eee <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11d      	bne.n	8001f2a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d003      	beq.n	8001f5c <HAL_CAN_GetRxMessage+0x24>
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f040 80f3 	bne.w	8002142 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d116      	bne.n	8001f9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0e7      	b.n	8002150 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d8      	b.n	8002150 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	331b      	adds	r3, #27
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0204 	and.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10c      	bne.n	8001fd6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	331b      	adds	r3, #27
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0d5b      	lsrs	r3, r3, #21
 8001fcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e00b      	b.n	8001fee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	331b      	adds	r3, #27
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	331b      	adds	r3, #27
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0202 	and.w	r2, r3, #2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	331b      	adds	r3, #27
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	331b      	adds	r3, #27
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	331b      	adds	r3, #27
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0a1a      	lsrs	r2, r3, #8
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4413      	add	r3, r2
 8002086:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0c1a      	lsrs	r2, r3, #16
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3302      	adds	r3, #2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e1a      	lsrs	r2, r3, #24
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3303      	adds	r3, #3
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3304      	adds	r3, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0a1a      	lsrs	r2, r3, #8
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3305      	adds	r3, #5
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0c1a      	lsrs	r2, r3, #16
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	3306      	adds	r3, #6
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	4413      	add	r3, r2
 8002106:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e1a      	lsrs	r2, r3, #24
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	3307      	adds	r3, #7
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0220 	orr.w	r2, r2, #32
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	e007      	b.n	800213e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d002      	beq.n	800217a <HAL_CAN_ActivateNotification+0x1e>
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d109      	bne.n	800218e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6959      	ldr	r1, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e006      	b.n	800219c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
  }
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07c      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f983 	bl	8002516 <HAL_CAN_TxMailbox0CompleteCallback>
 8002210:	e016      	b.n	8002240 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	e00c      	b.n	8002240 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	e002      	b.n	8002240 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f989 	bl	8002552 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d024      	beq.n	8002294 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002252:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f963 	bl	800252a <HAL_CAN_TxMailbox1CompleteCallback>
 8002264:	e016      	b.n	8002294 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	e00c      	b.n	8002294 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
 800228c:	e002      	b.n	8002294 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f969 	bl	8002566 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f943 	bl	800253e <HAL_CAN_TxMailbox2CompleteCallback>
 80022b8:	e016      	b.n	80022e8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	e00c      	b.n	80022e8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
 80022e0:	e002      	b.n	80022e8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f949 	bl	800257a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002302:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2210      	movs	r2, #16
 800230a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2208      	movs	r2, #8
 8002326:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f930 	bl	800258e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe f9d4 	bl	80006f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2210      	movs	r2, #16
 800236e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2208      	movs	r2, #8
 800238a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f912 	bl	80025b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8f9 	bl	80025a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2210      	movs	r2, #16
 80023ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8fc 	bl	80025ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8f5 	bl	80025de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d07b      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d072      	beq.n	80024ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002462:	2b00      	cmp	r3, #0
 8002464:	d043      	beq.n	80024ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800246c:	2b00      	cmp	r3, #0
 800246e:	d03e      	beq.n	80024ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002476:	2b60      	cmp	r3, #96	; 0x60
 8002478:	d02b      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x32a>
 800247a:	2b60      	cmp	r3, #96	; 0x60
 800247c:	d82e      	bhi.n	80024dc <HAL_CAN_IRQHandler+0x334>
 800247e:	2b50      	cmp	r3, #80	; 0x50
 8002480:	d022      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x320>
 8002482:	2b50      	cmp	r3, #80	; 0x50
 8002484:	d82a      	bhi.n	80024dc <HAL_CAN_IRQHandler+0x334>
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d019      	beq.n	80024be <HAL_CAN_IRQHandler+0x316>
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d826      	bhi.n	80024dc <HAL_CAN_IRQHandler+0x334>
 800248e:	2b30      	cmp	r3, #48	; 0x30
 8002490:	d010      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x30c>
 8002492:	2b30      	cmp	r3, #48	; 0x30
 8002494:	d822      	bhi.n	80024dc <HAL_CAN_IRQHandler+0x334>
 8002496:	2b10      	cmp	r3, #16
 8002498:	d002      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x2f8>
 800249a:	2b20      	cmp	r3, #32
 800249c:	d005      	beq.n	80024aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800249e:	e01d      	b.n	80024dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a8:	e019      	b.n	80024de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b2:	e014      	b.n	80024de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f043 0320 	orr.w	r3, r3, #32
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024bc:	e00f      	b.n	80024de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024c6:	e00a      	b.n	80024de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d0:	e005      	b.n	80024de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024da:	e000      	b.n	80024de <HAL_CAN_IRQHandler+0x336>
            break;
 80024dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699a      	ldr	r2, [r3, #24]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2204      	movs	r2, #4
 80024f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f872 	bl	80025f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff4c 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278a:	f7ff ff61 	bl	8002650 <__NVIC_GetPriorityGrouping>
 800278e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	6978      	ldr	r0, [r7, #20]
 8002796:	f7ff ffb1 	bl	80026fc <NVIC_EncodePriority>
 800279a:	4602      	mov	r2, r0
 800279c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff80 	bl	80026a8 <__NVIC_SetPriority>
}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff54 	bl	800266c <__NVIC_EnableIRQ>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff f872 	bl	80018c0 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e099      	b.n	800291c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	e00f      	b.n	800282a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280a:	f7ff f859 	bl	80018c0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b05      	cmp	r3, #5
 8002816:	d908      	bls.n	800282a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e078      	b.n	800291c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e8      	bne.n	800280a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_DMA_Init+0x158>)
 8002844:	4013      	ands	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b04      	cmp	r3, #4
 8002882:	d107      	bne.n	8002894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4313      	orrs	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d117      	bne.n	80028ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fb01 	bl	8002ed8 <DMA_CheckFifoParam>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ea:	2301      	movs	r3, #1
 80028ec:	e016      	b.n	800291c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fab8 	bl	8002e6c <DMA_CalcBaseAndBitshift>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	223f      	movs	r2, #63	; 0x3f
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	f010803f 	.word	0xf010803f

08002928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_DMA_Start_IT+0x26>
 800294a:	2302      	movs	r3, #2
 800294c:	e040      	b.n	80029d0 <HAL_DMA_Start_IT+0xa8>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d12f      	bne.n	80029c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa4a 	bl	8002e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	223f      	movs	r2, #63	; 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0216 	orr.w	r2, r2, #22
 8002996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0208 	orr.w	r2, r2, #8
 80029ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e005      	b.n	80029ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e6:	f7fe ff6b 	bl	80018c0 <HAL_GetTick>
 80029ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d008      	beq.n	8002a0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e052      	b.n	8002ab0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_Abort+0x62>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5a:	e013      	b.n	8002a84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5c:	f7fe ff30 	bl	80018c0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d90c      	bls.n	8002a84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e015      	b.n	8002ab0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e4      	bne.n	8002a5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00c      	b.n	8002af0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b08:	4b8e      	ldr	r3, [pc, #568]	; (8002d44 <HAL_DMA_IRQHandler+0x248>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	; (8002d48 <HAL_DMA_IRQHandler+0x24c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2208      	movs	r2, #8
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2210      	movs	r2, #16
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d043      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03c      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d024      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	e01f      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0208 	bic.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	2220      	movs	r2, #32
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 808f 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8087 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	2220      	movs	r2, #32
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d136      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x1da>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	223f      	movs	r2, #63	; 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d07e      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
        }
        return;
 8002d12:	e079      	b.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e02c      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000
 8002d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e01e      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0210 	bic.w	r2, r2, #16
 8002d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d032      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d307      	bcc.n	8002de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f2      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x2cc>
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e08:	bf00      	nop
    }
  }
}
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d108      	bne.n	8002e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e4e:	e007      	b.n	8002e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b10      	subs	r3, #16
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d909      	bls.n	8002eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8002eac:	e007      	b.n	8002ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	aaaaaaab 	.word	0xaaaaaaab
 8002ed4:	0800a068 	.word	0x0800a068

08002ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d856      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xce>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <DMA_CheckFifoParam+0x28>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f23 	.word	0x08002f23
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	08002fa7 	.word	0x08002fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d046      	beq.n	8002faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e043      	b.n	8002faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f2a:	d140      	bne.n	8002fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e03d      	b.n	8002fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	d121      	bne.n	8002f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d837      	bhi.n	8002fb2 <DMA_CheckFifoParam+0xda>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <DMA_CheckFifoParam+0x70>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f5f 	.word	0x08002f5f
 8002f50:	08002f59 	.word	0x08002f59
 8002f54:	08002f71 	.word	0x08002f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e030      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d025      	beq.n	8002fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6e:	e022      	b.n	8002fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f78:	d11f      	bne.n	8002fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f7e:	e01c      	b.n	8002fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d903      	bls.n	8002f8e <DMA_CheckFifoParam+0xb6>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d003      	beq.n	8002f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f8c:	e018      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      break;
 8002f92:	e015      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e00b      	b.n	8002fbe <DMA_CheckFifoParam+0xe6>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e00a      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e008      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e006      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e16b      	b.n	80032c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 815a 	bne.w	80032be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80b4 	beq.w	80032be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b60      	ldr	r3, [pc, #384]	; (80032dc <HAL_GPIO_Init+0x30c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a5f      	ldr	r2, [pc, #380]	; (80032dc <HAL_GPIO_Init+0x30c>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_GPIO_Init+0x30c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <HAL_GPIO_Init+0x310>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_GPIO_Init+0x314>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02b      	beq.n	80031f6 <HAL_GPIO_Init+0x226>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_GPIO_Init+0x318>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d025      	beq.n	80031f2 <HAL_GPIO_Init+0x222>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a50      	ldr	r2, [pc, #320]	; (80032ec <HAL_GPIO_Init+0x31c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <HAL_GPIO_Init+0x21e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4f      	ldr	r2, [pc, #316]	; (80032f0 <HAL_GPIO_Init+0x320>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x21a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4e      	ldr	r2, [pc, #312]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x216>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4d      	ldr	r2, [pc, #308]	; (80032f8 <HAL_GPIO_Init+0x328>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x212>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <HAL_GPIO_Init+0x32c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	; (8003300 <HAL_GPIO_Init+0x330>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x20a>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00e      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031da:	2308      	movs	r3, #8
 80031dc:	e00c      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031de:	2306      	movs	r3, #6
 80031e0:	e00a      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031e2:	2305      	movs	r3, #5
 80031e4:	e008      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031ea:	2303      	movs	r3, #3
 80031ec:	e004      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031f6:	2300      	movs	r3, #0
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f002 0203 	and.w	r2, r2, #3
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4093      	lsls	r3, r2
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_GPIO_Init+0x310>)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323a:	4a32      	ldr	r2, [pc, #200]	; (8003304 <HAL_GPIO_Init+0x334>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_GPIO_Init+0x334>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_GPIO_Init+0x334>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	f67f ae90 	bls.w	8002fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40021400 	.word	0x40021400
 80032fc:	40021800 	.word	0x40021800
 8003300:	40021c00 	.word	0x40021c00
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003324:	e003      	b.n	800332e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43d9      	mvns	r1, r3
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	400b      	ands	r3, r1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e267      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d075      	beq.n	800347a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800338e:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b82      	ldr	r3, [pc, #520]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b7e      	ldr	r3, [pc, #504]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e242      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b76      	ldr	r3, [pc, #472]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 8003408:	4b69      	ldr	r3, [pc, #420]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fa4a 	bl	80018c0 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fa46 	bl	80018c0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e207      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xc0>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fa36 	bl	80018c0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fa32 	bl	80018c0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1f3      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1c7      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4937      	ldr	r1, [pc, #220]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x244>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe f9eb 	bl	80018c0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe f9e7 	bl	80018c0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1a8      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4925      	ldr	r1, [pc, #148]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_OscConfig+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe f9ca 	bl	80018c0 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7fe f9c6 	bl	80018c0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e187      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d036      	beq.n	80035c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe f9aa 	bl	80018c0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe f9a6 	bl	80018c0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e167      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x200>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fe f993 	bl	80018c0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359e:	f7fe f98f 	bl	80018c0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e150      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	42470000 	.word	0x42470000
 80035b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8097 	beq.w	8003704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b7d      	ldr	r3, [pc, #500]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a7c      	ldr	r2, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b7a      	ldr	r3, [pc, #488]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b77      	ldr	r3, [pc, #476]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b74      	ldr	r3, [pc, #464]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fe f94f 	bl	80018c0 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fe f94b 	bl	80018c0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e10c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x474>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x2ea>
 800364c:	4b64      	ldr	r3, [pc, #400]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a63      	ldr	r2, [pc, #396]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x30c>
 8003662:	4b5f      	ldr	r3, [pc, #380]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a5e      	ldr	r2, [pc, #376]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800367c:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	4b55      	ldr	r3, [pc, #340]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a54      	ldr	r2, [pc, #336]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe f910 	bl	80018c0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe f90c 	bl	80018c0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0cb      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCC_OscConfig+0x334>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fe f8fa 	bl	80018c0 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe f8f6 	bl	80018c0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0b5      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ee      	bne.n	80036d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	4a38      	ldr	r2, [pc, #224]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a1 	beq.w	8003850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370e:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d05c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d141      	bne.n	80037a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe f8ca 	bl	80018c0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe f8c6 	bl	80018c0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e087      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	491b      	ldr	r1, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe f89f 	bl	80018c0 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003786:	f7fe f89b 	bl	80018c0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e05c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x416>
 80037a4:	e054      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe f888 	bl	80018c0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe f884 	bl	80018c0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e045      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x444>
 80037d2:	e03d      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e038      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x4ec>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d028      	beq.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d121      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d11a      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cc      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d90c      	bls.n	800389c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b65      	ldr	r3, [pc, #404]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d044      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d119      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d003      	beq.n	800391e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	2b03      	cmp	r3, #3
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e067      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b37      	ldr	r3, [pc, #220]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4934      	ldr	r1, [pc, #208]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fd ffb6 	bl	80018c0 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fd ffb2 	bl	80018c0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d20c      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f9b0 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023c00 	.word	0x40023c00
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	0800a050 	.word	0x0800a050
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b090      	sub	sp, #64	; 0x40
 8003a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d00d      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x40>
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	f200 80a1 	bhi.w	8003b98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a5e:	e09b      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a64:	e09b      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a6a:	e098      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a76:	4b4d      	ldr	r3, [pc, #308]	; (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a94:	2100      	movs	r1, #0
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a98:	fb03 f201 	mul.w	r2, r3, r1
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a43      	ldr	r2, [pc, #268]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa6:	fba0 1202 	umull	r1, r2, r0, r2
 8003aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aac:	460a      	mov	r2, r1
 8003aae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab2:	4413      	add	r3, r2
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	2200      	movs	r2, #0
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	61fa      	str	r2, [r7, #28]
 8003abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ac6:	f7fc fb83 	bl	80001d0 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4613      	mov	r3, r2
 8003ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad2:	e053      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad4:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	2200      	movs	r2, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	617a      	str	r2, [r7, #20]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ae6:	f04f 0b00 	mov.w	fp, #0
 8003aea:	4652      	mov	r2, sl
 8003aec:	465b      	mov	r3, fp
 8003aee:	f04f 0000 	mov.w	r0, #0
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	0159      	lsls	r1, r3, #5
 8003af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afc:	0150      	lsls	r0, r2, #5
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	ebb2 080a 	subs.w	r8, r2, sl
 8003b06:	eb63 090b 	sbc.w	r9, r3, fp
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b22:	eb63 0509 	sbc.w	r5, r3, r9
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	00eb      	lsls	r3, r5, #3
 8003b30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b34:	00e2      	lsls	r2, r4, #3
 8003b36:	4614      	mov	r4, r2
 8003b38:	461d      	mov	r5, r3
 8003b3a:	eb14 030a 	adds.w	r3, r4, sl
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	eb45 030b 	adc.w	r3, r5, fp
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b52:	4629      	mov	r1, r5
 8003b54:	028b      	lsls	r3, r1, #10
 8003b56:	4621      	mov	r1, r4
 8003b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	028a      	lsls	r2, r1, #10
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	2200      	movs	r2, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	60fa      	str	r2, [r7, #12]
 8003b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b70:	f7fc fb2e 	bl	80001d0 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b96:	e002      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3740      	adds	r7, #64	; 0x40
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	00b71b00 	.word	0x00b71b00

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd4:	f7ff fff0 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	0a9b      	lsrs	r3, r3, #10
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4903      	ldr	r1, [pc, #12]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	0800a060 	.word	0x0800a060

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bfc:	f7ff ffdc 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0b5b      	lsrs	r3, r3, #13
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	0800a060 	.word	0x0800a060

08003c20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RCC_GetClockConfig+0x60>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0207 	and.w	r2, r3, #7
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	601a      	str	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0a1      	b.n	8003de2 <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc ff30 	bl	8000b18 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7ff ff7e 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4a44      	ldr	r2, [pc, #272]	; (8003dec <HAL_SMBUS_Init+0x168>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	0c9b      	lsrs	r3, r3, #18
 8003ce0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6852      	ldr	r2, [r2, #4]
 8003d1e:	0052      	lsls	r2, r2, #1
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	fbb1 f1f2 	udiv	r1, r1, r2
 8003d26:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_SMBUS_Init+0xba>
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6852      	ldr	r2, [r2, #4]
 8003d34:	0052      	lsls	r2, r2, #1
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	fbb1 f2f2 	udiv	r2, r1, r2
 8003d3c:	e000      	b.n	8003d40 <HAL_SMBUS_Init+0xbc>
 8003d3e:	2204      	movs	r2, #4
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	6809      	ldr	r1, [r1, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6911      	ldr	r1, [r2, #16]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	4311      	orrs	r1, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	431bde83 	.word	0x431bde83

08003df0 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e06:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8003e10:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e041      	b.n	8003ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd faca 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 ff54 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d001      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e04e      	b.n	8003f86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d01d      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x80>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_TIM_Base_Start_IT+0xdc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d111      	bne.n	8003f74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d010      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	e007      	b.n	8003f84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40001800 	.word	0x40001800

08003fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e041      	b.n	8004046 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f839 	bl	800404e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 fe94 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_TIM_PWM_Start_DMA+0x2c>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e022      	b.n	80040d6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d109      	bne.n	80040aa <HAL_TIM_PWM_Start_DMA+0x46>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	e015      	b.n	80040d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start_DMA+0x60>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e008      	b.n	80040d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
 80040dc:	e171      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start_DMA+0x94>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e022      	b.n	800413e <HAL_TIM_PWM_Start_DMA+0xda>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start_DMA+0xae>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf0c      	ite	eq
 800410a:	2301      	moveq	r3, #1
 800410c:	2300      	movne	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e015      	b.n	800413e <HAL_TIM_PWM_Start_DMA+0xda>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e008      	b.n	800413e <HAL_TIM_PWM_Start_DMA+0xda>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start_DMA+0xee>
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e137      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	e016      	b.n	8004190 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	e00e      	b.n	8004190 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	e006      	b.n	8004190 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418a:	e001      	b.n	8004190 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e118      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b0c      	cmp	r3, #12
 8004194:	f200 80ae 	bhi.w	80042f4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080042f5 	.word	0x080042f5
 80041a8:	080042f5 	.word	0x080042f5
 80041ac:	080042f5 	.word	0x080042f5
 80041b0:	0800421d 	.word	0x0800421d
 80041b4:	080042f5 	.word	0x080042f5
 80041b8:	080042f5 	.word	0x080042f5
 80041bc:	080042f5 	.word	0x080042f5
 80041c0:	08004265 	.word	0x08004265
 80041c4:	080042f5 	.word	0x080042f5
 80041c8:	080042f5 	.word	0x080042f5
 80041cc:	080042f5 	.word	0x080042f5
 80041d0:	080042ad 	.word	0x080042ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	4a7c      	ldr	r2, [pc, #496]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x368>)
 80041da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	4a7b      	ldr	r2, [pc, #492]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	4a7a      	ldr	r2, [pc, #488]	; (80043d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80041ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3334      	adds	r3, #52	; 0x34
 80041f8:	461a      	mov	r2, r3
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	f7fe fb94 	bl	8002928 <HAL_DMA_Start_IT>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0db      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004218:	60da      	str	r2, [r3, #12]
      break;
 800421a:	e06e      	b.n	80042fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	4a6a      	ldr	r2, [pc, #424]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x368>)
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	4a69      	ldr	r2, [pc, #420]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800422a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	4a68      	ldr	r2, [pc, #416]	; (80043d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004232:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3338      	adds	r3, #56	; 0x38
 8004240:	461a      	mov	r2, r3
 8004242:	887b      	ldrh	r3, [r7, #2]
 8004244:	f7fe fb70 	bl	8002928 <HAL_DMA_Start_IT>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0b7      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004260:	60da      	str	r2, [r3, #12]
      break;
 8004262:	e04a      	b.n	80042fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x368>)
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4a57      	ldr	r2, [pc, #348]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004272:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a56      	ldr	r2, [pc, #344]	; (80043d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800427a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	333c      	adds	r3, #60	; 0x3c
 8004288:	461a      	mov	r2, r3
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	f7fe fb4c 	bl	8002928 <HAL_DMA_Start_IT>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e093      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a8:	60da      	str	r2, [r3, #12]
      break;
 80042aa:	e026      	b.n	80042fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4a46      	ldr	r2, [pc, #280]	; (80043cc <HAL_TIM_PWM_Start_DMA+0x368>)
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	4a45      	ldr	r2, [pc, #276]	; (80043d0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	4a44      	ldr	r2, [pc, #272]	; (80043d4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80042c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3340      	adds	r3, #64	; 0x40
 80042d0:	461a      	mov	r2, r3
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	f7fe fb28 	bl	8002928 <HAL_DMA_Start_IT>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06f      	b.n	80043c2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f0:	60da      	str	r2, [r3, #12]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	75fb      	strb	r3, [r7, #23]
      break;
 80042f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d15f      	bne.n	80043c0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f91b 	bl	8005544 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a31      	ldr	r2, [pc, #196]	; (80043d8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2f      	ldr	r2, [pc, #188]	; (80043dc <HAL_TIM_PWM_Start_DMA+0x378>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d01d      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <HAL_TIM_PWM_Start_DMA+0x378>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_TIM_PWM_Start_DMA+0x388>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_TIM_PWM_Start_DMA+0x328>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d111      	bne.n	80043b0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d010      	beq.n	80043c0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e007      	b.n	80043c0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	08004c0d 	.word	0x08004c0d
 80043d0:	08004cb5 	.word	0x08004cb5
 80043d4:	08004b7b 	.word	0x08004b7b
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40010400 	.word	0x40010400
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40001800 	.word	0x40001800

080043f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e041      	b.n	800448a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f839 	bl	8004492 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 fc72 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d122      	bne.n	8004502 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11b      	bne.n	8004502 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0202 	mvn.w	r2, #2
 80044d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fb14 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 80044ee:	e005      	b.n	80044fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fb06 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fb17 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d122      	bne.n	8004556 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d11b      	bne.n	8004556 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f06f 0204 	mvn.w	r2, #4
 8004526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 faea 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004542:	e005      	b.n	8004550 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fadc 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 faed 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d122      	bne.n	80045aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b08      	cmp	r3, #8
 8004570:	d11b      	bne.n	80045aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0208 	mvn.w	r2, #8
 800457a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2204      	movs	r2, #4
 8004580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fac0 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004596:	e005      	b.n	80045a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fab2 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fac3 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d122      	bne.n	80045fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d11b      	bne.n	80045fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0210 	mvn.w	r2, #16
 80045ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2208      	movs	r2, #8
 80045d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fa96 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 80045ea:	e005      	b.n	80045f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa88 	bl	8004b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa99 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10e      	bne.n	800462a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f06f 0201 	mvn.w	r2, #1
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fc fb5d 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d10e      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d107      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 f875 	bl	8005740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d10e      	bne.n	8004682 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa68 	bl	8004b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d10e      	bne.n	80046ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0220 	mvn.w	r2, #32
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 f83f 	bl	800572c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e088      	b.n	80047e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11b      	bne.n	800471a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f000 fd63 	bl	80051bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 020c 	bic.w	r2, r2, #12
 8004704:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6999      	ldr	r1, [r3, #24]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	619a      	str	r2, [r3, #24]
 8004718:	e060      	b.n	80047dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d11c      	bne.n	800475a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f000 fde7 	bl	8005302 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004742:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	619a      	str	r2, [r3, #24]
 8004758:	e040      	b.n	80047dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d11b      	bne.n	8004798 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f000 fe34 	bl	80053dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 020c 	bic.w	r2, r2, #12
 8004782:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69d9      	ldr	r1, [r3, #28]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e021      	b.n	80047dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d11c      	bne.n	80047d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 fe51 	bl	8005454 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	021a      	lsls	r2, r3, #8
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	61da      	str	r2, [r3, #28]
 80047d6:	e001      	b.n	80047dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800480a:	2302      	movs	r3, #2
 800480c:	e0ae      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	f200 809f 	bhi.w	800495c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004859 	.word	0x08004859
 8004828:	0800495d 	.word	0x0800495d
 800482c:	0800495d 	.word	0x0800495d
 8004830:	0800495d 	.word	0x0800495d
 8004834:	08004899 	.word	0x08004899
 8004838:	0800495d 	.word	0x0800495d
 800483c:	0800495d 	.word	0x0800495d
 8004840:	0800495d 	.word	0x0800495d
 8004844:	080048db 	.word	0x080048db
 8004848:	0800495d 	.word	0x0800495d
 800484c:	0800495d 	.word	0x0800495d
 8004850:	0800495d 	.word	0x0800495d
 8004854:	0800491b 	.word	0x0800491b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fafc 	bl	8004e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	619a      	str	r2, [r3, #24]
      break;
 8004896:	e064      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fb4c 	bl	8004f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6999      	ldr	r1, [r3, #24]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	021a      	lsls	r2, r3, #8
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	619a      	str	r2, [r3, #24]
      break;
 80048d8:	e043      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fba1 	bl	8005028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0208 	orr.w	r2, r2, #8
 80048f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0204 	bic.w	r2, r2, #4
 8004904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69d9      	ldr	r1, [r3, #28]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
      break;
 8004918:	e023      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fbf5 	bl	8005110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69d9      	ldr	r1, [r3, #28]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	021a      	lsls	r2, r3, #8
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	61da      	str	r2, [r3, #28]
      break;
 800495a:	e002      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIM_ConfigClockSource+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e0b4      	b.n	8004afa <HAL_TIM_ConfigClockSource+0x186>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0xd4>
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	f200 8087 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	f000 8086 	beq.w	8004ae6 <HAL_TIM_ConfigClockSource+0x172>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d87f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d01a      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xa6>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d87b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d050      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x11a>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d877      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d03c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xfa>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d873      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d058      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x13a>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d86f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d064      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d867      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d05a      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	e062      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6899      	ldr	r1, [r3, #8]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f000 fd6b 	bl	8005504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e04f      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f000 fd54 	bl	8005504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 fc12 	bl	80052a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fd21 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fc6e 	bl	800537c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	; 0x60
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fd11 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fbf2 	bl	80052a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fd01 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00c      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 fcf8 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004ade:	e003      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d107      	bne.n	8004ba2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba0:	e02a      	b.n	8004bf8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d107      	bne.n	8004bbc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bba:	e01d      	b.n	8004bf8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d107      	bne.n	8004bd6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd4:	e010      	b.n	8004bf8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d107      	bne.n	8004bf0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2208      	movs	r2, #8
 8004be4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bee:	e003      	b.n	8004bf8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff ffb4 	bl	8004b66 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d10b      	bne.n	8004c3c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d136      	bne.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3a:	e031      	b.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d10b      	bne.n	8004c5e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d125      	bne.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	e020      	b.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d10b      	bne.n	8004c80 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d114      	bne.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7e:	e00f      	b.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d10a      	bne.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff ff42 	bl	8004b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d103      	bne.n	8004cd4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	771a      	strb	r2, [r3, #28]
 8004cd2:	e019      	b.n	8004d08 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d103      	bne.n	8004ce6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
 8004ce4:	e010      	b.n	8004d08 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d103      	bne.n	8004cf8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	771a      	strb	r2, [r3, #28]
 8004cf6:	e007      	b.n	8004d08 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d102      	bne.n	8004d08 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2208      	movs	r2, #8
 8004d06:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ff18 	bl	8004b3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a40      	ldr	r2, [pc, #256]	; (8004e30 <TIM_Base_SetConfig+0x114>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d00f      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3d      	ldr	r2, [pc, #244]	; (8004e34 <TIM_Base_SetConfig+0x118>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3c      	ldr	r2, [pc, #240]	; (8004e38 <TIM_Base_SetConfig+0x11c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3b      	ldr	r2, [pc, #236]	; (8004e3c <TIM_Base_SetConfig+0x120>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <TIM_Base_SetConfig+0x124>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2f      	ldr	r2, [pc, #188]	; (8004e30 <TIM_Base_SetConfig+0x114>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d02b      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d027      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2c      	ldr	r2, [pc, #176]	; (8004e34 <TIM_Base_SetConfig+0x118>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d023      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2b      	ldr	r2, [pc, #172]	; (8004e38 <TIM_Base_SetConfig+0x11c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01f      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <TIM_Base_SetConfig+0x120>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01b      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <TIM_Base_SetConfig+0x124>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d017      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <TIM_Base_SetConfig+0x128>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <TIM_Base_SetConfig+0x12c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00f      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a26      	ldr	r2, [pc, #152]	; (8004e4c <TIM_Base_SetConfig+0x130>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <TIM_Base_SetConfig+0x134>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <TIM_Base_SetConfig+0x138>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a23      	ldr	r2, [pc, #140]	; (8004e58 <TIM_Base_SetConfig+0x13c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <TIM_Base_SetConfig+0x114>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0xf8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <TIM_Base_SetConfig+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d103      	bne.n	8004e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	615a      	str	r2, [r3, #20]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800
 8004e50:	40001800 	.word	0x40001800
 8004e54:	40001c00 	.word	0x40001c00
 8004e58:	40002000 	.word	0x40002000

08004e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0201 	bic.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 0302 	bic.w	r3, r3, #2
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <TIM_OC1_SetConfig+0xd8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_OC1_SetConfig+0x64>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <TIM_OC1_SetConfig+0xdc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10c      	bne.n	8004eda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0308 	bic.w	r3, r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC1_SetConfig+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC1_SetConfig+0x8e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <TIM_OC1_SetConfig+0xdc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d111      	bne.n	8004f0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40010400 	.word	0x40010400

08004f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0210 	bic.w	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0320 	bic.w	r3, r3, #32
 8004f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a22      	ldr	r2, [pc, #136]	; (8005020 <TIM_OC2_SetConfig+0xe4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_OC2_SetConfig+0x68>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <TIM_OC2_SetConfig+0xe8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d10d      	bne.n	8004fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <TIM_OC2_SetConfig+0xe4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_OC2_SetConfig+0x94>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a16      	ldr	r2, [pc, #88]	; (8005024 <TIM_OC2_SetConfig+0xe8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d113      	bne.n	8004ff8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	bf00      	nop
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40010400 	.word	0x40010400

08005028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a21      	ldr	r2, [pc, #132]	; (8005108 <TIM_OC3_SetConfig+0xe0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC3_SetConfig+0x66>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a20      	ldr	r2, [pc, #128]	; (800510c <TIM_OC3_SetConfig+0xe4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10d      	bne.n	80050aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a16      	ldr	r2, [pc, #88]	; (8005108 <TIM_OC3_SetConfig+0xe0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_OC3_SetConfig+0x92>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a15      	ldr	r2, [pc, #84]	; (800510c <TIM_OC3_SetConfig+0xe4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d113      	bne.n	80050e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	621a      	str	r2, [r3, #32]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400

08005110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	031b      	lsls	r3, r3, #12
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <TIM_OC4_SetConfig+0xa4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_OC4_SetConfig+0x68>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <TIM_OC4_SetConfig+0xa8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d109      	bne.n	800518c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40010400 	.word	0x40010400

080051bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a28      	ldr	r2, [pc, #160]	; (8005288 <TIM_TI1_SetConfig+0xcc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01b      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d017      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <TIM_TI1_SetConfig+0xd0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a24      	ldr	r2, [pc, #144]	; (8005290 <TIM_TI1_SetConfig+0xd4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00f      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a23      	ldr	r2, [pc, #140]	; (8005294 <TIM_TI1_SetConfig+0xd8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a22      	ldr	r2, [pc, #136]	; (8005298 <TIM_TI1_SetConfig+0xdc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a21      	ldr	r2, [pc, #132]	; (800529c <TIM_TI1_SetConfig+0xe0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_TI1_SetConfig+0x66>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <TIM_TI1_SetConfig+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <TIM_TI1_SetConfig+0x6a>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <TIM_TI1_SetConfig+0x6c>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e003      	b.n	8005246 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	b2db      	uxtb	r3, r3
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f023 030a 	bic.w	r3, r3, #10
 8005260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f003 030a 	and.w	r3, r3, #10
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40010400 	.word	0x40010400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40001800 	.word	0x40001800

080052a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 030a 	bic.w	r3, r3, #10
 80052e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005302:	b480      	push	{r7}
 8005304:	b087      	sub	sp, #28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f023 0210 	bic.w	r2, r3, #16
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	031b      	lsls	r3, r3, #12
 8005346:	b29b      	uxth	r3, r3
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005354:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f023 0210 	bic.w	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	031b      	lsls	r3, r3, #12
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005418:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	b2db      	uxtb	r3, r3
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800542c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	621a      	str	r2, [r3, #32]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005480:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005492:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	031b      	lsls	r3, r3, #12
 8005498:	b29b      	uxth	r3, r3
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80054a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	031b      	lsls	r3, r3, #12
 80054ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f043 0307 	orr.w	r3, r3, #7
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800551e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	021a      	lsls	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2201      	movs	r2, #1
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	43db      	mvns	r3, r3
 8005566:	401a      	ands	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e05a      	b.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a21      	ldr	r2, [pc, #132]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d022      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d01d      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d018      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1a      	ldr	r2, [pc, #104]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10c      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40000c00 	.word	0x40000c00
 800567c:	40010400 	.word	0x40010400
 8005680:	40014000 	.word	0x40014000
 8005684:	40001800 	.word	0x40001800

08005688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e03d      	b.n	8005720 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e03f      	b.n	80057e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb ffba 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2224      	movs	r2, #36	; 0x24
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fd7b 	bl	8006294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b08a      	sub	sp, #40	; 0x28
 80057f2:	af02      	add	r7, sp, #8
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b20      	cmp	r3, #32
 800580c:	d17c      	bne.n	8005908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_UART_Transmit+0x2c>
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e075      	b.n	800590a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_UART_Transmit+0x3e>
 8005828:	2302      	movs	r3, #2
 800582a:	e06e      	b.n	800590a <HAL_UART_Transmit+0x11c>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2221      	movs	r2, #33	; 0x21
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005842:	f7fc f83d 	bl	80018c0 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	88fa      	ldrh	r2, [r7, #6]
 8005852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585c:	d108      	bne.n	8005870 <HAL_UART_Transmit+0x82>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	e003      	b.n	8005878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005880:	e02a      	b.n	80058d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2200      	movs	r2, #0
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 faf9 	bl	8005e84 <UART_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e036      	b.n	800590a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	3302      	adds	r3, #2
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	e007      	b.n	80058ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	3301      	adds	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1cf      	bne.n	8005882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2140      	movs	r1, #64	; 0x40
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fac9 	bl	8005e84 <UART_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b0ba      	sub	sp, #232	; 0xe8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10f      	bne.n	800597a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_UART_IRQHandler+0x66>
 8005966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fbd3 	bl	800611e <UART_Receive_IT>
      return;
 8005978:	e256      	b.n	8005e28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800597a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80de 	beq.w	8005b40 <HAL_UART_IRQHandler+0x22c>
 8005984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80d1 	beq.w	8005b40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <HAL_UART_IRQHandler+0xae>
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0xd2>
 80059ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0202 	orr.w	r2, r3, #2
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <HAL_UART_IRQHandler+0xf6>
 80059f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f043 0204 	orr.w	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d011      	beq.n	8005a3a <HAL_UART_IRQHandler+0x126>
 8005a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d105      	bne.n	8005a2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	f043 0208 	orr.w	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 81ed 	beq.w	8005e1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_UART_IRQHandler+0x14e>
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb5e 	bl	800611e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <HAL_UART_IRQHandler+0x17a>
 8005a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04f      	beq.n	8005b2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa66 	bl	8005f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d141      	bne.n	8005b26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1d9      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d013      	beq.n	8005b1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	4a7d      	ldr	r2, [pc, #500]	; (8005cf0 <HAL_UART_IRQHandler+0x3dc>)
 8005afc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fc ffd8 	bl	8002ab8 <HAL_DMA_Abort_IT>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	e00e      	b.n	8005b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f99a 	bl	8005e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	e00a      	b.n	8005b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f996 	bl	8005e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e006      	b.n	8005b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f992 	bl	8005e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b3a:	e170      	b.n	8005e1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3c:	bf00      	nop
    return;
 8005b3e:	e16e      	b.n	8005e1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	f040 814a 	bne.w	8005dde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8143 	beq.w	8005dde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 813c 	beq.w	8005dde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	f040 80b4 	bne.w	8005cf4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8140 	beq.w	8005e22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005baa:	429a      	cmp	r2, r3
 8005bac:	f080 8139 	bcs.w	8005e22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc2:	f000 8088 	beq.w	8005cd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1d9      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3314      	adds	r3, #20
 8005c18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3314      	adds	r3, #20
 8005c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e1      	bne.n	8005c12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3314      	adds	r3, #20
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3314      	adds	r3, #20
 8005c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e3      	bne.n	8005c4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e3      	bne.n	8005c94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fc fe81 	bl	80029d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8c0 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cec:	e099      	b.n	8005e22 <HAL_UART_IRQHandler+0x50e>
 8005cee:	bf00      	nop
 8005cf0:	08006027 	.word	0x08006027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 808b 	beq.w	8005e26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8086 	beq.w	8005e26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d3e:	647a      	str	r2, [r7, #68]	; 0x44
 8005d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	623b      	str	r3, [r7, #32]
   return(result);
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d76:	633a      	str	r2, [r7, #48]	; 0x30
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dbc:	61fa      	str	r2, [r7, #28]
 8005dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e3      	bne.n	8005d98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f848 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ddc:	e023      	b.n	8005e26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_UART_IRQHandler+0x4ea>
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f929 	bl	800604e <UART_Transmit_IT>
    return;
 8005dfc:	e014      	b.n	8005e28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <HAL_UART_IRQHandler+0x514>
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f969 	bl	80060ee <UART_EndTransmit_IT>
    return;
 8005e1c:	e004      	b.n	8005e28 <HAL_UART_IRQHandler+0x514>
    return;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <HAL_UART_IRQHandler+0x514>
      return;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <HAL_UART_IRQHandler+0x514>
      return;
 8005e26:	bf00      	nop
  }
}
 8005e28:	37e8      	adds	r7, #232	; 0xe8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop

08005e30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b090      	sub	sp, #64	; 0x40
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e94:	e050      	b.n	8005f38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d04c      	beq.n	8005f38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ea4:	f7fb fd0c 	bl	80018c0 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d241      	bcs.n	8005f38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ed4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f023 0301 	bic.w	r3, r3, #1
 8005efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f08:	623a      	str	r2, [r7, #32]
 8005f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	69f9      	ldr	r1, [r7, #28]
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e00f      	b.n	8005f58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4013      	ands	r3, r2
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d09f      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3740      	adds	r7, #64	; 0x40
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b095      	sub	sp, #84	; 0x54
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f88:	643a      	str	r2, [r7, #64]	; 0x40
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d119      	bne.n	800600c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff8:	61ba      	str	r2, [r7, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6979      	ldr	r1, [r7, #20]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800601a:	bf00      	nop
 800601c:	3754      	adds	r7, #84	; 0x54
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ff09 	bl	8005e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b21      	cmp	r3, #33	; 0x21
 8006060:	d13e      	bne.n	80060e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d114      	bne.n	8006096 <UART_Transmit_IT+0x48>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d110      	bne.n	8006096 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]
 8006094:	e008      	b.n	80060a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6211      	str	r1, [r2, #32]
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4619      	mov	r1, r3
 80060b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10f      	bne.n	80060dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fe8e 	bl	8005e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08c      	sub	sp, #48	; 0x30
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b22      	cmp	r3, #34	; 0x22
 8006130:	f040 80ab 	bne.w	800628a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613c:	d117      	bne.n	800616e <UART_Receive_IT+0x50>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d113      	bne.n	800616e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615c:	b29a      	uxth	r2, r3
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
 800616c:	e026      	b.n	80061bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006180:	d007      	beq.n	8006192 <UART_Receive_IT+0x74>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <UART_Receive_IT+0x82>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e008      	b.n	80061b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4619      	mov	r1, r3
 80061ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d15a      	bne.n	8006286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0220 	bic.w	r2, r2, #32
 80061de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	2b01      	cmp	r3, #1
 800620e:	d135      	bne.n	800627c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	613b      	str	r3, [r7, #16]
   return(result);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 0310 	bic.w	r3, r3, #16
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	623a      	str	r2, [r7, #32]
 8006238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	61bb      	str	r3, [r7, #24]
   return(result);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d10a      	bne.n	800626e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fdf9 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
 800627a:	e002      	b.n	8006282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fde1 	bl	8005e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	e002      	b.n	800628c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e000      	b.n	800628c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800628a:	2302      	movs	r3, #2
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3730      	adds	r7, #48	; 0x30
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b0c0      	sub	sp, #256	; 0x100
 800629a:	af00      	add	r7, sp, #0
 800629c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	68d9      	ldr	r1, [r3, #12]
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	ea40 0301 	orr.w	r3, r0, r1
 80062bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062ec:	f021 010c 	bic.w	r1, r1, #12
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062fa:	430b      	orrs	r3, r1
 80062fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	6999      	ldr	r1, [r3, #24]
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	ea40 0301 	orr.w	r3, r0, r1
 800631a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b8f      	ldr	r3, [pc, #572]	; (8006560 <UART_SetConfig+0x2cc>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d005      	beq.n	8006334 <UART_SetConfig+0xa0>
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b8d      	ldr	r3, [pc, #564]	; (8006564 <UART_SetConfig+0x2d0>)
 8006330:	429a      	cmp	r2, r3
 8006332:	d104      	bne.n	800633e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fd fc60 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8006338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800633c:	e003      	b.n	8006346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800633e:	f7fd fc47 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8006342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006350:	f040 810c 	bne.w	800656c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006358:	2200      	movs	r2, #0
 800635a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800635e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	1891      	adds	r1, r2, r2
 800636c:	65b9      	str	r1, [r7, #88]	; 0x58
 800636e:	415b      	adcs	r3, r3
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006376:	4621      	mov	r1, r4
 8006378:	eb12 0801 	adds.w	r8, r2, r1
 800637c:	4629      	mov	r1, r5
 800637e:	eb43 0901 	adc.w	r9, r3, r1
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800638e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006396:	4690      	mov	r8, r2
 8006398:	4699      	mov	r9, r3
 800639a:	4623      	mov	r3, r4
 800639c:	eb18 0303 	adds.w	r3, r8, r3
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063a4:	462b      	mov	r3, r5
 80063a6:	eb49 0303 	adc.w	r3, r9, r3
 80063aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063c2:	460b      	mov	r3, r1
 80063c4:	18db      	adds	r3, r3, r3
 80063c6:	653b      	str	r3, [r7, #80]	; 0x50
 80063c8:	4613      	mov	r3, r2
 80063ca:	eb42 0303 	adc.w	r3, r2, r3
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
 80063d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063d8:	f7f9 fefa 	bl	80001d0 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b61      	ldr	r3, [pc, #388]	; (8006568 <UART_SetConfig+0x2d4>)
 80063e2:	fba3 2302 	umull	r2, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	011c      	lsls	r4, r3, #4
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	64b9      	str	r1, [r7, #72]	; 0x48
 8006404:	415b      	adcs	r3, r3
 8006406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800640c:	4641      	mov	r1, r8
 800640e:	eb12 0a01 	adds.w	sl, r2, r1
 8006412:	4649      	mov	r1, r9
 8006414:	eb43 0b01 	adc.w	fp, r3, r1
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800642c:	4692      	mov	sl, r2
 800642e:	469b      	mov	fp, r3
 8006430:	4643      	mov	r3, r8
 8006432:	eb1a 0303 	adds.w	r3, sl, r3
 8006436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800643a:	464b      	mov	r3, r9
 800643c:	eb4b 0303 	adc.w	r3, fp, r3
 8006440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006458:	460b      	mov	r3, r1
 800645a:	18db      	adds	r3, r3, r3
 800645c:	643b      	str	r3, [r7, #64]	; 0x40
 800645e:	4613      	mov	r3, r2
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800646a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800646e:	f7f9 feaf 	bl	80001d0 <__aeabi_uldivmod>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4611      	mov	r1, r2
 8006478:	4b3b      	ldr	r3, [pc, #236]	; (8006568 <UART_SetConfig+0x2d4>)
 800647a:	fba3 2301 	umull	r2, r3, r3, r1
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2264      	movs	r2, #100	; 0x64
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	1acb      	subs	r3, r1, r3
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800648e:	4b36      	ldr	r3, [pc, #216]	; (8006568 <UART_SetConfig+0x2d4>)
 8006490:	fba3 2302 	umull	r2, r3, r3, r2
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800649c:	441c      	add	r4, r3
 800649e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	1891      	adds	r1, r2, r2
 80064b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064b8:	415b      	adcs	r3, r3
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064c0:	4641      	mov	r1, r8
 80064c2:	1851      	adds	r1, r2, r1
 80064c4:	6339      	str	r1, [r7, #48]	; 0x30
 80064c6:	4649      	mov	r1, r9
 80064c8:	414b      	adcs	r3, r1
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064d8:	4659      	mov	r1, fp
 80064da:	00cb      	lsls	r3, r1, #3
 80064dc:	4651      	mov	r1, sl
 80064de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e2:	4651      	mov	r1, sl
 80064e4:	00ca      	lsls	r2, r1, #3
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	4642      	mov	r2, r8
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f4:	464b      	mov	r3, r9
 80064f6:	460a      	mov	r2, r1
 80064f8:	eb42 0303 	adc.w	r3, r2, r3
 80064fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800650c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006514:	460b      	mov	r3, r1
 8006516:	18db      	adds	r3, r3, r3
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	4613      	mov	r3, r2
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800652a:	f7f9 fe51 	bl	80001d0 <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <UART_SetConfig+0x2d4>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	; 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	3332      	adds	r3, #50	; 0x32
 8006546:	4a08      	ldr	r2, [pc, #32]	; (8006568 <UART_SetConfig+0x2d4>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 0207 	and.w	r2, r3, #7
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4422      	add	r2, r4
 800655a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800655c:	e105      	b.n	800676a <UART_SetConfig+0x4d6>
 800655e:	bf00      	nop
 8006560:	40011000 	.word	0x40011000
 8006564:	40011400 	.word	0x40011400
 8006568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800656c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006570:	2200      	movs	r2, #0
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800657a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800657e:	4642      	mov	r2, r8
 8006580:	464b      	mov	r3, r9
 8006582:	1891      	adds	r1, r2, r2
 8006584:	6239      	str	r1, [r7, #32]
 8006586:	415b      	adcs	r3, r3
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800658e:	4641      	mov	r1, r8
 8006590:	1854      	adds	r4, r2, r1
 8006592:	4649      	mov	r1, r9
 8006594:	eb43 0501 	adc.w	r5, r3, r1
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	00eb      	lsls	r3, r5, #3
 80065a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a6:	00e2      	lsls	r2, r4, #3
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	4643      	mov	r3, r8
 80065ae:	18e3      	adds	r3, r4, r3
 80065b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065b4:	464b      	mov	r3, r9
 80065b6:	eb45 0303 	adc.w	r3, r5, r3
 80065ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065da:	4629      	mov	r1, r5
 80065dc:	008b      	lsls	r3, r1, #2
 80065de:	4621      	mov	r1, r4
 80065e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065e4:	4621      	mov	r1, r4
 80065e6:	008a      	lsls	r2, r1, #2
 80065e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065ec:	f7f9 fdf0 	bl	80001d0 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4b60      	ldr	r3, [pc, #384]	; (8006778 <UART_SetConfig+0x4e4>)
 80065f6:	fba3 2302 	umull	r2, r3, r3, r2
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	011c      	lsls	r4, r3, #4
 80065fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006602:	2200      	movs	r2, #0
 8006604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800660c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006610:	4642      	mov	r2, r8
 8006612:	464b      	mov	r3, r9
 8006614:	1891      	adds	r1, r2, r2
 8006616:	61b9      	str	r1, [r7, #24]
 8006618:	415b      	adcs	r3, r3
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006620:	4641      	mov	r1, r8
 8006622:	1851      	adds	r1, r2, r1
 8006624:	6139      	str	r1, [r7, #16]
 8006626:	4649      	mov	r1, r9
 8006628:	414b      	adcs	r3, r1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006638:	4659      	mov	r1, fp
 800663a:	00cb      	lsls	r3, r1, #3
 800663c:	4651      	mov	r1, sl
 800663e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006642:	4651      	mov	r1, sl
 8006644:	00ca      	lsls	r2, r1, #3
 8006646:	4610      	mov	r0, r2
 8006648:	4619      	mov	r1, r3
 800664a:	4603      	mov	r3, r0
 800664c:	4642      	mov	r2, r8
 800664e:	189b      	adds	r3, r3, r2
 8006650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006654:	464b      	mov	r3, r9
 8006656:	460a      	mov	r2, r1
 8006658:	eb42 0303 	adc.w	r3, r2, r3
 800665c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	67bb      	str	r3, [r7, #120]	; 0x78
 800666a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006678:	4649      	mov	r1, r9
 800667a:	008b      	lsls	r3, r1, #2
 800667c:	4641      	mov	r1, r8
 800667e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006682:	4641      	mov	r1, r8
 8006684:	008a      	lsls	r2, r1, #2
 8006686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800668a:	f7f9 fda1 	bl	80001d0 <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4b39      	ldr	r3, [pc, #228]	; (8006778 <UART_SetConfig+0x4e4>)
 8006694:	fba3 1302 	umull	r1, r3, r3, r2
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	2164      	movs	r1, #100	; 0x64
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	3332      	adds	r3, #50	; 0x32
 80066a6:	4a34      	ldr	r2, [pc, #208]	; (8006778 <UART_SetConfig+0x4e4>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066b2:	441c      	add	r4, r3
 80066b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b8:	2200      	movs	r2, #0
 80066ba:	673b      	str	r3, [r7, #112]	; 0x70
 80066bc:	677a      	str	r2, [r7, #116]	; 0x74
 80066be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066c2:	4642      	mov	r2, r8
 80066c4:	464b      	mov	r3, r9
 80066c6:	1891      	adds	r1, r2, r2
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	415b      	adcs	r3, r3
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066d2:	4641      	mov	r1, r8
 80066d4:	1851      	adds	r1, r2, r1
 80066d6:	6039      	str	r1, [r7, #0]
 80066d8:	4649      	mov	r1, r9
 80066da:	414b      	adcs	r3, r1
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066ea:	4659      	mov	r1, fp
 80066ec:	00cb      	lsls	r3, r1, #3
 80066ee:	4651      	mov	r1, sl
 80066f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066f4:	4651      	mov	r1, sl
 80066f6:	00ca      	lsls	r2, r1, #3
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	4603      	mov	r3, r0
 80066fe:	4642      	mov	r2, r8
 8006700:	189b      	adds	r3, r3, r2
 8006702:	66bb      	str	r3, [r7, #104]	; 0x68
 8006704:	464b      	mov	r3, r9
 8006706:	460a      	mov	r2, r1
 8006708:	eb42 0303 	adc.w	r3, r2, r3
 800670c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	663b      	str	r3, [r7, #96]	; 0x60
 8006718:	667a      	str	r2, [r7, #100]	; 0x64
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006726:	4649      	mov	r1, r9
 8006728:	008b      	lsls	r3, r1, #2
 800672a:	4641      	mov	r1, r8
 800672c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006730:	4641      	mov	r1, r8
 8006732:	008a      	lsls	r2, r1, #2
 8006734:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006738:	f7f9 fd4a 	bl	80001d0 <__aeabi_uldivmod>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <UART_SetConfig+0x4e4>)
 8006742:	fba3 1302 	umull	r1, r3, r3, r2
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2164      	movs	r1, #100	; 0x64
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	3332      	adds	r3, #50	; 0x32
 8006754:	4a08      	ldr	r2, [pc, #32]	; (8006778 <UART_SetConfig+0x4e4>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4422      	add	r2, r4
 8006768:	609a      	str	r2, [r3, #8]
}
 800676a:	bf00      	nop
 800676c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006770:	46bd      	mov	sp, r7
 8006772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006776:	bf00      	nop
 8006778:	51eb851f 	.word	0x51eb851f

0800677c <__NVIC_SetPriority>:
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678c:	2b00      	cmp	r3, #0
 800678e:	db0a      	blt.n	80067a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	490c      	ldr	r1, [pc, #48]	; (80067c8 <__NVIC_SetPriority+0x4c>)
 8006796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679a:	0112      	lsls	r2, r2, #4
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	440b      	add	r3, r1
 80067a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067a4:	e00a      	b.n	80067bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4908      	ldr	r1, [pc, #32]	; (80067cc <__NVIC_SetPriority+0x50>)
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	3b04      	subs	r3, #4
 80067b4:	0112      	lsls	r2, r2, #4
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	440b      	add	r3, r1
 80067ba:	761a      	strb	r2, [r3, #24]
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	e000e100 	.word	0xe000e100
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <SysTick_Handler+0x1c>)
 80067d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80067d8:	f001 fdaa 	bl	8008330 <xTaskGetSchedulerState>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80067e2:	f002 fb91 	bl	8008f08 <xPortSysTickHandler>
  }
}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	e000e010 	.word	0xe000e010

080067f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80067f4:	2100      	movs	r1, #0
 80067f6:	f06f 0004 	mvn.w	r0, #4
 80067fa:	f7ff ffbf 	bl	800677c <__NVIC_SetPriority>
#endif
}
 80067fe:	bf00      	nop
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800680a:	f3ef 8305 	mrs	r3, IPSR
 800680e:	603b      	str	r3, [r7, #0]
  return(result);
 8006810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006816:	f06f 0305 	mvn.w	r3, #5
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	e00c      	b.n	8006838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <osKernelInitialize+0x44>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006826:	4b08      	ldr	r3, [pc, #32]	; (8006848 <osKernelInitialize+0x44>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800682c:	2300      	movs	r3, #0
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	e002      	b.n	8006838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006832:	f04f 33ff 	mov.w	r3, #4294967295
 8006836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006838:	687b      	ldr	r3, [r7, #4]
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000378 	.word	0x20000378

0800684c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006852:	f3ef 8305 	mrs	r3, IPSR
 8006856:	603b      	str	r3, [r7, #0]
  return(result);
 8006858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800685e:	f06f 0305 	mvn.w	r3, #5
 8006862:	607b      	str	r3, [r7, #4]
 8006864:	e010      	b.n	8006888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <osKernelStart+0x48>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d109      	bne.n	8006882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800686e:	f7ff ffbf 	bl	80067f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006872:	4b08      	ldr	r3, [pc, #32]	; (8006894 <osKernelStart+0x48>)
 8006874:	2202      	movs	r2, #2
 8006876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006878:	f001 f8ec 	bl	8007a54 <vTaskStartScheduler>
      stat = osOK;
 800687c:	2300      	movs	r3, #0
 800687e:	607b      	str	r3, [r7, #4]
 8006880:	e002      	b.n	8006888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006888:	687b      	ldr	r3, [r7, #4]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000378 	.word	0x20000378

08006898 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800689e:	f3ef 8305 	mrs	r3, IPSR
 80068a2:	603b      	str	r3, [r7, #0]
  return(result);
 80068a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80068aa:	f001 f9ff 	bl	8007cac <xTaskGetTickCountFromISR>
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	e002      	b.n	80068b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80068b2:	f001 f9eb 	bl	8007c8c <xTaskGetTickCount>
 80068b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80068b8:	687b      	ldr	r3, [r7, #4]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b08e      	sub	sp, #56	; 0x38
 80068c6:	af04      	add	r7, sp, #16
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d2:	f3ef 8305 	mrs	r3, IPSR
 80068d6:	617b      	str	r3, [r7, #20]
  return(result);
 80068d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d17e      	bne.n	80069dc <osThreadNew+0x11a>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d07b      	beq.n	80069dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068e8:	2318      	movs	r3, #24
 80068ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d045      	beq.n	8006988 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <osThreadNew+0x48>
        name = attr->name;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <osThreadNew+0x6e>
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b38      	cmp	r3, #56	; 0x38
 8006922:	d805      	bhi.n	8006930 <osThreadNew+0x6e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <osThreadNew+0x72>
        return (NULL);
 8006930:	2300      	movs	r3, #0
 8006932:	e054      	b.n	80069de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <osThreadNew+0xa8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2bbb      	cmp	r3, #187	; 0xbb
 8006952:	d90a      	bls.n	800696a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006958:	2b00      	cmp	r3, #0
 800695a:	d006      	beq.n	800696a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <osThreadNew+0xa8>
        mem = 1;
 8006964:	2301      	movs	r3, #1
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e010      	b.n	800698c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10c      	bne.n	800698c <osThreadNew+0xca>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d108      	bne.n	800698c <osThreadNew+0xca>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <osThreadNew+0xca>
          mem = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e001      	b.n	800698c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d110      	bne.n	80069b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800699a:	9202      	str	r2, [sp, #8]
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fe1d 	bl	80075e8 <xTaskCreateStatic>
 80069ae:	4603      	mov	r3, r0
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	e013      	b.n	80069dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d110      	bne.n	80069dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	f107 0310 	add.w	r3, r7, #16
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fe68 	bl	80076a2 <xTaskCreate>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d001      	beq.n	80069dc <osThreadNew+0x11a>
            hTask = NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069dc:	693b      	ldr	r3, [r7, #16]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3728      	adds	r7, #40	; 0x28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b086      	sub	sp, #24
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ee:	f3ef 8305 	mrs	r3, IPSR
 80069f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80069f4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80069fa:	f06f 0305 	mvn.w	r3, #5
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e019      	b.n	8006a36 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006a06:	f001 f941 	bl	8007c8c <xTaskGetTickCount>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <osDelayUntil+0x4a>
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	db06      	blt.n	8006a30 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	6939      	ldr	r1, [r7, #16]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 ff95 	bl	8007958 <vTaskDelayUntil>
 8006a2e:	e002      	b.n	8006a36 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8006a30:	f06f 0303 	mvn.w	r3, #3
 8006a34:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a36:	697b      	ldr	r3, [r7, #20]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a07      	ldr	r2, [pc, #28]	; (8006a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8006a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vApplicationGetIdleTaskMemory+0x30>)
 8006a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	601a      	str	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	2000037c 	.word	0x2000037c
 8006a70:	20000438 	.word	0x20000438

08006a74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a07      	ldr	r2, [pc, #28]	; (8006aa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vApplicationGetTimerTaskMemory+0x30>)
 8006a8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000638 	.word	0x20000638
 8006aa4:	200006f4 	.word	0x200006f4

08006aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f103 0208 	add.w	r2, r3, #8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f103 0208 	add.w	r2, r3, #8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f103 0208 	add.w	r2, r3, #8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d103      	bne.n	8006b6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e00c      	b.n	8006b84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e002      	b.n	8006b78 <vListInsert+0x2e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d2f6      	bcs.n	8006b72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6892      	ldr	r2, [r2, #8]
 8006bd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6852      	ldr	r2, [r2, #4]
 8006bdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d103      	bne.n	8006bf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c3a:	f002 f8d3 	bl	8008de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	68f9      	ldr	r1, [r7, #12]
 8006c48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	68f9      	ldr	r1, [r7, #12]
 8006c6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	22ff      	movs	r2, #255	; 0xff
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d114      	bne.n	8006cba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01a      	beq.n	8006cce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f985 	bl	8007fac <xTaskRemoveFromEventList>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d012      	beq.n	8006cce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <xQueueGenericReset+0xcc>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	e009      	b.n	8006cce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fef2 	bl	8006aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3324      	adds	r3, #36	; 0x24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff feed 	bl	8006aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cce:	f002 f8b9 	bl	8008e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08e      	sub	sp, #56	; 0x38
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <xQueueGenericCreateStatic+0x52>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <xQueueGenericCreateStatic+0x56>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericCreateStatic+0x58>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	623b      	str	r3, [r7, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <xQueueGenericCreateStatic+0x7e>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueGenericCreateStatic+0x82>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueGenericCreateStatic+0x84>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	61fb      	str	r3, [r7, #28]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d7e:	2350      	movs	r3, #80	; 0x50
 8006d80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b50      	cmp	r3, #80	; 0x50
 8006d86:	d00a      	beq.n	8006d9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	61bb      	str	r3, [r7, #24]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00d      	beq.n	8006dc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006db2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f805 	bl	8006dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3730      	adds	r7, #48	; 0x30
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dfe:	2101      	movs	r1, #1
 8006e00:	69b8      	ldr	r0, [r7, #24]
 8006e02:	f7ff ff05 	bl	8006c10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	; 0x38
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e26:	2300      	movs	r3, #0
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xQueueGenericSend+0x32>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d103      	bne.n	8006e58 <xQueueGenericSend+0x40>
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <xQueueGenericSend+0x44>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <xQueueGenericSend+0x46>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <xQueueGenericSend+0x60>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x6e>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <xQueueGenericSend+0x72>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <xQueueGenericSend+0x74>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	623b      	str	r3, [r7, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea6:	f001 fa43 	bl	8008330 <xTaskGetSchedulerState>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <xQueueGenericSend+0x9e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <xQueueGenericSend+0xa2>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <xQueueGenericSend+0xa4>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	61fb      	str	r3, [r7, #28]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ed6:	f001 ff85 	bl	8008de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d302      	bcc.n	8006eec <xQueueGenericSend+0xd4>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d129      	bne.n	8006f40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef2:	f000 fa0b 	bl	800730c <prvCopyDataToQueue>
 8006ef6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	3324      	adds	r3, #36	; 0x24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 f851 	bl	8007fac <xTaskRemoveFromEventList>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d013      	beq.n	8006f38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f10:	4b3f      	ldr	r3, [pc, #252]	; (8007010 <xQueueGenericSend+0x1f8>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	e00a      	b.n	8006f38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f28:	4b39      	ldr	r3, [pc, #228]	; (8007010 <xQueueGenericSend+0x1f8>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f38:	f001 ff84 	bl	8008e44 <vPortExitCritical>
				return pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e063      	b.n	8007008 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f46:	f001 ff7d 	bl	8008e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e05c      	b.n	8007008 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 f88b 	bl	8008074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f62:	f001 ff6f 	bl	8008e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f66:	f000 fde5 	bl	8007b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6a:	f001 ff3b 	bl	8008de4 <vPortEnterCritical>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d103      	bne.n	8006f84 <xQueueGenericSend+0x16c>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d103      	bne.n	8006f9a <xQueueGenericSend+0x182>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f9a:	f001 ff53 	bl	8008e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f9e:	1d3a      	adds	r2, r7, #4
 8006fa0:	f107 0314 	add.w	r3, r7, #20
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f87a 	bl	80080a0 <xTaskCheckForTimeOut>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d124      	bne.n	8006ffc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb4:	f000 faa2 	bl	80074fc <prvIsQueueFull>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 ffa0 	bl	8007f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f000 fa2d 	bl	800742c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fd2:	f000 fdbd 	bl	8007b50 <xTaskResumeAll>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f af7c 	bne.w	8006ed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <xQueueGenericSend+0x1f8>)
 8006fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	e772      	b.n	8006ed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff2:	f000 fa1b 	bl	800742c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ff6:	f000 fdab 	bl	8007b50 <xTaskResumeAll>
 8006ffa:	e76c      	b.n	8006ed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffe:	f000 fa15 	bl	800742c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007002:	f000 fda5 	bl	8007b50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007008:	4618      	mov	r0, r3
 800700a:	3738      	adds	r7, #56	; 0x38
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	e000ed04 	.word	0xe000ed04

08007014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b090      	sub	sp, #64	; 0x40
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <xQueueGenericSendFromISR+0x3c>
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <xQueueGenericSendFromISR+0x40>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <xQueueGenericSendFromISR+0x42>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <xQueueGenericSendFromISR+0x6a>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <xQueueGenericSendFromISR+0x6e>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <xQueueGenericSendFromISR+0x70>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	623b      	str	r3, [r7, #32]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800709e:	f001 ff83 	bl	8008fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070a2:	f3ef 8211 	mrs	r2, BASEPRI
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <xQueueGenericSendFromISR+0xbc>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d12f      	bne.n	8007130 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070e6:	f000 f911 	bl	800730c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d112      	bne.n	800711a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d016      	beq.n	800712a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	3324      	adds	r3, #36	; 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 ff53 	bl	8007fac <xTaskRemoveFromEventList>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e007      	b.n	800712a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800711e:	3301      	adds	r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	b25a      	sxtb	r2, r3
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800712a:	2301      	movs	r3, #1
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800712e:	e001      	b.n	8007134 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007130:	2300      	movs	r3, #0
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800713e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007142:	4618      	mov	r0, r3
 8007144:	3740      	adds	r7, #64	; 0x40
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	; 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <xQueueReceive+0x30>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	623b      	str	r3, [r7, #32]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <xQueueReceive+0x3e>
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <xQueueReceive+0x42>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueReceive+0x44>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <xQueueReceive+0x5e>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071aa:	f001 f8c1 	bl	8008330 <xTaskGetSchedulerState>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <xQueueReceive+0x6e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueReceive+0x72>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueReceive+0x74>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueReceive+0x8e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61bb      	str	r3, [r7, #24]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071da:	f001 fe03 	bl	8008de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01f      	beq.n	800722a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ee:	f000 f8f7 	bl	80073e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00f      	beq.n	8007222 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	3310      	adds	r3, #16
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fed0 	bl	8007fac <xTaskRemoveFromEventList>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007212:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <xQueueReceive+0x1bc>)
 8007214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007222:	f001 fe0f 	bl	8008e44 <vPortExitCritical>
				return pdPASS;
 8007226:	2301      	movs	r3, #1
 8007228:	e069      	b.n	80072fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007230:	f001 fe08 	bl	8008e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007234:	2300      	movs	r3, #0
 8007236:	e062      	b.n	80072fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	4618      	mov	r0, r3
 8007244:	f000 ff16 	bl	8008074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800724c:	f001 fdfa 	bl	8008e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007250:	f000 fc70 	bl	8007b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007254:	f001 fdc6 	bl	8008de4 <vPortEnterCritical>
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	b25b      	sxtb	r3, r3
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d103      	bne.n	800726e <xQueueReceive+0x122>
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007274:	b25b      	sxtb	r3, r3
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d103      	bne.n	8007284 <xQueueReceive+0x138>
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007284:	f001 fdde 	bl	8008e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007288:	1d3a      	adds	r2, r7, #4
 800728a:	f107 0310 	add.w	r3, r7, #16
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f000 ff05 	bl	80080a0 <xTaskCheckForTimeOut>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d123      	bne.n	80072e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800729c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729e:	f000 f917 	bl	80074d0 <prvIsQueueEmpty>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fe2b 	bl	8007f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b8:	f000 f8b8 	bl	800742c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072bc:	f000 fc48 	bl	8007b50 <xTaskResumeAll>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d189      	bne.n	80071da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <xQueueReceive+0x1bc>)
 80072c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	e780      	b.n	80071da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072da:	f000 f8a7 	bl	800742c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072de:	f000 fc37 	bl	8007b50 <xTaskResumeAll>
 80072e2:	e77a      	b.n	80071da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e6:	f000 f8a1 	bl	800742c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072ea:	f000 fc31 	bl	8007b50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	f000 f8ee 	bl	80074d0 <prvIsQueueEmpty>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f43f af6f 	beq.w	80071da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3730      	adds	r7, #48	; 0x30
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d14d      	bne.n	80073ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f001 f818 	bl	800836c <xTaskPriorityDisinherit>
 800733c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	e043      	b.n	80073ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d119      	bne.n	8007380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6858      	ldr	r0, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	461a      	mov	r2, r3
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	f002 f973 	bl	8009642 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d32b      	bcc.n	80073ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	e026      	b.n	80073ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68d8      	ldr	r0, [r3, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	461a      	mov	r2, r3
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	f002 f959 	bl	8009642 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	425b      	negs	r3, r3
 800739a:	441a      	add	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d207      	bcs.n	80073bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	425b      	negs	r3, r3
 80073b6:	441a      	add	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d105      	bne.n	80073ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073d6:	697b      	ldr	r3, [r7, #20]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d018      	beq.n	8007424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	441a      	add	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	d303      	bcc.n	8007414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68d9      	ldr	r1, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	461a      	mov	r2, r3
 800741e:	6838      	ldr	r0, [r7, #0]
 8007420:	f002 f90f 	bl	8009642 <memcpy>
	}
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007434:	f001 fcd6 	bl	8008de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007440:	e011      	b.n	8007466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d012      	beq.n	8007470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3324      	adds	r3, #36	; 0x24
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fdac 	bl	8007fac <xTaskRemoveFromEventList>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800745a:	f000 fe83 	bl	8008164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	3b01      	subs	r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	dce9      	bgt.n	8007442 <prvUnlockQueue+0x16>
 800746e:	e000      	b.n	8007472 <prvUnlockQueue+0x46>
					break;
 8007470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	22ff      	movs	r2, #255	; 0xff
 8007476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800747a:	f001 fce3 	bl	8008e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800747e:	f001 fcb1 	bl	8008de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748a:	e011      	b.n	80074b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d012      	beq.n	80074ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3310      	adds	r3, #16
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fd87 	bl	8007fac <xTaskRemoveFromEventList>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074a4:	f000 fe5e 	bl	8008164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dce9      	bgt.n	800748c <prvUnlockQueue+0x60>
 80074b8:	e000      	b.n	80074bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	22ff      	movs	r2, #255	; 0xff
 80074c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074c4:	f001 fcbe 	bl	8008e44 <vPortExitCritical>
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074d8:	f001 fc84 	bl	8008de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074e4:	2301      	movs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e001      	b.n	80074ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ee:	f001 fca9 	bl	8008e44 <vPortExitCritical>

	return xReturn;
 80074f2:	68fb      	ldr	r3, [r7, #12]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007504:	f001 fc6e 	bl	8008de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	429a      	cmp	r2, r3
 8007512:	d102      	bne.n	800751a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e001      	b.n	800751e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800751e:	f001 fc91 	bl	8008e44 <vPortExitCritical>

	return xReturn;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e014      	b.n	8007566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800753c:	4a0f      	ldr	r2, [pc, #60]	; (800757c <vQueueAddToRegistry+0x50>)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007548:	490c      	ldr	r1, [pc, #48]	; (800757c <vQueueAddToRegistry+0x50>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007552:	4a0a      	ldr	r2, [pc, #40]	; (800757c <vQueueAddToRegistry+0x50>)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800755e:	e006      	b.n	800756e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b07      	cmp	r3, #7
 800756a:	d9e7      	bls.n	800753c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000af4 	.word	0x20000af4

08007580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007590:	f001 fc28 	bl	8008de4 <vPortEnterCritical>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800759a:	b25b      	sxtb	r3, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d103      	bne.n	80075aa <vQueueWaitForMessageRestricted+0x2a>
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d103      	bne.n	80075c0 <vQueueWaitForMessageRestricted+0x40>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c0:	f001 fc40 	bl	8008e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fcbd 	bl	8007f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075da:	6978      	ldr	r0, [r7, #20]
 80075dc:	f7ff ff26 	bl	800742c <prvUnlockQueue>
	}
 80075e0:	bf00      	nop
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <xTaskCreateStatic+0x2a>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	623b      	str	r3, [r7, #32]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <xTaskCreateStatic+0x46>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	61fb      	str	r3, [r7, #28]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800762e:	23bc      	movs	r3, #188	; 0xbc
 8007630:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2bbc      	cmp	r3, #188	; 0xbc
 8007636:	d00a      	beq.n	800764e <xTaskCreateStatic+0x66>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	61bb      	str	r3, [r7, #24]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800764e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01e      	beq.n	8007694 <xTaskCreateStatic+0xac>
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01b      	beq.n	8007694 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007664:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	2202      	movs	r2, #2
 800766a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800766e:	2300      	movs	r3, #0
 8007670:	9303      	str	r3, [sp, #12]
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	9302      	str	r3, [sp, #8]
 8007676:	f107 0314 	add.w	r3, r7, #20
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f850 	bl	800772c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800768c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800768e:	f000 f8f3 	bl	8007878 <prvAddNewTaskToReadyList>
 8007692:	e001      	b.n	8007698 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007698:	697b      	ldr	r3, [r7, #20]
	}
 800769a:	4618      	mov	r0, r3
 800769c:	3728      	adds	r7, #40	; 0x28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b08c      	sub	sp, #48	; 0x30
 80076a6:	af04      	add	r7, sp, #16
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 fcb6 	bl	8009028 <pvPortMalloc>
 80076bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00e      	beq.n	80076e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076c4:	20bc      	movs	r0, #188	; 0xbc
 80076c6:	f001 fcaf 	bl	8009028 <pvPortMalloc>
 80076ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
 80076d8:	e005      	b.n	80076e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076da:	6978      	ldr	r0, [r7, #20]
 80076dc:	f001 fd70 	bl	80091c0 <vPortFree>
 80076e0:	e001      	b.n	80076e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d017      	beq.n	800771c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	2300      	movs	r3, #0
 80076f8:	9303      	str	r3, [sp, #12]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f80e 	bl	800772c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007710:	69f8      	ldr	r0, [r7, #28]
 8007712:	f000 f8b1 	bl	8007878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007716:	2301      	movs	r3, #1
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	e002      	b.n	8007722 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800771c:	f04f 33ff 	mov.w	r3, #4294967295
 8007720:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007722:	69bb      	ldr	r3, [r7, #24]
	}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	461a      	mov	r2, r3
 8007744:	21a5      	movs	r1, #165	; 0xa5
 8007746:	f001 ff8a 	bl	800965e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007754:	3b01      	subs	r3, #1
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f023 0307 	bic.w	r3, r3, #7
 8007762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <prvInitialiseNewTask+0x58>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	617b      	str	r3, [r7, #20]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01f      	beq.n	80077ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e012      	b.n	80077b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4413      	add	r3, r2
 8007796:	7819      	ldrb	r1, [r3, #0]
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	4413      	add	r3, r2
 800779e:	3334      	adds	r3, #52	; 0x34
 80077a0:	460a      	mov	r2, r1
 80077a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	4413      	add	r3, r2
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d006      	beq.n	80077be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	2b0f      	cmp	r3, #15
 80077ba:	d9e9      	bls.n	8007790 <prvInitialiseNewTask+0x64>
 80077bc:	e000      	b.n	80077c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80077be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077c8:	e003      	b.n	80077d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	2b37      	cmp	r3, #55	; 0x37
 80077d6:	d901      	bls.n	80077dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077d8:	2337      	movs	r3, #55	; 0x37
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	2200      	movs	r2, #0
 80077ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	3304      	adds	r3, #4
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff f978 	bl	8006ae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	3318      	adds	r3, #24
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff f973 	bl	8006ae8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2200      	movs	r2, #0
 8007824:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	3354      	adds	r3, #84	; 0x54
 800782c:	2260      	movs	r2, #96	; 0x60
 800782e:	2100      	movs	r1, #0
 8007830:	4618      	mov	r0, r3
 8007832:	f001 ff14 	bl	800965e <memset>
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	4a0c      	ldr	r2, [pc, #48]	; (800786c <prvInitialiseNewTask+0x140>)
 800783a:	659a      	str	r2, [r3, #88]	; 0x58
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <prvInitialiseNewTask+0x144>)
 8007840:	65da      	str	r2, [r3, #92]	; 0x5c
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	4a0b      	ldr	r2, [pc, #44]	; (8007874 <prvInitialiseNewTask+0x148>)
 8007846:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	69b8      	ldr	r0, [r7, #24]
 800784e:	f001 f99d 	bl	8008b8c <pxPortInitialiseStack>
 8007852:	4602      	mov	r2, r0
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007862:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007864:	bf00      	nop
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	0800a090 	.word	0x0800a090
 8007870:	0800a0b0 	.word	0x0800a0b0
 8007874:	0800a070 	.word	0x0800a070

08007878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007880:	f001 fab0 	bl	8008de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007884:	4b2d      	ldr	r3, [pc, #180]	; (800793c <prvAddNewTaskToReadyList+0xc4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	4a2c      	ldr	r2, [pc, #176]	; (800793c <prvAddNewTaskToReadyList+0xc4>)
 800788c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800788e:	4b2c      	ldr	r3, [pc, #176]	; (8007940 <prvAddNewTaskToReadyList+0xc8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007896:	4a2a      	ldr	r2, [pc, #168]	; (8007940 <prvAddNewTaskToReadyList+0xc8>)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800789c:	4b27      	ldr	r3, [pc, #156]	; (800793c <prvAddNewTaskToReadyList+0xc4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d110      	bne.n	80078c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078a4:	f000 fc82 	bl	80081ac <prvInitialiseTaskLists>
 80078a8:	e00d      	b.n	80078c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078aa:	4b26      	ldr	r3, [pc, #152]	; (8007944 <prvAddNewTaskToReadyList+0xcc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078b2:	4b23      	ldr	r3, [pc, #140]	; (8007940 <prvAddNewTaskToReadyList+0xc8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	429a      	cmp	r2, r3
 80078be:	d802      	bhi.n	80078c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078c0:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <prvAddNewTaskToReadyList+0xc8>)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078c6:	4b20      	ldr	r3, [pc, #128]	; (8007948 <prvAddNewTaskToReadyList+0xd0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <prvAddNewTaskToReadyList+0xd0>)
 80078ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078d0:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <prvAddNewTaskToReadyList+0xd0>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4b1b      	ldr	r3, [pc, #108]	; (800794c <prvAddNewTaskToReadyList+0xd4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d903      	bls.n	80078ec <prvAddNewTaskToReadyList+0x74>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a18      	ldr	r2, [pc, #96]	; (800794c <prvAddNewTaskToReadyList+0xd4>)
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4a15      	ldr	r2, [pc, #84]	; (8007950 <prvAddNewTaskToReadyList+0xd8>)
 80078fa:	441a      	add	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f7ff f8fd 	bl	8006b02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007908:	f001 fa9c 	bl	8008e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <prvAddNewTaskToReadyList+0xcc>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <prvAddNewTaskToReadyList+0xc8>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	429a      	cmp	r2, r3
 8007920:	d207      	bcs.n	8007932 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <prvAddNewTaskToReadyList+0xdc>)
 8007924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20001008 	.word	0x20001008
 8007940:	20000b34 	.word	0x20000b34
 8007944:	20001014 	.word	0x20001014
 8007948:	20001024 	.word	0x20001024
 800794c:	20001010 	.word	0x20001010
 8007950:	20000b38 	.word	0x20000b38
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <vTaskDelayUntil+0x2a>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	617b      	str	r3, [r7, #20]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <vTaskDelayUntil+0x46>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	613b      	str	r3, [r7, #16]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800799e:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <vTaskDelayUntil+0xf0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <vTaskDelayUntil+0x64>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80079bc:	f000 f8ba 	bl	8007b34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80079c0:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <vTaskDelayUntil+0xf4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4413      	add	r3, r2
 80079ce:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a3a      	ldr	r2, [r7, #32]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d20b      	bcs.n	80079f2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d211      	bcs.n	8007a08 <vTaskDelayUntil+0xb0>
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d90d      	bls.n	8007a08 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
 80079f0:	e00a      	b.n	8007a08 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d303      	bcc.n	8007a04 <vTaskDelayUntil+0xac>
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d901      	bls.n	8007a08 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d006      	beq.n	8007a22 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fd13 	bl	8008448 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007a22:	f000 f895 	bl	8007b50 <xTaskResumeAll>
 8007a26:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d107      	bne.n	8007a3e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007a2e:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <vTaskDelayUntil+0xf8>)
 8007a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a3e:	bf00      	nop
 8007a40:	3728      	adds	r7, #40	; 0x28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20001030 	.word	0x20001030
 8007a4c:	2000100c 	.word	0x2000100c
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a62:	463a      	mov	r2, r7
 8007a64:	1d39      	adds	r1, r7, #4
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe ffe8 	bl	8006a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	9202      	str	r2, [sp, #8]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	460a      	mov	r2, r1
 8007a82:	4924      	ldr	r1, [pc, #144]	; (8007b14 <vTaskStartScheduler+0xc0>)
 8007a84:	4824      	ldr	r0, [pc, #144]	; (8007b18 <vTaskStartScheduler+0xc4>)
 8007a86:	f7ff fdaf 	bl	80075e8 <xTaskCreateStatic>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4a23      	ldr	r2, [pc, #140]	; (8007b1c <vTaskStartScheduler+0xc8>)
 8007a8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a90:	4b22      	ldr	r3, [pc, #136]	; (8007b1c <vTaskStartScheduler+0xc8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e001      	b.n	8007aa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d102      	bne.n	8007aae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007aa8:	f000 fd22 	bl	80084f0 <xTimerCreateTimerTask>
 8007aac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d11b      	bne.n	8007aec <vTaskStartScheduler+0x98>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	613b      	str	r3, [r7, #16]
}
 8007ac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ac8:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <vTaskStartScheduler+0xcc>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3354      	adds	r3, #84	; 0x54
 8007ace:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <vTaskStartScheduler+0xd0>)
 8007ad0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <vTaskStartScheduler+0xd4>)
 8007ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ada:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <vTaskStartScheduler+0xd8>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ae0:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <vTaskStartScheduler+0xdc>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ae6:	f001 f8db 	bl	8008ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007aea:	e00e      	b.n	8007b0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d10a      	bne.n	8007b0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	60fb      	str	r3, [r7, #12]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <vTaskStartScheduler+0xb4>
}
 8007b0a:	bf00      	nop
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	08009fa8 	.word	0x08009fa8
 8007b18:	0800817d 	.word	0x0800817d
 8007b1c:	2000102c 	.word	0x2000102c
 8007b20:	20000b34 	.word	0x20000b34
 8007b24:	20000010 	.word	0x20000010
 8007b28:	20001028 	.word	0x20001028
 8007b2c:	20001014 	.word	0x20001014
 8007b30:	2000100c 	.word	0x2000100c

08007b34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <vTaskSuspendAll+0x18>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	4a03      	ldr	r2, [pc, #12]	; (8007b4c <vTaskSuspendAll+0x18>)
 8007b40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b42:	bf00      	nop
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20001030 	.word	0x20001030

08007b50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b5e:	4b42      	ldr	r3, [pc, #264]	; (8007c68 <xTaskResumeAll+0x118>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <xTaskResumeAll+0x2c>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	603b      	str	r3, [r7, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b7c:	f001 f932 	bl	8008de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b80:	4b39      	ldr	r3, [pc, #228]	; (8007c68 <xTaskResumeAll+0x118>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	4a38      	ldr	r2, [pc, #224]	; (8007c68 <xTaskResumeAll+0x118>)
 8007b88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b8a:	4b37      	ldr	r3, [pc, #220]	; (8007c68 <xTaskResumeAll+0x118>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d162      	bne.n	8007c58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b92:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <xTaskResumeAll+0x11c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d05e      	beq.n	8007c58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b9a:	e02f      	b.n	8007bfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9c:	4b34      	ldr	r3, [pc, #208]	; (8007c70 <xTaskResumeAll+0x120>)
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3318      	adds	r3, #24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff f807 	bl	8006bbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff f802 	bl	8006bbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4b2d      	ldr	r3, [pc, #180]	; (8007c74 <xTaskResumeAll+0x124>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <xTaskResumeAll+0x7c>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a2a      	ldr	r2, [pc, #168]	; (8007c74 <xTaskResumeAll+0x124>)
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4a27      	ldr	r2, [pc, #156]	; (8007c78 <xTaskResumeAll+0x128>)
 8007bda:	441a      	add	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fe ff8d 	bl	8006b02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bec:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <xTaskResumeAll+0x12c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d302      	bcc.n	8007bfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007bf6:	4b22      	ldr	r3, [pc, #136]	; (8007c80 <xTaskResumeAll+0x130>)
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bfc:	4b1c      	ldr	r3, [pc, #112]	; (8007c70 <xTaskResumeAll+0x120>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1cb      	bne.n	8007b9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c0a:	f000 fb71 	bl	80082f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c0e:	4b1d      	ldr	r3, [pc, #116]	; (8007c84 <xTaskResumeAll+0x134>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d010      	beq.n	8007c3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c1a:	f000 f859 	bl	8007cd0 <xTaskIncrementTick>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c24:	4b16      	ldr	r3, [pc, #88]	; (8007c80 <xTaskResumeAll+0x130>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f1      	bne.n	8007c1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c36:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <xTaskResumeAll+0x134>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <xTaskResumeAll+0x130>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c48:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <xTaskResumeAll+0x138>)
 8007c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c58:	f001 f8f4 	bl	8008e44 <vPortExitCritical>

	return xAlreadyYielded;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20001030 	.word	0x20001030
 8007c6c:	20001008 	.word	0x20001008
 8007c70:	20000fc8 	.word	0x20000fc8
 8007c74:	20001010 	.word	0x20001010
 8007c78:	20000b38 	.word	0x20000b38
 8007c7c:	20000b34 	.word	0x20000b34
 8007c80:	2000101c 	.word	0x2000101c
 8007c84:	20001018 	.word	0x20001018
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <xTaskGetTickCount+0x1c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c98:	687b      	ldr	r3, [r7, #4]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	2000100c 	.word	0x2000100c

08007cac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cb2:	f001 f979 	bl	8008fa8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007cba:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <xTaskGetTickCountFromISR+0x20>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cc0:	683b      	ldr	r3, [r7, #0]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	2000100c 	.word	0x2000100c

08007cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cda:	4b4f      	ldr	r3, [pc, #316]	; (8007e18 <xTaskIncrementTick+0x148>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 808f 	bne.w	8007e02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ce4:	4b4d      	ldr	r3, [pc, #308]	; (8007e1c <xTaskIncrementTick+0x14c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cec:	4a4b      	ldr	r2, [pc, #300]	; (8007e1c <xTaskIncrementTick+0x14c>)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d120      	bne.n	8007d3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cf8:	4b49      	ldr	r3, [pc, #292]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	603b      	str	r3, [r7, #0]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xTaskIncrementTick+0x46>
 8007d18:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <xTaskIncrementTick+0x154>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3f      	ldr	r2, [pc, #252]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <xTaskIncrementTick+0x154>)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	4b3e      	ldr	r3, [pc, #248]	; (8007e28 <xTaskIncrementTick+0x158>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3301      	adds	r3, #1
 8007d32:	4a3d      	ldr	r2, [pc, #244]	; (8007e28 <xTaskIncrementTick+0x158>)
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	f000 fadb 	bl	80082f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d3a:	4b3c      	ldr	r3, [pc, #240]	; (8007e2c <xTaskIncrementTick+0x15c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d349      	bcc.n	8007dd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d44:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4e:	4b37      	ldr	r3, [pc, #220]	; (8007e2c <xTaskIncrementTick+0x15c>)
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	601a      	str	r2, [r3, #0]
					break;
 8007d56:	e03f      	b.n	8007dd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d58:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <xTaskIncrementTick+0x150>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d203      	bcs.n	8007d78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d70:	4a2e      	ldr	r2, [pc, #184]	; (8007e2c <xTaskIncrementTick+0x15c>)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d76:	e02f      	b.n	8007dd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe ff1d 	bl	8006bbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe ff14 	bl	8006bbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <xTaskIncrementTick+0x160>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d903      	bls.n	8007da8 <xTaskIncrementTick+0xd8>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a22      	ldr	r2, [pc, #136]	; (8007e30 <xTaskIncrementTick+0x160>)
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <xTaskIncrementTick+0x164>)
 8007db6:	441a      	add	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7fe fe9f 	bl	8006b02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <xTaskIncrementTick+0x168>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d3b8      	bcc.n	8007d44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dd6:	e7b5      	b.n	8007d44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <xTaskIncrementTick+0x168>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dde:	4915      	ldr	r1, [pc, #84]	; (8007e34 <xTaskIncrementTick+0x164>)
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d901      	bls.n	8007df4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007df4:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <xTaskIncrementTick+0x16c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e004      	b.n	8007e0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <xTaskIncrementTick+0x170>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	4a0d      	ldr	r2, [pc, #52]	; (8007e40 <xTaskIncrementTick+0x170>)
 8007e0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e0c:	697b      	ldr	r3, [r7, #20]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20001030 	.word	0x20001030
 8007e1c:	2000100c 	.word	0x2000100c
 8007e20:	20000fc0 	.word	0x20000fc0
 8007e24:	20000fc4 	.word	0x20000fc4
 8007e28:	20001020 	.word	0x20001020
 8007e2c:	20001028 	.word	0x20001028
 8007e30:	20001010 	.word	0x20001010
 8007e34:	20000b38 	.word	0x20000b38
 8007e38:	20000b34 	.word	0x20000b34
 8007e3c:	2000101c 	.word	0x2000101c
 8007e40:	20001018 	.word	0x20001018

08007e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e4a:	4b2a      	ldr	r3, [pc, #168]	; (8007ef4 <vTaskSwitchContext+0xb0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e52:	4b29      	ldr	r3, [pc, #164]	; (8007ef8 <vTaskSwitchContext+0xb4>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e58:	e046      	b.n	8007ee8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007e5a:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <vTaskSwitchContext+0xb4>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e60:	4b26      	ldr	r3, [pc, #152]	; (8007efc <vTaskSwitchContext+0xb8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	e010      	b.n	8007e8a <vTaskSwitchContext+0x46>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	607b      	str	r3, [r7, #4]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <vTaskSwitchContext+0x3e>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	491d      	ldr	r1, [pc, #116]	; (8007f00 <vTaskSwitchContext+0xbc>)
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0e4      	beq.n	8007e68 <vTaskSwitchContext+0x24>
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4a15      	ldr	r2, [pc, #84]	; (8007f00 <vTaskSwitchContext+0xbc>)
 8007eaa:	4413      	add	r3, r2
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	605a      	str	r2, [r3, #4]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d104      	bne.n	8007ece <vTaskSwitchContext+0x8a>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	605a      	str	r2, [r3, #4]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	4a0b      	ldr	r2, [pc, #44]	; (8007f04 <vTaskSwitchContext+0xc0>)
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <vTaskSwitchContext+0xb8>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <vTaskSwitchContext+0xc0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3354      	adds	r3, #84	; 0x54
 8007ee4:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <vTaskSwitchContext+0xc4>)
 8007ee6:	6013      	str	r3, [r2, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	20001030 	.word	0x20001030
 8007ef8:	2000101c 	.word	0x2000101c
 8007efc:	20001010 	.word	0x20001010
 8007f00:	20000b38 	.word	0x20000b38
 8007f04:	20000b34 	.word	0x20000b34
 8007f08:	20000010 	.word	0x20000010

08007f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vTaskPlaceOnEventList+0x44>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fe fe05 	bl	8006b4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f40:	2101      	movs	r1, #1
 8007f42:	6838      	ldr	r0, [r7, #0]
 8007f44:	f000 fa80 	bl	8008448 <prvAddCurrentTaskToDelayedList>
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20000b34 	.word	0x20000b34

08007f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	617b      	str	r3, [r7, #20]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3318      	adds	r3, #24
 8007f82:	4619      	mov	r1, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7fe fdbc 	bl	8006b02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f90:	f04f 33ff 	mov.w	r3, #4294967295
 8007f94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	68b8      	ldr	r0, [r7, #8]
 8007f9a:	f000 fa55 	bl	8008448 <prvAddCurrentTaskToDelayedList>
	}
 8007f9e:	bf00      	nop
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000b34 	.word	0x20000b34

08007fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3318      	adds	r3, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fded 	bl	8006bbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe2:	4b1e      	ldr	r3, [pc, #120]	; (800805c <xTaskRemoveFromEventList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d11d      	bne.n	8008026 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fde4 	bl	8006bbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <xTaskRemoveFromEventList+0xb4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d903      	bls.n	8008008 <xTaskRemoveFromEventList+0x5c>
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	4a16      	ldr	r2, [pc, #88]	; (8008060 <xTaskRemoveFromEventList+0xb4>)
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4a13      	ldr	r2, [pc, #76]	; (8008064 <xTaskRemoveFromEventList+0xb8>)
 8008016:	441a      	add	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f7fe fd6f 	bl	8006b02 <vListInsertEnd>
 8008024:	e005      	b.n	8008032 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3318      	adds	r3, #24
 800802a:	4619      	mov	r1, r3
 800802c:	480e      	ldr	r0, [pc, #56]	; (8008068 <xTaskRemoveFromEventList+0xbc>)
 800802e:	f7fe fd68 	bl	8006b02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4b0d      	ldr	r3, [pc, #52]	; (800806c <xTaskRemoveFromEventList+0xc0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d905      	bls.n	800804c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008044:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <xTaskRemoveFromEventList+0xc4>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e001      	b.n	8008050 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20001030 	.word	0x20001030
 8008060:	20001010 	.word	0x20001010
 8008064:	20000b38 	.word	0x20000b38
 8008068:	20000fc8 	.word	0x20000fc8
 800806c:	20000b34 	.word	0x20000b34
 8008070:	2000101c 	.word	0x2000101c

08008074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <vTaskInternalSetTimeOutState+0x24>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <vTaskInternalSetTimeOutState+0x28>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	20001020 	.word	0x20001020
 800809c:	2000100c 	.word	0x2000100c

080080a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080e2:	f000 fe7f 	bl	8008de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080e6:	4b1d      	ldr	r3, [pc, #116]	; (800815c <xTaskCheckForTimeOut+0xbc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d102      	bne.n	8008106 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e023      	b.n	800814e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <xTaskCheckForTimeOut+0xc0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d007      	beq.n	8008122 <xTaskCheckForTimeOut+0x82>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e015      	b.n	800814e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	429a      	cmp	r2, r3
 800812a:	d20b      	bcs.n	8008144 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff9b 	bl	8008074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e004      	b.n	800814e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800814a:	2301      	movs	r3, #1
 800814c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800814e:	f000 fe79 	bl	8008e44 <vPortExitCritical>

	return xReturn;
 8008152:	69fb      	ldr	r3, [r7, #28]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	2000100c 	.word	0x2000100c
 8008160:	20001020 	.word	0x20001020

08008164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <vTaskMissedYield+0x14>)
 800816a:	2201      	movs	r2, #1
 800816c:	601a      	str	r2, [r3, #0]
}
 800816e:	bf00      	nop
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	2000101c 	.word	0x2000101c

0800817c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008184:	f000 f852 	bl	800822c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <prvIdleTask+0x28>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d9f9      	bls.n	8008184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <prvIdleTask+0x2c>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081a0:	e7f0      	b.n	8008184 <prvIdleTask+0x8>
 80081a2:	bf00      	nop
 80081a4:	20000b38 	.word	0x20000b38
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	e00c      	b.n	80081d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <prvInitialiseTaskLists+0x60>)
 80081c4:	4413      	add	r3, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fc6e 	bl	8006aa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3301      	adds	r3, #1
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b37      	cmp	r3, #55	; 0x37
 80081d6:	d9ef      	bls.n	80081b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081d8:	480d      	ldr	r0, [pc, #52]	; (8008210 <prvInitialiseTaskLists+0x64>)
 80081da:	f7fe fc65 	bl	8006aa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081de:	480d      	ldr	r0, [pc, #52]	; (8008214 <prvInitialiseTaskLists+0x68>)
 80081e0:	f7fe fc62 	bl	8006aa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081e4:	480c      	ldr	r0, [pc, #48]	; (8008218 <prvInitialiseTaskLists+0x6c>)
 80081e6:	f7fe fc5f 	bl	8006aa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081ea:	480c      	ldr	r0, [pc, #48]	; (800821c <prvInitialiseTaskLists+0x70>)
 80081ec:	f7fe fc5c 	bl	8006aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081f0:	480b      	ldr	r0, [pc, #44]	; (8008220 <prvInitialiseTaskLists+0x74>)
 80081f2:	f7fe fc59 	bl	8006aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <prvInitialiseTaskLists+0x78>)
 80081f8:	4a05      	ldr	r2, [pc, #20]	; (8008210 <prvInitialiseTaskLists+0x64>)
 80081fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <prvInitialiseTaskLists+0x7c>)
 80081fe:	4a05      	ldr	r2, [pc, #20]	; (8008214 <prvInitialiseTaskLists+0x68>)
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000b38 	.word	0x20000b38
 8008210:	20000f98 	.word	0x20000f98
 8008214:	20000fac 	.word	0x20000fac
 8008218:	20000fc8 	.word	0x20000fc8
 800821c:	20000fdc 	.word	0x20000fdc
 8008220:	20000ff4 	.word	0x20000ff4
 8008224:	20000fc0 	.word	0x20000fc0
 8008228:	20000fc4 	.word	0x20000fc4

0800822c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008232:	e019      	b.n	8008268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008234:	f000 fdd6 	bl	8008de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <prvCheckTasksWaitingTermination+0x50>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe fcb9 	bl	8006bbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800824a:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <prvCheckTasksWaitingTermination+0x54>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3b01      	subs	r3, #1
 8008250:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <prvCheckTasksWaitingTermination+0x54>)
 8008252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <prvCheckTasksWaitingTermination+0x58>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3b01      	subs	r3, #1
 800825a:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <prvCheckTasksWaitingTermination+0x58>)
 800825c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800825e:	f000 fdf1 	bl	8008e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f810 	bl	8008288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <prvCheckTasksWaitingTermination+0x58>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e1      	bne.n	8008234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000fdc 	.word	0x20000fdc
 8008280:	20001008 	.word	0x20001008
 8008284:	20000ff0 	.word	0x20000ff0

08008288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3354      	adds	r3, #84	; 0x54
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fb03 	bl	80098a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 ff89 	bl	80091c0 <vPortFree>
				vPortFree( pxTCB );
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 ff86 	bl	80091c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082b4:	e018      	b.n	80082e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d103      	bne.n	80082c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 ff7d 	bl	80091c0 <vPortFree>
	}
 80082c6:	e00f      	b.n	80082e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d00a      	beq.n	80082e8 <prvDeleteTCB+0x60>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	60fb      	str	r3, [r7, #12]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <prvDeleteTCB+0x5e>
	}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f6:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <prvResetNextTaskUnblockTime+0x38>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <prvResetNextTaskUnblockTime+0x3c>)
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008308:	e008      	b.n	800831c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <prvResetNextTaskUnblockTime+0x38>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <prvResetNextTaskUnblockTime+0x3c>)
 800831a:	6013      	str	r3, [r2, #0]
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	20000fc0 	.word	0x20000fc0
 800832c:	20001028 	.word	0x20001028

08008330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <xTaskGetSchedulerState+0x34>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800833e:	2301      	movs	r3, #1
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	e008      	b.n	8008356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <xTaskGetSchedulerState+0x38>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800834c:	2302      	movs	r3, #2
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	e001      	b.n	8008356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008352:	2300      	movs	r3, #0
 8008354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008356:	687b      	ldr	r3, [r7, #4]
	}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	20001014 	.word	0x20001014
 8008368:	20001030 	.word	0x20001030

0800836c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d056      	beq.n	8008430 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008382:	4b2e      	ldr	r3, [pc, #184]	; (800843c <xTaskPriorityDisinherit+0xd0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	429a      	cmp	r2, r3
 800838a:	d00a      	beq.n	80083a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	60bb      	str	r3, [r7, #8]
}
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d02c      	beq.n	8008430 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d128      	bne.n	8008430 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	3304      	adds	r3, #4
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fbea 	bl	8006bbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008400:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <xTaskPriorityDisinherit+0xd4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d903      	bls.n	8008410 <xTaskPriorityDisinherit+0xa4>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a0c      	ldr	r2, [pc, #48]	; (8008440 <xTaskPriorityDisinherit+0xd4>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4a09      	ldr	r2, [pc, #36]	; (8008444 <xTaskPriorityDisinherit+0xd8>)
 800841e:	441a      	add	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	3304      	adds	r3, #4
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f7fe fb6b 	bl	8006b02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800842c:	2301      	movs	r3, #1
 800842e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008430:	697b      	ldr	r3, [r7, #20]
	}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000b34 	.word	0x20000b34
 8008440:	20001010 	.word	0x20001010
 8008444:	20000b38 	.word	0x20000b38

08008448 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008452:	4b21      	ldr	r3, [pc, #132]	; (80084d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008458:	4b20      	ldr	r3, [pc, #128]	; (80084dc <prvAddCurrentTaskToDelayedList+0x94>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3304      	adds	r3, #4
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fbac 	bl	8006bbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d10a      	bne.n	8008482 <prvAddCurrentTaskToDelayedList+0x3a>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008472:	4b1a      	ldr	r3, [pc, #104]	; (80084dc <prvAddCurrentTaskToDelayedList+0x94>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3304      	adds	r3, #4
 8008478:	4619      	mov	r1, r3
 800847a:	4819      	ldr	r0, [pc, #100]	; (80084e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800847c:	f7fe fb41 	bl	8006b02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008480:	e026      	b.n	80084d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4413      	add	r3, r2
 8008488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800848a:	4b14      	ldr	r3, [pc, #80]	; (80084dc <prvAddCurrentTaskToDelayedList+0x94>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	429a      	cmp	r2, r3
 8008498:	d209      	bcs.n	80084ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <prvAddCurrentTaskToDelayedList+0x94>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7fe fb4f 	bl	8006b4a <vListInsert>
}
 80084ac:	e010      	b.n	80084d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ae:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <prvAddCurrentTaskToDelayedList+0x94>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f7fe fb45 	bl	8006b4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d202      	bcs.n	80084d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084ca:	4a08      	ldr	r2, [pc, #32]	; (80084ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6013      	str	r3, [r2, #0]
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	2000100c 	.word	0x2000100c
 80084dc:	20000b34 	.word	0x20000b34
 80084e0:	20000ff4 	.word	0x20000ff4
 80084e4:	20000fc4 	.word	0x20000fc4
 80084e8:	20000fc0 	.word	0x20000fc0
 80084ec:	20001028 	.word	0x20001028

080084f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084fa:	f000 fb07 	bl	8008b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084fe:	4b1c      	ldr	r3, [pc, #112]	; (8008570 <xTimerCreateTimerTask+0x80>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d021      	beq.n	800854a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800850e:	1d3a      	adds	r2, r7, #4
 8008510:	f107 0108 	add.w	r1, r7, #8
 8008514:	f107 030c 	add.w	r3, r7, #12
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe faab 	bl	8006a74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	9202      	str	r2, [sp, #8]
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	2302      	movs	r3, #2
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	2300      	movs	r3, #0
 800852e:	460a      	mov	r2, r1
 8008530:	4910      	ldr	r1, [pc, #64]	; (8008574 <xTimerCreateTimerTask+0x84>)
 8008532:	4811      	ldr	r0, [pc, #68]	; (8008578 <xTimerCreateTimerTask+0x88>)
 8008534:	f7ff f858 	bl	80075e8 <xTaskCreateStatic>
 8008538:	4603      	mov	r3, r0
 800853a:	4a10      	ldr	r2, [pc, #64]	; (800857c <xTimerCreateTimerTask+0x8c>)
 800853c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <xTimerCreateTimerTask+0x8c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008546:	2301      	movs	r3, #1
 8008548:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	613b      	str	r3, [r7, #16]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008566:	697b      	ldr	r3, [r7, #20]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20001064 	.word	0x20001064
 8008574:	08009fb0 	.word	0x08009fb0
 8008578:	080086b5 	.word	0x080086b5
 800857c:	20001068 	.word	0x20001068

08008580 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	; 0x28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	623b      	str	r3, [r7, #32]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085ae:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <xTimerGenericCommand+0x98>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d02a      	beq.n	800860c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	dc18      	bgt.n	80085fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085c8:	f7ff feb2 	bl	8008330 <xTaskGetSchedulerState>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d109      	bne.n	80085e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <xTimerGenericCommand+0x98>)
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f107 0110 	add.w	r1, r7, #16
 80085da:	2300      	movs	r3, #0
 80085dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085de:	f7fe fc1b 	bl	8006e18 <xQueueGenericSend>
 80085e2:	6278      	str	r0, [r7, #36]	; 0x24
 80085e4:	e012      	b.n	800860c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <xTimerGenericCommand+0x98>)
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f107 0110 	add.w	r1, r7, #16
 80085ee:	2300      	movs	r3, #0
 80085f0:	2200      	movs	r2, #0
 80085f2:	f7fe fc11 	bl	8006e18 <xQueueGenericSend>
 80085f6:	6278      	str	r0, [r7, #36]	; 0x24
 80085f8:	e008      	b.n	800860c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <xTimerGenericCommand+0x98>)
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	f107 0110 	add.w	r1, r7, #16
 8008602:	2300      	movs	r3, #0
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	f7fe fd05 	bl	8007014 <xQueueGenericSendFromISR>
 800860a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800860e:	4618      	mov	r0, r3
 8008610:	3728      	adds	r7, #40	; 0x28
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20001064 	.word	0x20001064

0800861c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008626:	4b22      	ldr	r3, [pc, #136]	; (80086b0 <prvProcessExpiredTimer+0x94>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3304      	adds	r3, #4
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe fac1 	bl	8006bbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d022      	beq.n	800868e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	18d1      	adds	r1, r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f000 f8d1 	bl	80087fc <prvInsertTimerInActiveList>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01f      	beq.n	80086a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	2100      	movs	r1, #0
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f7ff ff88 	bl	8008580 <xTimerGenericCommand>
 8008670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d113      	bne.n	80086a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	60fb      	str	r3, [r7, #12]
}
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	b2da      	uxtb	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	4798      	blx	r3
}
 80086a8:	bf00      	nop
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	2000105c 	.word	0x2000105c

080086b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086bc:	f107 0308 	add.w	r3, r7, #8
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f857 	bl	8008774 <prvGetNextExpireTime>
 80086c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f803 	bl	80086d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086d2:	f000 f8d5 	bl	8008880 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086d6:	e7f1      	b.n	80086bc <prvTimerTask+0x8>

080086d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086e2:	f7ff fa27 	bl	8007b34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086e6:	f107 0308 	add.w	r3, r7, #8
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 f866 	bl	80087bc <prvSampleTimeNow>
 80086f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d130      	bne.n	800875a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <prvProcessTimerOrBlockTask+0x3c>
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	429a      	cmp	r2, r3
 8008704:	d806      	bhi.n	8008714 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008706:	f7ff fa23 	bl	8007b50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff ff85 	bl	800861c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008712:	e024      	b.n	800875e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d008      	beq.n	800872c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <prvProcessTimerOrBlockTask+0x90>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <prvProcessTimerOrBlockTask+0x50>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <prvProcessTimerOrBlockTask+0x52>
 8008728:	2300      	movs	r3, #0
 800872a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <prvProcessTimerOrBlockTask+0x94>)
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	4619      	mov	r1, r3
 800873a:	f7fe ff21 	bl	8007580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800873e:	f7ff fa07 	bl	8007b50 <xTaskResumeAll>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <prvProcessTimerOrBlockTask+0x98>)
 800874a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	f3bf 8f6f 	isb	sy
}
 8008758:	e001      	b.n	800875e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800875a:	f7ff f9f9 	bl	8007b50 <xTaskResumeAll>
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20001060 	.word	0x20001060
 800876c:	20001064 	.word	0x20001064
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800877c:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <prvGetNextExpireTime+0x44>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <prvGetNextExpireTime+0x16>
 8008786:	2201      	movs	r2, #1
 8008788:	e000      	b.n	800878c <prvGetNextExpireTime+0x18>
 800878a:	2200      	movs	r2, #0
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d105      	bne.n	80087a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008798:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <prvGetNextExpireTime+0x44>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	e001      	b.n	80087a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087a8:	68fb      	ldr	r3, [r7, #12]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	2000105c 	.word	0x2000105c

080087bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087c4:	f7ff fa62 	bl	8007c8c <xTaskGetTickCount>
 80087c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <prvSampleTimeNow+0x3c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d205      	bcs.n	80087e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087d4:	f000 f936 	bl	8008a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	e002      	b.n	80087e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087e6:	4a04      	ldr	r2, [pc, #16]	; (80087f8 <prvSampleTimeNow+0x3c>)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087ec:	68fb      	ldr	r3, [r7, #12]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	2000106c 	.word	0x2000106c

080087fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	429a      	cmp	r2, r3
 8008820:	d812      	bhi.n	8008848 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	d302      	bcc.n	8008836 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e01b      	b.n	800886e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008836:	4b10      	ldr	r3, [pc, #64]	; (8008878 <prvInsertTimerInActiveList+0x7c>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fe f982 	bl	8006b4a <vListInsert>
 8008846:	e012      	b.n	800886e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d206      	bcs.n	800885e <prvInsertTimerInActiveList+0x62>
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d302      	bcc.n	800885e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e007      	b.n	800886e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <prvInsertTimerInActiveList+0x80>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3304      	adds	r3, #4
 8008866:	4619      	mov	r1, r3
 8008868:	4610      	mov	r0, r2
 800886a:	f7fe f96e 	bl	8006b4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800886e:	697b      	ldr	r3, [r7, #20]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	20001060 	.word	0x20001060
 800887c:	2000105c 	.word	0x2000105c

08008880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08e      	sub	sp, #56	; 0x38
 8008884:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008886:	e0ca      	b.n	8008a1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	da18      	bge.n	80088c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800888e:	1d3b      	adds	r3, r7, #4
 8008890:	3304      	adds	r3, #4
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	61fb      	str	r3, [r7, #28]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b6:	6850      	ldr	r0, [r2, #4]
 80088b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ba:	6892      	ldr	r2, [r2, #8]
 80088bc:	4611      	mov	r1, r2
 80088be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f2c0 80aa 	blt.w	8008a1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	3304      	adds	r3, #4
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe f96f 	bl	8006bbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088de:	463b      	mov	r3, r7
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ff6b 	bl	80087bc <prvSampleTimeNow>
 80088e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	f200 8097 	bhi.w	8008a1e <prvProcessReceivedCommands+0x19e>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <prvProcessReceivedCommands+0x78>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	08008921 	.word	0x08008921
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008921 	.word	0x08008921
 8008904:	08008995 	.word	0x08008995
 8008908:	080089a9 	.word	0x080089a9
 800890c:	080089f3 	.word	0x080089f3
 8008910:	08008921 	.word	0x08008921
 8008914:	08008921 	.word	0x08008921
 8008918:	08008995 	.word	0x08008995
 800891c:	080089a9 	.word	0x080089a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	b2da      	uxtb	r2, r3
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	18d1      	adds	r1, r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008940:	f7ff ff5c 	bl	80087fc <prvInsertTimerInActiveList>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d069      	beq.n	8008a1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008950:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d05e      	beq.n	8008a1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	441a      	add	r2, r3
 8008968:	2300      	movs	r3, #0
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	2300      	movs	r3, #0
 800896e:	2100      	movs	r1, #0
 8008970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008972:	f7ff fe05 	bl	8008580 <xTimerGenericCommand>
 8008976:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d14f      	bne.n	8008a1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	61bb      	str	r3, [r7, #24]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800899a:	f023 0301 	bic.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089a6:	e03a      	b.n	8008a1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ae:	f043 0301 	orr.w	r3, r3, #1
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	617b      	str	r3, [r7, #20]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	18d1      	adds	r1, r2, r3
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ec:	f7ff ff06 	bl	80087fc <prvInsertTimerInActiveList>
					break;
 80089f0:	e015      	b.n	8008a1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d103      	bne.n	8008a08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a02:	f000 fbdd 	bl	80091c0 <vPortFree>
 8008a06:	e00a      	b.n	8008a1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a1a:	e000      	b.n	8008a1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a1e:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <prvProcessReceivedCommands+0x1c0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	1d39      	adds	r1, r7, #4
 8008a24:	2200      	movs	r2, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fb90 	bl	800714c <xQueueReceive>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f47f af2a 	bne.w	8008888 <prvProcessReceivedCommands+0x8>
	}
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	3730      	adds	r7, #48	; 0x30
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001064 	.word	0x20001064

08008a44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a4a:	e048      	b.n	8008ade <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a4c:	4b2d      	ldr	r3, [pc, #180]	; (8008b04 <prvSwitchTimerLists+0xc0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a56:	4b2b      	ldr	r3, [pc, #172]	; (8008b04 <prvSwitchTimerLists+0xc0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe f8a9 	bl	8006bbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d02e      	beq.n	8008ade <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4413      	add	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d90e      	bls.n	8008ab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a9e:	4b19      	ldr	r3, [pc, #100]	; (8008b04 <prvSwitchTimerLists+0xc0>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	f7fe f84e 	bl	8006b4a <vListInsert>
 8008aae:	e016      	b.n	8008ade <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff fd60 	bl	8008580 <xTimerGenericCommand>
 8008ac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	603b      	str	r3, [r7, #0]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <prvSwitchTimerLists+0xc0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1b1      	bne.n	8008a4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <prvSwitchTimerLists+0xc0>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <prvSwitchTimerLists+0xc4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a04      	ldr	r2, [pc, #16]	; (8008b04 <prvSwitchTimerLists+0xc0>)
 8008af4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008af6:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <prvSwitchTimerLists+0xc4>)
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	6013      	str	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	2000105c 	.word	0x2000105c
 8008b08:	20001060 	.word	0x20001060

08008b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b12:	f000 f967 	bl	8008de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b16:	4b15      	ldr	r3, [pc, #84]	; (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d120      	bne.n	8008b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b1e:	4814      	ldr	r0, [pc, #80]	; (8008b70 <prvCheckForValidListAndQueue+0x64>)
 8008b20:	f7fd ffc2 	bl	8006aa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b24:	4813      	ldr	r0, [pc, #76]	; (8008b74 <prvCheckForValidListAndQueue+0x68>)
 8008b26:	f7fd ffbf 	bl	8006aa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <prvCheckForValidListAndQueue+0x6c>)
 8008b2c:	4a10      	ldr	r2, [pc, #64]	; (8008b70 <prvCheckForValidListAndQueue+0x64>)
 8008b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b30:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <prvCheckForValidListAndQueue+0x70>)
 8008b32:	4a10      	ldr	r2, [pc, #64]	; (8008b74 <prvCheckForValidListAndQueue+0x68>)
 8008b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b36:	2300      	movs	r3, #0
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <prvCheckForValidListAndQueue+0x74>)
 8008b3c:	4a11      	ldr	r2, [pc, #68]	; (8008b84 <prvCheckForValidListAndQueue+0x78>)
 8008b3e:	2110      	movs	r1, #16
 8008b40:	200a      	movs	r0, #10
 8008b42:	f7fe f8cd 	bl	8006ce0 <xQueueGenericCreateStatic>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4a08      	ldr	r2, [pc, #32]	; (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b4c:	4b07      	ldr	r3, [pc, #28]	; (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <prvCheckForValidListAndQueue+0x60>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	490b      	ldr	r1, [pc, #44]	; (8008b88 <prvCheckForValidListAndQueue+0x7c>)
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fce6 	bl	800752c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b60:	f000 f970 	bl	8008e44 <vPortExitCritical>
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20001064 	.word	0x20001064
 8008b70:	20001034 	.word	0x20001034
 8008b74:	20001048 	.word	0x20001048
 8008b78:	2000105c 	.word	0x2000105c
 8008b7c:	20001060 	.word	0x20001060
 8008b80:	20001110 	.word	0x20001110
 8008b84:	20001070 	.word	0x20001070
 8008b88:	08009fb8 	.word	0x08009fb8

08008b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f023 0201 	bic.w	r2, r3, #1
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b04      	subs	r3, #4
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bbc:	4a0c      	ldr	r2, [pc, #48]	; (8008bf0 <pxPortInitialiseStack+0x64>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b14      	subs	r3, #20
 8008bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f06f 0202 	mvn.w	r2, #2
 8008bda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3b20      	subs	r3, #32
 8008be0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008be2:	68fb      	ldr	r3, [r7, #12]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	08008bf5 	.word	0x08008bf5

08008bf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvTaskExitError+0x54>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d00a      	beq.n	8008c1e <prvTaskExitError+0x2a>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	60fb      	str	r3, [r7, #12]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <prvTaskExitError+0x28>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	60bb      	str	r3, [r7, #8]
}
 8008c30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c32:	bf00      	nop
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0fc      	beq.n	8008c34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	2000000c 	.word	0x2000000c
 8008c4c:	00000000 	.word	0x00000000

08008c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <pxCurrentTCBConst2>)
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	6808      	ldr	r0, [r1, #0]
 8008c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5a:	f380 8809 	msr	PSP, r0
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8811 	msr	BASEPRI, r0
 8008c6a:	4770      	bx	lr
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst2>:
 8008c70:	20000b34 	.word	0x20000b34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c78:	4808      	ldr	r0, [pc, #32]	; (8008c9c <prvPortStartFirstTask+0x24>)
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	6800      	ldr	r0, [r0, #0]
 8008c7e:	f380 8808 	msr	MSP, r0
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8814 	msr	CONTROL, r0
 8008c8a:	b662      	cpsie	i
 8008c8c:	b661      	cpsie	f
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	df00      	svc	0
 8008c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c9a:	bf00      	nop
 8008c9c:	e000ed08 	.word	0xe000ed08

08008ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ca6:	4b46      	ldr	r3, [pc, #280]	; (8008dc0 <xPortStartScheduler+0x120>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a46      	ldr	r2, [pc, #280]	; (8008dc4 <xPortStartScheduler+0x124>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d10a      	bne.n	8008cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cc6:	4b3e      	ldr	r3, [pc, #248]	; (8008dc0 <xPortStartScheduler+0x120>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a3f      	ldr	r2, [pc, #252]	; (8008dc8 <xPortStartScheduler+0x128>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d10a      	bne.n	8008ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60fb      	str	r3, [r7, #12]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ce6:	4b39      	ldr	r3, [pc, #228]	; (8008dcc <xPortStartScheduler+0x12c>)
 8008ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	22ff      	movs	r2, #255	; 0xff
 8008cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	4b31      	ldr	r3, [pc, #196]	; (8008dd0 <xPortStartScheduler+0x130>)
 8008d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d0e:	4b31      	ldr	r3, [pc, #196]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d10:	2207      	movs	r2, #7
 8008d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d14:	e009      	b.n	8008d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d16:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	4a2d      	ldr	r2, [pc, #180]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d32:	2b80      	cmp	r3, #128	; 0x80
 8008d34:	d0ef      	beq.n	8008d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d36:	4b27      	ldr	r3, [pc, #156]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f1c3 0307 	rsb	r3, r3, #7
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d00a      	beq.n	8008d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	60bb      	str	r3, [r7, #8]
}
 8008d54:	bf00      	nop
 8008d56:	e7fe      	b.n	8008d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d58:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d62:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d6a:	4a1a      	ldr	r2, [pc, #104]	; (8008dd4 <xPortStartScheduler+0x134>)
 8008d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d76:	4b18      	ldr	r3, [pc, #96]	; (8008dd8 <xPortStartScheduler+0x138>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a17      	ldr	r2, [pc, #92]	; (8008dd8 <xPortStartScheduler+0x138>)
 8008d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d82:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <xPortStartScheduler+0x138>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a14      	ldr	r2, [pc, #80]	; (8008dd8 <xPortStartScheduler+0x138>)
 8008d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d8e:	f000 f8dd 	bl	8008f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d92:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <xPortStartScheduler+0x13c>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d98:	f000 f8fc 	bl	8008f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d9c:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <xPortStartScheduler+0x140>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <xPortStartScheduler+0x140>)
 8008da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008da8:	f7ff ff66 	bl	8008c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dac:	f7ff f84a 	bl	8007e44 <vTaskSwitchContext>
	prvTaskExitError();
 8008db0:	f7ff ff20 	bl	8008bf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	e000ed00 	.word	0xe000ed00
 8008dc4:	410fc271 	.word	0x410fc271
 8008dc8:	410fc270 	.word	0x410fc270
 8008dcc:	e000e400 	.word	0xe000e400
 8008dd0:	20001160 	.word	0x20001160
 8008dd4:	20001164 	.word	0x20001164
 8008dd8:	e000ed20 	.word	0xe000ed20
 8008ddc:	2000000c 	.word	0x2000000c
 8008de0:	e000ef34 	.word	0xe000ef34

08008de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	607b      	str	r3, [r7, #4]
}
 8008dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <vPortEnterCritical+0x58>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3301      	adds	r3, #1
 8008e04:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <vPortEnterCritical+0x58>)
 8008e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e08:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <vPortEnterCritical+0x58>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d10f      	bne.n	8008e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e10:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <vPortEnterCritical+0x5c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	603b      	str	r3, [r7, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <vPortEnterCritical+0x4a>
	}
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	2000000c 	.word	0x2000000c
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e4a:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <vPortExitCritical+0x50>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <vPortExitCritical+0x24>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	607b      	str	r3, [r7, #4]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <vPortExitCritical+0x50>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <vPortExitCritical+0x50>)
 8008e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e72:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <vPortExitCritical+0x42>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	f383 8811 	msr	BASEPRI, r3
}
 8008e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	2000000c 	.word	0x2000000c
	...

08008ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ea0:	f3ef 8009 	mrs	r0, PSP
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <pxCurrentTCBConst>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	f01e 0f10 	tst.w	lr, #16
 8008eb0:	bf08      	it	eq
 8008eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	6010      	str	r0, [r2, #0]
 8008ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ec4:	f380 8811 	msr	BASEPRI, r0
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f7fe ffb8 	bl	8007e44 <vTaskSwitchContext>
 8008ed4:	f04f 0000 	mov.w	r0, #0
 8008ed8:	f380 8811 	msr	BASEPRI, r0
 8008edc:	bc09      	pop	{r0, r3}
 8008ede:	6819      	ldr	r1, [r3, #0]
 8008ee0:	6808      	ldr	r0, [r1, #0]
 8008ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee6:	f01e 0f10 	tst.w	lr, #16
 8008eea:	bf08      	it	eq
 8008eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ef0:	f380 8809 	msr	PSP, r0
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	f3af 8000 	nop.w

08008f00 <pxCurrentTCBConst>:
 8008f00:	20000b34 	.word	0x20000b34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop

08008f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	607b      	str	r3, [r7, #4]
}
 8008f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f22:	f7fe fed5 	bl	8007cd0 <xTaskIncrementTick>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <xPortSysTickHandler+0x40>)
 8008f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	f383 8811 	msr	BASEPRI, r3
}
 8008f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <vPortSetupTimerInterrupt+0x34>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f56:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <vPortSetupTimerInterrupt+0x38>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f5c:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <vPortSetupTimerInterrupt+0x3c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <vPortSetupTimerInterrupt+0x40>)
 8008f62:	fba2 2303 	umull	r2, r3, r2, r3
 8008f66:	099b      	lsrs	r3, r3, #6
 8008f68:	4a09      	ldr	r2, [pc, #36]	; (8008f90 <vPortSetupTimerInterrupt+0x44>)
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f6e:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <vPortSetupTimerInterrupt+0x34>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	e000e010 	.word	0xe000e010
 8008f84:	e000e018 	.word	0xe000e018
 8008f88:	20000000 	.word	0x20000000
 8008f8c:	10624dd3 	.word	0x10624dd3
 8008f90:	e000e014 	.word	0xe000e014

08008f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fa4 <vPortEnableVFP+0x10>
 8008f98:	6801      	ldr	r1, [r0, #0]
 8008f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f9e:	6001      	str	r1, [r0, #0]
 8008fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fa2:	bf00      	nop
 8008fa4:	e000ed88 	.word	0xe000ed88

08008fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fae:	f3ef 8305 	mrs	r3, IPSR
 8008fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d914      	bls.n	8008fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fba:	4a17      	ldr	r2, [pc, #92]	; (8009018 <vPortValidateInterruptPriority+0x70>)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fc4:	4b15      	ldr	r3, [pc, #84]	; (800901c <vPortValidateInterruptPriority+0x74>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	7afa      	ldrb	r2, [r7, #11]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d20a      	bcs.n	8008fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	607b      	str	r3, [r7, #4]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fe4:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <vPortValidateInterruptPriority+0x78>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <vPortValidateInterruptPriority+0x7c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d90a      	bls.n	800900a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	603b      	str	r3, [r7, #0]
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <vPortValidateInterruptPriority+0x60>
	}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	e000e3f0 	.word	0xe000e3f0
 800901c:	20001160 	.word	0x20001160
 8009020:	e000ed0c 	.word	0xe000ed0c
 8009024:	20001164 	.word	0x20001164

08009028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	; 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009034:	f7fe fd7e 	bl	8007b34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009038:	4b5b      	ldr	r3, [pc, #364]	; (80091a8 <pvPortMalloc+0x180>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009040:	f000 f920 	bl	8009284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009044:	4b59      	ldr	r3, [pc, #356]	; (80091ac <pvPortMalloc+0x184>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8093 	bne.w	8009178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01d      	beq.n	8009094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009058:	2208      	movs	r2, #8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d014      	beq.n	8009094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f023 0307 	bic.w	r3, r3, #7
 8009070:	3308      	adds	r3, #8
 8009072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <pvPortMalloc+0x6c>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	617b      	str	r3, [r7, #20]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d06e      	beq.n	8009178 <pvPortMalloc+0x150>
 800909a:	4b45      	ldr	r3, [pc, #276]	; (80091b0 <pvPortMalloc+0x188>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d869      	bhi.n	8009178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090a4:	4b43      	ldr	r3, [pc, #268]	; (80091b4 <pvPortMalloc+0x18c>)
 80090a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090a8:	4b42      	ldr	r3, [pc, #264]	; (80091b4 <pvPortMalloc+0x18c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ae:	e004      	b.n	80090ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d903      	bls.n	80090cc <pvPortMalloc+0xa4>
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1f1      	bne.n	80090b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090cc:	4b36      	ldr	r3, [pc, #216]	; (80091a8 <pvPortMalloc+0x180>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d050      	beq.n	8009178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2208      	movs	r2, #8
 80090dc:	4413      	add	r3, r2
 80090de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	2308      	movs	r3, #8
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d91f      	bls.n	8009138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <pvPortMalloc+0xf8>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	613b      	str	r3, [r7, #16]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009132:	69b8      	ldr	r0, [r7, #24]
 8009134:	f000 f908 	bl	8009348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009138:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <pvPortMalloc+0x188>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <pvPortMalloc+0x188>)
 8009144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009146:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <pvPortMalloc+0x188>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <pvPortMalloc+0x190>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d203      	bcs.n	800915a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009152:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <pvPortMalloc+0x188>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <pvPortMalloc+0x190>)
 8009158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <pvPortMalloc+0x184>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	431a      	orrs	r2, r3
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800916e:	4b13      	ldr	r3, [pc, #76]	; (80091bc <pvPortMalloc+0x194>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	4a11      	ldr	r2, [pc, #68]	; (80091bc <pvPortMalloc+0x194>)
 8009176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009178:	f7fe fcea 	bl	8007b50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <pvPortMalloc+0x174>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60fb      	str	r3, [r7, #12]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <pvPortMalloc+0x172>
	return pvReturn;
 800919c:	69fb      	ldr	r3, [r7, #28]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3728      	adds	r7, #40	; 0x28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20004d70 	.word	0x20004d70
 80091ac:	20004d84 	.word	0x20004d84
 80091b0:	20004d74 	.word	0x20004d74
 80091b4:	20004d68 	.word	0x20004d68
 80091b8:	20004d78 	.word	0x20004d78
 80091bc:	20004d7c 	.word	0x20004d7c

080091c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d04d      	beq.n	800926e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091d2:	2308      	movs	r3, #8
 80091d4:	425b      	negs	r3, r3
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4413      	add	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	4b24      	ldr	r3, [pc, #144]	; (8009278 <vPortFree+0xb8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4013      	ands	r3, r2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <vPortFree+0x44>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	60fb      	str	r3, [r7, #12]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <vPortFree+0x62>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	60bb      	str	r3, [r7, #8]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <vPortFree+0xb8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4013      	ands	r3, r2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01e      	beq.n	800926e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d11a      	bne.n	800926e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <vPortFree+0xb8>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	43db      	mvns	r3, r3
 8009242:	401a      	ands	r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009248:	f7fe fc74 	bl	8007b34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	4b0a      	ldr	r3, [pc, #40]	; (800927c <vPortFree+0xbc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4413      	add	r3, r2
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <vPortFree+0xbc>)
 8009258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800925a:	6938      	ldr	r0, [r7, #16]
 800925c:	f000 f874 	bl	8009348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <vPortFree+0xc0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	4a06      	ldr	r2, [pc, #24]	; (8009280 <vPortFree+0xc0>)
 8009268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800926a:	f7fe fc71 	bl	8007b50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800926e:	bf00      	nop
 8009270:	3718      	adds	r7, #24
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20004d84 	.word	0x20004d84
 800927c:	20004d74 	.word	0x20004d74
 8009280:	20004d80 	.word	0x20004d80

08009284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800928a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800928e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009290:	4b27      	ldr	r3, [pc, #156]	; (8009330 <prvHeapInit+0xac>)
 8009292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00c      	beq.n	80092b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3307      	adds	r3, #7
 80092a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <prvHeapInit+0xac>)
 80092b4:	4413      	add	r3, r2
 80092b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092bc:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <prvHeapInit+0xb0>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <prvHeapInit+0xb0>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092d0:	2208      	movs	r2, #8
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a15      	ldr	r2, [pc, #84]	; (8009338 <prvHeapInit+0xb4>)
 80092e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <prvHeapInit+0xb4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ee:	4b12      	ldr	r3, [pc, #72]	; (8009338 <prvHeapInit+0xb4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <prvHeapInit+0xb4>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <prvHeapInit+0xb8>)
 8009312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	4a09      	ldr	r2, [pc, #36]	; (8009340 <prvHeapInit+0xbc>)
 800931a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <prvHeapInit+0xc0>)
 800931e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009322:	601a      	str	r2, [r3, #0]
}
 8009324:	bf00      	nop
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20001168 	.word	0x20001168
 8009334:	20004d68 	.word	0x20004d68
 8009338:	20004d70 	.word	0x20004d70
 800933c:	20004d78 	.word	0x20004d78
 8009340:	20004d74 	.word	0x20004d74
 8009344:	20004d84 	.word	0x20004d84

08009348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009350:	4b28      	ldr	r3, [pc, #160]	; (80093f4 <prvInsertBlockIntoFreeList+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	e002      	b.n	800935c <prvInsertBlockIntoFreeList+0x14>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	429a      	cmp	r2, r3
 8009364:	d8f7      	bhi.n	8009356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4413      	add	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d108      	bne.n	800938a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d118      	bne.n	80093d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b15      	ldr	r3, [pc, #84]	; (80093f8 <prvInsertBlockIntoFreeList+0xb0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d00d      	beq.n	80093c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e008      	b.n	80093d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093c6:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <prvInsertBlockIntoFreeList+0xb0>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e003      	b.n	80093d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d002      	beq.n	80093e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20004d68 	.word	0x20004d68
 80093f8:	20004d70 	.word	0x20004d70

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	; (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000010 	.word	0x20000010

08009408 <std>:
 8009408:	2300      	movs	r3, #0
 800940a:	b510      	push	{r4, lr}
 800940c:	4604      	mov	r4, r0
 800940e:	e9c0 3300 	strd	r3, r3, [r0]
 8009412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009416:	6083      	str	r3, [r0, #8]
 8009418:	8181      	strh	r1, [r0, #12]
 800941a:	6643      	str	r3, [r0, #100]	; 0x64
 800941c:	81c2      	strh	r2, [r0, #14]
 800941e:	6183      	str	r3, [r0, #24]
 8009420:	4619      	mov	r1, r3
 8009422:	2208      	movs	r2, #8
 8009424:	305c      	adds	r0, #92	; 0x5c
 8009426:	f000 f91a 	bl	800965e <memset>
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <std+0x38>)
 800942c:	6263      	str	r3, [r4, #36]	; 0x24
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <std+0x3c>)
 8009430:	62a3      	str	r3, [r4, #40]	; 0x28
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <std+0x40>)
 8009434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <std+0x44>)
 8009438:	6224      	str	r4, [r4, #32]
 800943a:	6323      	str	r3, [r4, #48]	; 0x30
 800943c:	bd10      	pop	{r4, pc}
 800943e:	bf00      	nop
 8009440:	08009979 	.word	0x08009979
 8009444:	0800999b 	.word	0x0800999b
 8009448:	080099d3 	.word	0x080099d3
 800944c:	080099f7 	.word	0x080099f7

08009450 <_cleanup_r>:
 8009450:	4901      	ldr	r1, [pc, #4]	; (8009458 <_cleanup_r+0x8>)
 8009452:	f000 b8af 	b.w	80095b4 <_fwalk_reent>
 8009456:	bf00      	nop
 8009458:	08009cd1 	.word	0x08009cd1

0800945c <__sfmoreglue>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	2268      	movs	r2, #104	; 0x68
 8009460:	1e4d      	subs	r5, r1, #1
 8009462:	4355      	muls	r5, r2
 8009464:	460e      	mov	r6, r1
 8009466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800946a:	f000 f921 	bl	80096b0 <_malloc_r>
 800946e:	4604      	mov	r4, r0
 8009470:	b140      	cbz	r0, 8009484 <__sfmoreglue+0x28>
 8009472:	2100      	movs	r1, #0
 8009474:	e9c0 1600 	strd	r1, r6, [r0]
 8009478:	300c      	adds	r0, #12
 800947a:	60a0      	str	r0, [r4, #8]
 800947c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009480:	f000 f8ed 	bl	800965e <memset>
 8009484:	4620      	mov	r0, r4
 8009486:	bd70      	pop	{r4, r5, r6, pc}

08009488 <__sfp_lock_acquire>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__sfp_lock_acquire+0x8>)
 800948a:	f000 b8d8 	b.w	800963e <__retarget_lock_acquire_recursive>
 800948e:	bf00      	nop
 8009490:	20004d89 	.word	0x20004d89

08009494 <__sfp_lock_release>:
 8009494:	4801      	ldr	r0, [pc, #4]	; (800949c <__sfp_lock_release+0x8>)
 8009496:	f000 b8d3 	b.w	8009640 <__retarget_lock_release_recursive>
 800949a:	bf00      	nop
 800949c:	20004d89 	.word	0x20004d89

080094a0 <__sinit_lock_acquire>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__sinit_lock_acquire+0x8>)
 80094a2:	f000 b8cc 	b.w	800963e <__retarget_lock_acquire_recursive>
 80094a6:	bf00      	nop
 80094a8:	20004d8a 	.word	0x20004d8a

080094ac <__sinit_lock_release>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sinit_lock_release+0x8>)
 80094ae:	f000 b8c7 	b.w	8009640 <__retarget_lock_release_recursive>
 80094b2:	bf00      	nop
 80094b4:	20004d8a 	.word	0x20004d8a

080094b8 <__sinit>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4604      	mov	r4, r0
 80094bc:	f7ff fff0 	bl	80094a0 <__sinit_lock_acquire>
 80094c0:	69a3      	ldr	r3, [r4, #24]
 80094c2:	b11b      	cbz	r3, 80094cc <__sinit+0x14>
 80094c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c8:	f7ff bff0 	b.w	80094ac <__sinit_lock_release>
 80094cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094d0:	6523      	str	r3, [r4, #80]	; 0x50
 80094d2:	4b13      	ldr	r3, [pc, #76]	; (8009520 <__sinit+0x68>)
 80094d4:	4a13      	ldr	r2, [pc, #76]	; (8009524 <__sinit+0x6c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094da:	42a3      	cmp	r3, r4
 80094dc:	bf04      	itt	eq
 80094de:	2301      	moveq	r3, #1
 80094e0:	61a3      	streq	r3, [r4, #24]
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 f820 	bl	8009528 <__sfp>
 80094e8:	6060      	str	r0, [r4, #4]
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 f81c 	bl	8009528 <__sfp>
 80094f0:	60a0      	str	r0, [r4, #8]
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 f818 	bl	8009528 <__sfp>
 80094f8:	2200      	movs	r2, #0
 80094fa:	60e0      	str	r0, [r4, #12]
 80094fc:	2104      	movs	r1, #4
 80094fe:	6860      	ldr	r0, [r4, #4]
 8009500:	f7ff ff82 	bl	8009408 <std>
 8009504:	68a0      	ldr	r0, [r4, #8]
 8009506:	2201      	movs	r2, #1
 8009508:	2109      	movs	r1, #9
 800950a:	f7ff ff7d 	bl	8009408 <std>
 800950e:	68e0      	ldr	r0, [r4, #12]
 8009510:	2202      	movs	r2, #2
 8009512:	2112      	movs	r1, #18
 8009514:	f7ff ff78 	bl	8009408 <std>
 8009518:	2301      	movs	r3, #1
 800951a:	61a3      	str	r3, [r4, #24]
 800951c:	e7d2      	b.n	80094c4 <__sinit+0xc>
 800951e:	bf00      	nop
 8009520:	0800a0d0 	.word	0x0800a0d0
 8009524:	08009451 	.word	0x08009451

08009528 <__sfp>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	4607      	mov	r7, r0
 800952c:	f7ff ffac 	bl	8009488 <__sfp_lock_acquire>
 8009530:	4b1e      	ldr	r3, [pc, #120]	; (80095ac <__sfp+0x84>)
 8009532:	681e      	ldr	r6, [r3, #0]
 8009534:	69b3      	ldr	r3, [r6, #24]
 8009536:	b913      	cbnz	r3, 800953e <__sfp+0x16>
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff ffbd 	bl	80094b8 <__sinit>
 800953e:	3648      	adds	r6, #72	; 0x48
 8009540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009544:	3b01      	subs	r3, #1
 8009546:	d503      	bpl.n	8009550 <__sfp+0x28>
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	b30b      	cbz	r3, 8009590 <__sfp+0x68>
 800954c:	6836      	ldr	r6, [r6, #0]
 800954e:	e7f7      	b.n	8009540 <__sfp+0x18>
 8009550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009554:	b9d5      	cbnz	r5, 800958c <__sfp+0x64>
 8009556:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <__sfp+0x88>)
 8009558:	60e3      	str	r3, [r4, #12]
 800955a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800955e:	6665      	str	r5, [r4, #100]	; 0x64
 8009560:	f000 f86c 	bl	800963c <__retarget_lock_init_recursive>
 8009564:	f7ff ff96 	bl	8009494 <__sfp_lock_release>
 8009568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800956c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009570:	6025      	str	r5, [r4, #0]
 8009572:	61a5      	str	r5, [r4, #24]
 8009574:	2208      	movs	r2, #8
 8009576:	4629      	mov	r1, r5
 8009578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800957c:	f000 f86f 	bl	800965e <memset>
 8009580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009588:	4620      	mov	r0, r4
 800958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958c:	3468      	adds	r4, #104	; 0x68
 800958e:	e7d9      	b.n	8009544 <__sfp+0x1c>
 8009590:	2104      	movs	r1, #4
 8009592:	4638      	mov	r0, r7
 8009594:	f7ff ff62 	bl	800945c <__sfmoreglue>
 8009598:	4604      	mov	r4, r0
 800959a:	6030      	str	r0, [r6, #0]
 800959c:	2800      	cmp	r0, #0
 800959e:	d1d5      	bne.n	800954c <__sfp+0x24>
 80095a0:	f7ff ff78 	bl	8009494 <__sfp_lock_release>
 80095a4:	230c      	movs	r3, #12
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	e7ee      	b.n	8009588 <__sfp+0x60>
 80095aa:	bf00      	nop
 80095ac:	0800a0d0 	.word	0x0800a0d0
 80095b0:	ffff0001 	.word	0xffff0001

080095b4 <_fwalk_reent>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4606      	mov	r6, r0
 80095ba:	4688      	mov	r8, r1
 80095bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095c0:	2700      	movs	r7, #0
 80095c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095c6:	f1b9 0901 	subs.w	r9, r9, #1
 80095ca:	d505      	bpl.n	80095d8 <_fwalk_reent+0x24>
 80095cc:	6824      	ldr	r4, [r4, #0]
 80095ce:	2c00      	cmp	r4, #0
 80095d0:	d1f7      	bne.n	80095c2 <_fwalk_reent+0xe>
 80095d2:	4638      	mov	r0, r7
 80095d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d8:	89ab      	ldrh	r3, [r5, #12]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d907      	bls.n	80095ee <_fwalk_reent+0x3a>
 80095de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095e2:	3301      	adds	r3, #1
 80095e4:	d003      	beq.n	80095ee <_fwalk_reent+0x3a>
 80095e6:	4629      	mov	r1, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	47c0      	blx	r8
 80095ec:	4307      	orrs	r7, r0
 80095ee:	3568      	adds	r5, #104	; 0x68
 80095f0:	e7e9      	b.n	80095c6 <_fwalk_reent+0x12>
	...

080095f4 <__libc_init_array>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	4d0d      	ldr	r5, [pc, #52]	; (800962c <__libc_init_array+0x38>)
 80095f8:	4c0d      	ldr	r4, [pc, #52]	; (8009630 <__libc_init_array+0x3c>)
 80095fa:	1b64      	subs	r4, r4, r5
 80095fc:	10a4      	asrs	r4, r4, #2
 80095fe:	2600      	movs	r6, #0
 8009600:	42a6      	cmp	r6, r4
 8009602:	d109      	bne.n	8009618 <__libc_init_array+0x24>
 8009604:	4d0b      	ldr	r5, [pc, #44]	; (8009634 <__libc_init_array+0x40>)
 8009606:	4c0c      	ldr	r4, [pc, #48]	; (8009638 <__libc_init_array+0x44>)
 8009608:	f000 fca2 	bl	8009f50 <_init>
 800960c:	1b64      	subs	r4, r4, r5
 800960e:	10a4      	asrs	r4, r4, #2
 8009610:	2600      	movs	r6, #0
 8009612:	42a6      	cmp	r6, r4
 8009614:	d105      	bne.n	8009622 <__libc_init_array+0x2e>
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	f855 3b04 	ldr.w	r3, [r5], #4
 800961c:	4798      	blx	r3
 800961e:	3601      	adds	r6, #1
 8009620:	e7ee      	b.n	8009600 <__libc_init_array+0xc>
 8009622:	f855 3b04 	ldr.w	r3, [r5], #4
 8009626:	4798      	blx	r3
 8009628:	3601      	adds	r6, #1
 800962a:	e7f2      	b.n	8009612 <__libc_init_array+0x1e>
 800962c:	0800a0dc 	.word	0x0800a0dc
 8009630:	0800a0dc 	.word	0x0800a0dc
 8009634:	0800a0dc 	.word	0x0800a0dc
 8009638:	0800a0e0 	.word	0x0800a0e0

0800963c <__retarget_lock_init_recursive>:
 800963c:	4770      	bx	lr

0800963e <__retarget_lock_acquire_recursive>:
 800963e:	4770      	bx	lr

08009640 <__retarget_lock_release_recursive>:
 8009640:	4770      	bx	lr

08009642 <memcpy>:
 8009642:	440a      	add	r2, r1
 8009644:	4291      	cmp	r1, r2
 8009646:	f100 33ff 	add.w	r3, r0, #4294967295
 800964a:	d100      	bne.n	800964e <memcpy+0xc>
 800964c:	4770      	bx	lr
 800964e:	b510      	push	{r4, lr}
 8009650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009658:	4291      	cmp	r1, r2
 800965a:	d1f9      	bne.n	8009650 <memcpy+0xe>
 800965c:	bd10      	pop	{r4, pc}

0800965e <memset>:
 800965e:	4402      	add	r2, r0
 8009660:	4603      	mov	r3, r0
 8009662:	4293      	cmp	r3, r2
 8009664:	d100      	bne.n	8009668 <memset+0xa>
 8009666:	4770      	bx	lr
 8009668:	f803 1b01 	strb.w	r1, [r3], #1
 800966c:	e7f9      	b.n	8009662 <memset+0x4>
	...

08009670 <sbrk_aligned>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	4e0e      	ldr	r6, [pc, #56]	; (80096ac <sbrk_aligned+0x3c>)
 8009674:	460c      	mov	r4, r1
 8009676:	6831      	ldr	r1, [r6, #0]
 8009678:	4605      	mov	r5, r0
 800967a:	b911      	cbnz	r1, 8009682 <sbrk_aligned+0x12>
 800967c:	f000 f96c 	bl	8009958 <_sbrk_r>
 8009680:	6030      	str	r0, [r6, #0]
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f000 f967 	bl	8009958 <_sbrk_r>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d00a      	beq.n	80096a4 <sbrk_aligned+0x34>
 800968e:	1cc4      	adds	r4, r0, #3
 8009690:	f024 0403 	bic.w	r4, r4, #3
 8009694:	42a0      	cmp	r0, r4
 8009696:	d007      	beq.n	80096a8 <sbrk_aligned+0x38>
 8009698:	1a21      	subs	r1, r4, r0
 800969a:	4628      	mov	r0, r5
 800969c:	f000 f95c 	bl	8009958 <_sbrk_r>
 80096a0:	3001      	adds	r0, #1
 80096a2:	d101      	bne.n	80096a8 <sbrk_aligned+0x38>
 80096a4:	f04f 34ff 	mov.w	r4, #4294967295
 80096a8:	4620      	mov	r0, r4
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	20004d90 	.word	0x20004d90

080096b0 <_malloc_r>:
 80096b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	1ccd      	adds	r5, r1, #3
 80096b6:	f025 0503 	bic.w	r5, r5, #3
 80096ba:	3508      	adds	r5, #8
 80096bc:	2d0c      	cmp	r5, #12
 80096be:	bf38      	it	cc
 80096c0:	250c      	movcc	r5, #12
 80096c2:	2d00      	cmp	r5, #0
 80096c4:	4607      	mov	r7, r0
 80096c6:	db01      	blt.n	80096cc <_malloc_r+0x1c>
 80096c8:	42a9      	cmp	r1, r5
 80096ca:	d905      	bls.n	80096d8 <_malloc_r+0x28>
 80096cc:	230c      	movs	r3, #12
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	2600      	movs	r6, #0
 80096d2:	4630      	mov	r0, r6
 80096d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d8:	4e2e      	ldr	r6, [pc, #184]	; (8009794 <_malloc_r+0xe4>)
 80096da:	f000 fbad 	bl	8009e38 <__malloc_lock>
 80096de:	6833      	ldr	r3, [r6, #0]
 80096e0:	461c      	mov	r4, r3
 80096e2:	bb34      	cbnz	r4, 8009732 <_malloc_r+0x82>
 80096e4:	4629      	mov	r1, r5
 80096e6:	4638      	mov	r0, r7
 80096e8:	f7ff ffc2 	bl	8009670 <sbrk_aligned>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	4604      	mov	r4, r0
 80096f0:	d14d      	bne.n	800978e <_malloc_r+0xde>
 80096f2:	6834      	ldr	r4, [r6, #0]
 80096f4:	4626      	mov	r6, r4
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	d140      	bne.n	800977c <_malloc_r+0xcc>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	4631      	mov	r1, r6
 80096fe:	4638      	mov	r0, r7
 8009700:	eb04 0803 	add.w	r8, r4, r3
 8009704:	f000 f928 	bl	8009958 <_sbrk_r>
 8009708:	4580      	cmp	r8, r0
 800970a:	d13a      	bne.n	8009782 <_malloc_r+0xd2>
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	3503      	adds	r5, #3
 8009710:	1a6d      	subs	r5, r5, r1
 8009712:	f025 0503 	bic.w	r5, r5, #3
 8009716:	3508      	adds	r5, #8
 8009718:	2d0c      	cmp	r5, #12
 800971a:	bf38      	it	cc
 800971c:	250c      	movcc	r5, #12
 800971e:	4629      	mov	r1, r5
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff ffa5 	bl	8009670 <sbrk_aligned>
 8009726:	3001      	adds	r0, #1
 8009728:	d02b      	beq.n	8009782 <_malloc_r+0xd2>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	442b      	add	r3, r5
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	e00e      	b.n	8009750 <_malloc_r+0xa0>
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	1b52      	subs	r2, r2, r5
 8009736:	d41e      	bmi.n	8009776 <_malloc_r+0xc6>
 8009738:	2a0b      	cmp	r2, #11
 800973a:	d916      	bls.n	800976a <_malloc_r+0xba>
 800973c:	1961      	adds	r1, r4, r5
 800973e:	42a3      	cmp	r3, r4
 8009740:	6025      	str	r5, [r4, #0]
 8009742:	bf18      	it	ne
 8009744:	6059      	strne	r1, [r3, #4]
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	bf08      	it	eq
 800974a:	6031      	streq	r1, [r6, #0]
 800974c:	5162      	str	r2, [r4, r5]
 800974e:	604b      	str	r3, [r1, #4]
 8009750:	4638      	mov	r0, r7
 8009752:	f104 060b 	add.w	r6, r4, #11
 8009756:	f000 fb75 	bl	8009e44 <__malloc_unlock>
 800975a:	f026 0607 	bic.w	r6, r6, #7
 800975e:	1d23      	adds	r3, r4, #4
 8009760:	1af2      	subs	r2, r6, r3
 8009762:	d0b6      	beq.n	80096d2 <_malloc_r+0x22>
 8009764:	1b9b      	subs	r3, r3, r6
 8009766:	50a3      	str	r3, [r4, r2]
 8009768:	e7b3      	b.n	80096d2 <_malloc_r+0x22>
 800976a:	6862      	ldr	r2, [r4, #4]
 800976c:	42a3      	cmp	r3, r4
 800976e:	bf0c      	ite	eq
 8009770:	6032      	streq	r2, [r6, #0]
 8009772:	605a      	strne	r2, [r3, #4]
 8009774:	e7ec      	b.n	8009750 <_malloc_r+0xa0>
 8009776:	4623      	mov	r3, r4
 8009778:	6864      	ldr	r4, [r4, #4]
 800977a:	e7b2      	b.n	80096e2 <_malloc_r+0x32>
 800977c:	4634      	mov	r4, r6
 800977e:	6876      	ldr	r6, [r6, #4]
 8009780:	e7b9      	b.n	80096f6 <_malloc_r+0x46>
 8009782:	230c      	movs	r3, #12
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4638      	mov	r0, r7
 8009788:	f000 fb5c 	bl	8009e44 <__malloc_unlock>
 800978c:	e7a1      	b.n	80096d2 <_malloc_r+0x22>
 800978e:	6025      	str	r5, [r4, #0]
 8009790:	e7de      	b.n	8009750 <_malloc_r+0xa0>
 8009792:	bf00      	nop
 8009794:	20004d8c 	.word	0x20004d8c

08009798 <_puts_r>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	460e      	mov	r6, r1
 800979c:	4605      	mov	r5, r0
 800979e:	b118      	cbz	r0, 80097a8 <_puts_r+0x10>
 80097a0:	6983      	ldr	r3, [r0, #24]
 80097a2:	b90b      	cbnz	r3, 80097a8 <_puts_r+0x10>
 80097a4:	f7ff fe88 	bl	80094b8 <__sinit>
 80097a8:	69ab      	ldr	r3, [r5, #24]
 80097aa:	68ac      	ldr	r4, [r5, #8]
 80097ac:	b913      	cbnz	r3, 80097b4 <_puts_r+0x1c>
 80097ae:	4628      	mov	r0, r5
 80097b0:	f7ff fe82 	bl	80094b8 <__sinit>
 80097b4:	4b2c      	ldr	r3, [pc, #176]	; (8009868 <_puts_r+0xd0>)
 80097b6:	429c      	cmp	r4, r3
 80097b8:	d120      	bne.n	80097fc <_puts_r+0x64>
 80097ba:	686c      	ldr	r4, [r5, #4]
 80097bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097be:	07db      	lsls	r3, r3, #31
 80097c0:	d405      	bmi.n	80097ce <_puts_r+0x36>
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	0598      	lsls	r0, r3, #22
 80097c6:	d402      	bmi.n	80097ce <_puts_r+0x36>
 80097c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ca:	f7ff ff38 	bl	800963e <__retarget_lock_acquire_recursive>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	0719      	lsls	r1, r3, #28
 80097d2:	d51d      	bpl.n	8009810 <_puts_r+0x78>
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	b1db      	cbz	r3, 8009810 <_puts_r+0x78>
 80097d8:	3e01      	subs	r6, #1
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097e0:	3b01      	subs	r3, #1
 80097e2:	60a3      	str	r3, [r4, #8]
 80097e4:	bb39      	cbnz	r1, 8009836 <_puts_r+0x9e>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da38      	bge.n	800985c <_puts_r+0xc4>
 80097ea:	4622      	mov	r2, r4
 80097ec:	210a      	movs	r1, #10
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 f906 	bl	8009a00 <__swbuf_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d011      	beq.n	800981c <_puts_r+0x84>
 80097f8:	250a      	movs	r5, #10
 80097fa:	e011      	b.n	8009820 <_puts_r+0x88>
 80097fc:	4b1b      	ldr	r3, [pc, #108]	; (800986c <_puts_r+0xd4>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d101      	bne.n	8009806 <_puts_r+0x6e>
 8009802:	68ac      	ldr	r4, [r5, #8]
 8009804:	e7da      	b.n	80097bc <_puts_r+0x24>
 8009806:	4b1a      	ldr	r3, [pc, #104]	; (8009870 <_puts_r+0xd8>)
 8009808:	429c      	cmp	r4, r3
 800980a:	bf08      	it	eq
 800980c:	68ec      	ldreq	r4, [r5, #12]
 800980e:	e7d5      	b.n	80097bc <_puts_r+0x24>
 8009810:	4621      	mov	r1, r4
 8009812:	4628      	mov	r0, r5
 8009814:	f000 f958 	bl	8009ac8 <__swsetup_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	d0dd      	beq.n	80097d8 <_puts_r+0x40>
 800981c:	f04f 35ff 	mov.w	r5, #4294967295
 8009820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009822:	07da      	lsls	r2, r3, #31
 8009824:	d405      	bmi.n	8009832 <_puts_r+0x9a>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	059b      	lsls	r3, r3, #22
 800982a:	d402      	bmi.n	8009832 <_puts_r+0x9a>
 800982c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800982e:	f7ff ff07 	bl	8009640 <__retarget_lock_release_recursive>
 8009832:	4628      	mov	r0, r5
 8009834:	bd70      	pop	{r4, r5, r6, pc}
 8009836:	2b00      	cmp	r3, #0
 8009838:	da04      	bge.n	8009844 <_puts_r+0xac>
 800983a:	69a2      	ldr	r2, [r4, #24]
 800983c:	429a      	cmp	r2, r3
 800983e:	dc06      	bgt.n	800984e <_puts_r+0xb6>
 8009840:	290a      	cmp	r1, #10
 8009842:	d004      	beq.n	800984e <_puts_r+0xb6>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	6022      	str	r2, [r4, #0]
 800984a:	7019      	strb	r1, [r3, #0]
 800984c:	e7c5      	b.n	80097da <_puts_r+0x42>
 800984e:	4622      	mov	r2, r4
 8009850:	4628      	mov	r0, r5
 8009852:	f000 f8d5 	bl	8009a00 <__swbuf_r>
 8009856:	3001      	adds	r0, #1
 8009858:	d1bf      	bne.n	80097da <_puts_r+0x42>
 800985a:	e7df      	b.n	800981c <_puts_r+0x84>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	250a      	movs	r5, #10
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	6022      	str	r2, [r4, #0]
 8009864:	701d      	strb	r5, [r3, #0]
 8009866:	e7db      	b.n	8009820 <_puts_r+0x88>
 8009868:	0800a090 	.word	0x0800a090
 800986c:	0800a0b0 	.word	0x0800a0b0
 8009870:	0800a070 	.word	0x0800a070

08009874 <puts>:
 8009874:	4b02      	ldr	r3, [pc, #8]	; (8009880 <puts+0xc>)
 8009876:	4601      	mov	r1, r0
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	f7ff bf8d 	b.w	8009798 <_puts_r>
 800987e:	bf00      	nop
 8009880:	20000010 	.word	0x20000010

08009884 <cleanup_glue>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	460c      	mov	r4, r1
 8009888:	6809      	ldr	r1, [r1, #0]
 800988a:	4605      	mov	r5, r0
 800988c:	b109      	cbz	r1, 8009892 <cleanup_glue+0xe>
 800988e:	f7ff fff9 	bl	8009884 <cleanup_glue>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989a:	f000 bad9 	b.w	8009e50 <_free_r>
	...

080098a0 <_reclaim_reent>:
 80098a0:	4b2c      	ldr	r3, [pc, #176]	; (8009954 <_reclaim_reent+0xb4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4283      	cmp	r3, r0
 80098a6:	b570      	push	{r4, r5, r6, lr}
 80098a8:	4604      	mov	r4, r0
 80098aa:	d051      	beq.n	8009950 <_reclaim_reent+0xb0>
 80098ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80098ae:	b143      	cbz	r3, 80098c2 <_reclaim_reent+0x22>
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d14a      	bne.n	800994c <_reclaim_reent+0xac>
 80098b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b8:	6819      	ldr	r1, [r3, #0]
 80098ba:	b111      	cbz	r1, 80098c2 <_reclaim_reent+0x22>
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 fac7 	bl	8009e50 <_free_r>
 80098c2:	6961      	ldr	r1, [r4, #20]
 80098c4:	b111      	cbz	r1, 80098cc <_reclaim_reent+0x2c>
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 fac2 	bl	8009e50 <_free_r>
 80098cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80098ce:	b111      	cbz	r1, 80098d6 <_reclaim_reent+0x36>
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fabd 	bl	8009e50 <_free_r>
 80098d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80098d8:	b111      	cbz	r1, 80098e0 <_reclaim_reent+0x40>
 80098da:	4620      	mov	r0, r4
 80098dc:	f000 fab8 	bl	8009e50 <_free_r>
 80098e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80098e2:	b111      	cbz	r1, 80098ea <_reclaim_reent+0x4a>
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fab3 	bl	8009e50 <_free_r>
 80098ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80098ec:	b111      	cbz	r1, 80098f4 <_reclaim_reent+0x54>
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 faae 	bl	8009e50 <_free_r>
 80098f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80098f6:	b111      	cbz	r1, 80098fe <_reclaim_reent+0x5e>
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 faa9 	bl	8009e50 <_free_r>
 80098fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009900:	b111      	cbz	r1, 8009908 <_reclaim_reent+0x68>
 8009902:	4620      	mov	r0, r4
 8009904:	f000 faa4 	bl	8009e50 <_free_r>
 8009908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800990a:	b111      	cbz	r1, 8009912 <_reclaim_reent+0x72>
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fa9f 	bl	8009e50 <_free_r>
 8009912:	69a3      	ldr	r3, [r4, #24]
 8009914:	b1e3      	cbz	r3, 8009950 <_reclaim_reent+0xb0>
 8009916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009918:	4620      	mov	r0, r4
 800991a:	4798      	blx	r3
 800991c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800991e:	b1b9      	cbz	r1, 8009950 <_reclaim_reent+0xb0>
 8009920:	4620      	mov	r0, r4
 8009922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009926:	f7ff bfad 	b.w	8009884 <cleanup_glue>
 800992a:	5949      	ldr	r1, [r1, r5]
 800992c:	b941      	cbnz	r1, 8009940 <_reclaim_reent+0xa0>
 800992e:	3504      	adds	r5, #4
 8009930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009932:	2d80      	cmp	r5, #128	; 0x80
 8009934:	68d9      	ldr	r1, [r3, #12]
 8009936:	d1f8      	bne.n	800992a <_reclaim_reent+0x8a>
 8009938:	4620      	mov	r0, r4
 800993a:	f000 fa89 	bl	8009e50 <_free_r>
 800993e:	e7ba      	b.n	80098b6 <_reclaim_reent+0x16>
 8009940:	680e      	ldr	r6, [r1, #0]
 8009942:	4620      	mov	r0, r4
 8009944:	f000 fa84 	bl	8009e50 <_free_r>
 8009948:	4631      	mov	r1, r6
 800994a:	e7ef      	b.n	800992c <_reclaim_reent+0x8c>
 800994c:	2500      	movs	r5, #0
 800994e:	e7ef      	b.n	8009930 <_reclaim_reent+0x90>
 8009950:	bd70      	pop	{r4, r5, r6, pc}
 8009952:	bf00      	nop
 8009954:	20000010 	.word	0x20000010

08009958 <_sbrk_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d06      	ldr	r5, [pc, #24]	; (8009974 <_sbrk_r+0x1c>)
 800995c:	2300      	movs	r3, #0
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	602b      	str	r3, [r5, #0]
 8009964:	f7f7 faec 	bl	8000f40 <_sbrk>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_sbrk_r+0x1a>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b103      	cbz	r3, 8009972 <_sbrk_r+0x1a>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	20004d94 	.word	0x20004d94

08009978 <__sread>:
 8009978:	b510      	push	{r4, lr}
 800997a:	460c      	mov	r4, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	f000 fab2 	bl	8009ee8 <_read_r>
 8009984:	2800      	cmp	r0, #0
 8009986:	bfab      	itete	ge
 8009988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800998a:	89a3      	ldrhlt	r3, [r4, #12]
 800998c:	181b      	addge	r3, r3, r0
 800998e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009992:	bfac      	ite	ge
 8009994:	6563      	strge	r3, [r4, #84]	; 0x54
 8009996:	81a3      	strhlt	r3, [r4, #12]
 8009998:	bd10      	pop	{r4, pc}

0800999a <__swrite>:
 800999a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999e:	461f      	mov	r7, r3
 80099a0:	898b      	ldrh	r3, [r1, #12]
 80099a2:	05db      	lsls	r3, r3, #23
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	4616      	mov	r6, r2
 80099aa:	d505      	bpl.n	80099b8 <__swrite+0x1e>
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	2302      	movs	r3, #2
 80099b2:	2200      	movs	r2, #0
 80099b4:	f000 f9c8 	bl	8009d48 <_lseek_r>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	4628      	mov	r0, r5
 80099ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	f000 b869 	b.w	8009aa4 <_write_r>

080099d2 <__sseek>:
 80099d2:	b510      	push	{r4, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099da:	f000 f9b5 	bl	8009d48 <_lseek_r>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	bf15      	itete	ne
 80099e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80099e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099ee:	81a3      	strheq	r3, [r4, #12]
 80099f0:	bf18      	it	ne
 80099f2:	81a3      	strhne	r3, [r4, #12]
 80099f4:	bd10      	pop	{r4, pc}

080099f6 <__sclose>:
 80099f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fa:	f000 b8d3 	b.w	8009ba4 <_close_r>
	...

08009a00 <__swbuf_r>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	460e      	mov	r6, r1
 8009a04:	4614      	mov	r4, r2
 8009a06:	4605      	mov	r5, r0
 8009a08:	b118      	cbz	r0, 8009a12 <__swbuf_r+0x12>
 8009a0a:	6983      	ldr	r3, [r0, #24]
 8009a0c:	b90b      	cbnz	r3, 8009a12 <__swbuf_r+0x12>
 8009a0e:	f7ff fd53 	bl	80094b8 <__sinit>
 8009a12:	4b21      	ldr	r3, [pc, #132]	; (8009a98 <__swbuf_r+0x98>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d12b      	bne.n	8009a70 <__swbuf_r+0x70>
 8009a18:	686c      	ldr	r4, [r5, #4]
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	60a3      	str	r3, [r4, #8]
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	071a      	lsls	r2, r3, #28
 8009a22:	d52f      	bpl.n	8009a84 <__swbuf_r+0x84>
 8009a24:	6923      	ldr	r3, [r4, #16]
 8009a26:	b36b      	cbz	r3, 8009a84 <__swbuf_r+0x84>
 8009a28:	6923      	ldr	r3, [r4, #16]
 8009a2a:	6820      	ldr	r0, [r4, #0]
 8009a2c:	1ac0      	subs	r0, r0, r3
 8009a2e:	6963      	ldr	r3, [r4, #20]
 8009a30:	b2f6      	uxtb	r6, r6
 8009a32:	4283      	cmp	r3, r0
 8009a34:	4637      	mov	r7, r6
 8009a36:	dc04      	bgt.n	8009a42 <__swbuf_r+0x42>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f000 f948 	bl	8009cd0 <_fflush_r>
 8009a40:	bb30      	cbnz	r0, 8009a90 <__swbuf_r+0x90>
 8009a42:	68a3      	ldr	r3, [r4, #8]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	60a3      	str	r3, [r4, #8]
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	701e      	strb	r6, [r3, #0]
 8009a50:	6963      	ldr	r3, [r4, #20]
 8009a52:	3001      	adds	r0, #1
 8009a54:	4283      	cmp	r3, r0
 8009a56:	d004      	beq.n	8009a62 <__swbuf_r+0x62>
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	07db      	lsls	r3, r3, #31
 8009a5c:	d506      	bpl.n	8009a6c <__swbuf_r+0x6c>
 8009a5e:	2e0a      	cmp	r6, #10
 8009a60:	d104      	bne.n	8009a6c <__swbuf_r+0x6c>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 f933 	bl	8009cd0 <_fflush_r>
 8009a6a:	b988      	cbnz	r0, 8009a90 <__swbuf_r+0x90>
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <__swbuf_r+0x9c>)
 8009a72:	429c      	cmp	r4, r3
 8009a74:	d101      	bne.n	8009a7a <__swbuf_r+0x7a>
 8009a76:	68ac      	ldr	r4, [r5, #8]
 8009a78:	e7cf      	b.n	8009a1a <__swbuf_r+0x1a>
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <__swbuf_r+0xa0>)
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	bf08      	it	eq
 8009a80:	68ec      	ldreq	r4, [r5, #12]
 8009a82:	e7ca      	b.n	8009a1a <__swbuf_r+0x1a>
 8009a84:	4621      	mov	r1, r4
 8009a86:	4628      	mov	r0, r5
 8009a88:	f000 f81e 	bl	8009ac8 <__swsetup_r>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d0cb      	beq.n	8009a28 <__swbuf_r+0x28>
 8009a90:	f04f 37ff 	mov.w	r7, #4294967295
 8009a94:	e7ea      	b.n	8009a6c <__swbuf_r+0x6c>
 8009a96:	bf00      	nop
 8009a98:	0800a090 	.word	0x0800a090
 8009a9c:	0800a0b0 	.word	0x0800a0b0
 8009aa0:	0800a070 	.word	0x0800a070

08009aa4 <_write_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4d07      	ldr	r5, [pc, #28]	; (8009ac4 <_write_r+0x20>)
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	4608      	mov	r0, r1
 8009aac:	4611      	mov	r1, r2
 8009aae:	2200      	movs	r2, #0
 8009ab0:	602a      	str	r2, [r5, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f7f7 f878 	bl	8000ba8 <_write>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_write_r+0x1e>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_write_r+0x1e>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20004d94 	.word	0x20004d94

08009ac8 <__swsetup_r>:
 8009ac8:	4b32      	ldr	r3, [pc, #200]	; (8009b94 <__swsetup_r+0xcc>)
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	681d      	ldr	r5, [r3, #0]
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	b125      	cbz	r5, 8009ade <__swsetup_r+0x16>
 8009ad4:	69ab      	ldr	r3, [r5, #24]
 8009ad6:	b913      	cbnz	r3, 8009ade <__swsetup_r+0x16>
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f7ff fced 	bl	80094b8 <__sinit>
 8009ade:	4b2e      	ldr	r3, [pc, #184]	; (8009b98 <__swsetup_r+0xd0>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	d10f      	bne.n	8009b04 <__swsetup_r+0x3c>
 8009ae4:	686c      	ldr	r4, [r5, #4]
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aec:	0719      	lsls	r1, r3, #28
 8009aee:	d42c      	bmi.n	8009b4a <__swsetup_r+0x82>
 8009af0:	06dd      	lsls	r5, r3, #27
 8009af2:	d411      	bmi.n	8009b18 <__swsetup_r+0x50>
 8009af4:	2309      	movs	r3, #9
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	e03e      	b.n	8009b82 <__swsetup_r+0xba>
 8009b04:	4b25      	ldr	r3, [pc, #148]	; (8009b9c <__swsetup_r+0xd4>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	d101      	bne.n	8009b0e <__swsetup_r+0x46>
 8009b0a:	68ac      	ldr	r4, [r5, #8]
 8009b0c:	e7eb      	b.n	8009ae6 <__swsetup_r+0x1e>
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <__swsetup_r+0xd8>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	bf08      	it	eq
 8009b14:	68ec      	ldreq	r4, [r5, #12]
 8009b16:	e7e6      	b.n	8009ae6 <__swsetup_r+0x1e>
 8009b18:	0758      	lsls	r0, r3, #29
 8009b1a:	d512      	bpl.n	8009b42 <__swsetup_r+0x7a>
 8009b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b1e:	b141      	cbz	r1, 8009b32 <__swsetup_r+0x6a>
 8009b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b24:	4299      	cmp	r1, r3
 8009b26:	d002      	beq.n	8009b2e <__swsetup_r+0x66>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f000 f991 	bl	8009e50 <_free_r>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	6363      	str	r3, [r4, #52]	; 0x34
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	f043 0308 	orr.w	r3, r3, #8
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	b94b      	cbnz	r3, 8009b62 <__swsetup_r+0x9a>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b58:	d003      	beq.n	8009b62 <__swsetup_r+0x9a>
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 f92b 	bl	8009db8 <__smakebuf_r>
 8009b62:	89a0      	ldrh	r0, [r4, #12]
 8009b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b68:	f010 0301 	ands.w	r3, r0, #1
 8009b6c:	d00a      	beq.n	8009b84 <__swsetup_r+0xbc>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60a3      	str	r3, [r4, #8]
 8009b72:	6963      	ldr	r3, [r4, #20]
 8009b74:	425b      	negs	r3, r3
 8009b76:	61a3      	str	r3, [r4, #24]
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b943      	cbnz	r3, 8009b8e <__swsetup_r+0xc6>
 8009b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b80:	d1ba      	bne.n	8009af8 <__swsetup_r+0x30>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	0781      	lsls	r1, r0, #30
 8009b86:	bf58      	it	pl
 8009b88:	6963      	ldrpl	r3, [r4, #20]
 8009b8a:	60a3      	str	r3, [r4, #8]
 8009b8c:	e7f4      	b.n	8009b78 <__swsetup_r+0xb0>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e7f7      	b.n	8009b82 <__swsetup_r+0xba>
 8009b92:	bf00      	nop
 8009b94:	20000010 	.word	0x20000010
 8009b98:	0800a090 	.word	0x0800a090
 8009b9c:	0800a0b0 	.word	0x0800a0b0
 8009ba0:	0800a070 	.word	0x0800a070

08009ba4 <_close_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d06      	ldr	r5, [pc, #24]	; (8009bc0 <_close_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f7 f991 	bl	8000ed6 <_close>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_close_r+0x1a>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_close_r+0x1a>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	20004d94 	.word	0x20004d94

08009bc4 <__sflush_r>:
 8009bc4:	898a      	ldrh	r2, [r1, #12]
 8009bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bca:	4605      	mov	r5, r0
 8009bcc:	0710      	lsls	r0, r2, #28
 8009bce:	460c      	mov	r4, r1
 8009bd0:	d458      	bmi.n	8009c84 <__sflush_r+0xc0>
 8009bd2:	684b      	ldr	r3, [r1, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dc05      	bgt.n	8009be4 <__sflush_r+0x20>
 8009bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dc02      	bgt.n	8009be4 <__sflush_r+0x20>
 8009bde:	2000      	movs	r0, #0
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	d0f9      	beq.n	8009bde <__sflush_r+0x1a>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bf0:	682f      	ldr	r7, [r5, #0]
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	d032      	beq.n	8009c5c <__sflush_r+0x98>
 8009bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	075a      	lsls	r2, r3, #29
 8009bfc:	d505      	bpl.n	8009c0a <__sflush_r+0x46>
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	1ac0      	subs	r0, r0, r3
 8009c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c04:	b10b      	cbz	r3, 8009c0a <__sflush_r+0x46>
 8009c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c08:	1ac0      	subs	r0, r0, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c10:	6a21      	ldr	r1, [r4, #32]
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b0      	blx	r6
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	d106      	bne.n	8009c2a <__sflush_r+0x66>
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	291d      	cmp	r1, #29
 8009c20:	d82c      	bhi.n	8009c7c <__sflush_r+0xb8>
 8009c22:	4a2a      	ldr	r2, [pc, #168]	; (8009ccc <__sflush_r+0x108>)
 8009c24:	40ca      	lsrs	r2, r1
 8009c26:	07d6      	lsls	r6, r2, #31
 8009c28:	d528      	bpl.n	8009c7c <__sflush_r+0xb8>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	6062      	str	r2, [r4, #4]
 8009c2e:	04d9      	lsls	r1, r3, #19
 8009c30:	6922      	ldr	r2, [r4, #16]
 8009c32:	6022      	str	r2, [r4, #0]
 8009c34:	d504      	bpl.n	8009c40 <__sflush_r+0x7c>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	d101      	bne.n	8009c3e <__sflush_r+0x7a>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b903      	cbnz	r3, 8009c40 <__sflush_r+0x7c>
 8009c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c42:	602f      	str	r7, [r5, #0]
 8009c44:	2900      	cmp	r1, #0
 8009c46:	d0ca      	beq.n	8009bde <__sflush_r+0x1a>
 8009c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <__sflush_r+0x92>
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 f8fd 	bl	8009e50 <_free_r>
 8009c56:	2000      	movs	r0, #0
 8009c58:	6360      	str	r0, [r4, #52]	; 0x34
 8009c5a:	e7c1      	b.n	8009be0 <__sflush_r+0x1c>
 8009c5c:	6a21      	ldr	r1, [r4, #32]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b0      	blx	r6
 8009c64:	1c41      	adds	r1, r0, #1
 8009c66:	d1c7      	bne.n	8009bf8 <__sflush_r+0x34>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0c4      	beq.n	8009bf8 <__sflush_r+0x34>
 8009c6e:	2b1d      	cmp	r3, #29
 8009c70:	d001      	beq.n	8009c76 <__sflush_r+0xb2>
 8009c72:	2b16      	cmp	r3, #22
 8009c74:	d101      	bne.n	8009c7a <__sflush_r+0xb6>
 8009c76:	602f      	str	r7, [r5, #0]
 8009c78:	e7b1      	b.n	8009bde <__sflush_r+0x1a>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	e7ad      	b.n	8009be0 <__sflush_r+0x1c>
 8009c84:	690f      	ldr	r7, [r1, #16]
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	d0a9      	beq.n	8009bde <__sflush_r+0x1a>
 8009c8a:	0793      	lsls	r3, r2, #30
 8009c8c:	680e      	ldr	r6, [r1, #0]
 8009c8e:	bf08      	it	eq
 8009c90:	694b      	ldreq	r3, [r1, #20]
 8009c92:	600f      	str	r7, [r1, #0]
 8009c94:	bf18      	it	ne
 8009c96:	2300      	movne	r3, #0
 8009c98:	eba6 0807 	sub.w	r8, r6, r7
 8009c9c:	608b      	str	r3, [r1, #8]
 8009c9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ca2:	dd9c      	ble.n	8009bde <__sflush_r+0x1a>
 8009ca4:	6a21      	ldr	r1, [r4, #32]
 8009ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ca8:	4643      	mov	r3, r8
 8009caa:	463a      	mov	r2, r7
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b0      	blx	r6
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	dc06      	bgt.n	8009cc2 <__sflush_r+0xfe>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e78e      	b.n	8009be0 <__sflush_r+0x1c>
 8009cc2:	4407      	add	r7, r0
 8009cc4:	eba8 0800 	sub.w	r8, r8, r0
 8009cc8:	e7e9      	b.n	8009c9e <__sflush_r+0xda>
 8009cca:	bf00      	nop
 8009ccc:	20400001 	.word	0x20400001

08009cd0 <_fflush_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	690b      	ldr	r3, [r1, #16]
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b913      	cbnz	r3, 8009ce0 <_fflush_r+0x10>
 8009cda:	2500      	movs	r5, #0
 8009cdc:	4628      	mov	r0, r5
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	b118      	cbz	r0, 8009cea <_fflush_r+0x1a>
 8009ce2:	6983      	ldr	r3, [r0, #24]
 8009ce4:	b90b      	cbnz	r3, 8009cea <_fflush_r+0x1a>
 8009ce6:	f7ff fbe7 	bl	80094b8 <__sinit>
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <_fflush_r+0x6c>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d11b      	bne.n	8009d28 <_fflush_r+0x58>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0ef      	beq.n	8009cda <_fflush_r+0xa>
 8009cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cfc:	07d0      	lsls	r0, r2, #31
 8009cfe:	d404      	bmi.n	8009d0a <_fflush_r+0x3a>
 8009d00:	0599      	lsls	r1, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_fflush_r+0x3a>
 8009d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d06:	f7ff fc9a 	bl	800963e <__retarget_lock_acquire_recursive>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7ff ff59 	bl	8009bc4 <__sflush_r>
 8009d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d14:	07da      	lsls	r2, r3, #31
 8009d16:	4605      	mov	r5, r0
 8009d18:	d4e0      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	059b      	lsls	r3, r3, #22
 8009d1e:	d4dd      	bmi.n	8009cdc <_fflush_r+0xc>
 8009d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d22:	f7ff fc8d 	bl	8009640 <__retarget_lock_release_recursive>
 8009d26:	e7d9      	b.n	8009cdc <_fflush_r+0xc>
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <_fflush_r+0x70>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <_fflush_r+0x62>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7df      	b.n	8009cf2 <_fflush_r+0x22>
 8009d32:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <_fflush_r+0x74>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7da      	b.n	8009cf2 <_fflush_r+0x22>
 8009d3c:	0800a090 	.word	0x0800a090
 8009d40:	0800a0b0 	.word	0x0800a0b0
 8009d44:	0800a070 	.word	0x0800a070

08009d48 <_lseek_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_lseek_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f7 f8e4 	bl	8000f24 <_lseek>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_lseek_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_lseek_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20004d94 	.word	0x20004d94

08009d6c <__swhatbuf_r>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	460e      	mov	r6, r1
 8009d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d74:	2900      	cmp	r1, #0
 8009d76:	b096      	sub	sp, #88	; 0x58
 8009d78:	4614      	mov	r4, r2
 8009d7a:	461d      	mov	r5, r3
 8009d7c:	da08      	bge.n	8009d90 <__swhatbuf_r+0x24>
 8009d7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	602a      	str	r2, [r5, #0]
 8009d86:	061a      	lsls	r2, r3, #24
 8009d88:	d410      	bmi.n	8009dac <__swhatbuf_r+0x40>
 8009d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d8e:	e00e      	b.n	8009dae <__swhatbuf_r+0x42>
 8009d90:	466a      	mov	r2, sp
 8009d92:	f000 f8bb 	bl	8009f0c <_fstat_r>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	dbf1      	blt.n	8009d7e <__swhatbuf_r+0x12>
 8009d9a:	9a01      	ldr	r2, [sp, #4]
 8009d9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009da0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009da4:	425a      	negs	r2, r3
 8009da6:	415a      	adcs	r2, r3
 8009da8:	602a      	str	r2, [r5, #0]
 8009daa:	e7ee      	b.n	8009d8a <__swhatbuf_r+0x1e>
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	2000      	movs	r0, #0
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	b016      	add	sp, #88	; 0x58
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009db8 <__smakebuf_r>:
 8009db8:	898b      	ldrh	r3, [r1, #12]
 8009dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dbc:	079d      	lsls	r5, r3, #30
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	d507      	bpl.n	8009dd4 <__smakebuf_r+0x1c>
 8009dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	ab01      	add	r3, sp, #4
 8009dd6:	466a      	mov	r2, sp
 8009dd8:	f7ff ffc8 	bl	8009d6c <__swhatbuf_r>
 8009ddc:	9900      	ldr	r1, [sp, #0]
 8009dde:	4605      	mov	r5, r0
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff fc65 	bl	80096b0 <_malloc_r>
 8009de6:	b948      	cbnz	r0, 8009dfc <__smakebuf_r+0x44>
 8009de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d4ef      	bmi.n	8009dd0 <__smakebuf_r+0x18>
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	f043 0302 	orr.w	r3, r3, #2
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	e7e3      	b.n	8009dc4 <__smakebuf_r+0xc>
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <__smakebuf_r+0x7c>)
 8009dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	6020      	str	r0, [r4, #0]
 8009e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	6163      	str	r3, [r4, #20]
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	6120      	str	r0, [r4, #16]
 8009e12:	b15b      	cbz	r3, 8009e2c <__smakebuf_r+0x74>
 8009e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f000 f889 	bl	8009f30 <_isatty_r>
 8009e1e:	b128      	cbz	r0, 8009e2c <__smakebuf_r+0x74>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	89a0      	ldrh	r0, [r4, #12]
 8009e2e:	4305      	orrs	r5, r0
 8009e30:	81a5      	strh	r5, [r4, #12]
 8009e32:	e7cd      	b.n	8009dd0 <__smakebuf_r+0x18>
 8009e34:	08009451 	.word	0x08009451

08009e38 <__malloc_lock>:
 8009e38:	4801      	ldr	r0, [pc, #4]	; (8009e40 <__malloc_lock+0x8>)
 8009e3a:	f7ff bc00 	b.w	800963e <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	20004d88 	.word	0x20004d88

08009e44 <__malloc_unlock>:
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__malloc_unlock+0x8>)
 8009e46:	f7ff bbfb 	b.w	8009640 <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	20004d88 	.word	0x20004d88

08009e50 <_free_r>:
 8009e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e52:	2900      	cmp	r1, #0
 8009e54:	d044      	beq.n	8009ee0 <_free_r+0x90>
 8009e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5a:	9001      	str	r0, [sp, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e62:	bfb8      	it	lt
 8009e64:	18e4      	addlt	r4, r4, r3
 8009e66:	f7ff ffe7 	bl	8009e38 <__malloc_lock>
 8009e6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ee4 <_free_r+0x94>)
 8009e6c:	9801      	ldr	r0, [sp, #4]
 8009e6e:	6813      	ldr	r3, [r2, #0]
 8009e70:	b933      	cbnz	r3, 8009e80 <_free_r+0x30>
 8009e72:	6063      	str	r3, [r4, #4]
 8009e74:	6014      	str	r4, [r2, #0]
 8009e76:	b003      	add	sp, #12
 8009e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e7c:	f7ff bfe2 	b.w	8009e44 <__malloc_unlock>
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	d908      	bls.n	8009e96 <_free_r+0x46>
 8009e84:	6825      	ldr	r5, [r4, #0]
 8009e86:	1961      	adds	r1, r4, r5
 8009e88:	428b      	cmp	r3, r1
 8009e8a:	bf01      	itttt	eq
 8009e8c:	6819      	ldreq	r1, [r3, #0]
 8009e8e:	685b      	ldreq	r3, [r3, #4]
 8009e90:	1949      	addeq	r1, r1, r5
 8009e92:	6021      	streq	r1, [r4, #0]
 8009e94:	e7ed      	b.n	8009e72 <_free_r+0x22>
 8009e96:	461a      	mov	r2, r3
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	b10b      	cbz	r3, 8009ea0 <_free_r+0x50>
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	d9fa      	bls.n	8009e96 <_free_r+0x46>
 8009ea0:	6811      	ldr	r1, [r2, #0]
 8009ea2:	1855      	adds	r5, r2, r1
 8009ea4:	42a5      	cmp	r5, r4
 8009ea6:	d10b      	bne.n	8009ec0 <_free_r+0x70>
 8009ea8:	6824      	ldr	r4, [r4, #0]
 8009eaa:	4421      	add	r1, r4
 8009eac:	1854      	adds	r4, r2, r1
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	6011      	str	r1, [r2, #0]
 8009eb2:	d1e0      	bne.n	8009e76 <_free_r+0x26>
 8009eb4:	681c      	ldr	r4, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	6053      	str	r3, [r2, #4]
 8009eba:	4421      	add	r1, r4
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	e7da      	b.n	8009e76 <_free_r+0x26>
 8009ec0:	d902      	bls.n	8009ec8 <_free_r+0x78>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	e7d6      	b.n	8009e76 <_free_r+0x26>
 8009ec8:	6825      	ldr	r5, [r4, #0]
 8009eca:	1961      	adds	r1, r4, r5
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	bf04      	itt	eq
 8009ed0:	6819      	ldreq	r1, [r3, #0]
 8009ed2:	685b      	ldreq	r3, [r3, #4]
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	bf04      	itt	eq
 8009ed8:	1949      	addeq	r1, r1, r5
 8009eda:	6021      	streq	r1, [r4, #0]
 8009edc:	6054      	str	r4, [r2, #4]
 8009ede:	e7ca      	b.n	8009e76 <_free_r+0x26>
 8009ee0:	b003      	add	sp, #12
 8009ee2:	bd30      	pop	{r4, r5, pc}
 8009ee4:	20004d8c 	.word	0x20004d8c

08009ee8 <_read_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_read_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f6 ffd0 	bl	8000e9c <_read>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_read_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_read_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20004d94 	.word	0x20004d94

08009f0c <_fstat_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d07      	ldr	r5, [pc, #28]	; (8009f2c <_fstat_r+0x20>)
 8009f10:	2300      	movs	r3, #0
 8009f12:	4604      	mov	r4, r0
 8009f14:	4608      	mov	r0, r1
 8009f16:	4611      	mov	r1, r2
 8009f18:	602b      	str	r3, [r5, #0]
 8009f1a:	f7f6 ffe8 	bl	8000eee <_fstat>
 8009f1e:	1c43      	adds	r3, r0, #1
 8009f20:	d102      	bne.n	8009f28 <_fstat_r+0x1c>
 8009f22:	682b      	ldr	r3, [r5, #0]
 8009f24:	b103      	cbz	r3, 8009f28 <_fstat_r+0x1c>
 8009f26:	6023      	str	r3, [r4, #0]
 8009f28:	bd38      	pop	{r3, r4, r5, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20004d94 	.word	0x20004d94

08009f30 <_isatty_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d06      	ldr	r5, [pc, #24]	; (8009f4c <_isatty_r+0x1c>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	f7f6 ffe7 	bl	8000f0e <_isatty>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d102      	bne.n	8009f4a <_isatty_r+0x1a>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	b103      	cbz	r3, 8009f4a <_isatty_r+0x1a>
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	20004d94 	.word	0x20004d94

08009f50 <_init>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	bf00      	nop
 8009f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f56:	bc08      	pop	{r3}
 8009f58:	469e      	mov	lr, r3
 8009f5a:	4770      	bx	lr

08009f5c <_fini>:
 8009f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5e:	bf00      	nop
 8009f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f62:	bc08      	pop	{r3}
 8009f64:	469e      	mov	lr, r3
 8009f66:	4770      	bx	lr
