
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800b164  0800b164  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b460  0800b460  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b460  0800b460  0001b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b468  0800b468  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b468  0800b468  0001b468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b46c  0800b46c  0001b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00004f94  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005038  20005038  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a73  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b90  00000000  00000000  00041b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  000466d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00048098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f78  00000000  00000000  00049860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9c3  00000000  00000000  000507d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d12a4  00000000  00000000  0006f19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014043f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007228  00000000  00000000  00140490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b14c 	.word	0x0800b14c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800b14c 	.word	0x0800b14c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ws2812Init>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812Init(uint32_t led_cnt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 800057c:	23fc      	movs	r3, #252	; 0xfc
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <ws2812Init+0x1c>)
 8000580:	2100      	movs	r1, #0
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <ws2812Init+0x20>)
 8000584:	f004 f9a8 	bl	80048d8 <HAL_TIM_PWM_Start_DMA>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000c0 	.word	0x200000c0
 8000594:	20000484 	.word	0x20000484

08000598 <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000598:	b480      	push	{r7}
 800059a:	b08d      	sub	sp, #52	; 0x34
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	4608      	mov	r0, r1
 80005a2:	4611      	mov	r1, r2
 80005a4:	461a      	mov	r2, r3
 80005a6:	4603      	mov	r3, r0
 80005a8:	70fb      	strb	r3, [r7, #3]
 80005aa:	460b      	mov	r3, r1
 80005ac:	70bb      	strb	r3, [r7, #2]
 80005ae:	4613      	mov	r3, r2
 80005b0:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b2:	78bb      	ldrb	r3, [r7, #2]
 80005b4:	021a      	lsls	r2, r3, #8
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	4413      	add	r3, r2
 80005ba:	021a      	lsls	r2, r3, #8
 80005bc:	787b      	ldrb	r3, [r7, #1]
 80005be:	4413      	add	r3, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	3330      	adds	r3, #48	; 0x30
 80005c8:	443b      	add	r3, r7
 80005ca:	f843 2c24 	str.w	r2, [r3, #-36]

	for(int i=0;i<24;i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d2:	e02a      	b.n	800062a <ws2812SetColor+0x92>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	3330      	adds	r3, #48	; 0x30
 80005da:	443b      	add	r3, r7
 80005dc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80005e0:	2101      	movs	r1, #1
 80005e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4013      	ands	r3, r2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d00d      	beq.n	800060a <ws2812SetColor+0x72>
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4613      	mov	r3, r2
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	461a      	mov	r2, r3
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	33c0      	adds	r3, #192	; 0xc0
 8000600:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <ws2812SetColor+0xa8>)
 8000602:	2143      	movs	r1, #67	; 0x43
 8000604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000608:	e00c      	b.n	8000624 <ws2812SetColor+0x8c>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4613      	mov	r3, r2
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	461a      	mov	r2, r3
 8000616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	33c0      	adds	r3, #192	; 0xc0
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <ws2812SetColor+0xa8>)
 800061e:	2121      	movs	r1, #33	; 0x21
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 8000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000626:	3301      	adds	r3, #1
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	2b17      	cmp	r3, #23
 800062e:	ddd1      	ble.n	80005d4 <ws2812SetColor+0x3c>
	}
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3734      	adds	r7, #52	; 0x34
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000c0 	.word	0x200000c0

08000644 <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8000644:	b480      	push	{r7}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	460b      	mov	r3, r1
 8000650:	71bb      	strb	r3, [r7, #6]
 8000652:	4613      	mov	r3, r2
 8000654:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	021a      	lsls	r2, r3, #8
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4413      	add	r3, r2
 800065e:	021a      	lsls	r2, r3, #8
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	4413      	add	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 8000666:	2308      	movs	r3, #8
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e02d      	b.n	80006c8 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	e024      	b.n	80006bc <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 8000672:	2201      	movs	r2, #1
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4013      	ands	r3, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00c      	beq.n	800069e <ws2812AllColor+0x5a>
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	461a      	mov	r2, r3
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <ws2812AllColor+0x98>)
 8000696:	2143      	movs	r1, #67	; 0x43
 8000698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800069c:	e00b      	b.n	80006b6 <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	461a      	mov	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <ws2812AllColor+0x98>)
 80006b0:	2121      	movs	r1, #33	; 0x21
 80006b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3301      	adds	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	2b17      	cmp	r3, #23
 80006c0:	ddd7      	ble.n	8000672 <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	dcce      	bgt.n	800066c <ws2812AllColor+0x28>
		}
	}
}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	371c      	adds	r7, #28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000c0 	.word	0x200000c0

080006e0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_CAN1_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <MX_CAN1_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_CAN1_Init+0x64>)
 80006ec:	2206      	movs	r2, #6
 80006ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_CAN1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_CAN1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_CAN1_Init+0x64>)
 80006fe:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000702:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_CAN1_Init+0x64>)
 8000706:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800070a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_CAN1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_CAN1_Init+0x64>)
 8000714:	2201      	movs	r2, #1
 8000716:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_CAN1_Init+0x64>)
 8000732:	f001 fc4d 	bl	8001fd0 <HAL_CAN_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 fdf6 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000308 	.word	0x20000308
 8000748:	40006400 	.word	0x40006400

0800074c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <HAL_CAN_MspInit+0x94>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d134      	bne.n	80007d8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <HAL_CAN_MspInit+0x98>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <HAL_CAN_MspInit+0x98>)
 8000778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <HAL_CAN_MspInit+0x98>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_CAN_MspInit+0x98>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_CAN_MspInit+0x98>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_CAN_MspInit+0x98>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007b8:	2309      	movs	r3, #9
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <HAL_CAN_MspInit+0x9c>)
 80007c4:	f002 ff80 	bl	80036c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2105      	movs	r1, #5
 80007cc:	2014      	movs	r0, #20
 80007ce:	f002 fb4f 	bl	8002e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007d2:	2014      	movs	r0, #20
 80007d4:	f002 fb68 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40006400 	.word	0x40006400
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020400 	.word	0x40020400

080007ec <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <CanInit+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <CanInit+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <CanInit+0x98>)
 8000804:	2201      	movs	r2, #1
 8000806:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <CanInit+0x98>)
 8000810:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	b29b      	uxth	r3, r3
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <CanInit+0x98>)
 800081e:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	0c1b      	lsrs	r3, r3, #16
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <CanInit+0x98>)
 8000828:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	b29b      	uxth	r3, r3
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <CanInit+0x98>)
 8000836:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <CanInit+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <CanInit+0x98>)
 8000840:	2201      	movs	r2, #1
 8000842:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <CanInit+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <CanInit+0x9c>)
 800084c:	f001 fd9c 	bl	8002388 <HAL_CAN_Start>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <CanInit+0x6e>
 8000856:	f000 fd69 	bl	800132c <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800085a:	2102      	movs	r1, #2
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <CanInit+0x9c>)
 800085e:	f001 fff9 	bl	8002854 <HAL_CAN_ActivateNotification>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d000      	beq.n	800086a <CanInit+0x7e>
 8000868:	e7fe      	b.n	8000868 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800086a:	4906      	ldr	r1, [pc, #24]	; (8000884 <CanInit+0x98>)
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <CanInit+0x9c>)
 800086e:	f001 fcab 	bl	80021c8 <HAL_CAN_ConfigFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000878:	f000 fd58 	bl	800132c <Error_Handler>
    }
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200002e0 	.word	0x200002e0
 8000888:	20000308 	.word	0x20000308

0800088c <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	460b      	mov	r3, r1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4613      	mov	r3, r2
 80008a0:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <sendCan+0x2c>
 80008b4:	2304      	movs	r3, #4
 80008b6:	e000      	b.n	80008ba <sendCan+0x2e>
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <sendCan+0x70>)
 80008c8:	f001 fe7d 	bl	80025c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00d      	beq.n	80008f2 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	f107 0114 	add.w	r1, r7, #20
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <sendCan+0x70>)
 80008e2:	f001 fd95 	bl	8002410 <HAL_CAN_AddTxMessage>
 80008e6:	4603      	mov	r3, r0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d000      	beq.n	80008f2 <sendCan+0x66>
 80008f0:	e7fe      	b.n	80008f0 <sendCan+0x64>
    }
}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	; 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000308 	.word	0x20000308

08000900 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800090c:	2100      	movs	r1, #0
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000910:	f001 fe8e 	bl	8002630 <HAL_CAN_GetRxMessage>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d000      	beq.n	800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 800091a:	e7fe      	b.n	800091a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000924:	6013      	str	r3, [r2, #0]

}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200002bc 	.word	0x200002bc
 8000934:	200002c4 	.word	0x200002c4
 8000938:	20000308 	.word	0x20000308
 800093c:	200002b8 	.word	0x200002b8

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_DMA_Init+0x68>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <MX_DMA_Init+0x68>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_DMA_Init+0x68>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_DMA_Init+0x68>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_DMA_Init+0x68>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_DMA_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	200e      	movs	r0, #14
 8000984:	f002 fa74 	bl	8002e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000988:	200e      	movs	r0, #14
 800098a:	f002 fa8d 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	203a      	movs	r0, #58	; 0x3a
 8000994:	f002 fa6c 	bl	8002e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000998:	203a      	movs	r0, #58	; 0x3a
 800099a:	f002 fa85 	bl	8002ea8 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <fanInit>:

#include <fan.h>


void fanInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4802      	ldr	r0, [pc, #8]	; (80009bc <fanInit+0x10>)
 80009b4:	f003 fec8 	bl	8004748 <HAL_TIM_PWM_Start>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200003f4 	.word	0x200003f4

080009c0 <fanOn>:

void fanOn(uint8_t duty)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b63      	cmp	r3, #99	; 0x63
 80009ce:	d901      	bls.n	80009d4 <fanOn+0x14>
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d104      	bne.n	80009e4 <fanOn+0x24>
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <fanOn+0x38>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2200      	movs	r2, #0
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 80009e2:	e003      	b.n	80009ec <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <fanOn+0x38>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	200003f4 	.word	0x200003f4

080009fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <MX_FREERTOS_Init+0x58>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_FREERTOS_Init+0x5c>)
 8000a06:	f006 fd50 	bl	80074aa <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_FREERTOS_Init+0x60>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <MX_FREERTOS_Init+0x64>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_FREERTOS_Init+0x68>)
 8000a16:	f006 fd48 	bl	80074aa <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_FREERTOS_Init+0x6c>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000a20:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_FREERTOS_Init+0x70>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <MX_FREERTOS_Init+0x74>)
 8000a26:	f006 fd40 	bl	80074aa <osThreadNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <MX_FREERTOS_Init+0x78>)
 8000a2e:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <MX_FREERTOS_Init+0x7c>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_FREERTOS_Init+0x80>)
 8000a36:	f006 fd38 	bl	80074aa <osThreadNew>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <MX_FREERTOS_Init+0x84>)
 8000a3e:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <MX_FREERTOS_Init+0x88>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <MX_FREERTOS_Init+0x8c>)
 8000a46:	f006 fd30 	bl	80074aa <osThreadNew>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <MX_FREERTOS_Init+0x90>)
 8000a4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	0800b2f4 	.word	0x0800b2f4
 8000a58:	08000a91 	.word	0x08000a91
 8000a5c:	20000330 	.word	0x20000330
 8000a60:	0800b318 	.word	0x0800b318
 8000a64:	08000abd 	.word	0x08000abd
 8000a68:	20000334 	.word	0x20000334
 8000a6c:	0800b33c 	.word	0x0800b33c
 8000a70:	08000b01 	.word	0x08000b01
 8000a74:	20000338 	.word	0x20000338
 8000a78:	0800b360 	.word	0x0800b360
 8000a7c:	08000b49 	.word	0x08000b49
 8000a80:	2000033c 	.word	0x2000033c
 8000a84:	0800b384 	.word	0x0800b384
 8000a88:	08000f29 	.word	0x08000f29
 8000a8c:	20000340 	.word	0x20000340

08000a90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8000a98:	f006 fcf2 	bl	8007480 <osKernelGetTickCount>
 8000a9c:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000aa4:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f006 fd91 	bl	80075ce <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab0:	4801      	ldr	r0, [pc, #4]	; (8000ab8 <StartDefaultTask+0x28>)
 8000ab2:	f002 ffbe 	bl	8003a32 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8000ab6:	e7f2      	b.n	8000a9e <StartDefaultTask+0xe>
 8000ab8:	40020800 	.word	0x40020800

08000abc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint32_t lastTime = osKernelGetTickCount();
 8000ac4:	f006 fcdc 	bl	8007480 <osKernelGetTickCount>
 8000ac8:	6178      	str	r0, [r7, #20]

	CanInit(0,0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fe8d 	bl	80007ec <CanInit>
  /* Infinite loop */
  for(;;)
  {
	  uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <StartTask02+0x40>)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000adc:	e883 0003 	stmia.w	r3, {r0, r1}

	lastTime += PERIOD_CANCOMM;;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3314      	adds	r3, #20
 8000ae4:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f006 fd71 	bl	80075ce <osDelayUntil>

	//for(int i=0;i<8;i++){canbuf[i]=0;}
	sendCan(0, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext
 8000aec:	f107 010c 	add.w	r1, r7, #12
 8000af0:	2300      	movs	r3, #0
 8000af2:	2208      	movs	r2, #8
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff fec9 	bl	800088c <sendCan>
  {
 8000afa:	e7ea      	b.n	8000ad2 <StartTask02+0x16>
 8000afc:	0800b194 	.word	0x0800b194

08000b00 <StartTask03>:
					21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
					31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
					41, 42, 43, 44, 45, 46, 47, 48	};
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	uint32_t lastTime = osKernelGetTickCount();
 8000b08:	f006 fcba 	bl	8007480 <osKernelGetTickCount>
 8000b0c:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <StartTask03+0x3c>)
 8000b16:	f002 ff73 	bl	8003a00 <HAL_GPIO_WritePin>

	//if(HAL_UART_Transmit_DMA(&huart3,testarr, 48)!= HAL_OK){Error_Handler();}
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3332      	adds	r3, #50	; 0x32
 8000b1e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f006 fd54 	bl	80075ce <osDelayUntil>

	if(HAL_UART_Transmit_DMA(&huart3,testarr, 48)!= HAL_OK){Error_Handler();}
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	4905      	ldr	r1, [pc, #20]	; (8000b40 <StartTask03+0x40>)
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <StartTask03+0x44>)
 8000b2c:	f005 fb5c 	bl	80061e8 <HAL_UART_Transmit_DMA>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f1      	beq.n	8000b1a <StartTask03+0x1a>
 8000b36:	f000 fbf9 	bl	800132c <Error_Handler>
	lastTime += PERIOD_STEERING;
 8000b3a:	e7ee      	b.n	8000b1a <StartTask03+0x1a>
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000570 	.word	0x20000570

08000b48 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8000b50:	f006 fc96 	bl	8007480 <osKernelGetTickCount>
 8000b54:	60f8      	str	r0, [r7, #12]

	static int temp = 0;
	////////////////////////////////
	ws2812Init(24);
 8000b56:	2018      	movs	r0, #24
 8000b58:	f7ff fd0c 	bl	8000574 <ws2812Init>

  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b62:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f006 fd32 	bl	80075ce <osDelayUntil>


		temp++;
 8000b6a:	4be5      	ldr	r3, [pc, #916]	; (8000f00 <StartTask04+0x3b8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4ae3      	ldr	r2, [pc, #908]	; (8000f00 <StartTask04+0x3b8>)
 8000b72:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8000b74:	4be2      	ldr	r3, [pc, #904]	; (8000f00 <StartTask04+0x3b8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	f200 81b7 	bhi.w	8000eee <StartTask04+0x3a6>
 8000b80:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <StartTask04+0x40>)
 8000b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b86:	bf00      	nop
 8000b88:	08000ba9 	.word	0x08000ba9
 8000b8c:	08000c11 	.word	0x08000c11
 8000b90:	08000c79 	.word	0x08000c79
 8000b94:	08000ce1 	.word	0x08000ce1
 8000b98:	08000d49 	.word	0x08000d49
 8000b9c:	08000db1 	.word	0x08000db1
 8000ba0:	08000e19 	.word	0x08000e19
 8000ba4:	08000e81 	.word	0x08000e81
			case 1:
				printf("case1\n");
 8000ba8:	48d6      	ldr	r0, [pc, #856]	; (8000f04 <StartTask04+0x3bc>)
 8000baa:	f009 fc73 	bl	800a494 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000bae:	2301      	movs	r3, #1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fcef 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fce9 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f7ff fce3 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f7ff fcdd 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000bde:	2300      	movs	r3, #0
 8000be0:	2201      	movs	r2, #1
 8000be2:	2100      	movs	r1, #0
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff fcd7 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000bea:	2300      	movs	r3, #0
 8000bec:	2200      	movs	r2, #0
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2005      	movs	r0, #5
 8000bf2:	f7ff fcd1 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2006      	movs	r0, #6
 8000bfe:	f7ff fccb 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000c02:	2300      	movs	r3, #0
 8000c04:	2201      	movs	r2, #1
 8000c06:	2100      	movs	r1, #0
 8000c08:	2007      	movs	r0, #7
 8000c0a:	f7ff fcc5 	bl	8000598 <ws2812SetColor>
				break;
 8000c0e:	e16e      	b.n	8000eee <StartTask04+0x3a6>
			case 2:
				printf("case2\n");
 8000c10:	48bd      	ldr	r0, [pc, #756]	; (8000f08 <StartTask04+0x3c0>)
 8000c12:	f009 fc3f 	bl	800a494 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000c16:	2301      	movs	r3, #1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2007      	movs	r0, #7
 8000c1e:	f7ff fcbb 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000c22:	2300      	movs	r3, #0
 8000c24:	2201      	movs	r2, #1
 8000c26:	2100      	movs	r1, #0
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fcb5 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2200      	movs	r2, #0
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff fcaf 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fca9 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000c46:	2300      	movs	r3, #0
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f7ff fca3 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000c52:	2300      	movs	r3, #0
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	2004      	movs	r0, #4
 8000c5a:	f7ff fc9d 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2005      	movs	r0, #5
 8000c66:	f7ff fc97 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2006      	movs	r0, #6
 8000c72:	f7ff fc91 	bl	8000598 <ws2812SetColor>
				break;
 8000c76:	e13a      	b.n	8000eee <StartTask04+0x3a6>
			case 3:
				printf("case3\n");
 8000c78:	48a4      	ldr	r0, [pc, #656]	; (8000f0c <StartTask04+0x3c4>)
 8000c7a:	f009 fc0b 	bl	800a494 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2006      	movs	r0, #6
 8000c86:	f7ff fc87 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2007      	movs	r0, #7
 8000c92:	f7ff fc81 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000c96:	2300      	movs	r3, #0
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fc7b 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fc75 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f7ff fc6f 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fc69 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f7ff fc63 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2005      	movs	r0, #5
 8000cda:	f7ff fc5d 	bl	8000598 <ws2812SetColor>
				break;
 8000cde:	e106      	b.n	8000eee <StartTask04+0x3a6>
			case 4:
				printf("case4\n");
 8000ce0:	488b      	ldr	r0, [pc, #556]	; (8000f10 <StartTask04+0x3c8>)
 8000ce2:	f009 fbd7 	bl	800a494 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2005      	movs	r0, #5
 8000cee:	f7ff fc53 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f7ff fc4d 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2200      	movs	r2, #0
 8000d02:	2101      	movs	r1, #1
 8000d04:	2007      	movs	r0, #7
 8000d06:	f7ff fc47 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fc41 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000d16:	2300      	movs	r3, #0
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fc3b 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000d22:	2300      	movs	r3, #0
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f7ff fc35 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2003      	movs	r0, #3
 8000d36:	f7ff fc2f 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2004      	movs	r0, #4
 8000d42:	f7ff fc29 	bl	8000598 <ws2812SetColor>
				break;
 8000d46:	e0d2      	b.n	8000eee <StartTask04+0x3a6>
			case 5:
				printf("case5\n");
 8000d48:	4872      	ldr	r0, [pc, #456]	; (8000f14 <StartTask04+0x3cc>)
 8000d4a:	f009 fba3 	bl	800a494 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2004      	movs	r0, #4
 8000d56:	f7ff fc1f 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2005      	movs	r0, #5
 8000d62:	f7ff fc19 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000d66:	2300      	movs	r3, #0
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2006      	movs	r0, #6
 8000d6e:	f7ff fc13 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000d72:	2301      	movs	r3, #1
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2007      	movs	r0, #7
 8000d7a:	f7ff fc0d 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2201      	movs	r2, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fc07 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fc01 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000d96:	2301      	movs	r3, #1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff fbfb 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000da2:	2300      	movs	r3, #0
 8000da4:	2201      	movs	r2, #1
 8000da6:	2100      	movs	r1, #0
 8000da8:	2003      	movs	r0, #3
 8000daa:	f7ff fbf5 	bl	8000598 <ws2812SetColor>
				break;
 8000dae:	e09e      	b.n	8000eee <StartTask04+0x3a6>
			case 6:
				printf("case6\n");
 8000db0:	4859      	ldr	r0, [pc, #356]	; (8000f18 <StartTask04+0x3d0>)
 8000db2:	f009 fb6f 	bl	800a494 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000db6:	2301      	movs	r3, #1
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f7ff fbeb 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f7ff fbe5 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2005      	movs	r0, #5
 8000dd6:	f7ff fbdf 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2006      	movs	r0, #6
 8000de2:	f7ff fbd9 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000de6:	2300      	movs	r3, #0
 8000de8:	2201      	movs	r2, #1
 8000dea:	2100      	movs	r1, #0
 8000dec:	2007      	movs	r0, #7
 8000dee:	f7ff fbd3 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fbcd 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fbc7 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff fbc1 	bl	8000598 <ws2812SetColor>
				break;
 8000e16:	e06a      	b.n	8000eee <StartTask04+0x3a6>
			case 7:
				printf("case7\n");
 8000e18:	4840      	ldr	r0, [pc, #256]	; (8000f1c <StartTask04+0x3d4>)
 8000e1a:	f009 fb3b 	bl	800a494 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000e1e:	2301      	movs	r3, #1
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2002      	movs	r0, #2
 8000e26:	f7ff fbb7 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2003      	movs	r0, #3
 8000e32:	f7ff fbb1 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000e36:	2300      	movs	r3, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f7ff fbab 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000e42:	2301      	movs	r3, #1
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2005      	movs	r0, #5
 8000e4a:	f7ff fba5 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2201      	movs	r2, #1
 8000e52:	2100      	movs	r1, #0
 8000e54:	2006      	movs	r0, #6
 8000e56:	f7ff fb9f 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2007      	movs	r0, #7
 8000e62:	f7ff fb99 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000e66:	2301      	movs	r3, #1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fb93 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000e72:	2300      	movs	r3, #0
 8000e74:	2201      	movs	r2, #1
 8000e76:	2100      	movs	r1, #0
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fb8d 	bl	8000598 <ws2812SetColor>
				break;
 8000e7e:	e036      	b.n	8000eee <StartTask04+0x3a6>
			case 8:
				printf("case8\n");
 8000e80:	4827      	ldr	r0, [pc, #156]	; (8000f20 <StartTask04+0x3d8>)
 8000e82:	f009 fb07 	bl	800a494 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000e86:	2301      	movs	r3, #1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fb83 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000e92:	2300      	movs	r3, #0
 8000e94:	2201      	movs	r2, #1
 8000e96:	2100      	movs	r1, #0
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f7ff fb7d 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f7ff fb77 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f7ff fb71 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f7ff fb6b 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2006      	movs	r0, #6
 8000eca:	f7ff fb65 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2007      	movs	r0, #7
 8000ed6:	f7ff fb5f 	bl	8000598 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000eda:	2300      	movs	r3, #0
 8000edc:	2201      	movs	r2, #1
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fb59 	bl	8000598 <ws2812SetColor>
				temp=1;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <StartTask04+0x3b8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
				break;
 8000eec:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fba6 	bl	8000644 <ws2812AllColor>
		printf("task4\n");
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <StartTask04+0x3dc>)
 8000efa:	f009 facb 	bl	800a494 <puts>
  {
 8000efe:	e62d      	b.n	8000b5c <StartTask04+0x14>
 8000f00:	20000344 	.word	0x20000344
 8000f04:	0800b19c 	.word	0x0800b19c
 8000f08:	0800b1a4 	.word	0x0800b1a4
 8000f0c:	0800b1ac 	.word	0x0800b1ac
 8000f10:	0800b1b4 	.word	0x0800b1b4
 8000f14:	0800b1bc 	.word	0x0800b1bc
 8000f18:	0800b1c4 	.word	0x0800b1c4
 8000f1c:	0800b1cc 	.word	0x0800b1cc
 8000f20:	0800b1d4 	.word	0x0800b1d4
 8000f24:	0800b1dc 	.word	0x0800b1dc

08000f28 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8000f30:	f006 faa6 	bl	8007480 <osKernelGetTickCount>
 8000f34:	60f8      	str	r0, [r7, #12]

	fanInit();
 8000f36:	f7ff fd39 	bl	80009ac <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f40:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f006 fb43 	bl	80075ce <osDelayUntil>
	fanOn(30);
 8000f48:	201e      	movs	r0, #30
 8000f4a:	f7ff fd39 	bl	80009c0 <fanOn>
	//htim1.Instance->CCR1 = 50;
	printf("task5\n");
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <StartTask05+0x30>)
 8000f50:	f009 faa0 	bl	800a494 <puts>
  {
 8000f54:	e7f1      	b.n	8000f3a <StartTask05+0x12>
 8000f56:	bf00      	nop
 8000f58:	0800b1e4 	.word	0x0800b1e4

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a39      	ldr	r2, [pc, #228]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a32      	ldr	r2, [pc, #200]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_GPIO_Init+0x158>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8000ffe:	2200      	movs	r2, #0
 8001000:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8001004:	482c      	ldr	r0, [pc, #176]	; (80010b8 <MX_GPIO_Init+0x15c>)
 8001006:	f002 fcfb 	bl	8003a00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f244 0110 	movw	r1, #16400	; 0x4010
 8001010:	482a      	ldr	r0, [pc, #168]	; (80010bc <MX_GPIO_Init+0x160>)
 8001012:	f002 fcf5 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2104      	movs	r1, #4
 800101a:	4829      	ldr	r0, [pc, #164]	; (80010c0 <MX_GPIO_Init+0x164>)
 800101c:	f002 fcf0 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8001020:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8001024:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	481f      	ldr	r0, [pc, #124]	; (80010b8 <MX_GPIO_Init+0x15c>)
 800103a:	f002 fb45 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <MX_GPIO_Init+0x15c>)
 8001052:	f002 fb39 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001056:	23f0      	movs	r3, #240	; 0xf0
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4816      	ldr	r0, [pc, #88]	; (80010c4 <MX_GPIO_Init+0x168>)
 800106c:	f002 fb2c 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8001070:	f244 0310 	movw	r3, #16400	; 0x4010
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_GPIO_Init+0x160>)
 800108a:	f002 fb1d 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108e:	2304      	movs	r3, #4
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_GPIO_Init+0x164>)
 80010a6:	f002 fb0f 	bl	80036c8 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40020000 	.word	0x40020000

080010c8 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010ce:	4a19      	ldr	r2, [pc, #100]	; (8001134 <MX_I2C1_SMBUS_Init+0x6c>)
 80010d0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MX_I2C1_SMBUS_Init+0x70>)
 80010d6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 8001106:	2202      	movs	r2, #2
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 800110c:	f003 f936 	bl	800437c <HAL_SMBUS_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 8001116:	f000 f909 	bl	800132c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_I2C1_SMBUS_Init+0x68>)
 800111c:	f003 f9e4 	bl	80044e8 <HAL_SMBUS_EnableAlert_IT>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 8001126:	f000 f901 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000348 	.word	0x20000348
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_SMBUS_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12b      	bne.n	80011b6 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_SMBUS_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_SMBUS_MspInit+0x88>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_SMBUS_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800117a:	23e0      	movs	r3, #224	; 0xe0
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118a:	2304      	movs	r3, #4
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <HAL_SMBUS_MspInit+0x8c>)
 8001196:	f002 fa97 	bl	80036c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_SMBUS_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_SMBUS_MspInit+0x88>)
 80011a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_SMBUS_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <_write+0x24>)
 80011e2:	f004 ff3e 	bl	8006062 <HAL_UART_Transmit>
	return (len);
 80011e6:	687b      	ldr	r3, [r7, #4]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000052c 	.word	0x2000052c

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f8:	f000 fea8 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fc:	f000 f81a 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001200:	f7ff feac 	bl	8000f5c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001204:	f7ff fa6c 	bl	80006e0 <MX_CAN1_Init>

  MX_TIM1_Init();
 8001208:	f000 fa32 	bl	8001670 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 800120c:	f7ff ff5c 	bl	80010c8 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8001210:	f7ff fb96 	bl	8000940 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001214:	f000 fd86 	bl	8001d24 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001218:	f000 fd5a 	bl	8001cd0 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800121c:	f000 fb56 	bl	80018cc <MX_TIM8_Init>
  MX_TIM3_Init();
 8001220:	f000 fad8 	bl	80017d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001224:	f006 f8e2 	bl	80073ec <osKernelInitialize>
  MX_FREERTOS_Init();
 8001228:	f7ff fbe8 	bl	80009fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800122c:	f006 f902 	bl	8007434 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001230:	e7fe      	b.n	8001230 <main+0x3c>
	...

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f009 f803 	bl	800a24e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <SystemClock_Config+0xcc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <SystemClock_Config+0xd0>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001290:	2301      	movs	r3, #1
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80012a4:	2306      	movs	r3, #6
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012a8:	23a8      	movs	r3, #168	; 0xa8
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fbd5 	bl	8003a68 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c4:	f000 f832 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2105      	movs	r1, #5
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fe36 	bl	8003f58 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012f2:	f000 f81b 	bl	800132c <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800131a:	f000 fe39 	bl	8001f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40001000 	.word	0x40001000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_UART_RxCpltCallback+0x3c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d109      	bne.n	800135e <HAL_UART_RxCpltCallback+0x26>
 800134a:	220c      	movs	r2, #12
 800134c:	490a      	ldr	r1, [pc, #40]	; (8001378 <HAL_UART_RxCpltCallback+0x40>)
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_UART_RxCpltCallback+0x44>)
 8001350:	f004 ff19 	bl	8006186 <HAL_UART_Receive_IT>
 8001354:	4603      	mov	r3, r0
 8001356:	4619      	mov	r1, r3
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <HAL_UART_RxCpltCallback+0x48>)
 800135a:	f009 f815 	bl	800a388 <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_UART_RxCpltCallback+0x4c>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <HAL_UART_RxCpltCallback+0x50>)
 8001366:	f009 f895 	bl	800a494 <puts>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004800 	.word	0x40004800
 8001378:	2000039c 	.word	0x2000039c
 800137c:	20000570 	.word	0x20000570
 8001380:	0800b1ec 	.word	0x0800b1ec
 8001384:	20000398 	.word	0x20000398
 8001388:	0800b200 	.word	0x0800b200

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_MspInit+0x54>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <HAL_MspInit+0x54>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_MspInit+0x54>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_MspInit+0x54>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_MspInit+0x54>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_MspInit+0x54>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
 80013d2:	f001 fd4d 	bl	8002e70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2036      	movs	r0, #54	; 0x36
 80013fa:	f001 fd39 	bl	8002e70 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013fe:	2036      	movs	r0, #54	; 0x36
 8001400:	f001 fd52 	bl	8002ea8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_InitTick+0xa4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_InitTick+0xa4>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6413      	str	r3, [r2, #64]	; 0x40
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_InitTick+0xa4>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001420:	f107 0210 	add.w	r2, r7, #16
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f002 ff74 	bl	8004318 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001430:	f002 ff4a 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8001434:	4603      	mov	r3, r0
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800143a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143c:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_InitTick+0xa8>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	3b01      	subs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_InitTick+0xac>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_InitTick+0xb0>)
 800144c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_InitTick+0xac>)
 8001450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001454:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_InitTick+0xac>)
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_InitTick+0xac>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_InitTick+0xac>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <HAL_InitTick+0xac>)
 800146a:	f003 f85d 	bl	8004528 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d104      	bne.n	800147e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <HAL_InitTick+0xac>)
 8001476:	f003 f8a7 	bl	80045c8 <HAL_TIM_Base_Start_IT>
 800147a:	4603      	mov	r3, r0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3730      	adds	r7, #48	; 0x30
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	431bde83 	.word	0x431bde83
 8001490:	200003a8 	.word	0x200003a8
 8001494:	40001000 	.word	0x40001000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Stream3_IRQHandler+0x10>)
 80014ca:	f001 fe93 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200005b4 	.word	0x200005b4

080014d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <CAN1_RX0_IRQHandler+0x10>)
 80014de:	f001 f9df 	bl	80028a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000308 	.word	0x20000308

080014ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <USART2_IRQHandler+0x10>)
 80014f2:	f004 fef7 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000052c 	.word	0x2000052c

08001500 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART3_IRQHandler+0x10>)
 8001506:	f004 feed 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000570 	.word	0x20000570

08001514 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM6_DAC_IRQHandler+0x10>)
 800151a:	f003 fbfe 	bl	8004d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003a8 	.word	0x200003a8

08001528 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA2_Stream2_IRQHandler+0x10>)
 800152e:	f001 fe61 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200004cc 	.word	0x200004cc

0800153c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e00a      	b.n	8001564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800154e:	f3af 8000 	nop.w
 8001552:	4601      	mov	r1, r0
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf0      	blt.n	800154e <_read+0x12>
	}

return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	return -1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159e:	605a      	str	r2, [r3, #4]
	return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <_isatty>:

int _isatty(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
	return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f008 fcec 	bl	8009fec <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20020000 	.word	0x20020000
 8001640:	00000400 	.word	0x00000400
 8001644:	200003f0 	.word	0x200003f0
 8001648:	20005038 	.word	0x20005038

0800164c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b096      	sub	sp, #88	; 0x58
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2220      	movs	r2, #32
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f008 fdd0 	bl	800a24e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016b0:	4a47      	ldr	r2, [pc, #284]	; (80017d0 <MX_TIM1_Init+0x160>)
 80016b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016b6:	f240 628f 	movw	r2, #1679	; 0x68f
 80016ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b43      	ldr	r3, [pc, #268]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016c4:	2263      	movs	r2, #99	; 0x63
 80016c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016da:	483c      	ldr	r0, [pc, #240]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016dc:	f002 ffe4 	bl	80046a8 <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016e6:	f7ff fe21 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016ea:	4838      	ldr	r0, [pc, #224]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016ec:	f003 fabc 	bl	8004c68 <HAL_TIM_IC_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016f6:	f7ff fe19 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001706:	4619      	mov	r1, r3
 8001708:	4830      	ldr	r0, [pc, #192]	; (80017cc <MX_TIM1_Init+0x15c>)
 800170a:	f004 fb7b 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001714:	f7ff fe0a 	bl	800132c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001718:	2360      	movs	r3, #96	; 0x60
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	4823      	ldr	r0, [pc, #140]	; (80017cc <MX_TIM1_Init+0x15c>)
 800173e:	f003 fc91 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001748:	f7ff fdf0 	bl	800132c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	2204      	movs	r2, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <MX_TIM1_Init+0x15c>)
 8001766:	f003 fbe0 	bl	8004f2a <HAL_TIM_IC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001770:	f7ff fddc 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	2208      	movs	r2, #8
 800177a:	4619      	mov	r1, r3
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <MX_TIM1_Init+0x15c>)
 800177e:	f003 fbd4 	bl	8004f2a <HAL_TIM_IC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001788:	f7ff fdd0 	bl	800132c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM1_Init+0x15c>)
 80017b0:	f004 fba4 	bl	8005efc <HAL_TIMEx_ConfigBreakDeadTime>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80017ba:	f7ff fdb7 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM1_Init+0x15c>)
 80017c0:	f000 fa22 	bl	8001c08 <HAL_TIM_MspPostInit>

}
 80017c4:	bf00      	nop
 80017c6:	3758      	adds	r7, #88	; 0x58
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200003f4 	.word	0x200003f4
 80017d0:	40010000 	.word	0x40010000

080017d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001800:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <MX_TIM3_Init+0xf4>)
 8001802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <MX_TIM3_Init+0xf0>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <MX_TIM3_Init+0xf0>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001824:	4827      	ldr	r0, [pc, #156]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001826:	f002 fe7f 	bl	8004528 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001830:	f7ff fd7c 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4619      	mov	r1, r3
 8001840:	4820      	ldr	r0, [pc, #128]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001842:	f003 fcd1 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800184c:	f7ff fd6e 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001852:	f003 fa09 	bl	8004c68 <HAL_TIM_IC_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800185c:	f7ff fd66 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4619      	mov	r1, r3
 800186e:	4815      	ldr	r0, [pc, #84]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001870:	f004 fac8 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800187a:	f7ff fd57 	bl	800132c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001882:	2301      	movs	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <MX_TIM3_Init+0xf0>)
 8001896:	f003 fb48 	bl	8004f2a <HAL_TIM_IC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80018a0:	f7ff fd44 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	220c      	movs	r2, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_TIM3_Init+0xf0>)
 80018ac:	f003 fb3d 	bl	8004f2a <HAL_TIM_IC_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80018b6:	f7ff fd39 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000043c 	.word	0x2000043c
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b096      	sub	sp, #88	; 0x58
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2220      	movs	r2, #32
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f008 fca2 	bl	800a24e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <MX_TIM8_Init+0x180>)
 800190c:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <MX_TIM8_Init+0x184>)
 800190e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001910:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001912:	2201      	movs	r2, #1
 8001914:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 800191c:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <MX_TIM8_Init+0x180>)
 800191e:	2268      	movs	r2, #104	; 0x68
 8001920:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <MX_TIM8_Init+0x180>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001934:	4845      	ldr	r0, [pc, #276]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001936:	f002 fdf7 	bl	8004528 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001940:	f7ff fcf4 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800194e:	4619      	mov	r1, r3
 8001950:	483e      	ldr	r0, [pc, #248]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001952:	f003 fc49 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800195c:	f7ff fce6 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001960:	483a      	ldr	r0, [pc, #232]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001962:	f002 fea1 	bl	80046a8 <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800196c:	f7ff fcde 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800197c:	4619      	mov	r1, r3
 800197e:	4833      	ldr	r0, [pc, #204]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001980:	f004 fa40 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800198a:	f7ff fccf 	bl	800132c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198e:	2360      	movs	r3, #96	; 0x60
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4826      	ldr	r0, [pc, #152]	; (8001a4c <MX_TIM8_Init+0x180>)
 80019b4:	f003 fb56 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80019be:	f7ff fcb5 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	2204      	movs	r2, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4820      	ldr	r0, [pc, #128]	; (8001a4c <MX_TIM8_Init+0x180>)
 80019cc:	f003 fb4a 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80019d6:	f7ff fca9 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	2208      	movs	r2, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	481a      	ldr	r0, [pc, #104]	; (8001a4c <MX_TIM8_Init+0x180>)
 80019e4:	f003 fb3e 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80019ee:	f7ff fc9d 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	220c      	movs	r2, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	4814      	ldr	r0, [pc, #80]	; (8001a4c <MX_TIM8_Init+0x180>)
 80019fc:	f003 fb32 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a06:	f7ff fc91 	bl	800132c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001a2e:	f004 fa65 	bl	8005efc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001a38:	f7ff fc78 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM8_Init+0x180>)
 8001a3e:	f000 f8e3 	bl	8001c08 <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3758      	adds	r7, #88	; 0x58
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000484 	.word	0x20000484
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12c      	bne.n	8001ad0 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_TIM_PWM_MspInit+0x88>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_TIM_PWM_MspInit+0x88>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_TIM_PWM_MspInit+0x88>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_TIM_PWM_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_TIM_PWM_MspInit+0x88>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_TIM_PWM_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001acc:	f001 fdfc 	bl	80036c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_TIM_Base_MspInit+0x10c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12c      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a39      	ldr	r2, [pc, #228]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a32      	ldr	r2, [pc, #200]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4827      	ldr	r0, [pc, #156]	; (8001bf8 <HAL_TIM_Base_MspInit+0x114>)
 8001b5a:	f001 fdb5 	bl	80036c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001b5e:	e043      	b.n	8001be8 <HAL_TIM_Base_MspInit+0x104>
  else if(tim_baseHandle->Instance==TIM8)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_TIM_Base_MspInit+0x118>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13e      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_TIM_Base_MspInit+0x110>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001b88:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_TIM_Base_MspInit+0x120>)
 8001b8a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001b8e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001b92:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bae:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb6:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbe:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001bce:	f001 f979 	bl	8002ec4 <HAL_DMA_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 8001bd8:	f7ff fba8 	bl	800132c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_TIM_Base_MspInit+0x11c>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40010400 	.word	0x40010400
 8001c00:	200004cc 	.word	0x200004cc
 8001c04:	40026440 	.word	0x40026440

08001c08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_TIM_MspPostInit+0xb4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d11f      	bne.n	8001c6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_TIM_MspPostInit+0xb8>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_TIM_MspPostInit+0xb8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_TIM_MspPostInit+0xb8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <HAL_TIM_MspPostInit+0xbc>)
 8001c64:	f001 fd30 	bl	80036c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c68:	e023      	b.n	8001cb2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_TIM_MspPostInit+0xc0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d11e      	bne.n	8001cb2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_TIM_MspPostInit+0xb8>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_TIM_MspPostInit+0xb8>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_TIM_MspPostInit+0xb8>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c90:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <HAL_TIM_MspPostInit+0xc4>)
 8001cae:	f001 fd0b 	bl	80036c8 <HAL_GPIO_Init>
}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40010400 	.word	0x40010400
 8001ccc:	40020800 	.word	0x40020800

08001cd0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_USART2_UART_Init+0x50>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_USART2_UART_Init+0x4c>)
 8001d08:	f004 f95e 	bl	8005fc8 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d12:	f7ff fb0b 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000052c 	.word	0x2000052c
 8001d20:	40004400 	.word	0x40004400

08001d24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_USART3_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART3_UART_Init+0x4c>)
 8001d5c:	f004 f934 	bl	8005fc8 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f7ff fae1 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000570 	.word	0x20000570
 8001d74:	40004800 	.word	0x40004800

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_UART_MspInit+0x164>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d134      	bne.n	8001e04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a4f      	ldr	r2, [pc, #316]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a48      	ldr	r2, [pc, #288]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de2:	2307      	movs	r3, #7
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	483d      	ldr	r0, [pc, #244]	; (8001ee4 <HAL_UART_MspInit+0x16c>)
 8001dee:	f001 fc6b 	bl	80036c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	2026      	movs	r0, #38	; 0x26
 8001df8:	f001 f83a 	bl	8002e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfc:	2026      	movs	r0, #38	; 0x26
 8001dfe:	f001 f853 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e02:	e067      	b.n	8001ed4 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <HAL_UART_MspInit+0x170>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d162      	bne.n	8001ed4 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_UART_MspInit+0x168>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4822      	ldr	r0, [pc, #136]	; (8001eec <HAL_UART_MspInit+0x174>)
 8001e64:	f001 fc30 	bl	80036c8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_UART_MspInit+0x17c>)
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e74:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e88:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001eaa:	f001 f80b 	bl	8002ec4 <HAL_DMA_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001eb4:	f7ff fa3a 	bl	800132c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <HAL_UART_MspInit+0x178>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2105      	movs	r1, #5
 8001ec8:	2027      	movs	r0, #39	; 0x27
 8001eca:	f000 ffd1 	bl	8002e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ece:	2027      	movs	r0, #39	; 0x27
 8001ed0:	f000 ffea 	bl	8002ea8 <HAL_NVIC_EnableIRQ>
}
 8001ed4:	bf00      	nop
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40004800 	.word	0x40004800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	200005b4 	.word	0x200005b4
 8001ef4:	40026058 	.word	0x40026058

08001ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efe:	490e      	ldr	r1, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f14:	4c0b      	ldr	r4, [pc, #44]	; (8001f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f22:	f7ff fb93 	bl	800164c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f26:	f008 f95d 	bl	800a1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7ff f963 	bl	80011f4 <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001f3c:	0800b470 	.word	0x0800b470
  ldr r2, =_sbss
 8001f40:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001f44:	20005038 	.word	0x20005038

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 ff70 	bl	8002e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f7ff fa32 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fa04 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000038 	.word	0x20000038
 8001fb4:	20000614 	.word	0x20000614

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000614 	.word	0x20000614

08001fd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0ed      	b.n	80021be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fbac 	bl	800074c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002004:	f7ff ffd8 	bl	8001fb8 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800200a:	e012      	b.n	8002032 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800200c:	f7ff ffd4 	bl	8001fb8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b0a      	cmp	r3, #10
 8002018:	d90b      	bls.n	8002032 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2205      	movs	r2, #5
 800202a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0c5      	b.n	80021be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0e5      	beq.n	800200c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0202 	bic.w	r2, r2, #2
 800204e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7ff ffb2 	bl	8001fb8 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002056:	e012      	b.n	800207e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002058:	f7ff ffae 	bl	8001fb8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d90b      	bls.n	800207e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2205      	movs	r2, #5
 8002076:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e09f      	b.n	80021be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e5      	bne.n	8002058 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7e1b      	ldrb	r3, [r3, #24]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d108      	bne.n	80020a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e007      	b.n	80020b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7e5b      	ldrb	r3, [r3, #25]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d108      	bne.n	80020d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e007      	b.n	80020e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e9b      	ldrb	r3, [r3, #26]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e007      	b.n	800210a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0220 	bic.w	r2, r2, #32
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7edb      	ldrb	r3, [r3, #27]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0210 	bic.w	r2, r2, #16
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e007      	b.n	8002134 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0210 	orr.w	r2, r2, #16
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7f1b      	ldrb	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0208 	orr.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7f5b      	ldrb	r3, [r3, #29]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0204 	orr.w	r2, r2, #4
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	ea42 0103 	orr.w	r1, r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d003      	beq.n	80021ee <HAL_CAN_ConfigFilter+0x26>
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	f040 80be 	bne.w	800236a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_CAN_ConfigFilter+0x1bc>)
 80021f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002208:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	431a      	orrs	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2201      	movs	r2, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	401a      	ands	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d123      	bne.n	8002298 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002272:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3248      	adds	r2, #72	; 0x48
 8002278:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800228c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800228e:	6979      	ldr	r1, [r7, #20]
 8002290:	3348      	adds	r3, #72	; 0x48
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d122      	bne.n	80022e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3248      	adds	r2, #72	; 0x48
 80022c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022dc:	6979      	ldr	r1, [r7, #20]
 80022de:	3348      	adds	r3, #72	; 0x48
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002300:	e007      	b.n	8002312 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	431a      	orrs	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	401a      	ands	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800232c:	e007      	b.n	800233e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	431a      	orrs	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	431a      	orrs	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800235c:	f023 0201 	bic.w	r2, r3, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e006      	b.n	8002378 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40006400 	.word	0x40006400

08002388 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d12e      	bne.n	80023fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fe00 	bl	8001fb8 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023ba:	e012      	b.n	80023e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023bc:	f7ff fdfc 	bl	8001fb8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b0a      	cmp	r3, #10
 80023c8:	d90b      	bls.n	80023e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2205      	movs	r2, #5
 80023da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e012      	b.n	8002408 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e5      	bne.n	80023bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e006      	b.n	8002408 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800242e:	7ffb      	ldrb	r3, [r7, #31]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d003      	beq.n	800243c <HAL_CAN_AddTxMessage+0x2c>
 8002434:	7ffb      	ldrb	r3, [r7, #31]
 8002436:	2b02      	cmp	r3, #2
 8002438:	f040 80b8 	bne.w	80025ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a0 	beq.w	800259c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	0e1b      	lsrs	r3, r3, #24
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d907      	bls.n	800247c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e09e      	b.n	80025ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800247c:	2201      	movs	r2, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	409a      	lsls	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	6809      	ldr	r1, [r1, #0]
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3318      	adds	r3, #24
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	440b      	add	r3, r1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e00f      	b.n	80024ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ba:	68f9      	ldr	r1, [r7, #12]
 80024bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3318      	adds	r3, #24
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	440b      	add	r3, r1
 80024c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3318      	adds	r3, #24
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	440b      	add	r3, r1
 80024da:	3304      	adds	r3, #4
 80024dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	7d1b      	ldrb	r3, [r3, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d111      	bne.n	800250a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3318      	adds	r3, #24
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	6811      	ldr	r1, [r2, #0]
 80024fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3318      	adds	r3, #24
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	440b      	add	r3, r1
 8002506:	3304      	adds	r3, #4
 8002508:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3307      	adds	r3, #7
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	061a      	lsls	r2, r3, #24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3306      	adds	r3, #6
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3305      	adds	r3, #5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	4313      	orrs	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	3204      	adds	r2, #4
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	4610      	mov	r0, r2
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6811      	ldr	r1, [r2, #0]
 8002532:	ea43 0200 	orr.w	r2, r3, r0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	440b      	add	r3, r1
 800253c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002540:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3303      	adds	r3, #3
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	061a      	lsls	r2, r3, #24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3302      	adds	r3, #2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	4313      	orrs	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	4610      	mov	r0, r2
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	6811      	ldr	r1, [r2, #0]
 8002568:	ea43 0200 	orr.w	r2, r3, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	440b      	add	r3, r1
 8002572:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002576:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3318      	adds	r3, #24
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3318      	adds	r3, #24
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e00e      	b.n	80025ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e006      	b.n	80025ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d002      	beq.n	80025e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d11d      	bne.n	8002622 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002644:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d003      	beq.n	8002654 <HAL_CAN_GetRxMessage+0x24>
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b02      	cmp	r3, #2
 8002650:	f040 80f3 	bne.w	800283a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10e      	bne.n	8002678 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d116      	bne.n	8002696 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0e7      	b.n	8002848 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0d8      	b.n	8002848 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	331b      	adds	r3, #27
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0204 	and.w	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	331b      	adds	r3, #27
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0d5b      	lsrs	r3, r3, #21
 80026c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e00b      	b.n	80026e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	331b      	adds	r3, #27
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	08db      	lsrs	r3, r3, #3
 80026de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	331b      	adds	r3, #27
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0202 	and.w	r2, r3, #2
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	331b      	adds	r3, #27
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4413      	add	r3, r2
 8002708:	3304      	adds	r3, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 020f 	and.w	r2, r3, #15
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	331b      	adds	r3, #27
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	4413      	add	r3, r2
 8002720:	3304      	adds	r3, #4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	b2da      	uxtb	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	331b      	adds	r3, #27
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	b29a      	uxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0a1a      	lsrs	r2, r3, #8
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0c1a      	lsrs	r2, r3, #16
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	3302      	adds	r3, #2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0e1a      	lsrs	r2, r3, #24
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3303      	adds	r3, #3
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3304      	adds	r3, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0a1a      	lsrs	r2, r3, #8
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3305      	adds	r3, #5
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0c1a      	lsrs	r2, r3, #16
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3306      	adds	r3, #6
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e1a      	lsrs	r2, r3, #24
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3307      	adds	r3, #7
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d108      	bne.n	8002826 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	e007      	b.n	8002836 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e006      	b.n	8002848 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002864:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d002      	beq.n	8002872 <HAL_CAN_ActivateNotification+0x1e>
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d109      	bne.n	8002886 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6959      	ldr	r1, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e006      	b.n	8002894 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d07c      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f983 	bl	8002c0e <HAL_CAN_TxMailbox0CompleteCallback>
 8002908:	e016      	b.n	8002938 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	e00c      	b.n	8002938 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	e002      	b.n	8002938 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f989 	bl	8002c4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d024      	beq.n	800298c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f963 	bl	8002c22 <HAL_CAN_TxMailbox1CompleteCallback>
 800295c:	e016      	b.n	800298c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	e00c      	b.n	800298c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	e002      	b.n	800298c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f969 	bl	8002c5e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d024      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800299e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f943 	bl	8002c36 <HAL_CAN_TxMailbox2CompleteCallback>
 80029b0:	e016      	b.n	80029e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	e00c      	b.n	80029e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	e002      	b.n	80029e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f949 	bl	8002c72 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2210      	movs	r2, #16
 8002a02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f930 	bl	8002c86 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd ff5e 	bl	8000900 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2210      	movs	r2, #16
 8002a66:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2208      	movs	r2, #8
 8002a82:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f912 	bl	8002cae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8f9 	bl	8002c9a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8fc 	bl	8002cc2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8f5 	bl	8002cd6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d07b      	beq.n	8002bee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d072      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d043      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03e      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b6e:	2b60      	cmp	r3, #96	; 0x60
 8002b70:	d02b      	beq.n	8002bca <HAL_CAN_IRQHandler+0x32a>
 8002b72:	2b60      	cmp	r3, #96	; 0x60
 8002b74:	d82e      	bhi.n	8002bd4 <HAL_CAN_IRQHandler+0x334>
 8002b76:	2b50      	cmp	r3, #80	; 0x50
 8002b78:	d022      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x320>
 8002b7a:	2b50      	cmp	r3, #80	; 0x50
 8002b7c:	d82a      	bhi.n	8002bd4 <HAL_CAN_IRQHandler+0x334>
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d019      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x316>
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d826      	bhi.n	8002bd4 <HAL_CAN_IRQHandler+0x334>
 8002b86:	2b30      	cmp	r3, #48	; 0x30
 8002b88:	d010      	beq.n	8002bac <HAL_CAN_IRQHandler+0x30c>
 8002b8a:	2b30      	cmp	r3, #48	; 0x30
 8002b8c:	d822      	bhi.n	8002bd4 <HAL_CAN_IRQHandler+0x334>
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d002      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x2f8>
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d005      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b96:	e01d      	b.n	8002bd4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba0:	e019      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f043 0310 	orr.w	r3, r3, #16
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002baa:	e014      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb4:	e00f      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bbe:	e00a      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc8:	e005      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd2:	e000      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002bd4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002be4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2204      	movs	r2, #4
 8002bec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f872 	bl	8002cea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	; 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <__NVIC_EnableIRQ+0x38>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
         );
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ff4c 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e82:	f7ff ff61 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	6978      	ldr	r0, [r7, #20]
 8002e8e:	f7ff ffb1 	bl	8002df4 <NVIC_EncodePriority>
 8002e92:	4602      	mov	r2, r0
 8002e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff80 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ea0:	bf00      	nop
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff54 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff f872 	bl	8001fb8 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e099      	b.n	8003014 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f00:	e00f      	b.n	8002f22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f02:	f7ff f859 	bl	8001fb8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d908      	bls.n	8002f22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e078      	b.n	8003014 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e8      	bne.n	8002f02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4b38      	ldr	r3, [pc, #224]	; (800301c <HAL_DMA_Init+0x158>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d107      	bne.n	8002f8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	4313      	orrs	r3, r2
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0307 	bic.w	r3, r3, #7
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d117      	bne.n	8002fe6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb01 	bl	80035d0 <DMA_CheckFifoParam>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e016      	b.n	8003014 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fab8 	bl	8003564 <DMA_CalcBaseAndBitshift>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	223f      	movs	r2, #63	; 0x3f
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	f010803f 	.word	0xf010803f

08003020 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_DMA_Start_IT+0x26>
 8003042:	2302      	movs	r3, #2
 8003044:	e040      	b.n	80030c8 <HAL_DMA_Start_IT+0xa8>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d12f      	bne.n	80030ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fa4a 	bl	8003508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	223f      	movs	r2, #63	; 0x3f
 800307a:	409a      	lsls	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0216 	orr.w	r2, r2, #22
 800308e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e005      	b.n	80030c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030de:	f7fe ff6b 	bl	8001fb8 <HAL_GetTick>
 80030e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d008      	beq.n	8003102 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e052      	b.n	80031a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0216 	bic.w	r2, r2, #22
 8003110:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003120:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_DMA_Abort+0x62>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0208 	bic.w	r2, r2, #8
 8003140:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003152:	e013      	b.n	800317c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003154:	f7fe ff30 	bl	8001fb8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b05      	cmp	r3, #5
 8003160:	d90c      	bls.n	800317c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e015      	b.n	80031a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e4      	bne.n	8003154 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	223f      	movs	r2, #63	; 0x3f
 8003190:	409a      	lsls	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d004      	beq.n	80031ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00c      	b.n	80031e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2205      	movs	r2, #5
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003200:	4b8e      	ldr	r3, [pc, #568]	; (800343c <HAL_DMA_IRQHandler+0x248>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a8e      	ldr	r2, [pc, #568]	; (8003440 <HAL_DMA_IRQHandler+0x24c>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	2208      	movs	r2, #8
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01a      	beq.n	8003260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2208      	movs	r2, #8
 800324e:	409a      	lsls	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2201      	movs	r2, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d012      	beq.n	8003296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2201      	movs	r2, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0202 	orr.w	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2204      	movs	r2, #4
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d012      	beq.n	80032cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2204      	movs	r2, #4
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2210      	movs	r2, #16
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d043      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03c      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2210      	movs	r2, #16
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d024      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	e01f      	b.n	8003364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
 8003334:	e016      	b.n	8003364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0208 	bic.w	r2, r2, #8
 8003352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	2220      	movs	r2, #32
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 808f 	beq.w	8003494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8087 	beq.w	8003494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2220      	movs	r2, #32
 800338c:	409a      	lsls	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b05      	cmp	r3, #5
 800339c:	d136      	bne.n	800340c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0216 	bic.w	r2, r2, #22
 80033ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_DMA_IRQHandler+0x1da>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0208 	bic.w	r2, r2, #8
 80033dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	223f      	movs	r2, #63	; 0x3f
 80033e4:	409a      	lsls	r2, r3
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d07e      	beq.n	8003500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
        }
        return;
 800340a:	e079      	b.n	8003500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	2b00      	cmp	r3, #0
 800342e:	d031      	beq.n	8003494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e02c      	b.n	8003494 <HAL_DMA_IRQHandler+0x2a0>
 800343a:	bf00      	nop
 800343c:	20000030 	.word	0x20000030
 8003440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e01e      	b.n	8003494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10f      	bne.n	8003484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0210 	bic.w	r2, r2, #16
 8003472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	2b00      	cmp	r3, #0
 800349a:	d032      	beq.n	8003502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2205      	movs	r2, #5
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d307      	bcc.n	80034dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f2      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x2cc>
 80034da:	e000      	b.n	80034de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
 80034fe:	e000      	b.n	8003502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003500:	bf00      	nop
    }
  }
}
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d108      	bne.n	8003548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003546:	e007      	b.n	8003558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3b10      	subs	r3, #16
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <DMA_CalcBaseAndBitshift+0x68>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d909      	bls.n	80035a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	659a      	str	r2, [r3, #88]	; 0x58
 80035a4:	e007      	b.n	80035b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	aaaaaaab 	.word	0xaaaaaaab
 80035cc:	0800b3c0 	.word	0x0800b3c0

080035d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11f      	bne.n	800362a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d856      	bhi.n	800369e <DMA_CheckFifoParam+0xce>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <DMA_CheckFifoParam+0x28>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800361b 	.word	0x0800361b
 8003600:	08003609 	.word	0x08003609
 8003604:	0800369f 	.word	0x0800369f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d046      	beq.n	80036a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e043      	b.n	80036a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003622:	d140      	bne.n	80036a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e03d      	b.n	80036a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d121      	bne.n	8003678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d837      	bhi.n	80036aa <DMA_CheckFifoParam+0xda>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <DMA_CheckFifoParam+0x70>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003657 	.word	0x08003657
 8003648:	08003651 	.word	0x08003651
 800364c:	08003669 	.word	0x08003669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e030      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d025      	beq.n	80036ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e022      	b.n	80036ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003670:	d11f      	bne.n	80036b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003676:	e01c      	b.n	80036b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d903      	bls.n	8003686 <DMA_CheckFifoParam+0xb6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d003      	beq.n	800368c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003684:	e018      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      break;
 800368a:	e015      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e00b      	b.n	80036b6 <DMA_CheckFifoParam+0xe6>
      break;
 800369e:	bf00      	nop
 80036a0:	e00a      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e008      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e006      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e004      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
    }
  } 
  
  return status; 
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e16b      	b.n	80039bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e4:	2201      	movs	r2, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	f040 815a 	bne.w	80039b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d005      	beq.n	800371a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	2b02      	cmp	r3, #2
 8003718:	d130      	bne.n	800377c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 0201 	and.w	r2, r3, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b03      	cmp	r3, #3
 8003786:	d017      	beq.n	80037b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d123      	bne.n	800380c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	220f      	movs	r2, #15
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	08da      	lsrs	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80b4 	beq.w	80039b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <HAL_GPIO_Init+0x30c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	4a5f      	ldr	r2, [pc, #380]	; (80039d4 <HAL_GPIO_Init+0x30c>)
 8003858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800385c:	6453      	str	r3, [r2, #68]	; 0x44
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_GPIO_Init+0x30c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800386a:	4a5b      	ldr	r2, [pc, #364]	; (80039d8 <HAL_GPIO_Init+0x310>)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	3302      	adds	r3, #2
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	220f      	movs	r2, #15
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a52      	ldr	r2, [pc, #328]	; (80039dc <HAL_GPIO_Init+0x314>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d02b      	beq.n	80038ee <HAL_GPIO_Init+0x226>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a51      	ldr	r2, [pc, #324]	; (80039e0 <HAL_GPIO_Init+0x318>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d025      	beq.n	80038ea <HAL_GPIO_Init+0x222>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a50      	ldr	r2, [pc, #320]	; (80039e4 <HAL_GPIO_Init+0x31c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <HAL_GPIO_Init+0x21e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4f      	ldr	r2, [pc, #316]	; (80039e8 <HAL_GPIO_Init+0x320>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x21a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4e      	ldr	r2, [pc, #312]	; (80039ec <HAL_GPIO_Init+0x324>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x216>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_GPIO_Init+0x328>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x212>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	; (80039f4 <HAL_GPIO_Init+0x32c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x20e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_GPIO_Init+0x330>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x20a>
 80038ce:	2307      	movs	r3, #7
 80038d0:	e00e      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038d2:	2308      	movs	r3, #8
 80038d4:	e00c      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038d6:	2306      	movs	r3, #6
 80038d8:	e00a      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038da:	2305      	movs	r3, #5
 80038dc:	e008      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038de:	2304      	movs	r3, #4
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e004      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e002      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_GPIO_Init+0x228>
 80038ee:	2300      	movs	r3, #0
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f002 0203 	and.w	r2, r2, #3
 80038f6:	0092      	lsls	r2, r2, #2
 80038f8:	4093      	lsls	r3, r2
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003900:	4935      	ldr	r1, [pc, #212]	; (80039d8 <HAL_GPIO_Init+0x310>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_GPIO_Init+0x334>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003932:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_GPIO_Init+0x334>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_GPIO_Init+0x334>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800395c:	4a27      	ldr	r2, [pc, #156]	; (80039fc <HAL_GPIO_Init+0x334>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <HAL_GPIO_Init+0x334>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003986:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_GPIO_Init+0x334>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_GPIO_Init+0x334>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b0:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_GPIO_Init+0x334>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	f67f ae90 	bls.w	80036e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40021c00 	.word	0x40021c00
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a1c:	e003      	b.n	8003a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	041a      	lsls	r2, r3, #16
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	400b      	ands	r3, r1
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	619a      	str	r2, [r3, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e267      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d075      	beq.n	8003b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a92:	4b85      	ldr	r3, [pc, #532]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b82      	ldr	r3, [pc, #520]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b7e      	ldr	r3, [pc, #504]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e242      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x74>
 8003ace:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a75      	ldr	r2, [pc, #468]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x98>
 8003ae6:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6c      	ldr	r2, [pc, #432]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003b00:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a68      	ldr	r2, [pc, #416]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fa4a 	bl	8001fb8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fe fa46 	bl	8001fb8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e207      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fa36 	bl	8001fb8 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe fa32 	bl	8001fb8 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1f3      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	4b51      	ldr	r3, [pc, #324]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8a:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d11c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1c7      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	e03a      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <HAL_RCC_OscConfig+0x244>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe f9eb 	bl	8001fb8 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fe f9e7 	bl	8001fb8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1a8      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4925      	ldr	r1, [pc, #148]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x244>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe f9ca 	bl	8001fb8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fe f9c6 	bl	8001fb8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e187      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d036      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fe f9aa 	bl	8001fb8 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fe f9a6 	bl	8001fb8 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e167      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x200>
 8003c86:	e01b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe f993 	bl	8001fb8 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	e00e      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fe f98f 	bl	8001fb8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d907      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e150      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	42470000 	.word	0x42470000
 8003cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ea      	bne.n	8003c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8097 	beq.w	8003dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	4b81      	ldr	r3, [pc, #516]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b7a      	ldr	r3, [pc, #488]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b77      	ldr	r3, [pc, #476]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b74      	ldr	r3, [pc, #464]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a73      	ldr	r2, [pc, #460]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fe f94f 	bl	8001fb8 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe f94b 	bl	8001fb8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e10c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2ea>
 8003d44:	4b64      	ldr	r3, [pc, #400]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a63      	ldr	r2, [pc, #396]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	e01c      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x30c>
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d74:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a57      	ldr	r2, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a54      	ldr	r2, [pc, #336]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fe f910 	bl	8001fb8 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fe f90c 	bl	8001fb8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0cb      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RCC_OscConfig+0x334>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fe f8fa 	bl	8001fb8 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fe f8f6 	bl	8001fb8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0b5      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ee      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a1 	beq.w	8003f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d05c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d141      	bne.n	8003e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe f8ca 	bl	8001fb8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe f8c6 	bl	8001fb8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e087      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	019b      	lsls	r3, r3, #6
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	491b      	ldr	r1, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe f89f 	bl	8001fb8 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe f89b 	bl	8001fb8 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e05c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x416>
 8003e9c:	e054      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe f888 	bl	8001fb8 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fe f884 	bl	8001fb8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e045      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x444>
 8003eca:	e03d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e038      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d11a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cc      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d90c      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d044      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d119      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d003      	beq.n	8004016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e067      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b37      	ldr	r3, [pc, #220]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4934      	ldr	r1, [pc, #208]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fd ffb6 	bl	8001fb8 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd ffb2 	bl	8001fb8 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d20c      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd f970 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023c00 	.word	0x40023c00
 8004114:	40023800 	.word	0x40023800
 8004118:	0800b3a8 	.word	0x0800b3a8
 800411c:	20000030 	.word	0x20000030
 8004120:	20000034 	.word	0x20000034

08004124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b090      	sub	sp, #64	; 0x40
 800412a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
 8004130:	2300      	movs	r3, #0
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004134:	2300      	movs	r3, #0
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d00d      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x40>
 8004148:	2b08      	cmp	r3, #8
 800414a:	f200 80a1 	bhi.w	8004290 <HAL_RCC_GetSysClockFreq+0x16c>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x34>
 8004152:	2b04      	cmp	r3, #4
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x3a>
 8004156:	e09b      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800415a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800415c:	e09b      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004162:	e098      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004164:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d028      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	627a      	str	r2, [r7, #36]	; 0x24
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800418c:	2100      	movs	r1, #0
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004190:	fb03 f201 	mul.w	r2, r3, r1
 8004194:	2300      	movs	r3, #0
 8004196:	fb00 f303 	mul.w	r3, r0, r3
 800419a:	4413      	add	r3, r2
 800419c:	4a43      	ldr	r2, [pc, #268]	; (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 800419e:	fba0 1202 	umull	r1, r2, r0, r2
 80041a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a4:	460a      	mov	r2, r1
 80041a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	4413      	add	r3, r2
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	2200      	movs	r2, #0
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	61fa      	str	r2, [r7, #28]
 80041b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041be:	f7fc f857 	bl	8000270 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4613      	mov	r3, r2
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ca:	e053      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041cc:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	2200      	movs	r2, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	617a      	str	r2, [r7, #20]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041de:	f04f 0b00 	mov.w	fp, #0
 80041e2:	4652      	mov	r2, sl
 80041e4:	465b      	mov	r3, fp
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	ebb2 080a 	subs.w	r8, r2, sl
 80041fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800420e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004216:	ebb2 0408 	subs.w	r4, r2, r8
 800421a:	eb63 0509 	sbc.w	r5, r3, r9
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	00eb      	lsls	r3, r5, #3
 8004228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422c:	00e2      	lsls	r2, r4, #3
 800422e:	4614      	mov	r4, r2
 8004230:	461d      	mov	r5, r3
 8004232:	eb14 030a 	adds.w	r3, r4, sl
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	eb45 030b 	adc.w	r3, r5, fp
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424a:	4629      	mov	r1, r5
 800424c:	028b      	lsls	r3, r1, #10
 800424e:	4621      	mov	r1, r4
 8004250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004254:	4621      	mov	r1, r4
 8004256:	028a      	lsls	r2, r1, #10
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	2200      	movs	r2, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	60fa      	str	r2, [r7, #12]
 8004264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004268:	f7fc f802 	bl	8000270 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4613      	mov	r3, r2
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	3301      	adds	r3, #1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004298:	4618      	mov	r0, r3
 800429a:	3740      	adds	r7, #64	; 0x40
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	00b71b00 	.word	0x00b71b00

080042b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000030 	.word	0x20000030

080042c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042cc:	f7ff fff0 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	0800b3b8 	.word	0x0800b3b8

080042f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f4:	f7ff ffdc 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0b5b      	lsrs	r3, r3, #13
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	0800b3b8 	.word	0x0800b3b8

08004318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	220f      	movs	r2, #15
 8004326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0203 	and.w	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_GetClockConfig+0x5c>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <HAL_RCC_GetClockConfig+0x60>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0207 	and.w	r2, r3, #7
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
 8004378:	40023c00 	.word	0x40023c00

0800437c <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0a1      	b.n	80044da <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fc fec6 	bl	800113c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7ff ff7e 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 80043cc:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4a44      	ldr	r2, [pc, #272]	; (80044e4 <HAL_SMBUS_Init+0x168>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	0c9b      	lsrs	r3, r3, #18
 80043d8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800440e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6852      	ldr	r2, [r2, #4]
 8004416:	0052      	lsls	r2, r2, #1
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	fbb1 f1f2 	udiv	r1, r1, r2
 800441e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004422:	400a      	ands	r2, r1
 8004424:	2a00      	cmp	r2, #0
 8004426:	d006      	beq.n	8004436 <HAL_SMBUS_Init+0xba>
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6852      	ldr	r2, [r2, #4]
 800442c:	0052      	lsls	r2, r2, #1
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	fbb1 f2f2 	udiv	r2, r1, r2
 8004434:	e000      	b.n	8004438 <HAL_SMBUS_Init+0xbc>
 8004436:	2204      	movs	r2, #4
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	6809      	ldr	r1, [r1, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6911      	ldr	r1, [r2, #16]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	4311      	orrs	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	430b      	orrs	r3, r1
 8004486:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	431bde83 	.word	0x431bde83

080044e8 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044fe:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8004508:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004518:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e041      	b.n	80045be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fac8 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f001 f812 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d001      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e04e      	b.n	800467e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a23      	ldr	r2, [pc, #140]	; (800468c <HAL_TIM_Base_Start_IT+0xc4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d022      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460a:	d01d      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_TIM_Base_Start_IT+0xc8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <HAL_TIM_Base_Start_IT+0xcc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <HAL_TIM_Base_Start_IT+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_TIM_Base_Start_IT+0xd4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d111      	bne.n	800466c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b06      	cmp	r3, #6
 8004658:	d010      	beq.n	800467c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466a:	e007      	b.n	800467c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40010400 	.word	0x40010400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40001800 	.word	0x40001800

080046a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e041      	b.n	800473e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd f9c0 	bl	8001a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f000 ff52 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <HAL_TIM_PWM_Start+0x24>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e022      	b.n	80047b2 <HAL_TIM_PWM_Start+0x6a>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d109      	bne.n	8004786 <HAL_TIM_PWM_Start+0x3e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e015      	b.n	80047b2 <HAL_TIM_PWM_Start+0x6a>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d109      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x58>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e008      	b.n	80047b2 <HAL_TIM_PWM_Start+0x6a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07c      	b.n	80048b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start+0x82>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	e013      	b.n	80047f2 <HAL_TIM_PWM_Start+0xaa>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start+0x92>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	e00b      	b.n	80047f2 <HAL_TIM_PWM_Start+0xaa>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0xa2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e8:	e003      	b.n	80047f2 <HAL_TIM_PWM_Start+0xaa>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2201      	movs	r2, #1
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 fadc 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2d      	ldr	r2, [pc, #180]	; (80048bc <HAL_TIM_PWM_Start+0x174>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_TIM_PWM_Start+0xcc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2c      	ldr	r2, [pc, #176]	; (80048c0 <HAL_TIM_PWM_Start+0x178>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_TIM_PWM_Start+0xd0>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_TIM_PWM_Start+0xd2>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a22      	ldr	r2, [pc, #136]	; (80048bc <HAL_TIM_PWM_Start+0x174>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d01d      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_TIM_PWM_Start+0x17c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_TIM_PWM_Start+0x180>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_TIM_PWM_Start+0x184>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_TIM_PWM_Start+0x178>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_TIM_PWM_Start+0x188>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIM_PWM_Start+0x136>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <HAL_TIM_PWM_Start+0x18c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b06      	cmp	r3, #6
 800488e:	d010      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	e007      	b.n	80048b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40010400 	.word	0x40010400
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40001800 	.word	0x40001800

080048d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_TIM_PWM_Start_DMA+0x2c>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e022      	b.n	800494a <HAL_TIM_PWM_Start_DMA+0x72>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d109      	bne.n	800491e <HAL_TIM_PWM_Start_DMA+0x46>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	e015      	b.n	800494a <HAL_TIM_PWM_Start_DMA+0x72>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d109      	bne.n	8004938 <HAL_TIM_PWM_Start_DMA+0x60>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e008      	b.n	800494a <HAL_TIM_PWM_Start_DMA+0x72>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	e171      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_TIM_PWM_Start_DMA+0x94>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e022      	b.n	80049b2 <HAL_TIM_PWM_Start_DMA+0xda>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d109      	bne.n	8004986 <HAL_TIM_PWM_Start_DMA+0xae>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e015      	b.n	80049b2 <HAL_TIM_PWM_Start_DMA+0xda>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e008      	b.n	80049b2 <HAL_TIM_PWM_Start_DMA+0xda>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d024      	beq.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start_DMA+0xee>
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e137      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d4:	e016      	b.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x12c>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e4:	e00e      	b.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x12c>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f4:	e006      	b.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x12c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049fe:	e001      	b.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e118      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	f200 80ae 	bhi.w	8004b68 <HAL_TIM_PWM_Start_DMA+0x290>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004b69 	.word	0x08004b69
 8004a1c:	08004b69 	.word	0x08004b69
 8004a20:	08004b69 	.word	0x08004b69
 8004a24:	08004a91 	.word	0x08004a91
 8004a28:	08004b69 	.word	0x08004b69
 8004a2c:	08004b69 	.word	0x08004b69
 8004a30:	08004b69 	.word	0x08004b69
 8004a34:	08004ad9 	.word	0x08004ad9
 8004a38:	08004b69 	.word	0x08004b69
 8004a3c:	08004b69 	.word	0x08004b69
 8004a40:	08004b69 	.word	0x08004b69
 8004a44:	08004b21 	.word	0x08004b21
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	4a7c      	ldr	r2, [pc, #496]	; (8004c40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004a4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4a7b      	ldr	r2, [pc, #492]	; (8004c44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	4a7a      	ldr	r2, [pc, #488]	; (8004c48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004a5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3334      	adds	r3, #52	; 0x34
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	f7fe fad6 	bl	8003020 <HAL_DMA_Start_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0db      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	60da      	str	r2, [r3, #12]
      break;
 8004a8e:	e06e      	b.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	4a6a      	ldr	r2, [pc, #424]	; (8004c40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004a96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	4a68      	ldr	r2, [pc, #416]	; (8004c48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004aa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3338      	adds	r3, #56	; 0x38
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	f7fe fab2 	bl	8003020 <HAL_DMA_Start_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0b7      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad4:	60da      	str	r2, [r3, #12]
      break;
 8004ad6:	e04a      	b.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	4a58      	ldr	r2, [pc, #352]	; (8004c40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4a57      	ldr	r2, [pc, #348]	; (8004c44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	4a56      	ldr	r2, [pc, #344]	; (8004c48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004aee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	333c      	adds	r3, #60	; 0x3c
 8004afc:	461a      	mov	r2, r3
 8004afe:	887b      	ldrh	r3, [r7, #2]
 8004b00:	f7fe fa8e 	bl	8003020 <HAL_DMA_Start_IT>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e093      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	60da      	str	r2, [r3, #12]
      break;
 8004b1e:	e026      	b.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	4a46      	ldr	r2, [pc, #280]	; (8004c40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	4a45      	ldr	r2, [pc, #276]	; (8004c44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	4a44      	ldr	r2, [pc, #272]	; (8004c48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004b36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3340      	adds	r3, #64	; 0x40
 8004b44:	461a      	mov	r2, r3
 8004b46:	887b      	ldrh	r3, [r7, #2]
 8004b48:	f7fe fa6a 	bl	8003020 <HAL_DMA_Start_IT>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e06f      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b64:	60da      	str	r2, [r3, #12]
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d15f      	bne.n	8004c34 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 f91b 	bl	8005db8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <HAL_TIM_PWM_Start_DMA+0x374>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a25      	ldr	r2, [pc, #148]	; (8004c4c <HAL_TIM_PWM_Start_DMA+0x374>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc2:	d01d      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <HAL_TIM_PWM_Start_DMA+0x384>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	; (8004c50 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x328>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d111      	bne.n	8004c24 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b06      	cmp	r3, #6
 8004c10:	d010      	beq.n	8004c34 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c22:	e007      	b.n	8004c34 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	08005481 	.word	0x08005481
 8004c44:	08005529 	.word	0x08005529
 8004c48:	080053ef 	.word	0x080053ef
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40001800 	.word	0x40001800

08004c68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e041      	b.n	8004cfe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f839 	bl	8004d06 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 fc72 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d122      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d11b      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0202 	mvn.w	r2, #2
 8004d46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fb14 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004d62:	e005      	b.n	8004d70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fb06 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb17 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d122      	bne.n	8004dca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d11b      	bne.n	8004dca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0204 	mvn.w	r2, #4
 8004d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 faea 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004db6:	e005      	b.n	8004dc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fadc 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 faed 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d122      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d11b      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0208 	mvn.w	r2, #8
 8004dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fac0 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e0a:	e005      	b.n	8004e18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fab2 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fac3 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d122      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d11b      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0210 	mvn.w	r2, #16
 8004e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2208      	movs	r2, #8
 8004e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fa96 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e5e:	e005      	b.n	8004e6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa88 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa99 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0201 	mvn.w	r2, #1
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fc fa35 	bl	8001308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b80      	cmp	r3, #128	; 0x80
 8004eaa:	d10e      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f875 	bl	8005fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d107      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa68 	bl	80053c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d10e      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d107      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f06f 0220 	mvn.w	r2, #32
 8004f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 f83f 	bl	8005fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e088      	b.n	800505a <HAL_TIM_IC_ConfigChannel+0x130>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11b      	bne.n	8004f8e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f000 fd63 	bl	8005a30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 020c 	bic.w	r2, r2, #12
 8004f78:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6999      	ldr	r1, [r3, #24]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	619a      	str	r2, [r3, #24]
 8004f8c:	e060      	b.n	8005050 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d11c      	bne.n	8004fce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f000 fde7 	bl	8005b76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fb6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	021a      	lsls	r2, r3, #8
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	619a      	str	r2, [r3, #24]
 8004fcc:	e040      	b.n	8005050 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f000 fe34 	bl	8005c50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 020c 	bic.w	r2, r2, #12
 8004ff6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69d9      	ldr	r1, [r3, #28]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	61da      	str	r2, [r3, #28]
 800500a:	e021      	b.n	8005050 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d11c      	bne.n	800504c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f000 fe51 	bl	8005cc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005034:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	021a      	lsls	r2, r3, #8
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	61da      	str	r2, [r3, #28]
 800504a:	e001      	b.n	8005050 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507e:	2302      	movs	r3, #2
 8005080:	e0ae      	b.n	80051e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f200 809f 	bhi.w	80051d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050cd 	.word	0x080050cd
 800509c:	080051d1 	.word	0x080051d1
 80050a0:	080051d1 	.word	0x080051d1
 80050a4:	080051d1 	.word	0x080051d1
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	080051d1 	.word	0x080051d1
 80050b0:	080051d1 	.word	0x080051d1
 80050b4:	080051d1 	.word	0x080051d1
 80050b8:	0800514f 	.word	0x0800514f
 80050bc:	080051d1 	.word	0x080051d1
 80050c0:	080051d1 	.word	0x080051d1
 80050c4:	080051d1 	.word	0x080051d1
 80050c8:	0800518f 	.word	0x0800518f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fafc 	bl	80056d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	619a      	str	r2, [r3, #24]
      break;
 800510a:	e064      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb4c 	bl	80057b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
      break;
 800514c:	e043      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fba1 	bl	800589c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0208 	orr.w	r2, r2, #8
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0204 	bic.w	r2, r2, #4
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	61da      	str	r2, [r3, #28]
      break;
 800518c:	e023      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fbf5 	bl	8005984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
      break;
 80051ce:	e002      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	75fb      	strb	r3, [r7, #23]
      break;
 80051d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_ConfigClockSource+0x1c>
 8005200:	2302      	movs	r3, #2
 8005202:	e0b4      	b.n	800536e <HAL_TIM_ConfigClockSource+0x186>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd4>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	f000 8086 	beq.w	800535a <HAL_TIM_ConfigClockSource+0x172>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xa6>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x11a>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x13a>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f000 fd6b 	bl	8005d78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04f      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f000 fd54 	bl	8005d78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fc12 	bl	8005b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fd21 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005300:	e02c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fc6e 	bl	8005bf0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	; 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fd11 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005320:	e01c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fbf2 	bl	8005b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fd01 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005340:	e00c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fcf8 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005352:	e003      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e000      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800535a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d107      	bne.n	8005416 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005414:	e02a      	b.n	800546c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d107      	bne.n	8005430 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2202      	movs	r2, #2
 8005424:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542e:	e01d      	b.n	800546c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d107      	bne.n	800544a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2204      	movs	r2, #4
 800543e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	e010      	b.n	800546c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d107      	bne.n	8005464 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2208      	movs	r2, #8
 8005458:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005462:	e003      	b.n	800546c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff ffb4 	bl	80053da <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d10b      	bne.n	80054b0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d136      	bne.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ae:	e031      	b.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10b      	bne.n	80054d2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2202      	movs	r2, #2
 80054be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d125      	bne.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d0:	e020      	b.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d10b      	bne.n	80054f4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2204      	movs	r2, #4
 80054e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d114      	bne.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f2:	e00f      	b.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10a      	bne.n	8005514 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2208      	movs	r2, #8
 8005502:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff ff42 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d103      	bne.n	8005548 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	771a      	strb	r2, [r3, #28]
 8005546:	e019      	b.n	800557c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d103      	bne.n	800555a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2202      	movs	r2, #2
 8005556:	771a      	strb	r2, [r3, #28]
 8005558:	e010      	b.n	800557c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d103      	bne.n	800556c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2204      	movs	r2, #4
 8005568:	771a      	strb	r2, [r3, #28]
 800556a:	e007      	b.n	800557c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d102      	bne.n	800557c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2208      	movs	r2, #8
 800557a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f7ff ff18 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a40      	ldr	r2, [pc, #256]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d00f      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3d      	ldr	r2, [pc, #244]	; (80056a8 <TIM_Base_SetConfig+0x118>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a3c      	ldr	r2, [pc, #240]	; (80056ac <TIM_Base_SetConfig+0x11c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3b      	ldr	r2, [pc, #236]	; (80056b0 <TIM_Base_SetConfig+0x120>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3a      	ldr	r2, [pc, #232]	; (80056b4 <TIM_Base_SetConfig+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2f      	ldr	r2, [pc, #188]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d02b      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f0:	d027      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2c      	ldr	r2, [pc, #176]	; (80056a8 <TIM_Base_SetConfig+0x118>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d023      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <TIM_Base_SetConfig+0x11c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01f      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <TIM_Base_SetConfig+0x120>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01b      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <TIM_Base_SetConfig+0x124>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d017      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <TIM_Base_SetConfig+0x128>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <TIM_Base_SetConfig+0x12c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00f      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a26      	ldr	r2, [pc, #152]	; (80056c0 <TIM_Base_SetConfig+0x130>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00b      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <TIM_Base_SetConfig+0x134>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <TIM_Base_SetConfig+0x138>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a23      	ldr	r2, [pc, #140]	; (80056cc <TIM_Base_SetConfig+0x13c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0xf8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <TIM_Base_SetConfig+0x124>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d103      	bne.n	8005690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	615a      	str	r2, [r3, #20]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800
 80056c4:	40001800 	.word	0x40001800
 80056c8:	40001c00 	.word	0x40001c00
 80056cc:	40002000 	.word	0x40002000

080056d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0201 	bic.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 0302 	bic.w	r3, r3, #2
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a20      	ldr	r2, [pc, #128]	; (80057a8 <TIM_OC1_SetConfig+0xd8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC1_SetConfig+0x64>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <TIM_OC1_SetConfig+0xdc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10c      	bne.n	800574e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0308 	bic.w	r3, r3, #8
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <TIM_OC1_SetConfig+0xd8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_OC1_SetConfig+0x8e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a14      	ldr	r2, [pc, #80]	; (80057ac <TIM_OC1_SetConfig+0xdc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0210 	bic.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0320 	bic.w	r3, r3, #32
 80057fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a22      	ldr	r2, [pc, #136]	; (8005894 <TIM_OC2_SetConfig+0xe4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC2_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a21      	ldr	r2, [pc, #132]	; (8005898 <TIM_OC2_SetConfig+0xe8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10d      	bne.n	8005834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a17      	ldr	r2, [pc, #92]	; (8005894 <TIM_OC2_SetConfig+0xe4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC2_SetConfig+0x94>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a16      	ldr	r2, [pc, #88]	; (8005898 <TIM_OC2_SetConfig+0xe8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d113      	bne.n	800586c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400

0800589c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a21      	ldr	r2, [pc, #132]	; (800597c <TIM_OC3_SetConfig+0xe0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC3_SetConfig+0x66>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a20      	ldr	r2, [pc, #128]	; (8005980 <TIM_OC3_SetConfig+0xe4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10d      	bne.n	800591e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800591c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC3_SetConfig+0xe0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_OC3_SetConfig+0x92>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a15      	ldr	r2, [pc, #84]	; (8005980 <TIM_OC3_SetConfig+0xe4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d113      	bne.n	8005956 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800593c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	621a      	str	r2, [r3, #32]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	40010000 	.word	0x40010000
 8005980:	40010400 	.word	0x40010400

08005984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	031b      	lsls	r3, r3, #12
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a12      	ldr	r2, [pc, #72]	; (8005a28 <TIM_OC4_SetConfig+0xa4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC4_SetConfig+0x68>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a11      	ldr	r2, [pc, #68]	; (8005a2c <TIM_OC4_SetConfig+0xa8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d109      	bne.n	8005a00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	019b      	lsls	r3, r3, #6
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40010400 	.word	0x40010400

08005a30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a28      	ldr	r2, [pc, #160]	; (8005afc <TIM_TI1_SetConfig+0xcc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01b      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d017      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <TIM_TI1_SetConfig+0xd0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <TIM_TI1_SetConfig+0xd4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00f      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <TIM_TI1_SetConfig+0xd8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <TIM_TI1_SetConfig+0xdc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <TIM_TI1_SetConfig+0xe0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_TI1_SetConfig+0x66>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <TIM_TI1_SetConfig+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <TIM_TI1_SetConfig+0x6a>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <TIM_TI1_SetConfig+0x6c>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e003      	b.n	8005aba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f043 0301 	orr.w	r3, r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f023 030a 	bic.w	r3, r3, #10
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 030a 	and.w	r3, r3, #10
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40000c00 	.word	0x40000c00
 8005b0c:	40010400 	.word	0x40010400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40001800 	.word	0x40001800

08005b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f023 030a 	bic.w	r3, r3, #10
 8005b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b087      	sub	sp, #28
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f023 0210 	bic.w	r2, r3, #16
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f023 0210 	bic.w	r2, r3, #16
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	031b      	lsls	r3, r3, #12
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 0303 	bic.w	r3, r3, #3
 8005c7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ca0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	621a      	str	r2, [r3, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	031b      	lsls	r3, r3, #12
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	031b      	lsls	r3, r3, #12
 8005d20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f043 0307 	orr.w	r3, r3, #7
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2201      	movs	r2, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e05a      	b.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d01d      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d018      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40001800 	.word	0x40001800

08005efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e03d      	b.n	8005f94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e03f      	b.n	800605a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb fec2 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2224      	movs	r2, #36	; 0x24
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 ff35 	bl	8006e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b08a      	sub	sp, #40	; 0x28
 8006066:	af02      	add	r7, sp, #8
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b20      	cmp	r3, #32
 8006080:	d17c      	bne.n	800617c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_UART_Transmit+0x2c>
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e075      	b.n	800617e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Transmit+0x3e>
 800609c:	2302      	movs	r3, #2
 800609e:	e06e      	b.n	800617e <HAL_UART_Transmit+0x11c>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2221      	movs	r2, #33	; 0x21
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b6:	f7fb ff7f 	bl	8001fb8 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d108      	bne.n	80060e4 <HAL_UART_Transmit+0x82>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e003      	b.n	80060ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060f4:	e02a      	b.n	800614c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fc4c 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e036      	b.n	800617e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	3302      	adds	r3, #2
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e007      	b.n	800613e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	3301      	adds	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1cf      	bne.n	80060f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2200      	movs	r2, #0
 800615e:	2140      	movs	r1, #64	; 0x40
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fc1c 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e006      	b.n	800617e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	4613      	mov	r3, r2
 8006192:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b20      	cmp	r3, #32
 800619e:	d11d      	bne.n	80061dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Receive_IT+0x26>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e016      	b.n	80061de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_UART_Receive_IT+0x38>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e00f      	b.n	80061de <HAL_UART_Receive_IT+0x58>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fc51 	bl	8006a7a <UART_Start_Receive_IT>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	; 0x30
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d165      	bne.n	80062ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_Transmit_DMA+0x26>
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e05e      	b.n	80062d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_UART_Transmit_DMA+0x38>
 800621c:	2302      	movs	r3, #2
 800621e:	e057      	b.n	80062d0 <HAL_UART_Transmit_DMA+0xe8>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	88fa      	ldrh	r2, [r7, #6]
 8006232:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	88fa      	ldrh	r2, [r7, #6]
 8006238:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2221      	movs	r2, #33	; 0x21
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <HAL_UART_Transmit_DMA+0xf0>)
 800624e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	4a21      	ldr	r2, [pc, #132]	; (80062dc <HAL_UART_Transmit_DMA+0xf4>)
 8006256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <HAL_UART_Transmit_DMA+0xf8>)
 800625e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006264:	2200      	movs	r2, #0
 8006266:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006268:	f107 0308 	add.w	r3, r7, #8
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3304      	adds	r3, #4
 800627c:	461a      	mov	r2, r3
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	f7fc fece 	bl	8003020 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800628c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	617b      	str	r3, [r7, #20]
   return(result);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3314      	adds	r3, #20
 80062b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b6:	627a      	str	r2, [r7, #36]	; 0x24
 80062b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6a39      	ldr	r1, [r7, #32]
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e000      	b.n	80062d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
  }
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3730      	adds	r7, #48	; 0x30
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	08006855 	.word	0x08006855
 80062dc:	080068ef 	.word	0x080068ef
 80062e0:	0800690b 	.word	0x0800690b

080062e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b0ba      	sub	sp, #232	; 0xe8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800630a:	2300      	movs	r3, #0
 800630c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006310:	2300      	movs	r3, #0
 8006312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_UART_IRQHandler+0x66>
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fcde 	bl	8006d04 <UART_Receive_IT>
      return;
 8006348:	e256      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800634a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80de 	beq.w	8006510 <HAL_UART_IRQHandler+0x22c>
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80d1 	beq.w	8006510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <HAL_UART_IRQHandler+0xae>
 800637a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f043 0201 	orr.w	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_UART_IRQHandler+0xd2>
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_UART_IRQHandler+0xf6>
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f043 0204 	orr.w	r2, r3, #4
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_UART_IRQHandler+0x126>
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d105      	bne.n	80063fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f043 0208 	orr.w	r2, r3, #8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 81ed 	beq.w	80067ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_UART_IRQHandler+0x14e>
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc69 	bl	8006d04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <HAL_UART_IRQHandler+0x17a>
 8006456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d04f      	beq.n	80064fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fb71 	bl	8006b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d141      	bne.n	80064f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800648c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3314      	adds	r3, #20
 800649a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800649e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1d9      	bne.n	8006472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d013      	beq.n	80064ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	4a7d      	ldr	r2, [pc, #500]	; (80066c0 <HAL_UART_IRQHandler+0x3dc>)
 80064cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fc fe6c 	bl	80031b0 <HAL_DMA_Abort_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00e      	b.n	800650c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f99a 	bl	8006828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e00a      	b.n	800650c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f996 	bl	8006828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e006      	b.n	800650c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f992 	bl	8006828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800650a:	e170      	b.n	80067ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	bf00      	nop
    return;
 800650e:	e16e      	b.n	80067ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	2b01      	cmp	r3, #1
 8006516:	f040 814a 	bne.w	80067ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8143 	beq.w	80067ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 813c 	beq.w	80067ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	f040 80b4 	bne.w	80066c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8140 	beq.w	80067f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800657a:	429a      	cmp	r2, r3
 800657c:	f080 8139 	bcs.w	80067f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006592:	f000 8088 	beq.w	80066a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1d9      	bne.n	8006596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800660a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800660e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e1      	bne.n	80065e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3314      	adds	r3, #20
 8006624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800662e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3314      	adds	r3, #20
 800663e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e3      	bne.n	800661e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006676:	f023 0310 	bic.w	r3, r3, #16
 800667a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006688:	65ba      	str	r2, [r7, #88]	; 0x58
 800668a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800668e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e3      	bne.n	8006664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fc fd15 	bl	80030d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8c0 	bl	800683c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066bc:	e099      	b.n	80067f2 <HAL_UART_IRQHandler+0x50e>
 80066be:	bf00      	nop
 80066c0:	08006c0d 	.word	0x08006c0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 808b 	beq.w	80067f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8086 	beq.w	80067f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800670e:	647a      	str	r2, [r7, #68]	; 0x44
 8006710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e3      	bne.n	80066ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	623b      	str	r3, [r7, #32]
   return(result);
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3314      	adds	r3, #20
 8006742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006746:	633a      	str	r2, [r7, #48]	; 0x30
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e3      	bne.n	8006722 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	60fb      	str	r3, [r7, #12]
   return(result);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	330c      	adds	r3, #12
 8006788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800678c:	61fa      	str	r2, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	617b      	str	r3, [r7, #20]
   return(result);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e3      	bne.n	8006768 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f848 	bl	800683c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ac:	e023      	b.n	80067f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HAL_UART_IRQHandler+0x4ea>
 80067ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa34 	bl	8006c34 <UART_Transmit_IT>
    return;
 80067cc:	e014      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00e      	beq.n	80067f8 <HAL_UART_IRQHandler+0x514>
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d008      	beq.n	80067f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa74 	bl	8006cd4 <UART_EndTransmit_IT>
    return;
 80067ec:	e004      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
    return;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
      return;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <HAL_UART_IRQHandler+0x514>
      return;
 80067f6:	bf00      	nop
  }
}
 80067f8:	37e8      	adds	r7, #232	; 0xe8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b090      	sub	sp, #64	; 0x40
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d137      	bne.n	80068e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	2200      	movs	r2, #0
 8006874:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	623b      	str	r3, [r7, #32]
   return(result);
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800688c:	63bb      	str	r3, [r7, #56]	; 0x38
 800688e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006896:	633a      	str	r2, [r7, #48]	; 0x30
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800689c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	330c      	adds	r3, #12
 80068b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ca:	61fa      	str	r2, [r7, #28]
 80068cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	69b9      	ldr	r1, [r7, #24]
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	617b      	str	r3, [r7, #20]
   return(result);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068de:	e002      	b.n	80068e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068e2:	f7ff ff8d 	bl	8006800 <HAL_UART_TxCpltCallback>
}
 80068e6:	bf00      	nop
 80068e8:	3740      	adds	r7, #64	; 0x40
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ff89 	bl	8006814 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b21      	cmp	r3, #33	; 0x21
 800693c:	d108      	bne.n	8006950 <UART_DMAError+0x46>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f000 f8d3 	bl	8006af6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b22      	cmp	r3, #34	; 0x22
 8006970:	d108      	bne.n	8006984 <UART_DMAError+0x7a>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800697e:	68b8      	ldr	r0, [r7, #8]
 8006980:	f000 f8e1 	bl	8006b46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	f043 0210 	orr.w	r2, r3, #16
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006990:	68b8      	ldr	r0, [r7, #8]
 8006992:	f7ff ff49 	bl	8006828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b090      	sub	sp, #64	; 0x40
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ae:	e050      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d04c      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <UART_WaitOnFlagUntilTimeout+0x30>
 80069be:	f7fb fafb 	bl	8001fb8 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d241      	bcs.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ee:	637a      	str	r2, [r7, #52]	; 0x34
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e5      	bne.n	80069ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	613b      	str	r3, [r7, #16]
   return(result);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a22:	623a      	str	r2, [r7, #32]
 8006a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	69f9      	ldr	r1, [r7, #28]
 8006a28:	6a3a      	ldr	r2, [r7, #32]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e00f      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	bf0c      	ite	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	2300      	movne	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d09f      	beq.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3740      	adds	r7, #64	; 0x40
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	4613      	mov	r3, r2
 8006a86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2222      	movs	r2, #34	; 0x22
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0220 	orr.w	r2, r2, #32
 8006ae6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b089      	sub	sp, #36	; 0x24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	61ba      	str	r2, [r7, #24]
 8006b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6979      	ldr	r1, [r7, #20]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b3a:	bf00      	nop
 8006b3c:	3724      	adds	r7, #36	; 0x24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b095      	sub	sp, #84	; 0x54
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b6e:	643a      	str	r2, [r7, #64]	; 0x40
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e5      	bne.n	8006b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d119      	bne.n	8006bf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f023 0310 	bic.w	r3, r3, #16
 8006bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bde:	61ba      	str	r2, [r7, #24]
 8006be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6979      	ldr	r1, [r7, #20]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	613b      	str	r3, [r7, #16]
   return(result);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c00:	bf00      	nop
 8006c02:	3754      	adds	r7, #84	; 0x54
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fdfe 	bl	8006828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b21      	cmp	r3, #33	; 0x21
 8006c46:	d13e      	bne.n	8006cc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c50:	d114      	bne.n	8006c7c <UART_Transmit_IT+0x48>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d110      	bne.n	8006c7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	1c9a      	adds	r2, r3, #2
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]
 8006c7a:	e008      	b.n	8006c8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6211      	str	r1, [r2, #32]
 8006c86:	781a      	ldrb	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10f      	bne.n	8006cc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fd83 	bl	8006800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08c      	sub	sp, #48	; 0x30
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b22      	cmp	r3, #34	; 0x22
 8006d16:	f040 80ab 	bne.w	8006e70 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d117      	bne.n	8006d54 <UART_Receive_IT+0x50>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d113      	bne.n	8006d54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	1c9a      	adds	r2, r3, #2
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	629a      	str	r2, [r3, #40]	; 0x28
 8006d52:	e026      	b.n	8006da2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d007      	beq.n	8006d78 <UART_Receive_IT+0x74>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <UART_Receive_IT+0x82>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e008      	b.n	8006d98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4619      	mov	r1, r3
 8006db0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d15a      	bne.n	8006e6c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0220 	bic.w	r2, r2, #32
 8006dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0201 	bic.w	r2, r2, #1
 8006de4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d135      	bne.n	8006e62 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1c:	623a      	str	r2, [r7, #32]
 8006e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d10a      	bne.n	8006e54 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fcee 	bl	800683c <HAL_UARTEx_RxEventCallback>
 8006e60:	e002      	b.n	8006e68 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fa fa68 	bl	8001338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e002      	b.n	8006e72 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3730      	adds	r7, #48	; 0x30
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e80:	b0c0      	sub	sp, #256	; 0x100
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e98:	68d9      	ldr	r1, [r3, #12]
 8006e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	ea40 0301 	orr.w	r3, r0, r1
 8006ea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ed4:	f021 010c 	bic.w	r1, r1, #12
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	6999      	ldr	r1, [r3, #24]
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	ea40 0301 	orr.w	r3, r0, r1
 8006f02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b8f      	ldr	r3, [pc, #572]	; (8007148 <UART_SetConfig+0x2cc>)
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d005      	beq.n	8006f1c <UART_SetConfig+0xa0>
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b8d      	ldr	r3, [pc, #564]	; (800714c <UART_SetConfig+0x2d0>)
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d104      	bne.n	8006f26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f1c:	f7fd f9e8 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8006f20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f24:	e003      	b.n	8006f2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f26:	f7fd f9cf 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8006f2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f38:	f040 810c 	bne.w	8007154 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	1891      	adds	r1, r2, r2
 8006f54:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f56:	415b      	adcs	r3, r3
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f5e:	4621      	mov	r1, r4
 8006f60:	eb12 0801 	adds.w	r8, r2, r1
 8006f64:	4629      	mov	r1, r5
 8006f66:	eb43 0901 	adc.w	r9, r3, r1
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f7e:	4690      	mov	r8, r2
 8006f80:	4699      	mov	r9, r3
 8006f82:	4623      	mov	r3, r4
 8006f84:	eb18 0303 	adds.w	r3, r8, r3
 8006f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	eb49 0303 	adc.w	r3, r9, r3
 8006f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006faa:	460b      	mov	r3, r1
 8006fac:	18db      	adds	r3, r3, r3
 8006fae:	653b      	str	r3, [r7, #80]	; 0x50
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	eb42 0303 	adc.w	r3, r2, r3
 8006fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fc0:	f7f9 f956 	bl	8000270 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4b61      	ldr	r3, [pc, #388]	; (8007150 <UART_SetConfig+0x2d4>)
 8006fca:	fba3 2302 	umull	r2, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	011c      	lsls	r4, r3, #4
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fe0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fec:	415b      	adcs	r3, r3
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	eb12 0a01 	adds.w	sl, r2, r1
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	eb43 0b01 	adc.w	fp, r3, r1
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800700c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007014:	4692      	mov	sl, r2
 8007016:	469b      	mov	fp, r3
 8007018:	4643      	mov	r3, r8
 800701a:	eb1a 0303 	adds.w	r3, sl, r3
 800701e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007022:	464b      	mov	r3, r9
 8007024:	eb4b 0303 	adc.w	r3, fp, r3
 8007028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007038:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800703c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007040:	460b      	mov	r3, r1
 8007042:	18db      	adds	r3, r3, r3
 8007044:	643b      	str	r3, [r7, #64]	; 0x40
 8007046:	4613      	mov	r3, r2
 8007048:	eb42 0303 	adc.w	r3, r2, r3
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
 800704e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007052:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007056:	f7f9 f90b 	bl	8000270 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4611      	mov	r1, r2
 8007060:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <UART_SetConfig+0x2d4>)
 8007062:	fba3 2301 	umull	r2, r3, r3, r1
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	2264      	movs	r2, #100	; 0x64
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	1acb      	subs	r3, r1, r3
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007076:	4b36      	ldr	r3, [pc, #216]	; (8007150 <UART_SetConfig+0x2d4>)
 8007078:	fba3 2302 	umull	r2, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007084:	441c      	add	r4, r3
 8007086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800708a:	2200      	movs	r2, #0
 800708c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007090:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007094:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007098:	4642      	mov	r2, r8
 800709a:	464b      	mov	r3, r9
 800709c:	1891      	adds	r1, r2, r2
 800709e:	63b9      	str	r1, [r7, #56]	; 0x38
 80070a0:	415b      	adcs	r3, r3
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070a8:	4641      	mov	r1, r8
 80070aa:	1851      	adds	r1, r2, r1
 80070ac:	6339      	str	r1, [r7, #48]	; 0x30
 80070ae:	4649      	mov	r1, r9
 80070b0:	414b      	adcs	r3, r1
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070c0:	4659      	mov	r1, fp
 80070c2:	00cb      	lsls	r3, r1, #3
 80070c4:	4651      	mov	r1, sl
 80070c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ca:	4651      	mov	r1, sl
 80070cc:	00ca      	lsls	r2, r1, #3
 80070ce:	4610      	mov	r0, r2
 80070d0:	4619      	mov	r1, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	4642      	mov	r2, r8
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070dc:	464b      	mov	r3, r9
 80070de:	460a      	mov	r2, r1
 80070e0:	eb42 0303 	adc.w	r3, r2, r3
 80070e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070fc:	460b      	mov	r3, r1
 80070fe:	18db      	adds	r3, r3, r3
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
 8007102:	4613      	mov	r3, r2
 8007104:	eb42 0303 	adc.w	r3, r2, r3
 8007108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800710a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800710e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007112:	f7f9 f8ad 	bl	8000270 <__aeabi_uldivmod>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <UART_SetConfig+0x2d4>)
 800711c:	fba3 1302 	umull	r1, r3, r3, r2
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	2164      	movs	r1, #100	; 0x64
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	3332      	adds	r3, #50	; 0x32
 800712e:	4a08      	ldr	r2, [pc, #32]	; (8007150 <UART_SetConfig+0x2d4>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	f003 0207 	and.w	r2, r3, #7
 800713a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4422      	add	r2, r4
 8007142:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007144:	e105      	b.n	8007352 <UART_SetConfig+0x4d6>
 8007146:	bf00      	nop
 8007148:	40011000 	.word	0x40011000
 800714c:	40011400 	.word	0x40011400
 8007150:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007158:	2200      	movs	r2, #0
 800715a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800715e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007162:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007166:	4642      	mov	r2, r8
 8007168:	464b      	mov	r3, r9
 800716a:	1891      	adds	r1, r2, r2
 800716c:	6239      	str	r1, [r7, #32]
 800716e:	415b      	adcs	r3, r3
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
 8007172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007176:	4641      	mov	r1, r8
 8007178:	1854      	adds	r4, r2, r1
 800717a:	4649      	mov	r1, r9
 800717c:	eb43 0501 	adc.w	r5, r3, r1
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	00eb      	lsls	r3, r5, #3
 800718a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800718e:	00e2      	lsls	r2, r4, #3
 8007190:	4614      	mov	r4, r2
 8007192:	461d      	mov	r5, r3
 8007194:	4643      	mov	r3, r8
 8007196:	18e3      	adds	r3, r4, r3
 8007198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800719c:	464b      	mov	r3, r9
 800719e:	eb45 0303 	adc.w	r3, r5, r3
 80071a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071b6:	f04f 0200 	mov.w	r2, #0
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071c2:	4629      	mov	r1, r5
 80071c4:	008b      	lsls	r3, r1, #2
 80071c6:	4621      	mov	r1, r4
 80071c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071cc:	4621      	mov	r1, r4
 80071ce:	008a      	lsls	r2, r1, #2
 80071d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071d4:	f7f9 f84c 	bl	8000270 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4b60      	ldr	r3, [pc, #384]	; (8007360 <UART_SetConfig+0x4e4>)
 80071de:	fba3 2302 	umull	r2, r3, r3, r2
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	011c      	lsls	r4, r3, #4
 80071e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	61b9      	str	r1, [r7, #24]
 8007200:	415b      	adcs	r3, r3
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007208:	4641      	mov	r1, r8
 800720a:	1851      	adds	r1, r2, r1
 800720c:	6139      	str	r1, [r7, #16]
 800720e:	4649      	mov	r1, r9
 8007210:	414b      	adcs	r3, r1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007220:	4659      	mov	r1, fp
 8007222:	00cb      	lsls	r3, r1, #3
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722a:	4651      	mov	r1, sl
 800722c:	00ca      	lsls	r2, r1, #3
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	4603      	mov	r3, r0
 8007234:	4642      	mov	r2, r8
 8007236:	189b      	adds	r3, r3, r2
 8007238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800723c:	464b      	mov	r3, r9
 800723e:	460a      	mov	r2, r1
 8007240:	eb42 0303 	adc.w	r3, r2, r3
 8007244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	67bb      	str	r3, [r7, #120]	; 0x78
 8007252:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007260:	4649      	mov	r1, r9
 8007262:	008b      	lsls	r3, r1, #2
 8007264:	4641      	mov	r1, r8
 8007266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800726a:	4641      	mov	r1, r8
 800726c:	008a      	lsls	r2, r1, #2
 800726e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007272:	f7f8 fffd 	bl	8000270 <__aeabi_uldivmod>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4b39      	ldr	r3, [pc, #228]	; (8007360 <UART_SetConfig+0x4e4>)
 800727c:	fba3 1302 	umull	r1, r3, r3, r2
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	2164      	movs	r1, #100	; 0x64
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	3332      	adds	r3, #50	; 0x32
 800728e:	4a34      	ldr	r2, [pc, #208]	; (8007360 <UART_SetConfig+0x4e4>)
 8007290:	fba2 2303 	umull	r2, r3, r2, r3
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800729a:	441c      	add	r4, r3
 800729c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a0:	2200      	movs	r2, #0
 80072a2:	673b      	str	r3, [r7, #112]	; 0x70
 80072a4:	677a      	str	r2, [r7, #116]	; 0x74
 80072a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072aa:	4642      	mov	r2, r8
 80072ac:	464b      	mov	r3, r9
 80072ae:	1891      	adds	r1, r2, r2
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	415b      	adcs	r3, r3
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ba:	4641      	mov	r1, r8
 80072bc:	1851      	adds	r1, r2, r1
 80072be:	6039      	str	r1, [r7, #0]
 80072c0:	4649      	mov	r1, r9
 80072c2:	414b      	adcs	r3, r1
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072d2:	4659      	mov	r1, fp
 80072d4:	00cb      	lsls	r3, r1, #3
 80072d6:	4651      	mov	r1, sl
 80072d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072dc:	4651      	mov	r1, sl
 80072de:	00ca      	lsls	r2, r1, #3
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	4642      	mov	r2, r8
 80072e8:	189b      	adds	r3, r3, r2
 80072ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80072ec:	464b      	mov	r3, r9
 80072ee:	460a      	mov	r2, r1
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007300:	667a      	str	r2, [r7, #100]	; 0x64
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800730e:	4649      	mov	r1, r9
 8007310:	008b      	lsls	r3, r1, #2
 8007312:	4641      	mov	r1, r8
 8007314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007318:	4641      	mov	r1, r8
 800731a:	008a      	lsls	r2, r1, #2
 800731c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007320:	f7f8 ffa6 	bl	8000270 <__aeabi_uldivmod>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <UART_SetConfig+0x4e4>)
 800732a:	fba3 1302 	umull	r1, r3, r3, r2
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	2164      	movs	r1, #100	; 0x64
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	3332      	adds	r3, #50	; 0x32
 800733c:	4a08      	ldr	r2, [pc, #32]	; (8007360 <UART_SetConfig+0x4e4>)
 800733e:	fba2 2303 	umull	r2, r3, r2, r3
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4422      	add	r2, r4
 8007350:	609a      	str	r2, [r3, #8]
}
 8007352:	bf00      	nop
 8007354:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007358:	46bd      	mov	sp, r7
 800735a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800735e:	bf00      	nop
 8007360:	51eb851f 	.word	0x51eb851f

08007364 <__NVIC_SetPriority>:
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007374:	2b00      	cmp	r3, #0
 8007376:	db0a      	blt.n	800738e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	490c      	ldr	r1, [pc, #48]	; (80073b0 <__NVIC_SetPriority+0x4c>)
 800737e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007382:	0112      	lsls	r2, r2, #4
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	440b      	add	r3, r1
 8007388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800738c:	e00a      	b.n	80073a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4908      	ldr	r1, [pc, #32]	; (80073b4 <__NVIC_SetPriority+0x50>)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	3b04      	subs	r3, #4
 800739c:	0112      	lsls	r2, r2, #4
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	440b      	add	r3, r1
 80073a2:	761a      	strb	r2, [r3, #24]
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	e000e100 	.word	0xe000e100
 80073b4:	e000ed00 	.word	0xe000ed00

080073b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <SysTick_Handler+0x1c>)
 80073be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073c0:	f001 fdaa 	bl	8008f18 <xTaskGetSchedulerState>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d001      	beq.n	80073ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073ca:	f002 fb95 	bl	8009af8 <xPortSysTickHandler>
  }
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	e000e010 	.word	0xe000e010

080073d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073dc:	2100      	movs	r1, #0
 80073de:	f06f 0004 	mvn.w	r0, #4
 80073e2:	f7ff ffbf 	bl	8007364 <__NVIC_SetPriority>
#endif
}
 80073e6:	bf00      	nop
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f2:	f3ef 8305 	mrs	r3, IPSR
 80073f6:	603b      	str	r3, [r7, #0]
  return(result);
 80073f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073fe:	f06f 0305 	mvn.w	r3, #5
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	e00c      	b.n	8007420 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007406:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <osKernelInitialize+0x44>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d105      	bne.n	800741a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800740e:	4b08      	ldr	r3, [pc, #32]	; (8007430 <osKernelInitialize+0x44>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007414:	2300      	movs	r3, #0
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	e002      	b.n	8007420 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007420:	687b      	ldr	r3, [r7, #4]
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	20000618 	.word	0x20000618

08007434 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800743a:	f3ef 8305 	mrs	r3, IPSR
 800743e:	603b      	str	r3, [r7, #0]
  return(result);
 8007440:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007446:	f06f 0305 	mvn.w	r3, #5
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	e010      	b.n	8007470 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <osKernelStart+0x48>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d109      	bne.n	800746a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007456:	f7ff ffbf 	bl	80073d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800745a:	4b08      	ldr	r3, [pc, #32]	; (800747c <osKernelStart+0x48>)
 800745c:	2202      	movs	r2, #2
 800745e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007460:	f001 f8ec 	bl	800863c <vTaskStartScheduler>
      stat = osOK;
 8007464:	2300      	movs	r3, #0
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e002      	b.n	8007470 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007470:	687b      	ldr	r3, [r7, #4]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000618 	.word	0x20000618

08007480 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007486:	f3ef 8305 	mrs	r3, IPSR
 800748a:	603b      	str	r3, [r7, #0]
  return(result);
 800748c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007492:	f001 f9ff 	bl	8008894 <xTaskGetTickCountFromISR>
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	e002      	b.n	80074a0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800749a:	f001 f9eb 	bl	8008874 <xTaskGetTickCount>
 800749e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80074a0:	687b      	ldr	r3, [r7, #4]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b08e      	sub	sp, #56	; 0x38
 80074ae:	af04      	add	r7, sp, #16
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ba:	f3ef 8305 	mrs	r3, IPSR
 80074be:	617b      	str	r3, [r7, #20]
  return(result);
 80074c0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d17e      	bne.n	80075c4 <osThreadNew+0x11a>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d07b      	beq.n	80075c4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074d0:	2318      	movs	r3, #24
 80074d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d045      	beq.n	8007570 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <osThreadNew+0x48>
        name = attr->name;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <osThreadNew+0x6e>
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	2b38      	cmp	r3, #56	; 0x38
 800750a:	d805      	bhi.n	8007518 <osThreadNew+0x6e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <osThreadNew+0x72>
        return (NULL);
 8007518:	2300      	movs	r3, #0
 800751a:	e054      	b.n	80075c6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	089b      	lsrs	r3, r3, #2
 800752a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00e      	beq.n	8007552 <osThreadNew+0xa8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2bbb      	cmp	r3, #187	; 0xbb
 800753a:	d90a      	bls.n	8007552 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <osThreadNew+0xa8>
        mem = 1;
 800754c:	2301      	movs	r3, #1
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	e010      	b.n	8007574 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10c      	bne.n	8007574 <osThreadNew+0xca>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d108      	bne.n	8007574 <osThreadNew+0xca>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <osThreadNew+0xca>
          mem = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	e001      	b.n	8007574 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d110      	bne.n	800759c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007582:	9202      	str	r2, [sp, #8]
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fe1d 	bl	80081d0 <xTaskCreateStatic>
 8007596:	4603      	mov	r3, r0
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	e013      	b.n	80075c4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d110      	bne.n	80075c4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f107 0310 	add.w	r3, r7, #16
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fe68 	bl	800828a <xTaskCreate>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d001      	beq.n	80075c4 <osThreadNew+0x11a>
            hTask = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075c4:	693b      	ldr	r3, [r7, #16]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3728      	adds	r7, #40	; 0x28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d6:	f3ef 8305 	mrs	r3, IPSR
 80075da:	60fb      	str	r3, [r7, #12]
  return(result);
 80075dc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <osDelayUntil+0x1c>
    stat = osErrorISR;
 80075e2:	f06f 0305 	mvn.w	r3, #5
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e019      	b.n	800761e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80075ee:	f001 f941 	bl	8008874 <xTaskGetTickCount>
 80075f2:	4603      	mov	r3, r0
 80075f4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <osDelayUntil+0x4a>
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	db06      	blt.n	8007618 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	6939      	ldr	r1, [r7, #16]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 ff95 	bl	8008540 <vTaskDelayUntil>
 8007616:	e002      	b.n	800761e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007618:	f06f 0303 	mvn.w	r3, #3
 800761c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4a07      	ldr	r2, [pc, #28]	; (8007654 <vApplicationGetIdleTaskMemory+0x2c>)
 8007638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a06      	ldr	r2, [pc, #24]	; (8007658 <vApplicationGetIdleTaskMemory+0x30>)
 800763e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2280      	movs	r2, #128	; 0x80
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	2000061c 	.word	0x2000061c
 8007658:	200006d8 	.word	0x200006d8

0800765c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a07      	ldr	r2, [pc, #28]	; (8007688 <vApplicationGetTimerTaskMemory+0x2c>)
 800766c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	4a06      	ldr	r2, [pc, #24]	; (800768c <vApplicationGetTimerTaskMemory+0x30>)
 8007672:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800767a:	601a      	str	r2, [r3, #0]
}
 800767c:	bf00      	nop
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	200008d8 	.word	0x200008d8
 800768c:	20000994 	.word	0x20000994

08007690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f103 0208 	add.w	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f04f 32ff 	mov.w	r2, #4294967295
 80076a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f103 0208 	add.w	r2, r3, #8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0208 	add.w	r2, r3, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	601a      	str	r2, [r3, #0]
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d103      	bne.n	8007752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e00c      	b.n	800776c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3308      	adds	r3, #8
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e002      	b.n	8007760 <vListInsert+0x2e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	429a      	cmp	r2, r3
 800776a:	d2f6      	bcs.n	800775a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6892      	ldr	r2, [r2, #8]
 80077ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6852      	ldr	r2, [r2, #4]
 80077c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d103      	bne.n	80077d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	1e5a      	subs	r2, r3, #1
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007822:	f002 f8d7 	bl	80099d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	441a      	add	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	3b01      	subs	r3, #1
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	441a      	add	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	22ff      	movs	r2, #255	; 0xff
 8007866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	22ff      	movs	r2, #255	; 0xff
 800786e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d114      	bne.n	80078a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01a      	beq.n	80078b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3310      	adds	r3, #16
 8007884:	4618      	mov	r0, r3
 8007886:	f001 f985 	bl	8008b94 <xTaskRemoveFromEventList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d012      	beq.n	80078b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <xQueueGenericReset+0xcc>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	e009      	b.n	80078b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3310      	adds	r3, #16
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fef2 	bl	8007690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3324      	adds	r3, #36	; 0x24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff feed 	bl	8007690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078b6:	f002 f8bd 	bl	8009a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078ba:	2301      	movs	r3, #1
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08e      	sub	sp, #56	; 0x38
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <xQueueGenericCreateStatic+0x52>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <xQueueGenericCreateStatic+0x56>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <xQueueGenericCreateStatic+0x58>
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	623b      	str	r3, [r7, #32]
}
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <xQueueGenericCreateStatic+0x7e>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <xQueueGenericCreateStatic+0x82>
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <xQueueGenericCreateStatic+0x84>
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10a      	bne.n	8007966 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	61fb      	str	r3, [r7, #28]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007966:	2350      	movs	r3, #80	; 0x50
 8007968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b50      	cmp	r3, #80	; 0x50
 800796e:	d00a      	beq.n	8007986 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	61bb      	str	r3, [r7, #24]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007986:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00d      	beq.n	80079ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800799a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f805 	bl	80079b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3730      	adds	r7, #48	; 0x30
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	e002      	b.n	80079da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079e6:	2101      	movs	r1, #1
 80079e8:	69b8      	ldr	r0, [r7, #24]
 80079ea:	f7ff ff05 	bl	80077f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08e      	sub	sp, #56	; 0x38
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <xQueueGenericSend+0x32>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d103      	bne.n	8007a40 <xQueueGenericSend+0x40>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <xQueueGenericSend+0x44>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <xQueueGenericSend+0x46>
 8007a44:	2300      	movs	r3, #0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <xQueueGenericSend+0x60>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d103      	bne.n	8007a6e <xQueueGenericSend+0x6e>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <xQueueGenericSend+0x72>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <xQueueGenericSend+0x74>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <xQueueGenericSend+0x8e>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	623b      	str	r3, [r7, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a8e:	f001 fa43 	bl	8008f18 <xTaskGetSchedulerState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <xQueueGenericSend+0x9e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <xQueueGenericSend+0xa2>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <xQueueGenericSend+0xa4>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xQueueGenericSend+0xbe>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	61fb      	str	r3, [r7, #28]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007abe:	f001 ff89 	bl	80099d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <xQueueGenericSend+0xd4>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d129      	bne.n	8007b28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ada:	f000 fa0b 	bl	8007ef4 <prvCopyDataToQueue>
 8007ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d010      	beq.n	8007b0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	3324      	adds	r3, #36	; 0x24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f851 	bl	8008b94 <xTaskRemoveFromEventList>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d013      	beq.n	8007b20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007af8:	4b3f      	ldr	r3, [pc, #252]	; (8007bf8 <xQueueGenericSend+0x1f8>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	e00a      	b.n	8007b20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b10:	4b39      	ldr	r3, [pc, #228]	; (8007bf8 <xQueueGenericSend+0x1f8>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b20:	f001 ff88 	bl	8009a34 <vPortExitCritical>
				return pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e063      	b.n	8007bf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b2e:	f001 ff81 	bl	8009a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	e05c      	b.n	8007bf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d106      	bne.n	8007b4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b3c:	f107 0314 	add.w	r3, r7, #20
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 f88b 	bl	8008c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b46:	2301      	movs	r3, #1
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b4a:	f001 ff73 	bl	8009a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b4e:	f000 fde5 	bl	800871c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b52:	f001 ff3f 	bl	80099d4 <vPortEnterCritical>
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b5c:	b25b      	sxtb	r3, r3
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b62:	d103      	bne.n	8007b6c <xQueueGenericSend+0x16c>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d103      	bne.n	8007b82 <xQueueGenericSend+0x182>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b82:	f001 ff57 	bl	8009a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b86:	1d3a      	adds	r2, r7, #4
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 f87a 	bl	8008c88 <xTaskCheckForTimeOut>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d124      	bne.n	8007be4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b9c:	f000 faa2 	bl	80080e4 <prvIsQueueFull>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d018      	beq.n	8007bd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	3310      	adds	r3, #16
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4611      	mov	r1, r2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 ffa0 	bl	8008af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb6:	f000 fa2d 	bl	8008014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bba:	f000 fdbd 	bl	8008738 <xTaskResumeAll>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f47f af7c 	bne.w	8007abe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <xQueueGenericSend+0x1f8>)
 8007bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	e772      	b.n	8007abe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bda:	f000 fa1b 	bl	8008014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bde:	f000 fdab 	bl	8008738 <xTaskResumeAll>
 8007be2:	e76c      	b.n	8007abe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007be6:	f000 fa15 	bl	8008014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bea:	f000 fda5 	bl	8008738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3738      	adds	r7, #56	; 0x38
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b090      	sub	sp, #64	; 0x40
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <xQueueGenericSendFromISR+0x3c>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <xQueueGenericSendFromISR+0x40>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <xQueueGenericSendFromISR+0x42>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d103      	bne.n	8007c66 <xQueueGenericSendFromISR+0x6a>
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <xQueueGenericSendFromISR+0x6e>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <xQueueGenericSendFromISR+0x70>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	623b      	str	r3, [r7, #32]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c86:	f001 ff87 	bl	8009b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	61fa      	str	r2, [r7, #28]
 8007ca0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ca4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <xQueueGenericSendFromISR+0xbc>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d12f      	bne.n	8007d18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cce:	f000 f911 	bl	8007ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d112      	bne.n	8007d02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d016      	beq.n	8007d12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ff53 	bl	8008b94 <xTaskRemoveFromEventList>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00e      	beq.n	8007d12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e007      	b.n	8007d12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d06:	3301      	adds	r3, #1
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	b25a      	sxtb	r2, r3
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d12:	2301      	movs	r3, #1
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d16:	e001      	b.n	8007d1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3740      	adds	r7, #64	; 0x40
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <xQueueReceive+0x30>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	623b      	str	r3, [r7, #32]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <xQueueReceive+0x3e>
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <xQueueReceive+0x42>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <xQueueReceive+0x44>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xQueueReceive+0x5e>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	61fb      	str	r3, [r7, #28]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d92:	f001 f8c1 	bl	8008f18 <xTaskGetSchedulerState>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <xQueueReceive+0x6e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <xQueueReceive+0x72>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <xQueueReceive+0x74>
 8007da6:	2300      	movs	r3, #0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xQueueReceive+0x8e>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	61bb      	str	r3, [r7, #24]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dc2:	f001 fe07 	bl	80099d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01f      	beq.n	8007e12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd6:	f000 f8f7 	bl	8007fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00f      	beq.n	8007e0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	3310      	adds	r3, #16
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fed0 	bl	8008b94 <xTaskRemoveFromEventList>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dfa:	4b3d      	ldr	r3, [pc, #244]	; (8007ef0 <xQueueReceive+0x1bc>)
 8007dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e0a:	f001 fe13 	bl	8009a34 <vPortExitCritical>
				return pdPASS;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e069      	b.n	8007ee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e18:	f001 fe0c 	bl	8009a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e062      	b.n	8007ee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e26:	f107 0310 	add.w	r3, r7, #16
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 ff16 	bl	8008c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e30:	2301      	movs	r3, #1
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e34:	f001 fdfe 	bl	8009a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e38:	f000 fc70 	bl	800871c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e3c:	f001 fdca 	bl	80099d4 <vPortEnterCritical>
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d103      	bne.n	8007e56 <xQueueReceive+0x122>
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e5c:	b25b      	sxtb	r3, r3
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d103      	bne.n	8007e6c <xQueueReceive+0x138>
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e6c:	f001 fde2 	bl	8009a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e70:	1d3a      	adds	r2, r7, #4
 8007e72:	f107 0310 	add.w	r3, r7, #16
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 ff05 	bl	8008c88 <xTaskCheckForTimeOut>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d123      	bne.n	8007ecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e86:	f000 f917 	bl	80080b8 <prvIsQueueEmpty>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d017      	beq.n	8007ec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fe2b 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea0:	f000 f8b8 	bl	8008014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ea4:	f000 fc48 	bl	8008738 <xTaskResumeAll>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d189      	bne.n	8007dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xQueueReceive+0x1bc>)
 8007eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	e780      	b.n	8007dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec2:	f000 f8a7 	bl	8008014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ec6:	f000 fc37 	bl	8008738 <xTaskResumeAll>
 8007eca:	e77a      	b.n	8007dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f000 f8a1 	bl	8008014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ed2:	f000 fc31 	bl	8008738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed8:	f000 f8ee 	bl	80080b8 <prvIsQueueEmpty>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f43f af6f 	beq.w	8007dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3730      	adds	r7, #48	; 0x30
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d14d      	bne.n	8007fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f818 	bl	8008f54 <xTaskPriorityDisinherit>
 8007f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	609a      	str	r2, [r3, #8]
 8007f2c:	e043      	b.n	8007fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d119      	bne.n	8007f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6858      	ldr	r0, [r3, #4]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	f002 f977 	bl	800a232 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d32b      	bcc.n	8007fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	e026      	b.n	8007fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68d8      	ldr	r0, [r3, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	461a      	mov	r2, r3
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	f002 f95d 	bl	800a232 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	425b      	negs	r3, r3
 8007f82:	441a      	add	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d207      	bcs.n	8007fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	425b      	negs	r3, r3
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d105      	bne.n	8007fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fbe:	697b      	ldr	r3, [r7, #20]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d018      	beq.n	800800c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	441a      	add	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d303      	bcc.n	8007ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68d9      	ldr	r1, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	461a      	mov	r2, r3
 8008006:	6838      	ldr	r0, [r7, #0]
 8008008:	f002 f913 	bl	800a232 <memcpy>
	}
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800801c:	f001 fcda 	bl	80099d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008028:	e011      	b.n	800804e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d012      	beq.n	8008058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3324      	adds	r3, #36	; 0x24
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fdac 	bl	8008b94 <xTaskRemoveFromEventList>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008042:	f000 fe83 	bl	8008d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	3b01      	subs	r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800804e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008052:	2b00      	cmp	r3, #0
 8008054:	dce9      	bgt.n	800802a <prvUnlockQueue+0x16>
 8008056:	e000      	b.n	800805a <prvUnlockQueue+0x46>
					break;
 8008058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	22ff      	movs	r2, #255	; 0xff
 800805e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008062:	f001 fce7 	bl	8009a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008066:	f001 fcb5 	bl	80099d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008072:	e011      	b.n	8008098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d012      	beq.n	80080a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3310      	adds	r3, #16
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fd87 	bl	8008b94 <xTaskRemoveFromEventList>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800808c:	f000 fe5e 	bl	8008d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	3b01      	subs	r3, #1
 8008094:	b2db      	uxtb	r3, r3
 8008096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800809c:	2b00      	cmp	r3, #0
 800809e:	dce9      	bgt.n	8008074 <prvUnlockQueue+0x60>
 80080a0:	e000      	b.n	80080a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	22ff      	movs	r2, #255	; 0xff
 80080a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080ac:	f001 fcc2 	bl	8009a34 <vPortExitCritical>
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080c0:	f001 fc88 	bl	80099d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e001      	b.n	80080d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080d6:	f001 fcad 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 80080da:	68fb      	ldr	r3, [r7, #12]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080ec:	f001 fc72 	bl	80099d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d102      	bne.n	8008102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e001      	b.n	8008106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008106:	f001 fc95 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 800810a:	68fb      	ldr	r3, [r7, #12]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e014      	b.n	800814e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008124:	4a0f      	ldr	r2, [pc, #60]	; (8008164 <vQueueAddToRegistry+0x50>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008130:	490c      	ldr	r1, [pc, #48]	; (8008164 <vQueueAddToRegistry+0x50>)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800813a:	4a0a      	ldr	r2, [pc, #40]	; (8008164 <vQueueAddToRegistry+0x50>)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008146:	e006      	b.n	8008156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b07      	cmp	r3, #7
 8008152:	d9e7      	bls.n	8008124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000d94 	.word	0x20000d94

08008168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008178:	f001 fc2c 	bl	80099d4 <vPortEnterCritical>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008182:	b25b      	sxtb	r3, r3
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d103      	bne.n	8008192 <vQueueWaitForMessageRestricted+0x2a>
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008198:	b25b      	sxtb	r3, r3
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d103      	bne.n	80081a8 <vQueueWaitForMessageRestricted+0x40>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081a8:	f001 fc44 	bl	8009a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d106      	bne.n	80081c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	3324      	adds	r3, #36	; 0x24
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fcbd 	bl	8008b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f7ff ff26 	bl	8008014 <prvUnlockQueue>
	}
 80081c8:	bf00      	nop
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08e      	sub	sp, #56	; 0x38
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	623b      	str	r3, [r7, #32]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <xTaskCreateStatic+0x46>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	61fb      	str	r3, [r7, #28]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008216:	23bc      	movs	r3, #188	; 0xbc
 8008218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2bbc      	cmp	r3, #188	; 0xbc
 800821e:	d00a      	beq.n	8008236 <xTaskCreateStatic+0x66>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	61bb      	str	r3, [r7, #24]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01e      	beq.n	800827c <xTaskCreateStatic+0xac>
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01b      	beq.n	800827c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800824c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	2202      	movs	r2, #2
 8008252:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008256:	2300      	movs	r3, #0
 8008258:	9303      	str	r3, [sp, #12]
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	9302      	str	r3, [sp, #8]
 800825e:	f107 0314 	add.w	r3, r7, #20
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f850 	bl	8008314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008276:	f000 f8f3 	bl	8008460 <prvAddNewTaskToReadyList>
 800827a:	e001      	b.n	8008280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3728      	adds	r7, #40	; 0x28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08c      	sub	sp, #48	; 0x30
 800828e:	af04      	add	r7, sp, #16
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fcba 	bl	8009c18 <pvPortMalloc>
 80082a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00e      	beq.n	80082ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082ac:	20bc      	movs	r0, #188	; 0xbc
 80082ae:	f001 fcb3 	bl	8009c18 <pvPortMalloc>
 80082b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
 80082c0:	e005      	b.n	80082ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082c2:	6978      	ldr	r0, [r7, #20]
 80082c4:	f001 fd74 	bl	8009db0 <vPortFree>
 80082c8:	e001      	b.n	80082ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d017      	beq.n	8008304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082dc:	88fa      	ldrh	r2, [r7, #6]
 80082de:	2300      	movs	r3, #0
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	9302      	str	r3, [sp, #8]
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f80e 	bl	8008314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082f8:	69f8      	ldr	r0, [r7, #28]
 80082fa:	f000 f8b1 	bl	8008460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082fe:	2301      	movs	r3, #1
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	e002      	b.n	800830a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008304:	f04f 33ff 	mov.w	r3, #4294967295
 8008308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800830a:	69bb      	ldr	r3, [r7, #24]
	}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	461a      	mov	r2, r3
 800832c:	21a5      	movs	r1, #165	; 0xa5
 800832e:	f001 ff8e 	bl	800a24e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800833c:	3b01      	subs	r3, #1
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	617b      	str	r3, [r7, #20]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01f      	beq.n	80083b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	e012      	b.n	800839e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	7819      	ldrb	r1, [r3, #0]
 8008380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	3334      	adds	r3, #52	; 0x34
 8008388:	460a      	mov	r2, r1
 800838a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3301      	adds	r3, #1
 800839c:	61fb      	str	r3, [r7, #28]
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b0f      	cmp	r3, #15
 80083a2:	d9e9      	bls.n	8008378 <prvInitialiseNewTask+0x64>
 80083a4:	e000      	b.n	80083a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80083a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083b0:	e003      	b.n	80083ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	2b37      	cmp	r3, #55	; 0x37
 80083be:	d901      	bls.n	80083c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083c0:	2337      	movs	r3, #55	; 0x37
 80083c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	2200      	movs	r2, #0
 80083d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f978 	bl	80076d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	3318      	adds	r3, #24
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff f973 	bl	80076d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2200      	movs	r2, #0
 800840c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	3354      	adds	r3, #84	; 0x54
 8008414:	2260      	movs	r2, #96	; 0x60
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f001 ff18 	bl	800a24e <memset>
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	4a0c      	ldr	r2, [pc, #48]	; (8008454 <prvInitialiseNewTask+0x140>)
 8008422:	659a      	str	r2, [r3, #88]	; 0x58
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	4a0c      	ldr	r2, [pc, #48]	; (8008458 <prvInitialiseNewTask+0x144>)
 8008428:	65da      	str	r2, [r3, #92]	; 0x5c
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	4a0b      	ldr	r2, [pc, #44]	; (800845c <prvInitialiseNewTask+0x148>)
 800842e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	69b8      	ldr	r0, [r7, #24]
 8008436:	f001 f99d 	bl	8009774 <pxPortInitialiseStack>
 800843a:	4602      	mov	r2, r0
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800844c:	bf00      	nop
 800844e:	3720      	adds	r7, #32
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	0800b3e8 	.word	0x0800b3e8
 8008458:	0800b408 	.word	0x0800b408
 800845c:	0800b3c8 	.word	0x0800b3c8

08008460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008468:	f001 fab4 	bl	80099d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800846c:	4b2d      	ldr	r3, [pc, #180]	; (8008524 <prvAddNewTaskToReadyList+0xc4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a2c      	ldr	r2, [pc, #176]	; (8008524 <prvAddNewTaskToReadyList+0xc4>)
 8008474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008476:	4b2c      	ldr	r3, [pc, #176]	; (8008528 <prvAddNewTaskToReadyList+0xc8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800847e:	4a2a      	ldr	r2, [pc, #168]	; (8008528 <prvAddNewTaskToReadyList+0xc8>)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008484:	4b27      	ldr	r3, [pc, #156]	; (8008524 <prvAddNewTaskToReadyList+0xc4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d110      	bne.n	80084ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800848c:	f000 fc82 	bl	8008d94 <prvInitialiseTaskLists>
 8008490:	e00d      	b.n	80084ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008492:	4b26      	ldr	r3, [pc, #152]	; (800852c <prvAddNewTaskToReadyList+0xcc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800849a:	4b23      	ldr	r3, [pc, #140]	; (8008528 <prvAddNewTaskToReadyList+0xc8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d802      	bhi.n	80084ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <prvAddNewTaskToReadyList+0xc8>)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084ae:	4b20      	ldr	r3, [pc, #128]	; (8008530 <prvAddNewTaskToReadyList+0xd0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <prvAddNewTaskToReadyList+0xd0>)
 80084b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084b8:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <prvAddNewTaskToReadyList+0xd0>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <prvAddNewTaskToReadyList+0xd4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d903      	bls.n	80084d4 <prvAddNewTaskToReadyList+0x74>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	4a18      	ldr	r2, [pc, #96]	; (8008534 <prvAddNewTaskToReadyList+0xd4>)
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4a15      	ldr	r2, [pc, #84]	; (8008538 <prvAddNewTaskToReadyList+0xd8>)
 80084e2:	441a      	add	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4619      	mov	r1, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	f7ff f8fd 	bl	80076ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084f0:	f001 faa0 	bl	8009a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <prvAddNewTaskToReadyList+0xcc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00e      	beq.n	800851a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <prvAddNewTaskToReadyList+0xc8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	429a      	cmp	r2, r3
 8008508:	d207      	bcs.n	800851a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800850a:	4b0c      	ldr	r3, [pc, #48]	; (800853c <prvAddNewTaskToReadyList+0xdc>)
 800850c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200012a8 	.word	0x200012a8
 8008528:	20000dd4 	.word	0x20000dd4
 800852c:	200012b4 	.word	0x200012b4
 8008530:	200012c4 	.word	0x200012c4
 8008534:	200012b0 	.word	0x200012b0
 8008538:	20000dd8 	.word	0x20000dd8
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	; 0x28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10a      	bne.n	800856a <vTaskDelayUntil+0x2a>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	617b      	str	r3, [r7, #20]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <vTaskDelayUntil+0x46>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008586:	4b2a      	ldr	r3, [pc, #168]	; (8008630 <vTaskDelayUntil+0xf0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <vTaskDelayUntil+0x64>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	60fb      	str	r3, [r7, #12]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80085a4:	f000 f8ba 	bl	800871c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80085a8:	4b22      	ldr	r3, [pc, #136]	; (8008634 <vTaskDelayUntil+0xf4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6a3a      	ldr	r2, [r7, #32]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d20b      	bcs.n	80085da <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d211      	bcs.n	80085f0 <vTaskDelayUntil+0xb0>
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d90d      	bls.n	80085f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
 80085d8:	e00a      	b.n	80085f0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d303      	bcc.n	80085ec <vTaskDelayUntil+0xac>
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d901      	bls.n	80085f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80085ec:	2301      	movs	r3, #1
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fd13 	bl	8009030 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800860a:	f000 f895 	bl	8008738 <xTaskResumeAll>
 800860e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d107      	bne.n	8008626 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008616:	4b08      	ldr	r3, [pc, #32]	; (8008638 <vTaskDelayUntil+0xf8>)
 8008618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008626:	bf00      	nop
 8008628:	3728      	adds	r7, #40	; 0x28
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	200012d0 	.word	0x200012d0
 8008634:	200012ac 	.word	0x200012ac
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	; 0x28
 8008640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800864a:	463a      	mov	r2, r7
 800864c:	1d39      	adds	r1, r7, #4
 800864e:	f107 0308 	add.w	r3, r7, #8
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe ffe8 	bl	8007628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	9202      	str	r2, [sp, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	2300      	movs	r3, #0
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2300      	movs	r3, #0
 8008668:	460a      	mov	r2, r1
 800866a:	4924      	ldr	r1, [pc, #144]	; (80086fc <vTaskStartScheduler+0xc0>)
 800866c:	4824      	ldr	r0, [pc, #144]	; (8008700 <vTaskStartScheduler+0xc4>)
 800866e:	f7ff fdaf 	bl	80081d0 <xTaskCreateStatic>
 8008672:	4603      	mov	r3, r0
 8008674:	4a23      	ldr	r2, [pc, #140]	; (8008704 <vTaskStartScheduler+0xc8>)
 8008676:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008678:	4b22      	ldr	r3, [pc, #136]	; (8008704 <vTaskStartScheduler+0xc8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e001      	b.n	800868a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d102      	bne.n	8008696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008690:	f000 fd22 	bl	80090d8 <xTimerCreateTimerTask>
 8008694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d11b      	bne.n	80086d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	613b      	str	r3, [r7, #16]
}
 80086ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086b0:	4b15      	ldr	r3, [pc, #84]	; (8008708 <vTaskStartScheduler+0xcc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3354      	adds	r3, #84	; 0x54
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <vTaskStartScheduler+0xd0>)
 80086b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <vTaskStartScheduler+0xd4>)
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295
 80086c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <vTaskStartScheduler+0xd8>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086c8:	4b13      	ldr	r3, [pc, #76]	; (8008718 <vTaskStartScheduler+0xdc>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086ce:	f001 f8df 	bl	8009890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086d2:	e00e      	b.n	80086f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d10a      	bne.n	80086f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vTaskStartScheduler+0xb4>
}
 80086f2:	bf00      	nop
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	0800b2dc 	.word	0x0800b2dc
 8008700:	08008d65 	.word	0x08008d65
 8008704:	200012cc 	.word	0x200012cc
 8008708:	20000dd4 	.word	0x20000dd4
 800870c:	20000040 	.word	0x20000040
 8008710:	200012c8 	.word	0x200012c8
 8008714:	200012b4 	.word	0x200012b4
 8008718:	200012ac 	.word	0x200012ac

0800871c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008720:	4b04      	ldr	r3, [pc, #16]	; (8008734 <vTaskSuspendAll+0x18>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a03      	ldr	r2, [pc, #12]	; (8008734 <vTaskSuspendAll+0x18>)
 8008728:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800872a:	bf00      	nop
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	200012d0 	.word	0x200012d0

08008738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008746:	4b42      	ldr	r3, [pc, #264]	; (8008850 <xTaskResumeAll+0x118>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <xTaskResumeAll+0x2c>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	603b      	str	r3, [r7, #0]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008764:	f001 f936 	bl	80099d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008768:	4b39      	ldr	r3, [pc, #228]	; (8008850 <xTaskResumeAll+0x118>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3b01      	subs	r3, #1
 800876e:	4a38      	ldr	r2, [pc, #224]	; (8008850 <xTaskResumeAll+0x118>)
 8008770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008772:	4b37      	ldr	r3, [pc, #220]	; (8008850 <xTaskResumeAll+0x118>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d162      	bne.n	8008840 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800877a:	4b36      	ldr	r3, [pc, #216]	; (8008854 <xTaskResumeAll+0x11c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d05e      	beq.n	8008840 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008782:	e02f      	b.n	80087e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b34      	ldr	r3, [pc, #208]	; (8008858 <xTaskResumeAll+0x120>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3318      	adds	r3, #24
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff f807 	bl	80077a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3304      	adds	r3, #4
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff f802 	bl	80077a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4b2d      	ldr	r3, [pc, #180]	; (800885c <xTaskResumeAll+0x124>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d903      	bls.n	80087b4 <xTaskResumeAll+0x7c>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	4a2a      	ldr	r2, [pc, #168]	; (800885c <xTaskResumeAll+0x124>)
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4a27      	ldr	r2, [pc, #156]	; (8008860 <xTaskResumeAll+0x128>)
 80087c2:	441a      	add	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7fe ff8d 	bl	80076ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d4:	4b23      	ldr	r3, [pc, #140]	; (8008864 <xTaskResumeAll+0x12c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d302      	bcc.n	80087e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80087de:	4b22      	ldr	r3, [pc, #136]	; (8008868 <xTaskResumeAll+0x130>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087e4:	4b1c      	ldr	r3, [pc, #112]	; (8008858 <xTaskResumeAll+0x120>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1cb      	bne.n	8008784 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087f2:	f000 fb71 	bl	8008ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087f6:	4b1d      	ldr	r3, [pc, #116]	; (800886c <xTaskResumeAll+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d010      	beq.n	8008824 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008802:	f000 f859 	bl	80088b8 <xTaskIncrementTick>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800880c:	4b16      	ldr	r3, [pc, #88]	; (8008868 <xTaskResumeAll+0x130>)
 800880e:	2201      	movs	r2, #1
 8008810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3b01      	subs	r3, #1
 8008816:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1f1      	bne.n	8008802 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <xTaskResumeAll+0x134>)
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008824:	4b10      	ldr	r3, [pc, #64]	; (8008868 <xTaskResumeAll+0x130>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <xTaskResumeAll+0x138>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008840:	f001 f8f8 	bl	8009a34 <vPortExitCritical>

	return xAlreadyYielded;
 8008844:	68bb      	ldr	r3, [r7, #8]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200012d0 	.word	0x200012d0
 8008854:	200012a8 	.word	0x200012a8
 8008858:	20001268 	.word	0x20001268
 800885c:	200012b0 	.word	0x200012b0
 8008860:	20000dd8 	.word	0x20000dd8
 8008864:	20000dd4 	.word	0x20000dd4
 8008868:	200012bc 	.word	0x200012bc
 800886c:	200012b8 	.word	0x200012b8
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <xTaskGetTickCount+0x1c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008880:	687b      	ldr	r3, [r7, #4]
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	200012ac 	.word	0x200012ac

08008894 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800889a:	f001 f97d 	bl	8009b98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800889e:	2300      	movs	r3, #0
 80088a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80088a2:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <xTaskGetTickCountFromISR+0x20>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088a8:	683b      	ldr	r3, [r7, #0]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	200012ac 	.word	0x200012ac

080088b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c2:	4b4f      	ldr	r3, [pc, #316]	; (8008a00 <xTaskIncrementTick+0x148>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 808f 	bne.w	80089ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088cc:	4b4d      	ldr	r3, [pc, #308]	; (8008a04 <xTaskIncrementTick+0x14c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3301      	adds	r3, #1
 80088d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088d4:	4a4b      	ldr	r2, [pc, #300]	; (8008a04 <xTaskIncrementTick+0x14c>)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d120      	bne.n	8008922 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088e0:	4b49      	ldr	r3, [pc, #292]	; (8008a08 <xTaskIncrementTick+0x150>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <xTaskIncrementTick+0x48>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	603b      	str	r3, [r7, #0]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xTaskIncrementTick+0x46>
 8008900:	4b41      	ldr	r3, [pc, #260]	; (8008a08 <xTaskIncrementTick+0x150>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	4b41      	ldr	r3, [pc, #260]	; (8008a0c <xTaskIncrementTick+0x154>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <xTaskIncrementTick+0x150>)
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4a3f      	ldr	r2, [pc, #252]	; (8008a0c <xTaskIncrementTick+0x154>)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	4b3e      	ldr	r3, [pc, #248]	; (8008a10 <xTaskIncrementTick+0x158>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	4a3d      	ldr	r2, [pc, #244]	; (8008a10 <xTaskIncrementTick+0x158>)
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	f000 fadb 	bl	8008ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008922:	4b3c      	ldr	r3, [pc, #240]	; (8008a14 <xTaskIncrementTick+0x15c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	429a      	cmp	r2, r3
 800892a:	d349      	bcc.n	80089c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892c:	4b36      	ldr	r3, [pc, #216]	; (8008a08 <xTaskIncrementTick+0x150>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008936:	4b37      	ldr	r3, [pc, #220]	; (8008a14 <xTaskIncrementTick+0x15c>)
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	601a      	str	r2, [r3, #0]
					break;
 800893e:	e03f      	b.n	80089c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <xTaskIncrementTick+0x150>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d203      	bcs.n	8008960 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008958:	4a2e      	ldr	r2, [pc, #184]	; (8008a14 <xTaskIncrementTick+0x15c>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800895e:	e02f      	b.n	80089c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe ff1d 	bl	80077a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3318      	adds	r3, #24
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe ff14 	bl	80077a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <xTaskIncrementTick+0x160>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d903      	bls.n	8008990 <xTaskIncrementTick+0xd8>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	4a22      	ldr	r2, [pc, #136]	; (8008a18 <xTaskIncrementTick+0x160>)
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <xTaskIncrementTick+0x164>)
 800899e:	441a      	add	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fe fe9f 	bl	80076ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	4b1b      	ldr	r3, [pc, #108]	; (8008a20 <xTaskIncrementTick+0x168>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d3b8      	bcc.n	800892c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089be:	e7b5      	b.n	800892c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089c0:	4b17      	ldr	r3, [pc, #92]	; (8008a20 <xTaskIncrementTick+0x168>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	4915      	ldr	r1, [pc, #84]	; (8008a1c <xTaskIncrementTick+0x164>)
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d901      	bls.n	80089dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <xTaskIncrementTick+0x16c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e004      	b.n	80089f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <xTaskIncrementTick+0x170>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3301      	adds	r3, #1
 80089f0:	4a0d      	ldr	r2, [pc, #52]	; (8008a28 <xTaskIncrementTick+0x170>)
 80089f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089f4:	697b      	ldr	r3, [r7, #20]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	200012d0 	.word	0x200012d0
 8008a04:	200012ac 	.word	0x200012ac
 8008a08:	20001260 	.word	0x20001260
 8008a0c:	20001264 	.word	0x20001264
 8008a10:	200012c0 	.word	0x200012c0
 8008a14:	200012c8 	.word	0x200012c8
 8008a18:	200012b0 	.word	0x200012b0
 8008a1c:	20000dd8 	.word	0x20000dd8
 8008a20:	20000dd4 	.word	0x20000dd4
 8008a24:	200012bc 	.word	0x200012bc
 8008a28:	200012b8 	.word	0x200012b8

08008a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a32:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <vTaskSwitchContext+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a3a:	4b29      	ldr	r3, [pc, #164]	; (8008ae0 <vTaskSwitchContext+0xb4>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a40:	e046      	b.n	8008ad0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a42:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <vTaskSwitchContext+0xb4>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a48:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <vTaskSwitchContext+0xb8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	e010      	b.n	8008a72 <vTaskSwitchContext+0x46>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <vTaskSwitchContext+0x40>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	607b      	str	r3, [r7, #4]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <vTaskSwitchContext+0x3e>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	491d      	ldr	r1, [pc, #116]	; (8008ae8 <vTaskSwitchContext+0xbc>)
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0e4      	beq.n	8008a50 <vTaskSwitchContext+0x24>
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <vTaskSwitchContext+0xbc>)
 8008a92:	4413      	add	r3, r2
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d104      	bne.n	8008ab6 <vTaskSwitchContext+0x8a>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	4a0b      	ldr	r2, [pc, #44]	; (8008aec <vTaskSwitchContext+0xc0>)
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <vTaskSwitchContext+0xb8>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <vTaskSwitchContext+0xc0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3354      	adds	r3, #84	; 0x54
 8008acc:	4a08      	ldr	r2, [pc, #32]	; (8008af0 <vTaskSwitchContext+0xc4>)
 8008ace:	6013      	str	r3, [r2, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	200012d0 	.word	0x200012d0
 8008ae0:	200012bc 	.word	0x200012bc
 8008ae4:	200012b0 	.word	0x200012b0
 8008ae8:	20000dd8 	.word	0x20000dd8
 8008aec:	20000dd4 	.word	0x20000dd4
 8008af0:	20000040 	.word	0x20000040

08008af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <vTaskPlaceOnEventList+0x44>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3318      	adds	r3, #24
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fe fe05 	bl	8007732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6838      	ldr	r0, [r7, #0]
 8008b2c:	f000 fa80 	bl	8009030 <prvAddCurrentTaskToDelayedList>
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20000dd4 	.word	0x20000dd4

08008b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	617b      	str	r3, [r7, #20]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7fe fdbc 	bl	80076ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	f000 fa55 	bl	8009030 <prvAddCurrentTaskToDelayedList>
	}
 8008b86:	bf00      	nop
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000dd4 	.word	0x20000dd4

08008b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	60fb      	str	r3, [r7, #12]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	3318      	adds	r3, #24
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fded 	bl	80077a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bca:	4b1e      	ldr	r3, [pc, #120]	; (8008c44 <xTaskRemoveFromEventList+0xb0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d11d      	bne.n	8008c0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fde4 	bl	80077a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <xTaskRemoveFromEventList+0xb4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d903      	bls.n	8008bf0 <xTaskRemoveFromEventList+0x5c>
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <xTaskRemoveFromEventList+0xb4>)
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <xTaskRemoveFromEventList+0xb8>)
 8008bfe:	441a      	add	r2, r3
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7fe fd6f 	bl	80076ea <vListInsertEnd>
 8008c0c:	e005      	b.n	8008c1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	3318      	adds	r3, #24
 8008c12:	4619      	mov	r1, r3
 8008c14:	480e      	ldr	r0, [pc, #56]	; (8008c50 <xTaskRemoveFromEventList+0xbc>)
 8008c16:	f7fe fd68 	bl	80076ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <xTaskRemoveFromEventList+0xc0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d905      	bls.n	8008c34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <xTaskRemoveFromEventList+0xc4>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e001      	b.n	8008c38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	200012d0 	.word	0x200012d0
 8008c48:	200012b0 	.word	0x200012b0
 8008c4c:	20000dd8 	.word	0x20000dd8
 8008c50:	20001268 	.word	0x20001268
 8008c54:	20000dd4 	.word	0x20000dd4
 8008c58:	200012bc 	.word	0x200012bc

08008c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <vTaskInternalSetTimeOutState+0x24>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <vTaskInternalSetTimeOutState+0x28>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	605a      	str	r2, [r3, #4]
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	200012c0 	.word	0x200012c0
 8008c84:	200012ac 	.word	0x200012ac

08008c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	613b      	str	r3, [r7, #16]
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60fb      	str	r3, [r7, #12]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008cca:	f000 fe83 	bl	80099d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cce:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <xTaskCheckForTimeOut+0xbc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e023      	b.n	8008d36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <xTaskCheckForTimeOut+0xc0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d007      	beq.n	8008d0a <xTaskCheckForTimeOut+0x82>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d302      	bcc.n	8008d0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e015      	b.n	8008d36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d20b      	bcs.n	8008d2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	1ad2      	subs	r2, r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ff9b 	bl	8008c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
 8008d2a:	e004      	b.n	8008d36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d32:	2301      	movs	r3, #1
 8008d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d36:	f000 fe7d 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	200012ac 	.word	0x200012ac
 8008d48:	200012c0 	.word	0x200012c0

08008d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d50:	4b03      	ldr	r3, [pc, #12]	; (8008d60 <vTaskMissedYield+0x14>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
}
 8008d56:	bf00      	nop
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	200012bc 	.word	0x200012bc

08008d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d6c:	f000 f852 	bl	8008e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <prvIdleTask+0x28>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d9f9      	bls.n	8008d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <prvIdleTask+0x2c>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d88:	e7f0      	b.n	8008d6c <prvIdleTask+0x8>
 8008d8a:	bf00      	nop
 8008d8c:	20000dd8 	.word	0x20000dd8
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	e00c      	b.n	8008dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4a12      	ldr	r2, [pc, #72]	; (8008df4 <prvInitialiseTaskLists+0x60>)
 8008dac:	4413      	add	r3, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fc6e 	bl	8007690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3301      	adds	r3, #1
 8008db8:	607b      	str	r3, [r7, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b37      	cmp	r3, #55	; 0x37
 8008dbe:	d9ef      	bls.n	8008da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dc0:	480d      	ldr	r0, [pc, #52]	; (8008df8 <prvInitialiseTaskLists+0x64>)
 8008dc2:	f7fe fc65 	bl	8007690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dc6:	480d      	ldr	r0, [pc, #52]	; (8008dfc <prvInitialiseTaskLists+0x68>)
 8008dc8:	f7fe fc62 	bl	8007690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dcc:	480c      	ldr	r0, [pc, #48]	; (8008e00 <prvInitialiseTaskLists+0x6c>)
 8008dce:	f7fe fc5f 	bl	8007690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dd2:	480c      	ldr	r0, [pc, #48]	; (8008e04 <prvInitialiseTaskLists+0x70>)
 8008dd4:	f7fe fc5c 	bl	8007690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dd8:	480b      	ldr	r0, [pc, #44]	; (8008e08 <prvInitialiseTaskLists+0x74>)
 8008dda:	f7fe fc59 	bl	8007690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dde:	4b0b      	ldr	r3, [pc, #44]	; (8008e0c <prvInitialiseTaskLists+0x78>)
 8008de0:	4a05      	ldr	r2, [pc, #20]	; (8008df8 <prvInitialiseTaskLists+0x64>)
 8008de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <prvInitialiseTaskLists+0x7c>)
 8008de6:	4a05      	ldr	r2, [pc, #20]	; (8008dfc <prvInitialiseTaskLists+0x68>)
 8008de8:	601a      	str	r2, [r3, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000dd8 	.word	0x20000dd8
 8008df8:	20001238 	.word	0x20001238
 8008dfc:	2000124c 	.word	0x2000124c
 8008e00:	20001268 	.word	0x20001268
 8008e04:	2000127c 	.word	0x2000127c
 8008e08:	20001294 	.word	0x20001294
 8008e0c:	20001260 	.word	0x20001260
 8008e10:	20001264 	.word	0x20001264

08008e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e1a:	e019      	b.n	8008e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e1c:	f000 fdda 	bl	80099d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e20:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <prvCheckTasksWaitingTermination+0x50>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fcb9 	bl	80077a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <prvCheckTasksWaitingTermination+0x54>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <prvCheckTasksWaitingTermination+0x54>)
 8008e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e3c:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <prvCheckTasksWaitingTermination+0x58>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4a0a      	ldr	r2, [pc, #40]	; (8008e6c <prvCheckTasksWaitingTermination+0x58>)
 8008e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e46:	f000 fdf5 	bl	8009a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f810 	bl	8008e70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <prvCheckTasksWaitingTermination+0x58>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e1      	bne.n	8008e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	2000127c 	.word	0x2000127c
 8008e68:	200012a8 	.word	0x200012a8
 8008e6c:	20001290 	.word	0x20001290

08008e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3354      	adds	r3, #84	; 0x54
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f001 fb1f 	bl	800a4c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d108      	bne.n	8008e9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ff8d 	bl	8009db0 <vPortFree>
				vPortFree( pxTCB );
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 ff8a 	bl	8009db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e9c:	e018      	b.n	8008ed0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d103      	bne.n	8008eb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 ff81 	bl	8009db0 <vPortFree>
	}
 8008eae:	e00f      	b.n	8008ed0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d00a      	beq.n	8008ed0 <prvDeleteTCB+0x60>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <prvDeleteTCB+0x5e>
	}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <prvResetNextTaskUnblockTime+0x38>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <prvResetNextTaskUnblockTime+0x3c>)
 8008eea:	f04f 32ff 	mov.w	r2, #4294967295
 8008eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ef0:	e008      	b.n	8008f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <prvResetNextTaskUnblockTime+0x38>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <prvResetNextTaskUnblockTime+0x3c>)
 8008f02:	6013      	str	r3, [r2, #0]
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20001260 	.word	0x20001260
 8008f14:	200012c8 	.word	0x200012c8

08008f18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <xTaskGetSchedulerState+0x34>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f26:	2301      	movs	r3, #1
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	e008      	b.n	8008f3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2c:	4b08      	ldr	r3, [pc, #32]	; (8008f50 <xTaskGetSchedulerState+0x38>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f34:	2302      	movs	r3, #2
 8008f36:	607b      	str	r3, [r7, #4]
 8008f38:	e001      	b.n	8008f3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f3e:	687b      	ldr	r3, [r7, #4]
	}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200012b4 	.word	0x200012b4
 8008f50:	200012d0 	.word	0x200012d0

08008f54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d056      	beq.n	8009018 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <xTaskPriorityDisinherit+0xd0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d00a      	beq.n	8008f8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	60fb      	str	r3, [r7, #12]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	60bb      	str	r3, [r7, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d02c      	beq.n	8009018 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d128      	bne.n	8009018 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fbea 	bl	80077a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <xTaskPriorityDisinherit+0xd4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d903      	bls.n	8008ff8 <xTaskPriorityDisinherit+0xa4>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a0c      	ldr	r2, [pc, #48]	; (8009028 <xTaskPriorityDisinherit+0xd4>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4a09      	ldr	r2, [pc, #36]	; (800902c <xTaskPriorityDisinherit+0xd8>)
 8009006:	441a      	add	r2, r3
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fb6b 	bl	80076ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009018:	697b      	ldr	r3, [r7, #20]
	}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000dd4 	.word	0x20000dd4
 8009028:	200012b0 	.word	0x200012b0
 800902c:	20000dd8 	.word	0x20000dd8

08009030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800903a:	4b21      	ldr	r3, [pc, #132]	; (80090c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009040:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3304      	adds	r3, #4
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fbac 	bl	80077a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d10a      	bne.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3304      	adds	r3, #4
 8009060:	4619      	mov	r1, r3
 8009062:	4819      	ldr	r0, [pc, #100]	; (80090c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009064:	f7fe fb41 	bl	80076ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009068:	e026      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	429a      	cmp	r2, r3
 8009080:	d209      	bcs.n	8009096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7fe fb4f 	bl	8007732 <vListInsert>
}
 8009094:	e010      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009096:	4b0e      	ldr	r3, [pc, #56]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fe fb45 	bl	8007732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d202      	bcs.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090b2:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	200012ac 	.word	0x200012ac
 80090c4:	20000dd4 	.word	0x20000dd4
 80090c8:	20001294 	.word	0x20001294
 80090cc:	20001264 	.word	0x20001264
 80090d0:	20001260 	.word	0x20001260
 80090d4:	200012c8 	.word	0x200012c8

080090d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090e2:	f000 fb07 	bl	80096f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090e6:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <xTimerCreateTimerTask+0x80>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d021      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090f6:	1d3a      	adds	r2, r7, #4
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe faab 	bl	800765c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2302      	movs	r3, #2
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	460a      	mov	r2, r1
 8009118:	4910      	ldr	r1, [pc, #64]	; (800915c <xTimerCreateTimerTask+0x84>)
 800911a:	4811      	ldr	r0, [pc, #68]	; (8009160 <xTimerCreateTimerTask+0x88>)
 800911c:	f7ff f858 	bl	80081d0 <xTaskCreateStatic>
 8009120:	4603      	mov	r3, r0
 8009122:	4a10      	ldr	r2, [pc, #64]	; (8009164 <xTimerCreateTimerTask+0x8c>)
 8009124:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009126:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <xTimerCreateTimerTask+0x8c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800912e:	2301      	movs	r3, #1
 8009130:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	613b      	str	r3, [r7, #16]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800914e:	697b      	ldr	r3, [r7, #20]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20001304 	.word	0x20001304
 800915c:	0800b2e4 	.word	0x0800b2e4
 8009160:	0800929d 	.word	0x0800929d
 8009164:	20001308 	.word	0x20001308

08009168 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	; 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009176:	2300      	movs	r3, #0
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009196:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <xTimerGenericCommand+0x98>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d02a      	beq.n	80091f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	dc18      	bgt.n	80091e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091b0:	f7ff feb2 	bl	8008f18 <xTaskGetSchedulerState>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d109      	bne.n	80091ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091ba:	4b11      	ldr	r3, [pc, #68]	; (8009200 <xTimerGenericCommand+0x98>)
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f107 0110 	add.w	r1, r7, #16
 80091c2:	2300      	movs	r3, #0
 80091c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c6:	f7fe fc1b 	bl	8007a00 <xQueueGenericSend>
 80091ca:	6278      	str	r0, [r7, #36]	; 0x24
 80091cc:	e012      	b.n	80091f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <xTimerGenericCommand+0x98>)
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f107 0110 	add.w	r1, r7, #16
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	f7fe fc11 	bl	8007a00 <xQueueGenericSend>
 80091de:	6278      	str	r0, [r7, #36]	; 0x24
 80091e0:	e008      	b.n	80091f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <xTimerGenericCommand+0x98>)
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	f107 0110 	add.w	r1, r7, #16
 80091ea:	2300      	movs	r3, #0
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	f7fe fd05 	bl	8007bfc <xQueueGenericSendFromISR>
 80091f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3728      	adds	r7, #40	; 0x28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20001304 	.word	0x20001304

08009204 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af02      	add	r7, sp, #8
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920e:	4b22      	ldr	r3, [pc, #136]	; (8009298 <prvProcessExpiredTimer+0x94>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fac1 	bl	80077a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d022      	beq.n	8009276 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	18d1      	adds	r1, r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	6978      	ldr	r0, [r7, #20]
 800923e:	f000 f8d1 	bl	80093e4 <prvInsertTimerInActiveList>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01f      	beq.n	8009288 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009248:	2300      	movs	r3, #0
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	2300      	movs	r3, #0
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	2100      	movs	r1, #0
 8009252:	6978      	ldr	r0, [r7, #20]
 8009254:	f7ff ff88 	bl	8009168 <xTimerGenericCommand>
 8009258:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d113      	bne.n	8009288 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800927c:	f023 0301 	bic.w	r3, r3, #1
 8009280:	b2da      	uxtb	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	6978      	ldr	r0, [r7, #20]
 800928e:	4798      	blx	r3
}
 8009290:	bf00      	nop
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	200012fc 	.word	0x200012fc

0800929c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f857 	bl	800935c <prvGetNextExpireTime>
 80092ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f803 	bl	80092c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092ba:	f000 f8d5 	bl	8009468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092be:	e7f1      	b.n	80092a4 <prvTimerTask+0x8>

080092c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092ca:	f7ff fa27 	bl	800871c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f866 	bl	80093a4 <prvSampleTimeNow>
 80092d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d130      	bne.n	8009342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <prvProcessTimerOrBlockTask+0x3c>
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d806      	bhi.n	80092fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092ee:	f7ff fa23 	bl	8008738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ff85 	bl	8009204 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092fa:	e024      	b.n	8009346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d008      	beq.n	8009314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <prvProcessTimerOrBlockTask+0x90>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <prvProcessTimerOrBlockTask+0x50>
 800930c:	2301      	movs	r3, #1
 800930e:	e000      	b.n	8009312 <prvProcessTimerOrBlockTask+0x52>
 8009310:	2300      	movs	r3, #0
 8009312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <prvProcessTimerOrBlockTask+0x94>)
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4619      	mov	r1, r3
 8009322:	f7fe ff21 	bl	8008168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009326:	f7ff fa07 	bl	8008738 <xTaskResumeAll>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009330:	4b09      	ldr	r3, [pc, #36]	; (8009358 <prvProcessTimerOrBlockTask+0x98>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
}
 8009340:	e001      	b.n	8009346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009342:	f7ff f9f9 	bl	8008738 <xTaskResumeAll>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20001300 	.word	0x20001300
 8009354:	20001304 	.word	0x20001304
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009364:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <prvGetNextExpireTime+0x44>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <prvGetNextExpireTime+0x16>
 800936e:	2201      	movs	r2, #1
 8009370:	e000      	b.n	8009374 <prvGetNextExpireTime+0x18>
 8009372:	2200      	movs	r2, #0
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d105      	bne.n	800938c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <prvGetNextExpireTime+0x44>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	e001      	b.n	8009390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009390:	68fb      	ldr	r3, [r7, #12]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	200012fc 	.word	0x200012fc

080093a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093ac:	f7ff fa62 	bl	8008874 <xTaskGetTickCount>
 80093b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <prvSampleTimeNow+0x3c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d205      	bcs.n	80093c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093bc:	f000 f936 	bl	800962c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	e002      	b.n	80093ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093ce:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <prvSampleTimeNow+0x3c>)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093d4:	68fb      	ldr	r3, [r7, #12]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	2000130c 	.word	0x2000130c

080093e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d812      	bhi.n	8009430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	429a      	cmp	r2, r3
 8009416:	d302      	bcc.n	800941e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	e01b      	b.n	8009456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800941e:	4b10      	ldr	r3, [pc, #64]	; (8009460 <prvInsertTimerInActiveList+0x7c>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fe f982 	bl	8007732 <vListInsert>
 800942e:	e012      	b.n	8009456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d206      	bcs.n	8009446 <prvInsertTimerInActiveList+0x62>
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d302      	bcc.n	8009446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	e007      	b.n	8009456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009446:	4b07      	ldr	r3, [pc, #28]	; (8009464 <prvInsertTimerInActiveList+0x80>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fe f96e 	bl	8007732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009456:	697b      	ldr	r3, [r7, #20]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20001300 	.word	0x20001300
 8009464:	200012fc 	.word	0x200012fc

08009468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08e      	sub	sp, #56	; 0x38
 800946c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800946e:	e0ca      	b.n	8009606 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	da18      	bge.n	80094a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009476:	1d3b      	adds	r3, r7, #4
 8009478:	3304      	adds	r3, #4
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	61fb      	str	r3, [r7, #28]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800949e:	6850      	ldr	r0, [r2, #4]
 80094a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a2:	6892      	ldr	r2, [r2, #8]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f2c0 80aa 	blt.w	8009604 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	3304      	adds	r3, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe f96f 	bl	80077a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094c6:	463b      	mov	r3, r7
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff ff6b 	bl	80093a4 <prvSampleTimeNow>
 80094ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	f200 8097 	bhi.w	8009606 <prvProcessReceivedCommands+0x19e>
 80094d8:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <prvProcessReceivedCommands+0x78>)
 80094da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094de:	bf00      	nop
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009509 	.word	0x08009509
 80094e8:	08009509 	.word	0x08009509
 80094ec:	0800957d 	.word	0x0800957d
 80094f0:	08009591 	.word	0x08009591
 80094f4:	080095db 	.word	0x080095db
 80094f8:	08009509 	.word	0x08009509
 80094fc:	08009509 	.word	0x08009509
 8009500:	0800957d 	.word	0x0800957d
 8009504:	08009591 	.word	0x08009591
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	18d1      	adds	r1, r2, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009528:	f7ff ff5c 	bl	80093e4 <prvInsertTimerInActiveList>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d069      	beq.n	8009606 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009538:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d05e      	beq.n	8009606 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	441a      	add	r2, r3
 8009550:	2300      	movs	r3, #0
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	2100      	movs	r1, #0
 8009558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800955a:	f7ff fe05 	bl	8009168 <xTimerGenericCommand>
 800955e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d14f      	bne.n	8009606 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	61bb      	str	r3, [r7, #24]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800958e:	e03a      	b.n	8009606 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	617b      	str	r3, [r7, #20]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	699a      	ldr	r2, [r3, #24]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	18d1      	adds	r1, r2, r3
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d4:	f7ff ff06 	bl	80093e4 <prvInsertTimerInActiveList>
					break;
 80095d8:	e015      	b.n	8009606 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d103      	bne.n	80095f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ea:	f000 fbe1 	bl	8009db0 <vPortFree>
 80095ee:	e00a      	b.n	8009606 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009602:	e000      	b.n	8009606 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009606:	4b08      	ldr	r3, [pc, #32]	; (8009628 <prvProcessReceivedCommands+0x1c0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	1d39      	adds	r1, r7, #4
 800960c:	2200      	movs	r2, #0
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fb90 	bl	8007d34 <xQueueReceive>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	f47f af2a 	bne.w	8009470 <prvProcessReceivedCommands+0x8>
	}
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	3730      	adds	r7, #48	; 0x30
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20001304 	.word	0x20001304

0800962c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009632:	e048      	b.n	80096c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009634:	4b2d      	ldr	r3, [pc, #180]	; (80096ec <prvSwitchTimerLists+0xc0>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963e:	4b2b      	ldr	r3, [pc, #172]	; (80096ec <prvSwitchTimerLists+0xc0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3304      	adds	r3, #4
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe f8a9 	bl	80077a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d02e      	beq.n	80096c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4413      	add	r3, r2
 8009670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d90e      	bls.n	8009698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009686:	4b19      	ldr	r3, [pc, #100]	; (80096ec <prvSwitchTimerLists+0xc0>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f7fe f84e 	bl	8007732 <vListInsert>
 8009696:	e016      	b.n	80096c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009698:	2300      	movs	r3, #0
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	2300      	movs	r3, #0
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7ff fd60 	bl	8009168 <xTimerGenericCommand>
 80096a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	603b      	str	r3, [r7, #0]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096c6:	4b09      	ldr	r3, [pc, #36]	; (80096ec <prvSwitchTimerLists+0xc0>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1b1      	bne.n	8009634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096d0:	4b06      	ldr	r3, [pc, #24]	; (80096ec <prvSwitchTimerLists+0xc0>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096d6:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <prvSwitchTimerLists+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a04      	ldr	r2, [pc, #16]	; (80096ec <prvSwitchTimerLists+0xc0>)
 80096dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096de:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <prvSwitchTimerLists+0xc4>)
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	200012fc 	.word	0x200012fc
 80096f0:	20001300 	.word	0x20001300

080096f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096fa:	f000 f96b 	bl	80099d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d120      	bne.n	8009748 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009706:	4814      	ldr	r0, [pc, #80]	; (8009758 <prvCheckForValidListAndQueue+0x64>)
 8009708:	f7fd ffc2 	bl	8007690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800970c:	4813      	ldr	r0, [pc, #76]	; (800975c <prvCheckForValidListAndQueue+0x68>)
 800970e:	f7fd ffbf 	bl	8007690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009712:	4b13      	ldr	r3, [pc, #76]	; (8009760 <prvCheckForValidListAndQueue+0x6c>)
 8009714:	4a10      	ldr	r2, [pc, #64]	; (8009758 <prvCheckForValidListAndQueue+0x64>)
 8009716:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009718:	4b12      	ldr	r3, [pc, #72]	; (8009764 <prvCheckForValidListAndQueue+0x70>)
 800971a:	4a10      	ldr	r2, [pc, #64]	; (800975c <prvCheckForValidListAndQueue+0x68>)
 800971c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800971e:	2300      	movs	r3, #0
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <prvCheckForValidListAndQueue+0x74>)
 8009724:	4a11      	ldr	r2, [pc, #68]	; (800976c <prvCheckForValidListAndQueue+0x78>)
 8009726:	2110      	movs	r1, #16
 8009728:	200a      	movs	r0, #10
 800972a:	f7fe f8cd 	bl	80078c8 <xQueueGenericCreateStatic>
 800972e:	4603      	mov	r3, r0
 8009730:	4a08      	ldr	r2, [pc, #32]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 8009732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	490b      	ldr	r1, [pc, #44]	; (8009770 <prvCheckForValidListAndQueue+0x7c>)
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fce6 	bl	8008114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009748:	f000 f974 	bl	8009a34 <vPortExitCritical>
}
 800974c:	bf00      	nop
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20001304 	.word	0x20001304
 8009758:	200012d4 	.word	0x200012d4
 800975c:	200012e8 	.word	0x200012e8
 8009760:	200012fc 	.word	0x200012fc
 8009764:	20001300 	.word	0x20001300
 8009768:	200013b0 	.word	0x200013b0
 800976c:	20001310 	.word	0x20001310
 8009770:	0800b2ec 	.word	0x0800b2ec

08009774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3b04      	subs	r3, #4
 8009784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800978c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b04      	subs	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f023 0201 	bic.w	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3b04      	subs	r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097a4:	4a0c      	ldr	r2, [pc, #48]	; (80097d8 <pxPortInitialiseStack+0x64>)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3b14      	subs	r3, #20
 80097ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f06f 0202 	mvn.w	r2, #2
 80097c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3b20      	subs	r3, #32
 80097c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097ca:	68fb      	ldr	r3, [r7, #12]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	080097dd 	.word	0x080097dd

080097dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097e6:	4b12      	ldr	r3, [pc, #72]	; (8009830 <prvTaskExitError+0x54>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ee:	d00a      	beq.n	8009806 <prvTaskExitError+0x2a>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	60fb      	str	r3, [r7, #12]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <prvTaskExitError+0x28>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	60bb      	str	r3, [r7, #8]
}
 8009818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800981a:	bf00      	nop
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0fc      	beq.n	800981c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	2000003c 	.word	0x2000003c
	...

08009840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <pxCurrentTCBConst2>)
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	6808      	ldr	r0, [r1, #0]
 8009846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984a:	f380 8809 	msr	PSP, r0
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8811 	msr	BASEPRI, r0
 800985a:	4770      	bx	lr
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst2>:
 8009860:	20000dd4 	.word	0x20000dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop

08009868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009868:	4808      	ldr	r0, [pc, #32]	; (800988c <prvPortStartFirstTask+0x24>)
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	6800      	ldr	r0, [r0, #0]
 800986e:	f380 8808 	msr	MSP, r0
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8814 	msr	CONTROL, r0
 800987a:	b662      	cpsie	i
 800987c:	b661      	cpsie	f
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	df00      	svc	0
 8009888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800988a:	bf00      	nop
 800988c:	e000ed08 	.word	0xe000ed08

08009890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009896:	4b46      	ldr	r3, [pc, #280]	; (80099b0 <xPortStartScheduler+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a46      	ldr	r2, [pc, #280]	; (80099b4 <xPortStartScheduler+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10a      	bne.n	80098b6 <xPortStartScheduler+0x26>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	613b      	str	r3, [r7, #16]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098b6:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <xPortStartScheduler+0x120>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a3f      	ldr	r2, [pc, #252]	; (80099b8 <xPortStartScheduler+0x128>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d10a      	bne.n	80098d6 <xPortStartScheduler+0x46>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	60fb      	str	r3, [r7, #12]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098d6:	4b39      	ldr	r3, [pc, #228]	; (80099bc <xPortStartScheduler+0x12c>)
 80098d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	4b31      	ldr	r3, [pc, #196]	; (80099c0 <xPortStartScheduler+0x130>)
 80098fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098fe:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <xPortStartScheduler+0x134>)
 8009900:	2207      	movs	r2, #7
 8009902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009904:	e009      	b.n	800991a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009906:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <xPortStartScheduler+0x134>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3b01      	subs	r3, #1
 800990c:	4a2d      	ldr	r2, [pc, #180]	; (80099c4 <xPortStartScheduler+0x134>)
 800990e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	b2db      	uxtb	r3, r3
 8009918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b80      	cmp	r3, #128	; 0x80
 8009924:	d0ef      	beq.n	8009906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009926:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <xPortStartScheduler+0x134>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1c3 0307 	rsb	r3, r3, #7
 800992e:	2b04      	cmp	r3, #4
 8009930:	d00a      	beq.n	8009948 <xPortStartScheduler+0xb8>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	60bb      	str	r3, [r7, #8]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <xPortStartScheduler+0x134>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <xPortStartScheduler+0x134>)
 8009950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <xPortStartScheduler+0x134>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800995a:	4a1a      	ldr	r2, [pc, #104]	; (80099c4 <xPortStartScheduler+0x134>)
 800995c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	b2da      	uxtb	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009966:	4b18      	ldr	r3, [pc, #96]	; (80099c8 <xPortStartScheduler+0x138>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <xPortStartScheduler+0x138>)
 800996c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <xPortStartScheduler+0x138>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a14      	ldr	r2, [pc, #80]	; (80099c8 <xPortStartScheduler+0x138>)
 8009978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800997c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800997e:	f000 f8dd 	bl	8009b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <xPortStartScheduler+0x13c>)
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009988:	f000 f8fc 	bl	8009b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800998c:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <xPortStartScheduler+0x140>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a0f      	ldr	r2, [pc, #60]	; (80099d0 <xPortStartScheduler+0x140>)
 8009992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009998:	f7ff ff66 	bl	8009868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800999c:	f7ff f846 	bl	8008a2c <vTaskSwitchContext>
	prvTaskExitError();
 80099a0:	f7ff ff1c 	bl	80097dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	e000ed00 	.word	0xe000ed00
 80099b4:	410fc271 	.word	0x410fc271
 80099b8:	410fc270 	.word	0x410fc270
 80099bc:	e000e400 	.word	0xe000e400
 80099c0:	20001400 	.word	0x20001400
 80099c4:	20001404 	.word	0x20001404
 80099c8:	e000ed20 	.word	0xe000ed20
 80099cc:	2000003c 	.word	0x2000003c
 80099d0:	e000ef34 	.word	0xe000ef34

080099d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	607b      	str	r3, [r7, #4]
}
 80099ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <vPortEnterCritical+0x58>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	4a0d      	ldr	r2, [pc, #52]	; (8009a2c <vPortEnterCritical+0x58>)
 80099f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099f8:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <vPortEnterCritical+0x58>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10f      	bne.n	8009a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <vPortEnterCritical+0x5c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	603b      	str	r3, [r7, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <vPortEnterCritical+0x4a>
	}
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	2000003c 	.word	0x2000003c
 8009a30:	e000ed04 	.word	0xe000ed04

08009a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a3a:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <vPortExitCritical+0x50>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <vPortExitCritical+0x24>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	607b      	str	r3, [r7, #4]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <vPortExitCritical+0x50>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <vPortExitCritical+0x50>)
 8009a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a62:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <vPortExitCritical+0x50>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <vPortExitCritical+0x42>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	f383 8811 	msr	BASEPRI, r3
}
 8009a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	2000003c 	.word	0x2000003c
	...

08009a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a90:	f3ef 8009 	mrs	r0, PSP
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <pxCurrentTCBConst>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f01e 0f10 	tst.w	lr, #16
 8009aa0:	bf08      	it	eq
 8009aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ab4:	f380 8811 	msr	BASEPRI, r0
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f7fe ffb4 	bl	8008a2c <vTaskSwitchContext>
 8009ac4:	f04f 0000 	mov.w	r0, #0
 8009ac8:	f380 8811 	msr	BASEPRI, r0
 8009acc:	bc09      	pop	{r0, r3}
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad6:	f01e 0f10 	tst.w	lr, #16
 8009ada:	bf08      	it	eq
 8009adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ae0:	f380 8809 	msr	PSP, r0
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst>:
 8009af0:	20000dd4 	.word	0x20000dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
}
 8009b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b12:	f7fe fed1 	bl	80088b8 <xTaskIncrementTick>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <xPortSysTickHandler+0x40>)
 8009b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	2300      	movs	r3, #0
 8009b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f383 8811 	msr	BASEPRI, r3
}
 8009b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <vPortSetupTimerInterrupt+0x38>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <vPortSetupTimerInterrupt+0x3c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <vPortSetupTimerInterrupt+0x40>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	099b      	lsrs	r3, r3, #6
 8009b58:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <vPortSetupTimerInterrupt+0x44>)
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b60:	2207      	movs	r2, #7
 8009b62:	601a      	str	r2, [r3, #0]
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	e000e010 	.word	0xe000e010
 8009b74:	e000e018 	.word	0xe000e018
 8009b78:	20000030 	.word	0x20000030
 8009b7c:	10624dd3 	.word	0x10624dd3
 8009b80:	e000e014 	.word	0xe000e014

08009b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b94 <vPortEnableVFP+0x10>
 8009b88:	6801      	ldr	r1, [r0, #0]
 8009b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b8e:	6001      	str	r1, [r0, #0]
 8009b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b92:	bf00      	nop
 8009b94:	e000ed88 	.word	0xe000ed88

08009b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b9e:	f3ef 8305 	mrs	r3, IPSR
 8009ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b0f      	cmp	r3, #15
 8009ba8:	d914      	bls.n	8009bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009baa:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <vPortValidateInterruptPriority+0x70>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <vPortValidateInterruptPriority+0x74>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	7afa      	ldrb	r2, [r7, #11]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d20a      	bcs.n	8009bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <vPortValidateInterruptPriority+0x78>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <vPortValidateInterruptPriority+0x7c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d90a      	bls.n	8009bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	603b      	str	r3, [r7, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <vPortValidateInterruptPriority+0x60>
	}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	e000e3f0 	.word	0xe000e3f0
 8009c0c:	20001400 	.word	0x20001400
 8009c10:	e000ed0c 	.word	0xe000ed0c
 8009c14:	20001404 	.word	0x20001404

08009c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c24:	f7fe fd7a 	bl	800871c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c28:	4b5b      	ldr	r3, [pc, #364]	; (8009d98 <pvPortMalloc+0x180>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c30:	f000 f920 	bl	8009e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c34:	4b59      	ldr	r3, [pc, #356]	; (8009d9c <pvPortMalloc+0x184>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 8093 	bne.w	8009d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d01d      	beq.n	8009c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c48:	2208      	movs	r2, #8
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d014      	beq.n	8009c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	3308      	adds	r3, #8
 8009c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <pvPortMalloc+0x6c>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	617b      	str	r3, [r7, #20]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d06e      	beq.n	8009d68 <pvPortMalloc+0x150>
 8009c8a:	4b45      	ldr	r3, [pc, #276]	; (8009da0 <pvPortMalloc+0x188>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d869      	bhi.n	8009d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c94:	4b43      	ldr	r3, [pc, #268]	; (8009da4 <pvPortMalloc+0x18c>)
 8009c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c98:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <pvPortMalloc+0x18c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c9e:	e004      	b.n	8009caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d903      	bls.n	8009cbc <pvPortMalloc+0xa4>
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f1      	bne.n	8009ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cbc:	4b36      	ldr	r3, [pc, #216]	; (8009d98 <pvPortMalloc+0x180>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d050      	beq.n	8009d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2208      	movs	r2, #8
 8009ccc:	4413      	add	r3, r2
 8009cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d91f      	bls.n	8009d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <pvPortMalloc+0xf8>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	613b      	str	r3, [r7, #16]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d22:	69b8      	ldr	r0, [r7, #24]
 8009d24:	f000 f908 	bl	8009f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d28:	4b1d      	ldr	r3, [pc, #116]	; (8009da0 <pvPortMalloc+0x188>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	4a1b      	ldr	r2, [pc, #108]	; (8009da0 <pvPortMalloc+0x188>)
 8009d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <pvPortMalloc+0x188>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <pvPortMalloc+0x190>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d203      	bcs.n	8009d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d42:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <pvPortMalloc+0x188>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a18      	ldr	r2, [pc, #96]	; (8009da8 <pvPortMalloc+0x190>)
 8009d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <pvPortMalloc+0x184>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <pvPortMalloc+0x194>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3301      	adds	r3, #1
 8009d64:	4a11      	ldr	r2, [pc, #68]	; (8009dac <pvPortMalloc+0x194>)
 8009d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d68:	f7fe fce6 	bl	8008738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <pvPortMalloc+0x174>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <pvPortMalloc+0x172>
	return pvReturn;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3728      	adds	r7, #40	; 0x28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20005010 	.word	0x20005010
 8009d9c:	20005024 	.word	0x20005024
 8009da0:	20005014 	.word	0x20005014
 8009da4:	20005008 	.word	0x20005008
 8009da8:	20005018 	.word	0x20005018
 8009dac:	2000501c 	.word	0x2000501c

08009db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d04d      	beq.n	8009e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <vPortFree+0xb8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <vPortFree+0x44>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	60fb      	str	r3, [r7, #12]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <vPortFree+0x62>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60bb      	str	r3, [r7, #8]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <vPortFree+0xb8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01e      	beq.n	8009e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11a      	bne.n	8009e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <vPortFree+0xb8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	43db      	mvns	r3, r3
 8009e32:	401a      	ands	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e38:	f7fe fc70 	bl	800871c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <vPortFree+0xbc>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4413      	add	r3, r2
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <vPortFree+0xbc>)
 8009e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e4a:	6938      	ldr	r0, [r7, #16]
 8009e4c:	f000 f874 	bl	8009f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <vPortFree+0xc0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a06      	ldr	r2, [pc, #24]	; (8009e70 <vPortFree+0xc0>)
 8009e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e5a:	f7fe fc6d 	bl	8008738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e5e:	bf00      	nop
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20005024 	.word	0x20005024
 8009e6c:	20005014 	.word	0x20005014
 8009e70:	20005020 	.word	0x20005020

08009e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e80:	4b27      	ldr	r3, [pc, #156]	; (8009f20 <prvHeapInit+0xac>)
 8009e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3307      	adds	r3, #7
 8009e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <prvHeapInit+0xac>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009eac:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <prvHeapInit+0xb0>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009eb2:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <prvHeapInit+0xb0>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0307 	bic.w	r3, r3, #7
 8009ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <prvHeapInit+0xb4>)
 8009ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <prvHeapInit+0xb4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2200      	movs	r2, #0
 8009edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ede:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <prvHeapInit+0xb4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ef4:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <prvHeapInit+0xb4>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4a0a      	ldr	r2, [pc, #40]	; (8009f2c <prvHeapInit+0xb8>)
 8009f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a09      	ldr	r2, [pc, #36]	; (8009f30 <prvHeapInit+0xbc>)
 8009f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <prvHeapInit+0xc0>)
 8009f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f12:	601a      	str	r2, [r3, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	20001408 	.word	0x20001408
 8009f24:	20005008 	.word	0x20005008
 8009f28:	20005010 	.word	0x20005010
 8009f2c:	20005018 	.word	0x20005018
 8009f30:	20005014 	.word	0x20005014
 8009f34:	20005024 	.word	0x20005024

08009f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f40:	4b28      	ldr	r3, [pc, #160]	; (8009fe4 <prvInsertBlockIntoFreeList+0xac>)
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e002      	b.n	8009f4c <prvInsertBlockIntoFreeList+0x14>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d8f7      	bhi.n	8009f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	4413      	add	r3, r2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d108      	bne.n	8009f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	441a      	add	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	441a      	add	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d118      	bne.n	8009fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d00d      	beq.n	8009fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e008      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e003      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d002      	beq.n	8009fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20005008 	.word	0x20005008
 8009fe8:	20005010 	.word	0x20005010

08009fec <__errno>:
 8009fec:	4b01      	ldr	r3, [pc, #4]	; (8009ff4 <__errno+0x8>)
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000040 	.word	0x20000040

08009ff8 <std>:
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	b510      	push	{r4, lr}
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	e9c0 3300 	strd	r3, r3, [r0]
 800a002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a006:	6083      	str	r3, [r0, #8]
 800a008:	8181      	strh	r1, [r0, #12]
 800a00a:	6643      	str	r3, [r0, #100]	; 0x64
 800a00c:	81c2      	strh	r2, [r0, #14]
 800a00e:	6183      	str	r3, [r0, #24]
 800a010:	4619      	mov	r1, r3
 800a012:	2208      	movs	r2, #8
 800a014:	305c      	adds	r0, #92	; 0x5c
 800a016:	f000 f91a 	bl	800a24e <memset>
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <std+0x38>)
 800a01c:	6263      	str	r3, [r4, #36]	; 0x24
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <std+0x3c>)
 800a020:	62a3      	str	r3, [r4, #40]	; 0x28
 800a022:	4b05      	ldr	r3, [pc, #20]	; (800a038 <std+0x40>)
 800a024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a026:	4b05      	ldr	r3, [pc, #20]	; (800a03c <std+0x44>)
 800a028:	6224      	str	r4, [r4, #32]
 800a02a:	6323      	str	r3, [r4, #48]	; 0x30
 800a02c:	bd10      	pop	{r4, pc}
 800a02e:	bf00      	nop
 800a030:	0800a599 	.word	0x0800a599
 800a034:	0800a5bb 	.word	0x0800a5bb
 800a038:	0800a5f3 	.word	0x0800a5f3
 800a03c:	0800a617 	.word	0x0800a617

0800a040 <_cleanup_r>:
 800a040:	4901      	ldr	r1, [pc, #4]	; (800a048 <_cleanup_r+0x8>)
 800a042:	f000 b8af 	b.w	800a1a4 <_fwalk_reent>
 800a046:	bf00      	nop
 800a048:	0800a8f1 	.word	0x0800a8f1

0800a04c <__sfmoreglue>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	2268      	movs	r2, #104	; 0x68
 800a050:	1e4d      	subs	r5, r1, #1
 800a052:	4355      	muls	r5, r2
 800a054:	460e      	mov	r6, r1
 800a056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a05a:	f000 f921 	bl	800a2a0 <_malloc_r>
 800a05e:	4604      	mov	r4, r0
 800a060:	b140      	cbz	r0, 800a074 <__sfmoreglue+0x28>
 800a062:	2100      	movs	r1, #0
 800a064:	e9c0 1600 	strd	r1, r6, [r0]
 800a068:	300c      	adds	r0, #12
 800a06a:	60a0      	str	r0, [r4, #8]
 800a06c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a070:	f000 f8ed 	bl	800a24e <memset>
 800a074:	4620      	mov	r0, r4
 800a076:	bd70      	pop	{r4, r5, r6, pc}

0800a078 <__sfp_lock_acquire>:
 800a078:	4801      	ldr	r0, [pc, #4]	; (800a080 <__sfp_lock_acquire+0x8>)
 800a07a:	f000 b8d8 	b.w	800a22e <__retarget_lock_acquire_recursive>
 800a07e:	bf00      	nop
 800a080:	20005029 	.word	0x20005029

0800a084 <__sfp_lock_release>:
 800a084:	4801      	ldr	r0, [pc, #4]	; (800a08c <__sfp_lock_release+0x8>)
 800a086:	f000 b8d3 	b.w	800a230 <__retarget_lock_release_recursive>
 800a08a:	bf00      	nop
 800a08c:	20005029 	.word	0x20005029

0800a090 <__sinit_lock_acquire>:
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <__sinit_lock_acquire+0x8>)
 800a092:	f000 b8cc 	b.w	800a22e <__retarget_lock_acquire_recursive>
 800a096:	bf00      	nop
 800a098:	2000502a 	.word	0x2000502a

0800a09c <__sinit_lock_release>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__sinit_lock_release+0x8>)
 800a09e:	f000 b8c7 	b.w	800a230 <__retarget_lock_release_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	2000502a 	.word	0x2000502a

0800a0a8 <__sinit>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	f7ff fff0 	bl	800a090 <__sinit_lock_acquire>
 800a0b0:	69a3      	ldr	r3, [r4, #24]
 800a0b2:	b11b      	cbz	r3, 800a0bc <__sinit+0x14>
 800a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b8:	f7ff bff0 	b.w	800a09c <__sinit_lock_release>
 800a0bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0c0:	6523      	str	r3, [r4, #80]	; 0x50
 800a0c2:	4b13      	ldr	r3, [pc, #76]	; (800a110 <__sinit+0x68>)
 800a0c4:	4a13      	ldr	r2, [pc, #76]	; (800a114 <__sinit+0x6c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	bf04      	itt	eq
 800a0ce:	2301      	moveq	r3, #1
 800a0d0:	61a3      	streq	r3, [r4, #24]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 f820 	bl	800a118 <__sfp>
 800a0d8:	6060      	str	r0, [r4, #4]
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 f81c 	bl	800a118 <__sfp>
 800a0e0:	60a0      	str	r0, [r4, #8]
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 f818 	bl	800a118 <__sfp>
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	60e0      	str	r0, [r4, #12]
 800a0ec:	2104      	movs	r1, #4
 800a0ee:	6860      	ldr	r0, [r4, #4]
 800a0f0:	f7ff ff82 	bl	8009ff8 <std>
 800a0f4:	68a0      	ldr	r0, [r4, #8]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	2109      	movs	r1, #9
 800a0fa:	f7ff ff7d 	bl	8009ff8 <std>
 800a0fe:	68e0      	ldr	r0, [r4, #12]
 800a100:	2202      	movs	r2, #2
 800a102:	2112      	movs	r1, #18
 800a104:	f7ff ff78 	bl	8009ff8 <std>
 800a108:	2301      	movs	r3, #1
 800a10a:	61a3      	str	r3, [r4, #24]
 800a10c:	e7d2      	b.n	800a0b4 <__sinit+0xc>
 800a10e:	bf00      	nop
 800a110:	0800b428 	.word	0x0800b428
 800a114:	0800a041 	.word	0x0800a041

0800a118 <__sfp>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	4607      	mov	r7, r0
 800a11c:	f7ff ffac 	bl	800a078 <__sfp_lock_acquire>
 800a120:	4b1e      	ldr	r3, [pc, #120]	; (800a19c <__sfp+0x84>)
 800a122:	681e      	ldr	r6, [r3, #0]
 800a124:	69b3      	ldr	r3, [r6, #24]
 800a126:	b913      	cbnz	r3, 800a12e <__sfp+0x16>
 800a128:	4630      	mov	r0, r6
 800a12a:	f7ff ffbd 	bl	800a0a8 <__sinit>
 800a12e:	3648      	adds	r6, #72	; 0x48
 800a130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a134:	3b01      	subs	r3, #1
 800a136:	d503      	bpl.n	800a140 <__sfp+0x28>
 800a138:	6833      	ldr	r3, [r6, #0]
 800a13a:	b30b      	cbz	r3, 800a180 <__sfp+0x68>
 800a13c:	6836      	ldr	r6, [r6, #0]
 800a13e:	e7f7      	b.n	800a130 <__sfp+0x18>
 800a140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a144:	b9d5      	cbnz	r5, 800a17c <__sfp+0x64>
 800a146:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <__sfp+0x88>)
 800a148:	60e3      	str	r3, [r4, #12]
 800a14a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a14e:	6665      	str	r5, [r4, #100]	; 0x64
 800a150:	f000 f86c 	bl	800a22c <__retarget_lock_init_recursive>
 800a154:	f7ff ff96 	bl	800a084 <__sfp_lock_release>
 800a158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a15c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a160:	6025      	str	r5, [r4, #0]
 800a162:	61a5      	str	r5, [r4, #24]
 800a164:	2208      	movs	r2, #8
 800a166:	4629      	mov	r1, r5
 800a168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a16c:	f000 f86f 	bl	800a24e <memset>
 800a170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a178:	4620      	mov	r0, r4
 800a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a17c:	3468      	adds	r4, #104	; 0x68
 800a17e:	e7d9      	b.n	800a134 <__sfp+0x1c>
 800a180:	2104      	movs	r1, #4
 800a182:	4638      	mov	r0, r7
 800a184:	f7ff ff62 	bl	800a04c <__sfmoreglue>
 800a188:	4604      	mov	r4, r0
 800a18a:	6030      	str	r0, [r6, #0]
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1d5      	bne.n	800a13c <__sfp+0x24>
 800a190:	f7ff ff78 	bl	800a084 <__sfp_lock_release>
 800a194:	230c      	movs	r3, #12
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	e7ee      	b.n	800a178 <__sfp+0x60>
 800a19a:	bf00      	nop
 800a19c:	0800b428 	.word	0x0800b428
 800a1a0:	ffff0001 	.word	0xffff0001

0800a1a4 <_fwalk_reent>:
 800a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	4688      	mov	r8, r1
 800a1ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1b0:	2700      	movs	r7, #0
 800a1b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1b6:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ba:	d505      	bpl.n	800a1c8 <_fwalk_reent+0x24>
 800a1bc:	6824      	ldr	r4, [r4, #0]
 800a1be:	2c00      	cmp	r4, #0
 800a1c0:	d1f7      	bne.n	800a1b2 <_fwalk_reent+0xe>
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c8:	89ab      	ldrh	r3, [r5, #12]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d907      	bls.n	800a1de <_fwalk_reent+0x3a>
 800a1ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	d003      	beq.n	800a1de <_fwalk_reent+0x3a>
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	4630      	mov	r0, r6
 800a1da:	47c0      	blx	r8
 800a1dc:	4307      	orrs	r7, r0
 800a1de:	3568      	adds	r5, #104	; 0x68
 800a1e0:	e7e9      	b.n	800a1b6 <_fwalk_reent+0x12>
	...

0800a1e4 <__libc_init_array>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	4d0d      	ldr	r5, [pc, #52]	; (800a21c <__libc_init_array+0x38>)
 800a1e8:	4c0d      	ldr	r4, [pc, #52]	; (800a220 <__libc_init_array+0x3c>)
 800a1ea:	1b64      	subs	r4, r4, r5
 800a1ec:	10a4      	asrs	r4, r4, #2
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	42a6      	cmp	r6, r4
 800a1f2:	d109      	bne.n	800a208 <__libc_init_array+0x24>
 800a1f4:	4d0b      	ldr	r5, [pc, #44]	; (800a224 <__libc_init_array+0x40>)
 800a1f6:	4c0c      	ldr	r4, [pc, #48]	; (800a228 <__libc_init_array+0x44>)
 800a1f8:	f000 ffa8 	bl	800b14c <_init>
 800a1fc:	1b64      	subs	r4, r4, r5
 800a1fe:	10a4      	asrs	r4, r4, #2
 800a200:	2600      	movs	r6, #0
 800a202:	42a6      	cmp	r6, r4
 800a204:	d105      	bne.n	800a212 <__libc_init_array+0x2e>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20c:	4798      	blx	r3
 800a20e:	3601      	adds	r6, #1
 800a210:	e7ee      	b.n	800a1f0 <__libc_init_array+0xc>
 800a212:	f855 3b04 	ldr.w	r3, [r5], #4
 800a216:	4798      	blx	r3
 800a218:	3601      	adds	r6, #1
 800a21a:	e7f2      	b.n	800a202 <__libc_init_array+0x1e>
 800a21c:	0800b468 	.word	0x0800b468
 800a220:	0800b468 	.word	0x0800b468
 800a224:	0800b468 	.word	0x0800b468
 800a228:	0800b46c 	.word	0x0800b46c

0800a22c <__retarget_lock_init_recursive>:
 800a22c:	4770      	bx	lr

0800a22e <__retarget_lock_acquire_recursive>:
 800a22e:	4770      	bx	lr

0800a230 <__retarget_lock_release_recursive>:
 800a230:	4770      	bx	lr

0800a232 <memcpy>:
 800a232:	440a      	add	r2, r1
 800a234:	4291      	cmp	r1, r2
 800a236:	f100 33ff 	add.w	r3, r0, #4294967295
 800a23a:	d100      	bne.n	800a23e <memcpy+0xc>
 800a23c:	4770      	bx	lr
 800a23e:	b510      	push	{r4, lr}
 800a240:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a244:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a248:	4291      	cmp	r1, r2
 800a24a:	d1f9      	bne.n	800a240 <memcpy+0xe>
 800a24c:	bd10      	pop	{r4, pc}

0800a24e <memset>:
 800a24e:	4402      	add	r2, r0
 800a250:	4603      	mov	r3, r0
 800a252:	4293      	cmp	r3, r2
 800a254:	d100      	bne.n	800a258 <memset+0xa>
 800a256:	4770      	bx	lr
 800a258:	f803 1b01 	strb.w	r1, [r3], #1
 800a25c:	e7f9      	b.n	800a252 <memset+0x4>
	...

0800a260 <sbrk_aligned>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	4e0e      	ldr	r6, [pc, #56]	; (800a29c <sbrk_aligned+0x3c>)
 800a264:	460c      	mov	r4, r1
 800a266:	6831      	ldr	r1, [r6, #0]
 800a268:	4605      	mov	r5, r0
 800a26a:	b911      	cbnz	r1, 800a272 <sbrk_aligned+0x12>
 800a26c:	f000 f984 	bl	800a578 <_sbrk_r>
 800a270:	6030      	str	r0, [r6, #0]
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f97f 	bl	800a578 <_sbrk_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	d00a      	beq.n	800a294 <sbrk_aligned+0x34>
 800a27e:	1cc4      	adds	r4, r0, #3
 800a280:	f024 0403 	bic.w	r4, r4, #3
 800a284:	42a0      	cmp	r0, r4
 800a286:	d007      	beq.n	800a298 <sbrk_aligned+0x38>
 800a288:	1a21      	subs	r1, r4, r0
 800a28a:	4628      	mov	r0, r5
 800a28c:	f000 f974 	bl	800a578 <_sbrk_r>
 800a290:	3001      	adds	r0, #1
 800a292:	d101      	bne.n	800a298 <sbrk_aligned+0x38>
 800a294:	f04f 34ff 	mov.w	r4, #4294967295
 800a298:	4620      	mov	r0, r4
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	20005030 	.word	0x20005030

0800a2a0 <_malloc_r>:
 800a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	1ccd      	adds	r5, r1, #3
 800a2a6:	f025 0503 	bic.w	r5, r5, #3
 800a2aa:	3508      	adds	r5, #8
 800a2ac:	2d0c      	cmp	r5, #12
 800a2ae:	bf38      	it	cc
 800a2b0:	250c      	movcc	r5, #12
 800a2b2:	2d00      	cmp	r5, #0
 800a2b4:	4607      	mov	r7, r0
 800a2b6:	db01      	blt.n	800a2bc <_malloc_r+0x1c>
 800a2b8:	42a9      	cmp	r1, r5
 800a2ba:	d905      	bls.n	800a2c8 <_malloc_r+0x28>
 800a2bc:	230c      	movs	r3, #12
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	2600      	movs	r6, #0
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c8:	4e2e      	ldr	r6, [pc, #184]	; (800a384 <_malloc_r+0xe4>)
 800a2ca:	f000 fbc5 	bl	800aa58 <__malloc_lock>
 800a2ce:	6833      	ldr	r3, [r6, #0]
 800a2d0:	461c      	mov	r4, r3
 800a2d2:	bb34      	cbnz	r4, 800a322 <_malloc_r+0x82>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f7ff ffc2 	bl	800a260 <sbrk_aligned>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	4604      	mov	r4, r0
 800a2e0:	d14d      	bne.n	800a37e <_malloc_r+0xde>
 800a2e2:	6834      	ldr	r4, [r6, #0]
 800a2e4:	4626      	mov	r6, r4
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	d140      	bne.n	800a36c <_malloc_r+0xcc>
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	eb04 0803 	add.w	r8, r4, r3
 800a2f4:	f000 f940 	bl	800a578 <_sbrk_r>
 800a2f8:	4580      	cmp	r8, r0
 800a2fa:	d13a      	bne.n	800a372 <_malloc_r+0xd2>
 800a2fc:	6821      	ldr	r1, [r4, #0]
 800a2fe:	3503      	adds	r5, #3
 800a300:	1a6d      	subs	r5, r5, r1
 800a302:	f025 0503 	bic.w	r5, r5, #3
 800a306:	3508      	adds	r5, #8
 800a308:	2d0c      	cmp	r5, #12
 800a30a:	bf38      	it	cc
 800a30c:	250c      	movcc	r5, #12
 800a30e:	4629      	mov	r1, r5
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff ffa5 	bl	800a260 <sbrk_aligned>
 800a316:	3001      	adds	r0, #1
 800a318:	d02b      	beq.n	800a372 <_malloc_r+0xd2>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	442b      	add	r3, r5
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	e00e      	b.n	800a340 <_malloc_r+0xa0>
 800a322:	6822      	ldr	r2, [r4, #0]
 800a324:	1b52      	subs	r2, r2, r5
 800a326:	d41e      	bmi.n	800a366 <_malloc_r+0xc6>
 800a328:	2a0b      	cmp	r2, #11
 800a32a:	d916      	bls.n	800a35a <_malloc_r+0xba>
 800a32c:	1961      	adds	r1, r4, r5
 800a32e:	42a3      	cmp	r3, r4
 800a330:	6025      	str	r5, [r4, #0]
 800a332:	bf18      	it	ne
 800a334:	6059      	strne	r1, [r3, #4]
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	bf08      	it	eq
 800a33a:	6031      	streq	r1, [r6, #0]
 800a33c:	5162      	str	r2, [r4, r5]
 800a33e:	604b      	str	r3, [r1, #4]
 800a340:	4638      	mov	r0, r7
 800a342:	f104 060b 	add.w	r6, r4, #11
 800a346:	f000 fb8d 	bl	800aa64 <__malloc_unlock>
 800a34a:	f026 0607 	bic.w	r6, r6, #7
 800a34e:	1d23      	adds	r3, r4, #4
 800a350:	1af2      	subs	r2, r6, r3
 800a352:	d0b6      	beq.n	800a2c2 <_malloc_r+0x22>
 800a354:	1b9b      	subs	r3, r3, r6
 800a356:	50a3      	str	r3, [r4, r2]
 800a358:	e7b3      	b.n	800a2c2 <_malloc_r+0x22>
 800a35a:	6862      	ldr	r2, [r4, #4]
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	bf0c      	ite	eq
 800a360:	6032      	streq	r2, [r6, #0]
 800a362:	605a      	strne	r2, [r3, #4]
 800a364:	e7ec      	b.n	800a340 <_malloc_r+0xa0>
 800a366:	4623      	mov	r3, r4
 800a368:	6864      	ldr	r4, [r4, #4]
 800a36a:	e7b2      	b.n	800a2d2 <_malloc_r+0x32>
 800a36c:	4634      	mov	r4, r6
 800a36e:	6876      	ldr	r6, [r6, #4]
 800a370:	e7b9      	b.n	800a2e6 <_malloc_r+0x46>
 800a372:	230c      	movs	r3, #12
 800a374:	603b      	str	r3, [r7, #0]
 800a376:	4638      	mov	r0, r7
 800a378:	f000 fb74 	bl	800aa64 <__malloc_unlock>
 800a37c:	e7a1      	b.n	800a2c2 <_malloc_r+0x22>
 800a37e:	6025      	str	r5, [r4, #0]
 800a380:	e7de      	b.n	800a340 <_malloc_r+0xa0>
 800a382:	bf00      	nop
 800a384:	2000502c 	.word	0x2000502c

0800a388 <iprintf>:
 800a388:	b40f      	push	{r0, r1, r2, r3}
 800a38a:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <iprintf+0x2c>)
 800a38c:	b513      	push	{r0, r1, r4, lr}
 800a38e:	681c      	ldr	r4, [r3, #0]
 800a390:	b124      	cbz	r4, 800a39c <iprintf+0x14>
 800a392:	69a3      	ldr	r3, [r4, #24]
 800a394:	b913      	cbnz	r3, 800a39c <iprintf+0x14>
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff fe86 	bl	800a0a8 <__sinit>
 800a39c:	ab05      	add	r3, sp, #20
 800a39e:	9a04      	ldr	r2, [sp, #16]
 800a3a0:	68a1      	ldr	r1, [r4, #8]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fbd9 	bl	800ab5c <_vfiprintf_r>
 800a3aa:	b002      	add	sp, #8
 800a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b0:	b004      	add	sp, #16
 800a3b2:	4770      	bx	lr
 800a3b4:	20000040 	.word	0x20000040

0800a3b8 <_puts_r>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	460e      	mov	r6, r1
 800a3bc:	4605      	mov	r5, r0
 800a3be:	b118      	cbz	r0, 800a3c8 <_puts_r+0x10>
 800a3c0:	6983      	ldr	r3, [r0, #24]
 800a3c2:	b90b      	cbnz	r3, 800a3c8 <_puts_r+0x10>
 800a3c4:	f7ff fe70 	bl	800a0a8 <__sinit>
 800a3c8:	69ab      	ldr	r3, [r5, #24]
 800a3ca:	68ac      	ldr	r4, [r5, #8]
 800a3cc:	b913      	cbnz	r3, 800a3d4 <_puts_r+0x1c>
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f7ff fe6a 	bl	800a0a8 <__sinit>
 800a3d4:	4b2c      	ldr	r3, [pc, #176]	; (800a488 <_puts_r+0xd0>)
 800a3d6:	429c      	cmp	r4, r3
 800a3d8:	d120      	bne.n	800a41c <_puts_r+0x64>
 800a3da:	686c      	ldr	r4, [r5, #4]
 800a3dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3de:	07db      	lsls	r3, r3, #31
 800a3e0:	d405      	bmi.n	800a3ee <_puts_r+0x36>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	0598      	lsls	r0, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_puts_r+0x36>
 800a3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ea:	f7ff ff20 	bl	800a22e <__retarget_lock_acquire_recursive>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	0719      	lsls	r1, r3, #28
 800a3f2:	d51d      	bpl.n	800a430 <_puts_r+0x78>
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	b1db      	cbz	r3, 800a430 <_puts_r+0x78>
 800a3f8:	3e01      	subs	r6, #1
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a400:	3b01      	subs	r3, #1
 800a402:	60a3      	str	r3, [r4, #8]
 800a404:	bb39      	cbnz	r1, 800a456 <_puts_r+0x9e>
 800a406:	2b00      	cmp	r3, #0
 800a408:	da38      	bge.n	800a47c <_puts_r+0xc4>
 800a40a:	4622      	mov	r2, r4
 800a40c:	210a      	movs	r1, #10
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 f906 	bl	800a620 <__swbuf_r>
 800a414:	3001      	adds	r0, #1
 800a416:	d011      	beq.n	800a43c <_puts_r+0x84>
 800a418:	250a      	movs	r5, #10
 800a41a:	e011      	b.n	800a440 <_puts_r+0x88>
 800a41c:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <_puts_r+0xd4>)
 800a41e:	429c      	cmp	r4, r3
 800a420:	d101      	bne.n	800a426 <_puts_r+0x6e>
 800a422:	68ac      	ldr	r4, [r5, #8]
 800a424:	e7da      	b.n	800a3dc <_puts_r+0x24>
 800a426:	4b1a      	ldr	r3, [pc, #104]	; (800a490 <_puts_r+0xd8>)
 800a428:	429c      	cmp	r4, r3
 800a42a:	bf08      	it	eq
 800a42c:	68ec      	ldreq	r4, [r5, #12]
 800a42e:	e7d5      	b.n	800a3dc <_puts_r+0x24>
 800a430:	4621      	mov	r1, r4
 800a432:	4628      	mov	r0, r5
 800a434:	f000 f958 	bl	800a6e8 <__swsetup_r>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d0dd      	beq.n	800a3f8 <_puts_r+0x40>
 800a43c:	f04f 35ff 	mov.w	r5, #4294967295
 800a440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a442:	07da      	lsls	r2, r3, #31
 800a444:	d405      	bmi.n	800a452 <_puts_r+0x9a>
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	059b      	lsls	r3, r3, #22
 800a44a:	d402      	bmi.n	800a452 <_puts_r+0x9a>
 800a44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44e:	f7ff feef 	bl	800a230 <__retarget_lock_release_recursive>
 800a452:	4628      	mov	r0, r5
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	2b00      	cmp	r3, #0
 800a458:	da04      	bge.n	800a464 <_puts_r+0xac>
 800a45a:	69a2      	ldr	r2, [r4, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	dc06      	bgt.n	800a46e <_puts_r+0xb6>
 800a460:	290a      	cmp	r1, #10
 800a462:	d004      	beq.n	800a46e <_puts_r+0xb6>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	6022      	str	r2, [r4, #0]
 800a46a:	7019      	strb	r1, [r3, #0]
 800a46c:	e7c5      	b.n	800a3fa <_puts_r+0x42>
 800a46e:	4622      	mov	r2, r4
 800a470:	4628      	mov	r0, r5
 800a472:	f000 f8d5 	bl	800a620 <__swbuf_r>
 800a476:	3001      	adds	r0, #1
 800a478:	d1bf      	bne.n	800a3fa <_puts_r+0x42>
 800a47a:	e7df      	b.n	800a43c <_puts_r+0x84>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	250a      	movs	r5, #10
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	701d      	strb	r5, [r3, #0]
 800a486:	e7db      	b.n	800a440 <_puts_r+0x88>
 800a488:	0800b3e8 	.word	0x0800b3e8
 800a48c:	0800b408 	.word	0x0800b408
 800a490:	0800b3c8 	.word	0x0800b3c8

0800a494 <puts>:
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <puts+0xc>)
 800a496:	4601      	mov	r1, r0
 800a498:	6818      	ldr	r0, [r3, #0]
 800a49a:	f7ff bf8d 	b.w	800a3b8 <_puts_r>
 800a49e:	bf00      	nop
 800a4a0:	20000040 	.word	0x20000040

0800a4a4 <cleanup_glue>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	6809      	ldr	r1, [r1, #0]
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	b109      	cbz	r1, 800a4b2 <cleanup_glue+0xe>
 800a4ae:	f7ff fff9 	bl	800a4a4 <cleanup_glue>
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ba:	f000 bad9 	b.w	800aa70 <_free_r>
	...

0800a4c0 <_reclaim_reent>:
 800a4c0:	4b2c      	ldr	r3, [pc, #176]	; (800a574 <_reclaim_reent+0xb4>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4283      	cmp	r3, r0
 800a4c6:	b570      	push	{r4, r5, r6, lr}
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	d051      	beq.n	800a570 <_reclaim_reent+0xb0>
 800a4cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a4ce:	b143      	cbz	r3, 800a4e2 <_reclaim_reent+0x22>
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d14a      	bne.n	800a56c <_reclaim_reent+0xac>
 800a4d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4d8:	6819      	ldr	r1, [r3, #0]
 800a4da:	b111      	cbz	r1, 800a4e2 <_reclaim_reent+0x22>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fac7 	bl	800aa70 <_free_r>
 800a4e2:	6961      	ldr	r1, [r4, #20]
 800a4e4:	b111      	cbz	r1, 800a4ec <_reclaim_reent+0x2c>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 fac2 	bl	800aa70 <_free_r>
 800a4ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a4ee:	b111      	cbz	r1, 800a4f6 <_reclaim_reent+0x36>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 fabd 	bl	800aa70 <_free_r>
 800a4f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4f8:	b111      	cbz	r1, 800a500 <_reclaim_reent+0x40>
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 fab8 	bl	800aa70 <_free_r>
 800a500:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a502:	b111      	cbz	r1, 800a50a <_reclaim_reent+0x4a>
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fab3 	bl	800aa70 <_free_r>
 800a50a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a50c:	b111      	cbz	r1, 800a514 <_reclaim_reent+0x54>
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 faae 	bl	800aa70 <_free_r>
 800a514:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a516:	b111      	cbz	r1, 800a51e <_reclaim_reent+0x5e>
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 faa9 	bl	800aa70 <_free_r>
 800a51e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a520:	b111      	cbz	r1, 800a528 <_reclaim_reent+0x68>
 800a522:	4620      	mov	r0, r4
 800a524:	f000 faa4 	bl	800aa70 <_free_r>
 800a528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52a:	b111      	cbz	r1, 800a532 <_reclaim_reent+0x72>
 800a52c:	4620      	mov	r0, r4
 800a52e:	f000 fa9f 	bl	800aa70 <_free_r>
 800a532:	69a3      	ldr	r3, [r4, #24]
 800a534:	b1e3      	cbz	r3, 800a570 <_reclaim_reent+0xb0>
 800a536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a538:	4620      	mov	r0, r4
 800a53a:	4798      	blx	r3
 800a53c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a53e:	b1b9      	cbz	r1, 800a570 <_reclaim_reent+0xb0>
 800a540:	4620      	mov	r0, r4
 800a542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a546:	f7ff bfad 	b.w	800a4a4 <cleanup_glue>
 800a54a:	5949      	ldr	r1, [r1, r5]
 800a54c:	b941      	cbnz	r1, 800a560 <_reclaim_reent+0xa0>
 800a54e:	3504      	adds	r5, #4
 800a550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a552:	2d80      	cmp	r5, #128	; 0x80
 800a554:	68d9      	ldr	r1, [r3, #12]
 800a556:	d1f8      	bne.n	800a54a <_reclaim_reent+0x8a>
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fa89 	bl	800aa70 <_free_r>
 800a55e:	e7ba      	b.n	800a4d6 <_reclaim_reent+0x16>
 800a560:	680e      	ldr	r6, [r1, #0]
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fa84 	bl	800aa70 <_free_r>
 800a568:	4631      	mov	r1, r6
 800a56a:	e7ef      	b.n	800a54c <_reclaim_reent+0x8c>
 800a56c:	2500      	movs	r5, #0
 800a56e:	e7ef      	b.n	800a550 <_reclaim_reent+0x90>
 800a570:	bd70      	pop	{r4, r5, r6, pc}
 800a572:	bf00      	nop
 800a574:	20000040 	.word	0x20000040

0800a578 <_sbrk_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4d06      	ldr	r5, [pc, #24]	; (800a594 <_sbrk_r+0x1c>)
 800a57c:	2300      	movs	r3, #0
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	602b      	str	r3, [r5, #0]
 800a584:	f7f7 f82c 	bl	80015e0 <_sbrk>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_sbrk_r+0x1a>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_sbrk_r+0x1a>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20005034 	.word	0x20005034

0800a598 <__sread>:
 800a598:	b510      	push	{r4, lr}
 800a59a:	460c      	mov	r4, r1
 800a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a0:	f000 fda0 	bl	800b0e4 <_read_r>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	bfab      	itete	ge
 800a5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a5ac:	181b      	addge	r3, r3, r0
 800a5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5b2:	bfac      	ite	ge
 800a5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5b6:	81a3      	strhlt	r3, [r4, #12]
 800a5b8:	bd10      	pop	{r4, pc}

0800a5ba <__swrite>:
 800a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5be:	461f      	mov	r7, r3
 800a5c0:	898b      	ldrh	r3, [r1, #12]
 800a5c2:	05db      	lsls	r3, r3, #23
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	d505      	bpl.n	800a5d8 <__swrite+0x1e>
 800a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f000 f9c8 	bl	800a968 <_lseek_r>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	f000 b869 	b.w	800a6c4 <_write_r>

0800a5f2 <__sseek>:
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5fa:	f000 f9b5 	bl	800a968 <_lseek_r>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	bf15      	itete	ne
 800a604:	6560      	strne	r0, [r4, #84]	; 0x54
 800a606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a60e:	81a3      	strheq	r3, [r4, #12]
 800a610:	bf18      	it	ne
 800a612:	81a3      	strhne	r3, [r4, #12]
 800a614:	bd10      	pop	{r4, pc}

0800a616 <__sclose>:
 800a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61a:	f000 b8d3 	b.w	800a7c4 <_close_r>
	...

0800a620 <__swbuf_r>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	460e      	mov	r6, r1
 800a624:	4614      	mov	r4, r2
 800a626:	4605      	mov	r5, r0
 800a628:	b118      	cbz	r0, 800a632 <__swbuf_r+0x12>
 800a62a:	6983      	ldr	r3, [r0, #24]
 800a62c:	b90b      	cbnz	r3, 800a632 <__swbuf_r+0x12>
 800a62e:	f7ff fd3b 	bl	800a0a8 <__sinit>
 800a632:	4b21      	ldr	r3, [pc, #132]	; (800a6b8 <__swbuf_r+0x98>)
 800a634:	429c      	cmp	r4, r3
 800a636:	d12b      	bne.n	800a690 <__swbuf_r+0x70>
 800a638:	686c      	ldr	r4, [r5, #4]
 800a63a:	69a3      	ldr	r3, [r4, #24]
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	071a      	lsls	r2, r3, #28
 800a642:	d52f      	bpl.n	800a6a4 <__swbuf_r+0x84>
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	b36b      	cbz	r3, 800a6a4 <__swbuf_r+0x84>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	1ac0      	subs	r0, r0, r3
 800a64e:	6963      	ldr	r3, [r4, #20]
 800a650:	b2f6      	uxtb	r6, r6
 800a652:	4283      	cmp	r3, r0
 800a654:	4637      	mov	r7, r6
 800a656:	dc04      	bgt.n	800a662 <__swbuf_r+0x42>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f948 	bl	800a8f0 <_fflush_r>
 800a660:	bb30      	cbnz	r0, 800a6b0 <__swbuf_r+0x90>
 800a662:	68a3      	ldr	r3, [r4, #8]
 800a664:	3b01      	subs	r3, #1
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	6022      	str	r2, [r4, #0]
 800a66e:	701e      	strb	r6, [r3, #0]
 800a670:	6963      	ldr	r3, [r4, #20]
 800a672:	3001      	adds	r0, #1
 800a674:	4283      	cmp	r3, r0
 800a676:	d004      	beq.n	800a682 <__swbuf_r+0x62>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d506      	bpl.n	800a68c <__swbuf_r+0x6c>
 800a67e:	2e0a      	cmp	r6, #10
 800a680:	d104      	bne.n	800a68c <__swbuf_r+0x6c>
 800a682:	4621      	mov	r1, r4
 800a684:	4628      	mov	r0, r5
 800a686:	f000 f933 	bl	800a8f0 <_fflush_r>
 800a68a:	b988      	cbnz	r0, 800a6b0 <__swbuf_r+0x90>
 800a68c:	4638      	mov	r0, r7
 800a68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <__swbuf_r+0x9c>)
 800a692:	429c      	cmp	r4, r3
 800a694:	d101      	bne.n	800a69a <__swbuf_r+0x7a>
 800a696:	68ac      	ldr	r4, [r5, #8]
 800a698:	e7cf      	b.n	800a63a <__swbuf_r+0x1a>
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <__swbuf_r+0xa0>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	bf08      	it	eq
 800a6a0:	68ec      	ldreq	r4, [r5, #12]
 800a6a2:	e7ca      	b.n	800a63a <__swbuf_r+0x1a>
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f000 f81e 	bl	800a6e8 <__swsetup_r>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d0cb      	beq.n	800a648 <__swbuf_r+0x28>
 800a6b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a6b4:	e7ea      	b.n	800a68c <__swbuf_r+0x6c>
 800a6b6:	bf00      	nop
 800a6b8:	0800b3e8 	.word	0x0800b3e8
 800a6bc:	0800b408 	.word	0x0800b408
 800a6c0:	0800b3c8 	.word	0x0800b3c8

0800a6c4 <_write_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_write_r+0x20>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	602a      	str	r2, [r5, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7f6 fd7a 	bl	80011cc <_write>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_write_r+0x1e>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_write_r+0x1e>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20005034 	.word	0x20005034

0800a6e8 <__swsetup_r>:
 800a6e8:	4b32      	ldr	r3, [pc, #200]	; (800a7b4 <__swsetup_r+0xcc>)
 800a6ea:	b570      	push	{r4, r5, r6, lr}
 800a6ec:	681d      	ldr	r5, [r3, #0]
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	b125      	cbz	r5, 800a6fe <__swsetup_r+0x16>
 800a6f4:	69ab      	ldr	r3, [r5, #24]
 800a6f6:	b913      	cbnz	r3, 800a6fe <__swsetup_r+0x16>
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f7ff fcd5 	bl	800a0a8 <__sinit>
 800a6fe:	4b2e      	ldr	r3, [pc, #184]	; (800a7b8 <__swsetup_r+0xd0>)
 800a700:	429c      	cmp	r4, r3
 800a702:	d10f      	bne.n	800a724 <__swsetup_r+0x3c>
 800a704:	686c      	ldr	r4, [r5, #4]
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a70c:	0719      	lsls	r1, r3, #28
 800a70e:	d42c      	bmi.n	800a76a <__swsetup_r+0x82>
 800a710:	06dd      	lsls	r5, r3, #27
 800a712:	d411      	bmi.n	800a738 <__swsetup_r+0x50>
 800a714:	2309      	movs	r3, #9
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	f04f 30ff 	mov.w	r0, #4294967295
 800a722:	e03e      	b.n	800a7a2 <__swsetup_r+0xba>
 800a724:	4b25      	ldr	r3, [pc, #148]	; (800a7bc <__swsetup_r+0xd4>)
 800a726:	429c      	cmp	r4, r3
 800a728:	d101      	bne.n	800a72e <__swsetup_r+0x46>
 800a72a:	68ac      	ldr	r4, [r5, #8]
 800a72c:	e7eb      	b.n	800a706 <__swsetup_r+0x1e>
 800a72e:	4b24      	ldr	r3, [pc, #144]	; (800a7c0 <__swsetup_r+0xd8>)
 800a730:	429c      	cmp	r4, r3
 800a732:	bf08      	it	eq
 800a734:	68ec      	ldreq	r4, [r5, #12]
 800a736:	e7e6      	b.n	800a706 <__swsetup_r+0x1e>
 800a738:	0758      	lsls	r0, r3, #29
 800a73a:	d512      	bpl.n	800a762 <__swsetup_r+0x7a>
 800a73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a73e:	b141      	cbz	r1, 800a752 <__swsetup_r+0x6a>
 800a740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a744:	4299      	cmp	r1, r3
 800a746:	d002      	beq.n	800a74e <__swsetup_r+0x66>
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 f991 	bl	800aa70 <_free_r>
 800a74e:	2300      	movs	r3, #0
 800a750:	6363      	str	r3, [r4, #52]	; 0x34
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	2300      	movs	r3, #0
 800a75c:	6063      	str	r3, [r4, #4]
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f043 0308 	orr.w	r3, r3, #8
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	b94b      	cbnz	r3, 800a782 <__swsetup_r+0x9a>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a778:	d003      	beq.n	800a782 <__swsetup_r+0x9a>
 800a77a:	4621      	mov	r1, r4
 800a77c:	4630      	mov	r0, r6
 800a77e:	f000 f92b 	bl	800a9d8 <__smakebuf_r>
 800a782:	89a0      	ldrh	r0, [r4, #12]
 800a784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a788:	f010 0301 	ands.w	r3, r0, #1
 800a78c:	d00a      	beq.n	800a7a4 <__swsetup_r+0xbc>
 800a78e:	2300      	movs	r3, #0
 800a790:	60a3      	str	r3, [r4, #8]
 800a792:	6963      	ldr	r3, [r4, #20]
 800a794:	425b      	negs	r3, r3
 800a796:	61a3      	str	r3, [r4, #24]
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	b943      	cbnz	r3, 800a7ae <__swsetup_r+0xc6>
 800a79c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7a0:	d1ba      	bne.n	800a718 <__swsetup_r+0x30>
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	0781      	lsls	r1, r0, #30
 800a7a6:	bf58      	it	pl
 800a7a8:	6963      	ldrpl	r3, [r4, #20]
 800a7aa:	60a3      	str	r3, [r4, #8]
 800a7ac:	e7f4      	b.n	800a798 <__swsetup_r+0xb0>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	e7f7      	b.n	800a7a2 <__swsetup_r+0xba>
 800a7b2:	bf00      	nop
 800a7b4:	20000040 	.word	0x20000040
 800a7b8:	0800b3e8 	.word	0x0800b3e8
 800a7bc:	0800b408 	.word	0x0800b408
 800a7c0:	0800b3c8 	.word	0x0800b3c8

0800a7c4 <_close_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_close_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f6 fed1 	bl	8001576 <_close>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_close_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_close_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	20005034 	.word	0x20005034

0800a7e4 <__sflush_r>:
 800a7e4:	898a      	ldrh	r2, [r1, #12]
 800a7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	0710      	lsls	r0, r2, #28
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	d458      	bmi.n	800a8a4 <__sflush_r+0xc0>
 800a7f2:	684b      	ldr	r3, [r1, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dc05      	bgt.n	800a804 <__sflush_r+0x20>
 800a7f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dc02      	bgt.n	800a804 <__sflush_r+0x20>
 800a7fe:	2000      	movs	r0, #0
 800a800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a806:	2e00      	cmp	r6, #0
 800a808:	d0f9      	beq.n	800a7fe <__sflush_r+0x1a>
 800a80a:	2300      	movs	r3, #0
 800a80c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a810:	682f      	ldr	r7, [r5, #0]
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	d032      	beq.n	800a87c <__sflush_r+0x98>
 800a816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	075a      	lsls	r2, r3, #29
 800a81c:	d505      	bpl.n	800a82a <__sflush_r+0x46>
 800a81e:	6863      	ldr	r3, [r4, #4]
 800a820:	1ac0      	subs	r0, r0, r3
 800a822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a824:	b10b      	cbz	r3, 800a82a <__sflush_r+0x46>
 800a826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a828:	1ac0      	subs	r0, r0, r3
 800a82a:	2300      	movs	r3, #0
 800a82c:	4602      	mov	r2, r0
 800a82e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a830:	6a21      	ldr	r1, [r4, #32]
 800a832:	4628      	mov	r0, r5
 800a834:	47b0      	blx	r6
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	d106      	bne.n	800a84a <__sflush_r+0x66>
 800a83c:	6829      	ldr	r1, [r5, #0]
 800a83e:	291d      	cmp	r1, #29
 800a840:	d82c      	bhi.n	800a89c <__sflush_r+0xb8>
 800a842:	4a2a      	ldr	r2, [pc, #168]	; (800a8ec <__sflush_r+0x108>)
 800a844:	40ca      	lsrs	r2, r1
 800a846:	07d6      	lsls	r6, r2, #31
 800a848:	d528      	bpl.n	800a89c <__sflush_r+0xb8>
 800a84a:	2200      	movs	r2, #0
 800a84c:	6062      	str	r2, [r4, #4]
 800a84e:	04d9      	lsls	r1, r3, #19
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	d504      	bpl.n	800a860 <__sflush_r+0x7c>
 800a856:	1c42      	adds	r2, r0, #1
 800a858:	d101      	bne.n	800a85e <__sflush_r+0x7a>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	b903      	cbnz	r3, 800a860 <__sflush_r+0x7c>
 800a85e:	6560      	str	r0, [r4, #84]	; 0x54
 800a860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a862:	602f      	str	r7, [r5, #0]
 800a864:	2900      	cmp	r1, #0
 800a866:	d0ca      	beq.n	800a7fe <__sflush_r+0x1a>
 800a868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a86c:	4299      	cmp	r1, r3
 800a86e:	d002      	beq.n	800a876 <__sflush_r+0x92>
 800a870:	4628      	mov	r0, r5
 800a872:	f000 f8fd 	bl	800aa70 <_free_r>
 800a876:	2000      	movs	r0, #0
 800a878:	6360      	str	r0, [r4, #52]	; 0x34
 800a87a:	e7c1      	b.n	800a800 <__sflush_r+0x1c>
 800a87c:	6a21      	ldr	r1, [r4, #32]
 800a87e:	2301      	movs	r3, #1
 800a880:	4628      	mov	r0, r5
 800a882:	47b0      	blx	r6
 800a884:	1c41      	adds	r1, r0, #1
 800a886:	d1c7      	bne.n	800a818 <__sflush_r+0x34>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0c4      	beq.n	800a818 <__sflush_r+0x34>
 800a88e:	2b1d      	cmp	r3, #29
 800a890:	d001      	beq.n	800a896 <__sflush_r+0xb2>
 800a892:	2b16      	cmp	r3, #22
 800a894:	d101      	bne.n	800a89a <__sflush_r+0xb6>
 800a896:	602f      	str	r7, [r5, #0]
 800a898:	e7b1      	b.n	800a7fe <__sflush_r+0x1a>
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a0:	81a3      	strh	r3, [r4, #12]
 800a8a2:	e7ad      	b.n	800a800 <__sflush_r+0x1c>
 800a8a4:	690f      	ldr	r7, [r1, #16]
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	d0a9      	beq.n	800a7fe <__sflush_r+0x1a>
 800a8aa:	0793      	lsls	r3, r2, #30
 800a8ac:	680e      	ldr	r6, [r1, #0]
 800a8ae:	bf08      	it	eq
 800a8b0:	694b      	ldreq	r3, [r1, #20]
 800a8b2:	600f      	str	r7, [r1, #0]
 800a8b4:	bf18      	it	ne
 800a8b6:	2300      	movne	r3, #0
 800a8b8:	eba6 0807 	sub.w	r8, r6, r7
 800a8bc:	608b      	str	r3, [r1, #8]
 800a8be:	f1b8 0f00 	cmp.w	r8, #0
 800a8c2:	dd9c      	ble.n	800a7fe <__sflush_r+0x1a>
 800a8c4:	6a21      	ldr	r1, [r4, #32]
 800a8c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8c8:	4643      	mov	r3, r8
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	47b0      	blx	r6
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	dc06      	bgt.n	800a8e2 <__sflush_r+0xfe>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8da:	81a3      	strh	r3, [r4, #12]
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e0:	e78e      	b.n	800a800 <__sflush_r+0x1c>
 800a8e2:	4407      	add	r7, r0
 800a8e4:	eba8 0800 	sub.w	r8, r8, r0
 800a8e8:	e7e9      	b.n	800a8be <__sflush_r+0xda>
 800a8ea:	bf00      	nop
 800a8ec:	20400001 	.word	0x20400001

0800a8f0 <_fflush_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	b913      	cbnz	r3, 800a900 <_fflush_r+0x10>
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	b118      	cbz	r0, 800a90a <_fflush_r+0x1a>
 800a902:	6983      	ldr	r3, [r0, #24]
 800a904:	b90b      	cbnz	r3, 800a90a <_fflush_r+0x1a>
 800a906:	f7ff fbcf 	bl	800a0a8 <__sinit>
 800a90a:	4b14      	ldr	r3, [pc, #80]	; (800a95c <_fflush_r+0x6c>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d11b      	bne.n	800a948 <_fflush_r+0x58>
 800a910:	686c      	ldr	r4, [r5, #4]
 800a912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0ef      	beq.n	800a8fa <_fflush_r+0xa>
 800a91a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a91c:	07d0      	lsls	r0, r2, #31
 800a91e:	d404      	bmi.n	800a92a <_fflush_r+0x3a>
 800a920:	0599      	lsls	r1, r3, #22
 800a922:	d402      	bmi.n	800a92a <_fflush_r+0x3a>
 800a924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a926:	f7ff fc82 	bl	800a22e <__retarget_lock_acquire_recursive>
 800a92a:	4628      	mov	r0, r5
 800a92c:	4621      	mov	r1, r4
 800a92e:	f7ff ff59 	bl	800a7e4 <__sflush_r>
 800a932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a934:	07da      	lsls	r2, r3, #31
 800a936:	4605      	mov	r5, r0
 800a938:	d4e0      	bmi.n	800a8fc <_fflush_r+0xc>
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	059b      	lsls	r3, r3, #22
 800a93e:	d4dd      	bmi.n	800a8fc <_fflush_r+0xc>
 800a940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a942:	f7ff fc75 	bl	800a230 <__retarget_lock_release_recursive>
 800a946:	e7d9      	b.n	800a8fc <_fflush_r+0xc>
 800a948:	4b05      	ldr	r3, [pc, #20]	; (800a960 <_fflush_r+0x70>)
 800a94a:	429c      	cmp	r4, r3
 800a94c:	d101      	bne.n	800a952 <_fflush_r+0x62>
 800a94e:	68ac      	ldr	r4, [r5, #8]
 800a950:	e7df      	b.n	800a912 <_fflush_r+0x22>
 800a952:	4b04      	ldr	r3, [pc, #16]	; (800a964 <_fflush_r+0x74>)
 800a954:	429c      	cmp	r4, r3
 800a956:	bf08      	it	eq
 800a958:	68ec      	ldreq	r4, [r5, #12]
 800a95a:	e7da      	b.n	800a912 <_fflush_r+0x22>
 800a95c:	0800b3e8 	.word	0x0800b3e8
 800a960:	0800b408 	.word	0x0800b408
 800a964:	0800b3c8 	.word	0x0800b3c8

0800a968 <_lseek_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4d07      	ldr	r5, [pc, #28]	; (800a988 <_lseek_r+0x20>)
 800a96c:	4604      	mov	r4, r0
 800a96e:	4608      	mov	r0, r1
 800a970:	4611      	mov	r1, r2
 800a972:	2200      	movs	r2, #0
 800a974:	602a      	str	r2, [r5, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	f7f6 fe24 	bl	80015c4 <_lseek>
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	d102      	bne.n	800a986 <_lseek_r+0x1e>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	b103      	cbz	r3, 800a986 <_lseek_r+0x1e>
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	20005034 	.word	0x20005034

0800a98c <__swhatbuf_r>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	460e      	mov	r6, r1
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	2900      	cmp	r1, #0
 800a996:	b096      	sub	sp, #88	; 0x58
 800a998:	4614      	mov	r4, r2
 800a99a:	461d      	mov	r5, r3
 800a99c:	da08      	bge.n	800a9b0 <__swhatbuf_r+0x24>
 800a99e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	061a      	lsls	r2, r3, #24
 800a9a8:	d410      	bmi.n	800a9cc <__swhatbuf_r+0x40>
 800a9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ae:	e00e      	b.n	800a9ce <__swhatbuf_r+0x42>
 800a9b0:	466a      	mov	r2, sp
 800a9b2:	f000 fba9 	bl	800b108 <_fstat_r>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	dbf1      	blt.n	800a99e <__swhatbuf_r+0x12>
 800a9ba:	9a01      	ldr	r2, [sp, #4]
 800a9bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9c4:	425a      	negs	r2, r3
 800a9c6:	415a      	adcs	r2, r3
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	e7ee      	b.n	800a9aa <__swhatbuf_r+0x1e>
 800a9cc:	2340      	movs	r3, #64	; 0x40
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	b016      	add	sp, #88	; 0x58
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9d8 <__smakebuf_r>:
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9dc:	079d      	lsls	r5, r3, #30
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	d507      	bpl.n	800a9f4 <__smakebuf_r+0x1c>
 800a9e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	6123      	str	r3, [r4, #16]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	6163      	str	r3, [r4, #20]
 800a9f0:	b002      	add	sp, #8
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	ab01      	add	r3, sp, #4
 800a9f6:	466a      	mov	r2, sp
 800a9f8:	f7ff ffc8 	bl	800a98c <__swhatbuf_r>
 800a9fc:	9900      	ldr	r1, [sp, #0]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff fc4d 	bl	800a2a0 <_malloc_r>
 800aa06:	b948      	cbnz	r0, 800aa1c <__smakebuf_r+0x44>
 800aa08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0c:	059a      	lsls	r2, r3, #22
 800aa0e:	d4ef      	bmi.n	800a9f0 <__smakebuf_r+0x18>
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	e7e3      	b.n	800a9e4 <__smakebuf_r+0xc>
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <__smakebuf_r+0x7c>)
 800aa1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	6020      	str	r0, [r4, #0]
 800aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	6163      	str	r3, [r4, #20]
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	6120      	str	r0, [r4, #16]
 800aa32:	b15b      	cbz	r3, 800aa4c <__smakebuf_r+0x74>
 800aa34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 fb77 	bl	800b12c <_isatty_r>
 800aa3e:	b128      	cbz	r0, 800aa4c <__smakebuf_r+0x74>
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	f023 0303 	bic.w	r3, r3, #3
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	89a0      	ldrh	r0, [r4, #12]
 800aa4e:	4305      	orrs	r5, r0
 800aa50:	81a5      	strh	r5, [r4, #12]
 800aa52:	e7cd      	b.n	800a9f0 <__smakebuf_r+0x18>
 800aa54:	0800a041 	.word	0x0800a041

0800aa58 <__malloc_lock>:
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__malloc_lock+0x8>)
 800aa5a:	f7ff bbe8 	b.w	800a22e <__retarget_lock_acquire_recursive>
 800aa5e:	bf00      	nop
 800aa60:	20005028 	.word	0x20005028

0800aa64 <__malloc_unlock>:
 800aa64:	4801      	ldr	r0, [pc, #4]	; (800aa6c <__malloc_unlock+0x8>)
 800aa66:	f7ff bbe3 	b.w	800a230 <__retarget_lock_release_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	20005028 	.word	0x20005028

0800aa70 <_free_r>:
 800aa70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa72:	2900      	cmp	r1, #0
 800aa74:	d044      	beq.n	800ab00 <_free_r+0x90>
 800aa76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa7a:	9001      	str	r0, [sp, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa82:	bfb8      	it	lt
 800aa84:	18e4      	addlt	r4, r4, r3
 800aa86:	f7ff ffe7 	bl	800aa58 <__malloc_lock>
 800aa8a:	4a1e      	ldr	r2, [pc, #120]	; (800ab04 <_free_r+0x94>)
 800aa8c:	9801      	ldr	r0, [sp, #4]
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	b933      	cbnz	r3, 800aaa0 <_free_r+0x30>
 800aa92:	6063      	str	r3, [r4, #4]
 800aa94:	6014      	str	r4, [r2, #0]
 800aa96:	b003      	add	sp, #12
 800aa98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa9c:	f7ff bfe2 	b.w	800aa64 <__malloc_unlock>
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	d908      	bls.n	800aab6 <_free_r+0x46>
 800aaa4:	6825      	ldr	r5, [r4, #0]
 800aaa6:	1961      	adds	r1, r4, r5
 800aaa8:	428b      	cmp	r3, r1
 800aaaa:	bf01      	itttt	eq
 800aaac:	6819      	ldreq	r1, [r3, #0]
 800aaae:	685b      	ldreq	r3, [r3, #4]
 800aab0:	1949      	addeq	r1, r1, r5
 800aab2:	6021      	streq	r1, [r4, #0]
 800aab4:	e7ed      	b.n	800aa92 <_free_r+0x22>
 800aab6:	461a      	mov	r2, r3
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	b10b      	cbz	r3, 800aac0 <_free_r+0x50>
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	d9fa      	bls.n	800aab6 <_free_r+0x46>
 800aac0:	6811      	ldr	r1, [r2, #0]
 800aac2:	1855      	adds	r5, r2, r1
 800aac4:	42a5      	cmp	r5, r4
 800aac6:	d10b      	bne.n	800aae0 <_free_r+0x70>
 800aac8:	6824      	ldr	r4, [r4, #0]
 800aaca:	4421      	add	r1, r4
 800aacc:	1854      	adds	r4, r2, r1
 800aace:	42a3      	cmp	r3, r4
 800aad0:	6011      	str	r1, [r2, #0]
 800aad2:	d1e0      	bne.n	800aa96 <_free_r+0x26>
 800aad4:	681c      	ldr	r4, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	6053      	str	r3, [r2, #4]
 800aada:	4421      	add	r1, r4
 800aadc:	6011      	str	r1, [r2, #0]
 800aade:	e7da      	b.n	800aa96 <_free_r+0x26>
 800aae0:	d902      	bls.n	800aae8 <_free_r+0x78>
 800aae2:	230c      	movs	r3, #12
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	e7d6      	b.n	800aa96 <_free_r+0x26>
 800aae8:	6825      	ldr	r5, [r4, #0]
 800aaea:	1961      	adds	r1, r4, r5
 800aaec:	428b      	cmp	r3, r1
 800aaee:	bf04      	itt	eq
 800aaf0:	6819      	ldreq	r1, [r3, #0]
 800aaf2:	685b      	ldreq	r3, [r3, #4]
 800aaf4:	6063      	str	r3, [r4, #4]
 800aaf6:	bf04      	itt	eq
 800aaf8:	1949      	addeq	r1, r1, r5
 800aafa:	6021      	streq	r1, [r4, #0]
 800aafc:	6054      	str	r4, [r2, #4]
 800aafe:	e7ca      	b.n	800aa96 <_free_r+0x26>
 800ab00:	b003      	add	sp, #12
 800ab02:	bd30      	pop	{r4, r5, pc}
 800ab04:	2000502c 	.word	0x2000502c

0800ab08 <__sfputc_r>:
 800ab08:	6893      	ldr	r3, [r2, #8]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	b410      	push	{r4}
 800ab10:	6093      	str	r3, [r2, #8]
 800ab12:	da08      	bge.n	800ab26 <__sfputc_r+0x1e>
 800ab14:	6994      	ldr	r4, [r2, #24]
 800ab16:	42a3      	cmp	r3, r4
 800ab18:	db01      	blt.n	800ab1e <__sfputc_r+0x16>
 800ab1a:	290a      	cmp	r1, #10
 800ab1c:	d103      	bne.n	800ab26 <__sfputc_r+0x1e>
 800ab1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab22:	f7ff bd7d 	b.w	800a620 <__swbuf_r>
 800ab26:	6813      	ldr	r3, [r2, #0]
 800ab28:	1c58      	adds	r0, r3, #1
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	7019      	strb	r1, [r3, #0]
 800ab2e:	4608      	mov	r0, r1
 800ab30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <__sfputs_r>:
 800ab36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab38:	4606      	mov	r6, r0
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	18d5      	adds	r5, r2, r3
 800ab40:	42ac      	cmp	r4, r5
 800ab42:	d101      	bne.n	800ab48 <__sfputs_r+0x12>
 800ab44:	2000      	movs	r0, #0
 800ab46:	e007      	b.n	800ab58 <__sfputs_r+0x22>
 800ab48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4c:	463a      	mov	r2, r7
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ffda 	bl	800ab08 <__sfputc_r>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d1f3      	bne.n	800ab40 <__sfputs_r+0xa>
 800ab58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab5c <_vfiprintf_r>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	460d      	mov	r5, r1
 800ab62:	b09d      	sub	sp, #116	; 0x74
 800ab64:	4614      	mov	r4, r2
 800ab66:	4698      	mov	r8, r3
 800ab68:	4606      	mov	r6, r0
 800ab6a:	b118      	cbz	r0, 800ab74 <_vfiprintf_r+0x18>
 800ab6c:	6983      	ldr	r3, [r0, #24]
 800ab6e:	b90b      	cbnz	r3, 800ab74 <_vfiprintf_r+0x18>
 800ab70:	f7ff fa9a 	bl	800a0a8 <__sinit>
 800ab74:	4b89      	ldr	r3, [pc, #548]	; (800ad9c <_vfiprintf_r+0x240>)
 800ab76:	429d      	cmp	r5, r3
 800ab78:	d11b      	bne.n	800abb2 <_vfiprintf_r+0x56>
 800ab7a:	6875      	ldr	r5, [r6, #4]
 800ab7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab7e:	07d9      	lsls	r1, r3, #31
 800ab80:	d405      	bmi.n	800ab8e <_vfiprintf_r+0x32>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	059a      	lsls	r2, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_vfiprintf_r+0x32>
 800ab88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab8a:	f7ff fb50 	bl	800a22e <__retarget_lock_acquire_recursive>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	071b      	lsls	r3, r3, #28
 800ab92:	d501      	bpl.n	800ab98 <_vfiprintf_r+0x3c>
 800ab94:	692b      	ldr	r3, [r5, #16]
 800ab96:	b9eb      	cbnz	r3, 800abd4 <_vfiprintf_r+0x78>
 800ab98:	4629      	mov	r1, r5
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f7ff fda4 	bl	800a6e8 <__swsetup_r>
 800aba0:	b1c0      	cbz	r0, 800abd4 <_vfiprintf_r+0x78>
 800aba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aba4:	07dc      	lsls	r4, r3, #31
 800aba6:	d50e      	bpl.n	800abc6 <_vfiprintf_r+0x6a>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	b01d      	add	sp, #116	; 0x74
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	4b7b      	ldr	r3, [pc, #492]	; (800ada0 <_vfiprintf_r+0x244>)
 800abb4:	429d      	cmp	r5, r3
 800abb6:	d101      	bne.n	800abbc <_vfiprintf_r+0x60>
 800abb8:	68b5      	ldr	r5, [r6, #8]
 800abba:	e7df      	b.n	800ab7c <_vfiprintf_r+0x20>
 800abbc:	4b79      	ldr	r3, [pc, #484]	; (800ada4 <_vfiprintf_r+0x248>)
 800abbe:	429d      	cmp	r5, r3
 800abc0:	bf08      	it	eq
 800abc2:	68f5      	ldreq	r5, [r6, #12]
 800abc4:	e7da      	b.n	800ab7c <_vfiprintf_r+0x20>
 800abc6:	89ab      	ldrh	r3, [r5, #12]
 800abc8:	0598      	lsls	r0, r3, #22
 800abca:	d4ed      	bmi.n	800aba8 <_vfiprintf_r+0x4c>
 800abcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abce:	f7ff fb2f 	bl	800a230 <__retarget_lock_release_recursive>
 800abd2:	e7e9      	b.n	800aba8 <_vfiprintf_r+0x4c>
 800abd4:	2300      	movs	r3, #0
 800abd6:	9309      	str	r3, [sp, #36]	; 0x24
 800abd8:	2320      	movs	r3, #32
 800abda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abde:	f8cd 800c 	str.w	r8, [sp, #12]
 800abe2:	2330      	movs	r3, #48	; 0x30
 800abe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ada8 <_vfiprintf_r+0x24c>
 800abe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abec:	f04f 0901 	mov.w	r9, #1
 800abf0:	4623      	mov	r3, r4
 800abf2:	469a      	mov	sl, r3
 800abf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf8:	b10a      	cbz	r2, 800abfe <_vfiprintf_r+0xa2>
 800abfa:	2a25      	cmp	r2, #37	; 0x25
 800abfc:	d1f9      	bne.n	800abf2 <_vfiprintf_r+0x96>
 800abfe:	ebba 0b04 	subs.w	fp, sl, r4
 800ac02:	d00b      	beq.n	800ac1c <_vfiprintf_r+0xc0>
 800ac04:	465b      	mov	r3, fp
 800ac06:	4622      	mov	r2, r4
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f7ff ff93 	bl	800ab36 <__sfputs_r>
 800ac10:	3001      	adds	r0, #1
 800ac12:	f000 80aa 	beq.w	800ad6a <_vfiprintf_r+0x20e>
 800ac16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac18:	445a      	add	r2, fp
 800ac1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 80a2 	beq.w	800ad6a <_vfiprintf_r+0x20e>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f04f 32ff 	mov.w	r2, #4294967295
 800ac2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac30:	f10a 0a01 	add.w	sl, sl, #1
 800ac34:	9304      	str	r3, [sp, #16]
 800ac36:	9307      	str	r3, [sp, #28]
 800ac38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac3e:	4654      	mov	r4, sl
 800ac40:	2205      	movs	r2, #5
 800ac42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac46:	4858      	ldr	r0, [pc, #352]	; (800ada8 <_vfiprintf_r+0x24c>)
 800ac48:	f7f5 fac2 	bl	80001d0 <memchr>
 800ac4c:	9a04      	ldr	r2, [sp, #16]
 800ac4e:	b9d8      	cbnz	r0, 800ac88 <_vfiprintf_r+0x12c>
 800ac50:	06d1      	lsls	r1, r2, #27
 800ac52:	bf44      	itt	mi
 800ac54:	2320      	movmi	r3, #32
 800ac56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac5a:	0713      	lsls	r3, r2, #28
 800ac5c:	bf44      	itt	mi
 800ac5e:	232b      	movmi	r3, #43	; 0x2b
 800ac60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac64:	f89a 3000 	ldrb.w	r3, [sl]
 800ac68:	2b2a      	cmp	r3, #42	; 0x2a
 800ac6a:	d015      	beq.n	800ac98 <_vfiprintf_r+0x13c>
 800ac6c:	9a07      	ldr	r2, [sp, #28]
 800ac6e:	4654      	mov	r4, sl
 800ac70:	2000      	movs	r0, #0
 800ac72:	f04f 0c0a 	mov.w	ip, #10
 800ac76:	4621      	mov	r1, r4
 800ac78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac7c:	3b30      	subs	r3, #48	; 0x30
 800ac7e:	2b09      	cmp	r3, #9
 800ac80:	d94e      	bls.n	800ad20 <_vfiprintf_r+0x1c4>
 800ac82:	b1b0      	cbz	r0, 800acb2 <_vfiprintf_r+0x156>
 800ac84:	9207      	str	r2, [sp, #28]
 800ac86:	e014      	b.n	800acb2 <_vfiprintf_r+0x156>
 800ac88:	eba0 0308 	sub.w	r3, r0, r8
 800ac8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac90:	4313      	orrs	r3, r2
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	46a2      	mov	sl, r4
 800ac96:	e7d2      	b.n	800ac3e <_vfiprintf_r+0xe2>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	1d19      	adds	r1, r3, #4
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	9103      	str	r1, [sp, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bfbb      	ittet	lt
 800aca4:	425b      	neglt	r3, r3
 800aca6:	f042 0202 	orrlt.w	r2, r2, #2
 800acaa:	9307      	strge	r3, [sp, #28]
 800acac:	9307      	strlt	r3, [sp, #28]
 800acae:	bfb8      	it	lt
 800acb0:	9204      	strlt	r2, [sp, #16]
 800acb2:	7823      	ldrb	r3, [r4, #0]
 800acb4:	2b2e      	cmp	r3, #46	; 0x2e
 800acb6:	d10c      	bne.n	800acd2 <_vfiprintf_r+0x176>
 800acb8:	7863      	ldrb	r3, [r4, #1]
 800acba:	2b2a      	cmp	r3, #42	; 0x2a
 800acbc:	d135      	bne.n	800ad2a <_vfiprintf_r+0x1ce>
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	1d1a      	adds	r2, r3, #4
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	9203      	str	r2, [sp, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bfb8      	it	lt
 800acca:	f04f 33ff 	movlt.w	r3, #4294967295
 800acce:	3402      	adds	r4, #2
 800acd0:	9305      	str	r3, [sp, #20]
 800acd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800adb8 <_vfiprintf_r+0x25c>
 800acd6:	7821      	ldrb	r1, [r4, #0]
 800acd8:	2203      	movs	r2, #3
 800acda:	4650      	mov	r0, sl
 800acdc:	f7f5 fa78 	bl	80001d0 <memchr>
 800ace0:	b140      	cbz	r0, 800acf4 <_vfiprintf_r+0x198>
 800ace2:	2340      	movs	r3, #64	; 0x40
 800ace4:	eba0 000a 	sub.w	r0, r0, sl
 800ace8:	fa03 f000 	lsl.w	r0, r3, r0
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	4303      	orrs	r3, r0
 800acf0:	3401      	adds	r4, #1
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	482c      	ldr	r0, [pc, #176]	; (800adac <_vfiprintf_r+0x250>)
 800acfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acfe:	2206      	movs	r2, #6
 800ad00:	f7f5 fa66 	bl	80001d0 <memchr>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d03f      	beq.n	800ad88 <_vfiprintf_r+0x22c>
 800ad08:	4b29      	ldr	r3, [pc, #164]	; (800adb0 <_vfiprintf_r+0x254>)
 800ad0a:	bb1b      	cbnz	r3, 800ad54 <_vfiprintf_r+0x1f8>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	3307      	adds	r3, #7
 800ad10:	f023 0307 	bic.w	r3, r3, #7
 800ad14:	3308      	adds	r3, #8
 800ad16:	9303      	str	r3, [sp, #12]
 800ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1a:	443b      	add	r3, r7
 800ad1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1e:	e767      	b.n	800abf0 <_vfiprintf_r+0x94>
 800ad20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad24:	460c      	mov	r4, r1
 800ad26:	2001      	movs	r0, #1
 800ad28:	e7a5      	b.n	800ac76 <_vfiprintf_r+0x11a>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	3401      	adds	r4, #1
 800ad2e:	9305      	str	r3, [sp, #20]
 800ad30:	4619      	mov	r1, r3
 800ad32:	f04f 0c0a 	mov.w	ip, #10
 800ad36:	4620      	mov	r0, r4
 800ad38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad3c:	3a30      	subs	r2, #48	; 0x30
 800ad3e:	2a09      	cmp	r2, #9
 800ad40:	d903      	bls.n	800ad4a <_vfiprintf_r+0x1ee>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0c5      	beq.n	800acd2 <_vfiprintf_r+0x176>
 800ad46:	9105      	str	r1, [sp, #20]
 800ad48:	e7c3      	b.n	800acd2 <_vfiprintf_r+0x176>
 800ad4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad4e:	4604      	mov	r4, r0
 800ad50:	2301      	movs	r3, #1
 800ad52:	e7f0      	b.n	800ad36 <_vfiprintf_r+0x1da>
 800ad54:	ab03      	add	r3, sp, #12
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <_vfiprintf_r+0x258>)
 800ad5c:	a904      	add	r1, sp, #16
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f3af 8000 	nop.w
 800ad64:	4607      	mov	r7, r0
 800ad66:	1c78      	adds	r0, r7, #1
 800ad68:	d1d6      	bne.n	800ad18 <_vfiprintf_r+0x1bc>
 800ad6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad6c:	07d9      	lsls	r1, r3, #31
 800ad6e:	d405      	bmi.n	800ad7c <_vfiprintf_r+0x220>
 800ad70:	89ab      	ldrh	r3, [r5, #12]
 800ad72:	059a      	lsls	r2, r3, #22
 800ad74:	d402      	bmi.n	800ad7c <_vfiprintf_r+0x220>
 800ad76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad78:	f7ff fa5a 	bl	800a230 <__retarget_lock_release_recursive>
 800ad7c:	89ab      	ldrh	r3, [r5, #12]
 800ad7e:	065b      	lsls	r3, r3, #25
 800ad80:	f53f af12 	bmi.w	800aba8 <_vfiprintf_r+0x4c>
 800ad84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad86:	e711      	b.n	800abac <_vfiprintf_r+0x50>
 800ad88:	ab03      	add	r3, sp, #12
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <_vfiprintf_r+0x258>)
 800ad90:	a904      	add	r1, sp, #16
 800ad92:	4630      	mov	r0, r6
 800ad94:	f000 f880 	bl	800ae98 <_printf_i>
 800ad98:	e7e4      	b.n	800ad64 <_vfiprintf_r+0x208>
 800ad9a:	bf00      	nop
 800ad9c:	0800b3e8 	.word	0x0800b3e8
 800ada0:	0800b408 	.word	0x0800b408
 800ada4:	0800b3c8 	.word	0x0800b3c8
 800ada8:	0800b42c 	.word	0x0800b42c
 800adac:	0800b436 	.word	0x0800b436
 800adb0:	00000000 	.word	0x00000000
 800adb4:	0800ab37 	.word	0x0800ab37
 800adb8:	0800b432 	.word	0x0800b432

0800adbc <_printf_common>:
 800adbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	4616      	mov	r6, r2
 800adc2:	4699      	mov	r9, r3
 800adc4:	688a      	ldr	r2, [r1, #8]
 800adc6:	690b      	ldr	r3, [r1, #16]
 800adc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adcc:	4293      	cmp	r3, r2
 800adce:	bfb8      	it	lt
 800add0:	4613      	movlt	r3, r2
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800add8:	4607      	mov	r7, r0
 800adda:	460c      	mov	r4, r1
 800addc:	b10a      	cbz	r2, 800ade2 <_printf_common+0x26>
 800adde:	3301      	adds	r3, #1
 800ade0:	6033      	str	r3, [r6, #0]
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	0699      	lsls	r1, r3, #26
 800ade6:	bf42      	ittt	mi
 800ade8:	6833      	ldrmi	r3, [r6, #0]
 800adea:	3302      	addmi	r3, #2
 800adec:	6033      	strmi	r3, [r6, #0]
 800adee:	6825      	ldr	r5, [r4, #0]
 800adf0:	f015 0506 	ands.w	r5, r5, #6
 800adf4:	d106      	bne.n	800ae04 <_printf_common+0x48>
 800adf6:	f104 0a19 	add.w	sl, r4, #25
 800adfa:	68e3      	ldr	r3, [r4, #12]
 800adfc:	6832      	ldr	r2, [r6, #0]
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	42ab      	cmp	r3, r5
 800ae02:	dc26      	bgt.n	800ae52 <_printf_common+0x96>
 800ae04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae08:	1e13      	subs	r3, r2, #0
 800ae0a:	6822      	ldr	r2, [r4, #0]
 800ae0c:	bf18      	it	ne
 800ae0e:	2301      	movne	r3, #1
 800ae10:	0692      	lsls	r2, r2, #26
 800ae12:	d42b      	bmi.n	800ae6c <_printf_common+0xb0>
 800ae14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae18:	4649      	mov	r1, r9
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	47c0      	blx	r8
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d01e      	beq.n	800ae60 <_printf_common+0xa4>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	68e5      	ldr	r5, [r4, #12]
 800ae26:	6832      	ldr	r2, [r6, #0]
 800ae28:	f003 0306 	and.w	r3, r3, #6
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	bf08      	it	eq
 800ae30:	1aad      	subeq	r5, r5, r2
 800ae32:	68a3      	ldr	r3, [r4, #8]
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	bf0c      	ite	eq
 800ae38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae3c:	2500      	movne	r5, #0
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	bfc4      	itt	gt
 800ae42:	1a9b      	subgt	r3, r3, r2
 800ae44:	18ed      	addgt	r5, r5, r3
 800ae46:	2600      	movs	r6, #0
 800ae48:	341a      	adds	r4, #26
 800ae4a:	42b5      	cmp	r5, r6
 800ae4c:	d11a      	bne.n	800ae84 <_printf_common+0xc8>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e008      	b.n	800ae64 <_printf_common+0xa8>
 800ae52:	2301      	movs	r3, #1
 800ae54:	4652      	mov	r2, sl
 800ae56:	4649      	mov	r1, r9
 800ae58:	4638      	mov	r0, r7
 800ae5a:	47c0      	blx	r8
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d103      	bne.n	800ae68 <_printf_common+0xac>
 800ae60:	f04f 30ff 	mov.w	r0, #4294967295
 800ae64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae68:	3501      	adds	r5, #1
 800ae6a:	e7c6      	b.n	800adfa <_printf_common+0x3e>
 800ae6c:	18e1      	adds	r1, r4, r3
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	2030      	movs	r0, #48	; 0x30
 800ae72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae76:	4422      	add	r2, r4
 800ae78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae80:	3302      	adds	r3, #2
 800ae82:	e7c7      	b.n	800ae14 <_printf_common+0x58>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4622      	mov	r2, r4
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	47c0      	blx	r8
 800ae8e:	3001      	adds	r0, #1
 800ae90:	d0e6      	beq.n	800ae60 <_printf_common+0xa4>
 800ae92:	3601      	adds	r6, #1
 800ae94:	e7d9      	b.n	800ae4a <_printf_common+0x8e>
	...

0800ae98 <_printf_i>:
 800ae98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9c:	7e0f      	ldrb	r7, [r1, #24]
 800ae9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aea0:	2f78      	cmp	r7, #120	; 0x78
 800aea2:	4691      	mov	r9, r2
 800aea4:	4680      	mov	r8, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	469a      	mov	sl, r3
 800aeaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aeae:	d807      	bhi.n	800aec0 <_printf_i+0x28>
 800aeb0:	2f62      	cmp	r7, #98	; 0x62
 800aeb2:	d80a      	bhi.n	800aeca <_printf_i+0x32>
 800aeb4:	2f00      	cmp	r7, #0
 800aeb6:	f000 80d8 	beq.w	800b06a <_printf_i+0x1d2>
 800aeba:	2f58      	cmp	r7, #88	; 0x58
 800aebc:	f000 80a3 	beq.w	800b006 <_printf_i+0x16e>
 800aec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aec8:	e03a      	b.n	800af40 <_printf_i+0xa8>
 800aeca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aece:	2b15      	cmp	r3, #21
 800aed0:	d8f6      	bhi.n	800aec0 <_printf_i+0x28>
 800aed2:	a101      	add	r1, pc, #4	; (adr r1, 800aed8 <_printf_i+0x40>)
 800aed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aed8:	0800af31 	.word	0x0800af31
 800aedc:	0800af45 	.word	0x0800af45
 800aee0:	0800aec1 	.word	0x0800aec1
 800aee4:	0800aec1 	.word	0x0800aec1
 800aee8:	0800aec1 	.word	0x0800aec1
 800aeec:	0800aec1 	.word	0x0800aec1
 800aef0:	0800af45 	.word	0x0800af45
 800aef4:	0800aec1 	.word	0x0800aec1
 800aef8:	0800aec1 	.word	0x0800aec1
 800aefc:	0800aec1 	.word	0x0800aec1
 800af00:	0800aec1 	.word	0x0800aec1
 800af04:	0800b051 	.word	0x0800b051
 800af08:	0800af75 	.word	0x0800af75
 800af0c:	0800b033 	.word	0x0800b033
 800af10:	0800aec1 	.word	0x0800aec1
 800af14:	0800aec1 	.word	0x0800aec1
 800af18:	0800b073 	.word	0x0800b073
 800af1c:	0800aec1 	.word	0x0800aec1
 800af20:	0800af75 	.word	0x0800af75
 800af24:	0800aec1 	.word	0x0800aec1
 800af28:	0800aec1 	.word	0x0800aec1
 800af2c:	0800b03b 	.word	0x0800b03b
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	1d1a      	adds	r2, r3, #4
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	602a      	str	r2, [r5, #0]
 800af38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af40:	2301      	movs	r3, #1
 800af42:	e0a3      	b.n	800b08c <_printf_i+0x1f4>
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	6829      	ldr	r1, [r5, #0]
 800af48:	0606      	lsls	r6, r0, #24
 800af4a:	f101 0304 	add.w	r3, r1, #4
 800af4e:	d50a      	bpl.n	800af66 <_printf_i+0xce>
 800af50:	680e      	ldr	r6, [r1, #0]
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	2e00      	cmp	r6, #0
 800af56:	da03      	bge.n	800af60 <_printf_i+0xc8>
 800af58:	232d      	movs	r3, #45	; 0x2d
 800af5a:	4276      	negs	r6, r6
 800af5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af60:	485e      	ldr	r0, [pc, #376]	; (800b0dc <_printf_i+0x244>)
 800af62:	230a      	movs	r3, #10
 800af64:	e019      	b.n	800af9a <_printf_i+0x102>
 800af66:	680e      	ldr	r6, [r1, #0]
 800af68:	602b      	str	r3, [r5, #0]
 800af6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af6e:	bf18      	it	ne
 800af70:	b236      	sxthne	r6, r6
 800af72:	e7ef      	b.n	800af54 <_printf_i+0xbc>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	6820      	ldr	r0, [r4, #0]
 800af78:	1d19      	adds	r1, r3, #4
 800af7a:	6029      	str	r1, [r5, #0]
 800af7c:	0601      	lsls	r1, r0, #24
 800af7e:	d501      	bpl.n	800af84 <_printf_i+0xec>
 800af80:	681e      	ldr	r6, [r3, #0]
 800af82:	e002      	b.n	800af8a <_printf_i+0xf2>
 800af84:	0646      	lsls	r6, r0, #25
 800af86:	d5fb      	bpl.n	800af80 <_printf_i+0xe8>
 800af88:	881e      	ldrh	r6, [r3, #0]
 800af8a:	4854      	ldr	r0, [pc, #336]	; (800b0dc <_printf_i+0x244>)
 800af8c:	2f6f      	cmp	r7, #111	; 0x6f
 800af8e:	bf0c      	ite	eq
 800af90:	2308      	moveq	r3, #8
 800af92:	230a      	movne	r3, #10
 800af94:	2100      	movs	r1, #0
 800af96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af9a:	6865      	ldr	r5, [r4, #4]
 800af9c:	60a5      	str	r5, [r4, #8]
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	bfa2      	ittt	ge
 800afa2:	6821      	ldrge	r1, [r4, #0]
 800afa4:	f021 0104 	bicge.w	r1, r1, #4
 800afa8:	6021      	strge	r1, [r4, #0]
 800afaa:	b90e      	cbnz	r6, 800afb0 <_printf_i+0x118>
 800afac:	2d00      	cmp	r5, #0
 800afae:	d04d      	beq.n	800b04c <_printf_i+0x1b4>
 800afb0:	4615      	mov	r5, r2
 800afb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800afb6:	fb03 6711 	mls	r7, r3, r1, r6
 800afba:	5dc7      	ldrb	r7, [r0, r7]
 800afbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afc0:	4637      	mov	r7, r6
 800afc2:	42bb      	cmp	r3, r7
 800afc4:	460e      	mov	r6, r1
 800afc6:	d9f4      	bls.n	800afb2 <_printf_i+0x11a>
 800afc8:	2b08      	cmp	r3, #8
 800afca:	d10b      	bne.n	800afe4 <_printf_i+0x14c>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	07de      	lsls	r6, r3, #31
 800afd0:	d508      	bpl.n	800afe4 <_printf_i+0x14c>
 800afd2:	6923      	ldr	r3, [r4, #16]
 800afd4:	6861      	ldr	r1, [r4, #4]
 800afd6:	4299      	cmp	r1, r3
 800afd8:	bfde      	ittt	le
 800afda:	2330      	movle	r3, #48	; 0x30
 800afdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afe4:	1b52      	subs	r2, r2, r5
 800afe6:	6122      	str	r2, [r4, #16]
 800afe8:	f8cd a000 	str.w	sl, [sp]
 800afec:	464b      	mov	r3, r9
 800afee:	aa03      	add	r2, sp, #12
 800aff0:	4621      	mov	r1, r4
 800aff2:	4640      	mov	r0, r8
 800aff4:	f7ff fee2 	bl	800adbc <_printf_common>
 800aff8:	3001      	adds	r0, #1
 800affa:	d14c      	bne.n	800b096 <_printf_i+0x1fe>
 800affc:	f04f 30ff 	mov.w	r0, #4294967295
 800b000:	b004      	add	sp, #16
 800b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b006:	4835      	ldr	r0, [pc, #212]	; (800b0dc <_printf_i+0x244>)
 800b008:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b00c:	6829      	ldr	r1, [r5, #0]
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	f851 6b04 	ldr.w	r6, [r1], #4
 800b014:	6029      	str	r1, [r5, #0]
 800b016:	061d      	lsls	r5, r3, #24
 800b018:	d514      	bpl.n	800b044 <_printf_i+0x1ac>
 800b01a:	07df      	lsls	r7, r3, #31
 800b01c:	bf44      	itt	mi
 800b01e:	f043 0320 	orrmi.w	r3, r3, #32
 800b022:	6023      	strmi	r3, [r4, #0]
 800b024:	b91e      	cbnz	r6, 800b02e <_printf_i+0x196>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	f023 0320 	bic.w	r3, r3, #32
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	2310      	movs	r3, #16
 800b030:	e7b0      	b.n	800af94 <_printf_i+0xfc>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	f043 0320 	orr.w	r3, r3, #32
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	2378      	movs	r3, #120	; 0x78
 800b03c:	4828      	ldr	r0, [pc, #160]	; (800b0e0 <_printf_i+0x248>)
 800b03e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b042:	e7e3      	b.n	800b00c <_printf_i+0x174>
 800b044:	0659      	lsls	r1, r3, #25
 800b046:	bf48      	it	mi
 800b048:	b2b6      	uxthmi	r6, r6
 800b04a:	e7e6      	b.n	800b01a <_printf_i+0x182>
 800b04c:	4615      	mov	r5, r2
 800b04e:	e7bb      	b.n	800afc8 <_printf_i+0x130>
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	6826      	ldr	r6, [r4, #0]
 800b054:	6961      	ldr	r1, [r4, #20]
 800b056:	1d18      	adds	r0, r3, #4
 800b058:	6028      	str	r0, [r5, #0]
 800b05a:	0635      	lsls	r5, r6, #24
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	d501      	bpl.n	800b064 <_printf_i+0x1cc>
 800b060:	6019      	str	r1, [r3, #0]
 800b062:	e002      	b.n	800b06a <_printf_i+0x1d2>
 800b064:	0670      	lsls	r0, r6, #25
 800b066:	d5fb      	bpl.n	800b060 <_printf_i+0x1c8>
 800b068:	8019      	strh	r1, [r3, #0]
 800b06a:	2300      	movs	r3, #0
 800b06c:	6123      	str	r3, [r4, #16]
 800b06e:	4615      	mov	r5, r2
 800b070:	e7ba      	b.n	800afe8 <_printf_i+0x150>
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	1d1a      	adds	r2, r3, #4
 800b076:	602a      	str	r2, [r5, #0]
 800b078:	681d      	ldr	r5, [r3, #0]
 800b07a:	6862      	ldr	r2, [r4, #4]
 800b07c:	2100      	movs	r1, #0
 800b07e:	4628      	mov	r0, r5
 800b080:	f7f5 f8a6 	bl	80001d0 <memchr>
 800b084:	b108      	cbz	r0, 800b08a <_printf_i+0x1f2>
 800b086:	1b40      	subs	r0, r0, r5
 800b088:	6060      	str	r0, [r4, #4]
 800b08a:	6863      	ldr	r3, [r4, #4]
 800b08c:	6123      	str	r3, [r4, #16]
 800b08e:	2300      	movs	r3, #0
 800b090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b094:	e7a8      	b.n	800afe8 <_printf_i+0x150>
 800b096:	6923      	ldr	r3, [r4, #16]
 800b098:	462a      	mov	r2, r5
 800b09a:	4649      	mov	r1, r9
 800b09c:	4640      	mov	r0, r8
 800b09e:	47d0      	blx	sl
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d0ab      	beq.n	800affc <_printf_i+0x164>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	079b      	lsls	r3, r3, #30
 800b0a8:	d413      	bmi.n	800b0d2 <_printf_i+0x23a>
 800b0aa:	68e0      	ldr	r0, [r4, #12]
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	4298      	cmp	r0, r3
 800b0b0:	bfb8      	it	lt
 800b0b2:	4618      	movlt	r0, r3
 800b0b4:	e7a4      	b.n	800b000 <_printf_i+0x168>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4632      	mov	r2, r6
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4640      	mov	r0, r8
 800b0be:	47d0      	blx	sl
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d09b      	beq.n	800affc <_printf_i+0x164>
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	68e3      	ldr	r3, [r4, #12]
 800b0c8:	9903      	ldr	r1, [sp, #12]
 800b0ca:	1a5b      	subs	r3, r3, r1
 800b0cc:	42ab      	cmp	r3, r5
 800b0ce:	dcf2      	bgt.n	800b0b6 <_printf_i+0x21e>
 800b0d0:	e7eb      	b.n	800b0aa <_printf_i+0x212>
 800b0d2:	2500      	movs	r5, #0
 800b0d4:	f104 0619 	add.w	r6, r4, #25
 800b0d8:	e7f5      	b.n	800b0c6 <_printf_i+0x22e>
 800b0da:	bf00      	nop
 800b0dc:	0800b43d 	.word	0x0800b43d
 800b0e0:	0800b44e 	.word	0x0800b44e

0800b0e4 <_read_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	; (800b104 <_read_r+0x20>)
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7f6 fa22 	bl	800153c <_read>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_read_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_read_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20005034 	.word	0x20005034

0800b108 <_fstat_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d07      	ldr	r5, [pc, #28]	; (800b128 <_fstat_r+0x20>)
 800b10c:	2300      	movs	r3, #0
 800b10e:	4604      	mov	r4, r0
 800b110:	4608      	mov	r0, r1
 800b112:	4611      	mov	r1, r2
 800b114:	602b      	str	r3, [r5, #0]
 800b116:	f7f6 fa3a 	bl	800158e <_fstat>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	d102      	bne.n	800b124 <_fstat_r+0x1c>
 800b11e:	682b      	ldr	r3, [r5, #0]
 800b120:	b103      	cbz	r3, 800b124 <_fstat_r+0x1c>
 800b122:	6023      	str	r3, [r4, #0]
 800b124:	bd38      	pop	{r3, r4, r5, pc}
 800b126:	bf00      	nop
 800b128:	20005034 	.word	0x20005034

0800b12c <_isatty_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d06      	ldr	r5, [pc, #24]	; (800b148 <_isatty_r+0x1c>)
 800b130:	2300      	movs	r3, #0
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	f7f6 fa39 	bl	80015ae <_isatty>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_isatty_r+0x1a>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_isatty_r+0x1a>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	20005034 	.word	0x20005034

0800b14c <_init>:
 800b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14e:	bf00      	nop
 800b150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b152:	bc08      	pop	{r3}
 800b154:	469e      	mov	lr, r3
 800b156:	4770      	bx	lr

0800b158 <_fini>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr
