
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca38  0800ca38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca38  0800ca38  0001ca38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca40  0800ca40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca44  0800ca44  0001ca44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ca48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000052a4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005318  20005318  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022303  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d67  00000000  00000000  000423a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  00047110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001828  00000000  00000000  00048b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006fce  00000000  00000000  0004a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee30  00000000  00000000  00051326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1580  00000000  00000000  00070156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001416d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073e0  00000000  00000000  00141728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c51c 	.word	0x0800c51c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800c51c 	.word	0x0800c51c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 800057c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <ws2812NumOn+0x20>)
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <ws2812NumOn+0x24>)
 8000586:	f004 fef7 	bl	8005378 <HAL_TIM_PWM_Start_DMA>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	20000764 	.word	0x20000764

0800059c <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800059c:	b480      	push	{r7}
 800059e:	b09d      	sub	sp, #116	; 0x74
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	70fb      	strb	r3, [r7, #3]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70bb      	strb	r3, [r7, #2]
 80005b2:	4613      	mov	r3, r2
 80005b4:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4413      	add	r3, r2
 80005be:	021a      	lsls	r2, r3, #8
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	4413      	add	r3, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3370      	adds	r3, #112	; 0x70
 80005cc:	443b      	add	r3, r7
 80005ce:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005d6:	e02c      	b.n	8000632 <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3370      	adds	r3, #112	; 0x70
 80005de:	443b      	add	r3, r7
 80005e0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80005e4:	2101      	movs	r1, #1
 80005e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4013      	ands	r3, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00e      	beq.n	8000610 <ws2812SetColor+0x74>
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <ws2812SetColor+0xac>)
 8000608:	2143      	movs	r1, #67	; 0x43
 800060a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060e:	e00d      	b.n	800062c <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4613      	mov	r3, r2
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	461a      	mov	r2, r3
 800061c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <ws2812SetColor+0xac>)
 8000626:	2121      	movs	r1, #33	; 0x21
 8000628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	3301      	adds	r3, #1
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000634:	2b17      	cmp	r3, #23
 8000636:	ddcf      	ble.n	80005d8 <ws2812SetColor+0x3c>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3774      	adds	r7, #116	; 0x74
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090

0800064c <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	460b      	mov	r3, r1
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4413      	add	r3, r2
 8000666:	021a      	lsls	r2, r3, #8
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 800066e:	2318      	movs	r3, #24
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e02d      	b.n	80006d0 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e024      	b.n	80006c4 <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 800067a:	2201      	movs	r2, #1
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <ws2812AllColor+0x5a>
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	461a      	mov	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <ws2812AllColor+0x98>)
 800069e:	2143      	movs	r1, #67	; 0x43
 80006a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a4:	e00b      	b.n	80006be <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	461a      	mov	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <ws2812AllColor+0x98>)
 80006b8:	2121      	movs	r1, #33	; 0x21
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	3301      	adds	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	ddd7      	ble.n	800067a <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dcce      	bgt.n	8000674 <ws2812AllColor+0x28>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	20000090 	.word	0x20000090

080006e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN1_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN1_Init+0x64>)
 8000706:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_CAN1_Init+0x64>)
 800070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_CAN1_Init+0x64>)
 800071c:	2201      	movs	r2, #1
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_CAN1_Init+0x64>)
 800073a:	f002 f937 	bl	80029ac <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f001 fa3c 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200005d8 	.word	0x200005d8
 8000750:	40006400 	.word	0x40006400

08000754 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_CAN_MspInit+0x94>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d134      	bne.n	80007e0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_CAN_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_CAN_MspInit+0x9c>)
 80007cc:	f003 fc9c 	bl	8004108 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2014      	movs	r0, #20
 80007d6:	f003 f85d 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007da:	2014      	movs	r0, #20
 80007dc:	f003 f876 	bl	80038cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40006400 	.word	0x40006400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <CanInit+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <CanInit+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <CanInit+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <CanInit+0x98>)
 8000818:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	b29b      	uxth	r3, r3
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <CanInit+0x98>)
 8000826:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <CanInit+0x98>)
 8000830:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b29b      	uxth	r3, r3
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <CanInit+0x98>)
 800083e:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <CanInit+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <CanInit+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <CanInit+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <CanInit+0x9c>)
 8000854:	f002 fa86 	bl	8002d64 <HAL_CAN_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <CanInit+0x6e>
 800085e:	f001 f9af 	bl	8001bc0 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8000862:	2102      	movs	r1, #2
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <CanInit+0x9c>)
 8000866:	f002 fce3 	bl	8003230 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d000      	beq.n	8000872 <CanInit+0x7e>
 8000870:	e7fe      	b.n	8000870 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <CanInit+0x98>)
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <CanInit+0x9c>)
 8000876:	f002 f995 	bl	8002ba4 <HAL_CAN_ConfigFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000880:	f001 f99e 	bl	8001bc0 <Error_Handler>
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200005b0 	.word	0x200005b0
 8000890:	200005d8 	.word	0x200005d8

08000894 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	460b      	mov	r3, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <sendCan+0x2c>
 80008bc:	2304      	movs	r3, #4
 80008be:	e000      	b.n	80008c2 <sendCan+0x2e>
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <sendCan+0x74>)
 80008d0:	f002 fb67 	bl	8002fa2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	f107 0114 	add.w	r1, r7, #20
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <sendCan+0x74>)
 80008ea:	f002 fa7f 	bl	8002dec <HAL_CAN_AddTxMessage>
 80008ee:	4603      	mov	r3, r0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d000      	beq.n	80008fa <sendCan+0x66>
 80008f8:	e7fe      	b.n	80008f8 <sendCan+0x64>
    }
    osDelay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f007 fc87 	bl	800820e <osDelay>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200005d8 	.word	0x200005d8

0800090c <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	460b      	mov	r3, r1
 800091a:	80bb      	strh	r3, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

	switch (len) {
 8000928:	7e3b      	ldrb	r3, [r7, #24]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b03      	cmp	r3, #3
 800092e:	d817      	bhi.n	8000960 <SDOMsg+0x54>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <SDOMsg+0x2c>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	0800094f 	.word	0x0800094f
 8000940:	08000955 	.word	0x08000955
 8000944:	0800095b 	.word	0x0800095b
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8000948:	232f      	movs	r3, #47	; 0x2f
 800094a:	723b      	strb	r3, [r7, #8]
 800094c:	e008      	b.n	8000960 <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800094e:	232b      	movs	r3, #43	; 0x2b
 8000950:	723b      	strb	r3, [r7, #8]
 8000952:	e005      	b.n	8000960 <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 8000954:	2327      	movs	r3, #39	; 0x27
 8000956:	723b      	strb	r3, [r7, #8]
 8000958:	e002      	b.n	8000960 <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 800095a:	2323      	movs	r3, #35	; 0x23
 800095c:	723b      	strb	r3, [r7, #8]
 800095e:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	3301      	adds	r3, #1
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	3304      	adds	r3, #4
 8000974:	7e3a      	ldrb	r2, [r7, #24]
 8000976:	4639      	mov	r1, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f00a fe42 	bl	800b602 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000984:	4618      	mov	r0, r3
 8000986:	f107 0108 	add.w	r1, r7, #8
 800098a:	2300      	movs	r3, #0
 800098c:	2208      	movs	r2, #8
 800098e:	f7ff ff81 	bl	8000894 <sendCan>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop

0800099c <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d102      	bne.n	80009c0 <NMT_Mode+0x24>
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	723b      	strb	r3, [r7, #8]
 80009be:	e001      	b.n	80009c4 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 80009c0:	2301      	movs	r3, #1
 80009c2:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 80009c8:	f107 0108 	add.w	r1, r7, #8
 80009cc:	2300      	movs	r3, #0
 80009ce:	2208      	movs	r2, #8
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff5f 	bl	8000894 <sendCan>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 80009e0:	b082      	sub	sp, #8
 80009e2:	b590      	push	{r4, r7, lr}
 80009e4:	b089      	sub	sp, #36	; 0x24
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80009ec:	e884 000c 	stmia.w	r4, {r2, r3}
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	460b      	mov	r3, r1
 80009f6:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
	uint16_t tmp_TxRx = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	82fb      	strh	r3, [r7, #22]
	uint8_t type = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	757b      	strb	r3, [r7, #21]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 8000a04:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d907      	bls.n	8000a1c <PDOMapping+0x3c>
 8000a0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000a10:	4619      	mov	r1, r3
 8000a12:	4851      	ldr	r0, [pc, #324]	; (8000b58 <PDOMapping+0x178>)
 8000a14:	f00a fea0 	bl	800b758 <iprintf>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e095      	b.n	8000b48 <PDOMapping+0x168>

	if(PDO_index>=0x1600&&PDO_index<=0x17ff){tmp_TxRx=0x200+(PDO_index-0x1600); type=0xff;}
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8000a22:	d30a      	bcc.n	8000a3a <PDOMapping+0x5a>
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000a2a:	d206      	bcs.n	8000a3a <PDOMapping+0x5a>
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 8000a32:	82fb      	strh	r3, [r7, #22]
 8000a34:	23ff      	movs	r3, #255	; 0xff
 8000a36:	757b      	strb	r3, [r7, #21]
 8000a38:	e015      	b.n	8000a66 <PDOMapping+0x86>
	else if(PDO_index>=0x1a00&&PDO_index<=0x1bff) {tmp_TxRx=0x180+(PDO_index-0x1a00); type=0xfe;}
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8000a40:	d30a      	bcc.n	8000a58 <PDOMapping+0x78>
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8000a48:	d206      	bcs.n	8000a58 <PDOMapping+0x78>
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	f5a3 53c4 	sub.w	r3, r3, #6272	; 0x1880
 8000a50:	82fb      	strh	r3, [r7, #22]
 8000a52:	23fe      	movs	r3, #254	; 0xfe
 8000a54:	757b      	strb	r3, [r7, #21]
 8000a56:	e006      	b.n	8000a66 <PDOMapping+0x86>
	else {printf("PDO_index error: %d\n", PDO_index); return 0;}
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	483f      	ldr	r0, [pc, #252]	; (8000b5c <PDOMapping+0x17c>)
 8000a5e:	f00a fe7b 	bl	800b758 <iprintf>
 8000a62:	2300      	movs	r3, #0
 8000a64:	e070      	b.n	8000b48 <PDOMapping+0x168>

	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff ff96 	bl	800099c <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	e05d      	b.n	8000b32 <PDOMapping+0x152>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 8000a76:	88b9      	ldrh	r1, [r7, #4]
 8000a78:	79f8      	ldrb	r0, [r7, #7]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2200      	movs	r2, #0
 8000a82:	f7ff ff43 	bl	800090c <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	440a      	add	r2, r1
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	440a      	add	r2, r1
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	88b9      	ldrh	r1, [r7, #4]
 8000ab8:	79f8      	ldrb	r0, [r7, #7]
 8000aba:	2304      	movs	r3, #4
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f7ff ff24 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, tmp_TxRx+Node_id, 4);//cob-id??
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000aca:	b299      	uxth	r1, r3
 8000acc:	8afa      	ldrh	r2, [r7, #22]
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	79f8      	ldrb	r0, [r7, #7]
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	4613      	mov	r3, r2
 8000adc:	2201      	movs	r2, #1
 8000ade:	f7ff ff15 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, type, 1);//transmission type, fix asynchronous with 0xff
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000ae8:	b299      	uxth	r1, r3
 8000aea:	7d7b      	ldrb	r3, [r7, #21]
 8000aec:	79f8      	ldrb	r0, [r7, #7]
 8000aee:	2201      	movs	r2, #1
 8000af0:	9200      	str	r2, [sp, #0]
 8000af2:	2202      	movs	r2, #2
 8000af4:	f7ff ff0a 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 4);//not necessary 3= inhibit mode, 5=event timer mode
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000afe:	b299      	uxth	r1, r3
 8000b00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	3303      	adds	r3, #3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b0e:	461c      	mov	r4, r3
 8000b10:	79f8      	ldrb	r0, [r7, #7]
 8000b12:	2304      	movs	r3, #4
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4623      	mov	r3, r4
 8000b18:	f7ff fef8 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 8000b1c:	88b9      	ldrh	r1, [r7, #4]
 8000b1e:	79f8      	ldrb	r0, [r7, #7]
 8000b20:	2301      	movs	r3, #1
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2200      	movs	r2, #0
 8000b28:	f7ff fef0 	bl	800090c <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	db9c      	blt.n	8000a76 <PDOMapping+0x96>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff ff2b 	bl	800099c <NMT_Mode>

	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b52:	b002      	add	sp, #8
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	0800c534 	.word	0x0800c534
 8000b5c:	0800c54c 	.word	0x0800c54c

08000b60 <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	603a      	str	r2, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	80bb      	strh	r3, [r7, #4]
	sendCan((PDO_index-0x1400)+Node_id,buf,8,0);
 8000b70:	88bb      	ldrh	r3, [r7, #4]
 8000b72:	f5a3 52a0 	sub.w	r2, r3, #5120	; 0x1400
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2208      	movs	r2, #8
 8000b80:	6839      	ldr	r1, [r7, #0]
 8000b82:	f7ff fe87 	bl	8000894 <sendCan>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4604      	mov	r4, r0
 8000b96:	4608      	mov	r0, r1
 8000b98:	4611      	mov	r1, r2
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4623      	mov	r3, r4
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	80bb      	strh	r3, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 8000bbc:	883b      	ldrh	r3, [r7, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 8000bc2:	883b      	ldrh	r3, [r7, #0]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf);
 8000bcc:	f107 0208 	add.w	r2, r7, #8
 8000bd0:	88b9      	ldrh	r1, [r7, #4]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffc3 	bl	8000b60 <PDOMsg>
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}
	...

08000be4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000bf4:	f002 fa0a 	bl	800300c <HAL_CAN_GetRxMessage>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8000bfe:	e7fe      	b.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000058c 	.word	0x2000058c
 8000c18:	20000594 	.word	0x20000594
 8000c1c:	200005d8 	.word	0x200005d8
 8000c20:	20000588 	.word	0x20000588

08000c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_DMA_Init+0x68>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <MX_DMA_Init+0x68>)
 8000c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_DMA_Init+0x68>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_DMA_Init+0x68>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <MX_DMA_Init+0x68>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_DMA_Init+0x68>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2105      	movs	r1, #5
 8000c66:	200e      	movs	r0, #14
 8000c68:	f002 fe14 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c6c:	200e      	movs	r0, #14
 8000c6e:	f002 fe2d 	bl	80038cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	203a      	movs	r0, #58	; 0x3a
 8000c78:	f002 fe0c 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c7c:	203a      	movs	r0, #58	; 0x3a
 8000c7e:	f002 fe25 	bl	80038cc <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c94:	2100      	movs	r1, #0
 8000c96:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <fanInit+0x10>)
 8000c98:	f004 faa6 	bl	80051e8 <HAL_TIM_PWM_Start>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200006d4 	.word	0x200006d4

08000ca4 <fanOn>:

void fanOn(uint8_t duty)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b63      	cmp	r3, #99	; 0x63
 8000cb2:	d901      	bls.n	8000cb8 <fanOn+0x14>
 8000cb4:	2364      	movs	r3, #100	; 0x64
 8000cb6:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <fanOn+0x24>
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <fanOn+0x38>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 8000cc6:	e003      	b.n	8000cd0 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <fanOn+0x38>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	79fa      	ldrb	r2, [r7, #7]
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	200006d4 	.word	0x200006d4

08000ce0 <HAL_GPIO_EXTI_Callback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f007 f9bd 	bl	8008070 <osThreadFlagsSet>

    if(GPIO_Pin == PS_SIG1_Pin) {
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	2b10      	cmp	r3, #16
 8000cfa:	d109      	bne.n	8000d10 <HAL_GPIO_EXTI_Callback+0x30>
    	PS_SIGx_Pin |= 0b00000001;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d08:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8000d0a:	481a      	ldr	r0, [pc, #104]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d0c:	f00a fdaa 	bl	800b864 <puts>
	}

    if(GPIO_Pin == PS_SIG2_Pin) {
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	2b20      	cmp	r3, #32
 8000d14:	d109      	bne.n	8000d2a <HAL_GPIO_EXTI_Callback+0x4a>
    	PS_SIGx_Pin |= 0b00000010;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d22:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG2_Pin.\n");
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d26:	f00a fd9d 	bl	800b864 <puts>
    }

    if(GPIO_Pin == PS_SIG3_Pin) {
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	2b40      	cmp	r3, #64	; 0x40
 8000d2e:	d10c      	bne.n	8000d4a <HAL_GPIO_EXTI_Callback+0x6a>
    	PS_SIGx_Pin |= 0b00000100;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d3c:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG3_Pin.%d: \n", PS_SIGx_Pin);
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d46:	f00a fd07 	bl	800b758 <iprintf>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	2b80      	cmp	r3, #128	; 0x80
 8000d4e:	d109      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x84>
    	PS_SIGx_Pin |= 0b00001000;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d5c:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000d60:	f00a fd80 	bl	800b864 <puts>
    }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000618 	.word	0x20000618
 8000d70:	20000600 	.word	0x20000600
 8000d74:	0800c5ac 	.word	0x0800c5ac
 8000d78:	0800c5cc 	.word	0x0800c5cc
 8000d7c:	0800c5ec 	.word	0x0800c5ec
 8000d80:	0800c614 	.word	0x0800c614

08000d84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_FREERTOS_Init+0x78>)
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f007 fa86 	bl	800829e <osSemaphoreNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <MX_FREERTOS_Init+0x7c>)
 8000d96:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <MX_FREERTOS_Init+0x80>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	481a      	ldr	r0, [pc, #104]	; (8000e08 <MX_FREERTOS_Init+0x84>)
 8000d9e:	f007 f8d4 	bl	8007f4a <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <MX_FREERTOS_Init+0x88>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <MX_FREERTOS_Init+0x8c>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <MX_FREERTOS_Init+0x90>)
 8000dae:	f007 f8cc 	bl	8007f4a <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <MX_FREERTOS_Init+0x94>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <MX_FREERTOS_Init+0x98>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4818      	ldr	r0, [pc, #96]	; (8000e20 <MX_FREERTOS_Init+0x9c>)
 8000dbe:	f007 f8c4 	bl	8007f4a <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <MX_FREERTOS_Init+0xa0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000dc8:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <MX_FREERTOS_Init+0xa4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_FREERTOS_Init+0xa8>)
 8000dce:	f007 f8bc 	bl	8007f4a <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <MX_FREERTOS_Init+0xac>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8000dd8:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <MX_FREERTOS_Init+0xb0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <MX_FREERTOS_Init+0xb4>)
 8000dde:	f007 f8b4 	bl	8007f4a <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <MX_FREERTOS_Init+0xb8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_FREERTOS_Init+0xbc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_FREERTOS_Init+0xc0>)
 8000dee:	f007 f8ac 	bl	8007f4a <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <MX_FREERTOS_Init+0xc4>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0800c970 	.word	0x0800c970
 8000e00:	2000061c 	.word	0x2000061c
 8000e04:	0800c898 	.word	0x0800c898
 8000e08:	08000e4d 	.word	0x08000e4d
 8000e0c:	20000604 	.word	0x20000604
 8000e10:	0800c8bc 	.word	0x0800c8bc
 8000e14:	08000e79 	.word	0x08000e79
 8000e18:	20000608 	.word	0x20000608
 8000e1c:	0800c8e0 	.word	0x0800c8e0
 8000e20:	0800104d 	.word	0x0800104d
 8000e24:	2000060c 	.word	0x2000060c
 8000e28:	0800c904 	.word	0x0800c904
 8000e2c:	080011c5 	.word	0x080011c5
 8000e30:	20000610 	.word	0x20000610
 8000e34:	0800c928 	.word	0x0800c928
 8000e38:	080015e5 	.word	0x080015e5
 8000e3c:	20000614 	.word	0x20000614
 8000e40:	0800c94c 	.word	0x0800c94c
 8000e44:	0800160d 	.word	0x0800160d
 8000e48:	20000618 	.word	0x20000618

08000e4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8000e54:	f007 f864 	bl	8007f20 <osKernelGetTickCount>
 8000e58:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e60:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f007 f9ee 	bl	8008244 <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6c:	4801      	ldr	r0, [pc, #4]	; (8000e74 <StartDefaultTask+0x28>)
 8000e6e:	f003 fb18 	bl	80044a2 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8000e72:	e7f2      	b.n	8000e5a <StartDefaultTask+0xe>
 8000e74:	40020800 	.word	0x40020800

08000e78 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b096      	sub	sp, #88	; 0x58
 8000e7c:	af06      	add	r7, sp, #24
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 8000e80:	4a6f      	ldr	r2, [pc, #444]	; (8001040 <StartTask02+0x1c8>)
 8000e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8a:	e883 0003 	stmia.w	r3, {r0, r1}

	MappingPar vel_RxPDO0={{0x60ff,0,0,0},//index //target speed
 8000e8e:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <StartTask02+0x1cc>)
 8000e90:	f107 041c 	add.w	r4, r7, #28
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	682b      	ldr	r3, [r5, #0]
 8000e9c:	6023      	str	r3, [r4, #0]
							{0x03,0,0,0},//subindex //left and rigt target speed combination
							{0x20,0,0,0},//length //32bit
							0x01,//option//event timer
							500};//option_time //500

	MappingPar vel_TxPDO0={{0x606C,0,0,0},//index //target speed
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <StartTask02+0x1d0>)
 8000ea0:	f107 0408 	add.w	r4, r7, #8
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	6023      	str	r3, [r4, #0]
							{0x03,0,0,0},//subindex //left and rigt target speed combination
							{0x20,0,0,0},//length //32bit
							0x00,//option//inhibit time
							500};//option_time //500

	uint32_t lastTime = osKernelGetTickCount();
 8000eae:	f007 f837 	bl	8007f20 <osKernelGetTickCount>
 8000eb2:	63f8      	str	r0, [r7, #60]	; 0x3c

	CanInit(0,0);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fc9c 	bl	80007f4 <CanInit>

	PDOMapping(1, 0x1600, vel_RxPDO0, 1,0);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9304      	str	r3, [sp, #16]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9303      	str	r3, [sp, #12]
 8000ec4:	466c      	mov	r4, sp
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	cb0c      	ldmia	r3, {r2, r3}
 8000ed8:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fd7f 	bl	80009e0 <PDOMapping>
	PDOMapping(2, 0x1600, vel_RxPDO0, 1,0);
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9304      	str	r3, [sp, #16]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	466c      	mov	r4, sp
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	cb0c      	ldmia	r3, {r2, r3}
 8000efe:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff fd6c 	bl	80009e0 <PDOMapping>
	PDOMapping(1, 0x1A00, vel_TxPDO0, 1,1);
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	466c      	mov	r4, sp
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	cb0c      	ldmia	r3, {r2, r3}
 8000f24:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fd59 	bl	80009e0 <PDOMapping>
	PDOMapping(2, 0x1A00, vel_TxPDO0, 1,1);
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9304      	str	r3, [sp, #16]
 8000f32:	2301      	movs	r3, #1
 8000f34:	9303      	str	r3, [sp, #12]
 8000f36:	466c      	mov	r4, sp
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	cb0c      	ldmia	r3, {r2, r3}
 8000f4a:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f7ff fd46 	bl	80009e0 <PDOMapping>



	for(int i=0;i<2;i++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f58:	e056      	b.n	8001008 <StartTask02+0x190>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 8000f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2d8      	uxtb	r0, r3
 8000f62:	2301      	movs	r3, #1
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f242 0110 	movw	r1, #8208	; 0x2010
 8000f6e:	f7ff fccd 	bl	800090c <SDOMsg>

		SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 8000f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	b2d8      	uxtb	r0, r3
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	f246 0140 	movw	r1, #24640	; 0x6040
 8000f86:	f7ff fcc1 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2d8      	uxtb	r0, r3
 8000f92:	2302      	movs	r3, #2
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2306      	movs	r3, #6
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f246 0140 	movw	r1, #24640	; 0x6040
 8000f9e:	f7ff fcb5 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 8000fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	2302      	movs	r3, #2
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2307      	movs	r3, #7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f246 0140 	movw	r1, #24640	; 0x6040
 8000fb6:	f7ff fca9 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 8000fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2d8      	uxtb	r0, r3
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f246 0140 	movw	r1, #24640	; 0x6040
 8000fce:	f7ff fc9d 	bl	800090c <SDOMsg>

		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len
 8000fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2303      	movs	r3, #3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f246 0160 	movw	r1, #24672	; 0x6060
 8000fe6:	f7ff fc91 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len
 8000fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2d8      	uxtb	r0, r3
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f242 010f 	movw	r1, #8207	; 0x200f
 8000ffe:	f7ff fc85 	bl	800090c <SDOMsg>
	for(int i=0;i<2;i++){
 8001002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001004:	3301      	adds	r3, #1
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
 8001008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800100a:	2b01      	cmp	r3, #1
 800100c:	dda5      	ble.n	8000f5a <StartTask02+0xe2>

  /* Infinite loop */
  for(;;)
  {

	lastTime += PERIOD_CANCOMM;;
 800100e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001010:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(lastTime);
 8001016:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001018:	f007 f914 	bl	8008244 <osDelayUntil>

	Vel_PDOMsg(1, 0x1600, 0x2, 0x1);
 800101c:	2301      	movs	r3, #1
 800101e:	2202      	movs	r2, #2
 8001020:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fdb2 	bl	8000b8e <Vel_PDOMsg>
	Vel_PDOMsg(2, 0x1600, 0x100, 0x200);
 800102a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001032:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001036:	2002      	movs	r0, #2
 8001038:	f7ff fda9 	bl	8000b8e <Vel_PDOMsg>
  {
 800103c:	e7e7      	b.n	800100e <StartTask02+0x196>
 800103e:	bf00      	nop
 8001040:	0800c634 	.word	0x0800c634
 8001044:	0800c63c 	.word	0x0800c63c
 8001048:	0800c650 	.word	0x0800c650

0800104c <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b092      	sub	sp, #72	; 0x48
 8001050:	af02      	add	r7, sp, #8
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <StartTask03+0x15c>)
 8001056:	f107 040c 	add.w	r4, r7, #12
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	uint32_t lastTime = osKernelGetTickCount();
 800106c:	f006 ff58 	bl	8007f20 <osKernelGetTickCount>
 8001070:	63f8      	str	r0, [r7, #60]	; 0x3c

	osDelay(1000);
 8001072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001076:	f007 f8ca 	bl	800820e <osDelay>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800107a:	200a      	movs	r0, #10
 800107c:	f002 fc26 	bl	80038cc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001080:	2017      	movs	r0, #23
 8001082:	f002 fc23 	bl	80038cc <HAL_NVIC_EnableIRQ>
	osDelay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108a:	f007 f8c0 	bl	800820e <osDelay>


	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG1_Pin)){
 800108e:	2110      	movs	r1, #16
 8001090:	4846      	ldr	r0, [pc, #280]	; (80011ac <StartTask03+0x160>)
 8001092:	f003 f9d5 	bl	8004440 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <StartTask03+0x6a>
		DataSetSteering(buf, 0, SERVO_CCW, 5, 1);
 800109c:	f107 000c 	add.w	r0, r7, #12
 80010a0:	2301      	movs	r3, #1
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2305      	movs	r3, #5
 80010a6:	2201      	movs	r2, #1
 80010a8:	2100      	movs	r1, #0
 80010aa:	f000 fde1 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG1_Pin init.\n");
 80010ae:	4840      	ldr	r0, [pc, #256]	; (80011b0 <StartTask03+0x164>)
 80010b0:	f00a fbd8 	bl	800b864 <puts>
 80010b4:	e00b      	b.n	80010ce <StartTask03+0x82>
	}
	else {
		DataSetSteering(buf, 0, SERVO_CW, 5, 1);
 80010b6:	f107 000c 	add.w	r0, r7, #12
 80010ba:	2301      	movs	r3, #1
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2305      	movs	r3, #5
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	f000 fdd4 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG1_Pin no init.\n");
 80010c8:	483a      	ldr	r0, [pc, #232]	; (80011b4 <StartTask03+0x168>)
 80010ca:	f00a fbcb 	bl	800b864 <puts>
	}

	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG2_Pin)){
 80010ce:	2120      	movs	r1, #32
 80010d0:	4836      	ldr	r0, [pc, #216]	; (80011ac <StartTask03+0x160>)
 80010d2:	f003 f9b5 	bl	8004440 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00c      	beq.n	80010f6 <StartTask03+0xaa>
		DataSetSteering(buf, 1, SERVO_CW, 5, 1);
 80010dc:	f107 000c 	add.w	r0, r7, #12
 80010e0:	2301      	movs	r3, #1
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2305      	movs	r3, #5
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	f000 fdc1 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG2_Pin.\n");
 80010ee:	4832      	ldr	r0, [pc, #200]	; (80011b8 <StartTask03+0x16c>)
 80010f0:	f00a fbb8 	bl	800b864 <puts>
 80010f4:	e00b      	b.n	800110e <StartTask03+0xc2>
	}
	else {
		DataSetSteering(buf, 1, SERVO_CCW, 5, 1);
 80010f6:	f107 000c 	add.w	r0, r7, #12
 80010fa:	2301      	movs	r3, #1
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2305      	movs	r3, #5
 8001100:	2201      	movs	r2, #1
 8001102:	2101      	movs	r1, #1
 8001104:	f000 fdb4 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG1_Pin no init.\n");
 8001108:	482a      	ldr	r0, [pc, #168]	; (80011b4 <StartTask03+0x168>)
 800110a:	f00a fbab 	bl	800b864 <puts>
	}
	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG3_Pin)){
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <StartTask03+0x160>)
 8001112:	f003 f995 	bl	8004440 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00c      	beq.n	8001136 <StartTask03+0xea>
		DataSetSteering(buf, 2, SERVO_CW, 5, 1);
 800111c:	f107 000c 	add.w	r0, r7, #12
 8001120:	2301      	movs	r3, #1
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2305      	movs	r3, #5
 8001126:	2200      	movs	r2, #0
 8001128:	2102      	movs	r1, #2
 800112a:	f000 fda1 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG3_Pin.\n");
 800112e:	4823      	ldr	r0, [pc, #140]	; (80011bc <StartTask03+0x170>)
 8001130:	f00a fb98 	bl	800b864 <puts>
 8001134:	e00b      	b.n	800114e <StartTask03+0x102>
	}
	else {
		DataSetSteering(buf, 2, SERVO_CCW, 5, 1);
 8001136:	f107 000c 	add.w	r0, r7, #12
 800113a:	2301      	movs	r3, #1
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2305      	movs	r3, #5
 8001140:	2201      	movs	r2, #1
 8001142:	2102      	movs	r1, #2
 8001144:	f000 fd94 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG1_Pin no init.\n");
 8001148:	481a      	ldr	r0, [pc, #104]	; (80011b4 <StartTask03+0x168>)
 800114a:	f00a fb8b 	bl	800b864 <puts>
	}
	if(HAL_GPIO_ReadPin(GPIOA, PS_SIG4_Pin)){
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <StartTask03+0x160>)
 8001152:	f003 f975 	bl	8004440 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00c      	beq.n	8001176 <StartTask03+0x12a>
		DataSetSteering(buf, 3, SERVO_CCW, 5, 1);
 800115c:	f107 000c 	add.w	r0, r7, #12
 8001160:	2301      	movs	r3, #1
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2305      	movs	r3, #5
 8001166:	2201      	movs	r2, #1
 8001168:	2103      	movs	r1, #3
 800116a:	f000 fd81 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG4_Pin.\n");
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <StartTask03+0x174>)
 8001170:	f00a fb78 	bl	800b864 <puts>
 8001174:	e00b      	b.n	800118e <StartTask03+0x142>
	}
	else {
		DataSetSteering(buf, 3, SERVO_CW, 5, 1);
 8001176:	f107 000c 	add.w	r0, r7, #12
 800117a:	2301      	movs	r3, #1
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2305      	movs	r3, #5
 8001180:	2200      	movs	r2, #0
 8001182:	2103      	movs	r1, #3
 8001184:	f000 fd74 	bl	8001c70 <DataSetSteering>
		printf("PS_SIG1_Pin no init.\n");
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <StartTask03+0x168>)
 800118a:	f00a fb6b 	bl	800b864 <puts>
	}
	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fd44 	bl	8001c20 <ServoMotor_writeDMA>
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8001198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800119a:	3332      	adds	r3, #50	; 0x32
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(lastTime);
 800119e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011a0:	f007 f850 	bl	8008244 <osDelayUntil>
	lastTime += PERIOD_STEERING;
 80011a4:	e7f8      	b.n	8001198 <StartTask03+0x14c>
 80011a6:	bf00      	nop
 80011a8:	0800c6c0 	.word	0x0800c6c0
 80011ac:	40020000 	.word	0x40020000
 80011b0:	0800c664 	.word	0x0800c664
 80011b4:	0800c678 	.word	0x0800c678
 80011b8:	0800c690 	.word	0x0800c690
 80011bc:	0800c6a0 	.word	0x0800c6a0
 80011c0:	0800c6b0 	.word	0x0800c6b0

080011c4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 80011cc:	f006 fea8 	bl	8007f20 <osKernelGetTickCount>
 80011d0:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011d8:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f007 f832 	bl	8008244 <osDelayUntil>


		temp++;
 80011e0:	4bd0      	ldr	r3, [pc, #832]	; (8001524 <StartTask04+0x360>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4acf      	ldr	r2, [pc, #828]	; (8001524 <StartTask04+0x360>)
 80011e8:	6013      	str	r3, [r2, #0]
		switch (temp) {
 80011ea:	4bce      	ldr	r3, [pc, #824]	; (8001524 <StartTask04+0x360>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	f200 81ea 	bhi.w	80015ca <StartTask04+0x406>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <StartTask04+0x38>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	08001285 	.word	0x08001285
 8001204:	080012ed 	.word	0x080012ed
 8001208:	08001355 	.word	0x08001355
 800120c:	080013bd 	.word	0x080013bd
 8001210:	0800143d 	.word	0x0800143d
 8001214:	080014bd 	.word	0x080014bd
 8001218:	08001545 	.word	0x08001545
			case 1:
				printf("case1\n");
 800121c:	48c2      	ldr	r0, [pc, #776]	; (8001528 <StartTask04+0x364>)
 800121e:	f00a fb21 	bl	800b864 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8001222:	2301      	movs	r3, #1
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff f9b7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 800122e:	2300      	movs	r3, #0
 8001230:	2201      	movs	r2, #1
 8001232:	2100      	movs	r1, #0
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff f9b1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 800123a:	2300      	movs	r3, #0
 800123c:	2200      	movs	r2, #0
 800123e:	2101      	movs	r1, #1
 8001240:	2002      	movs	r0, #2
 8001242:	f7ff f9ab 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8001246:	2301      	movs	r3, #1
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2003      	movs	r0, #3
 800124e:	f7ff f9a5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8001252:	2300      	movs	r3, #0
 8001254:	2201      	movs	r2, #1
 8001256:	2100      	movs	r1, #0
 8001258:	2004      	movs	r0, #4
 800125a:	f7ff f99f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	2101      	movs	r1, #1
 8001264:	2005      	movs	r0, #5
 8001266:	f7ff f999 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 800126a:	2301      	movs	r3, #1
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2006      	movs	r0, #6
 8001272:	f7ff f993 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8001276:	2300      	movs	r3, #0
 8001278:	2201      	movs	r2, #1
 800127a:	2100      	movs	r1, #0
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff f98d 	bl	800059c <ws2812SetColor>
				break;
 8001282:	e1a2      	b.n	80015ca <StartTask04+0x406>
			case 2:
				printf("case2\n");
 8001284:	48a9      	ldr	r0, [pc, #676]	; (800152c <StartTask04+0x368>)
 8001286:	f00a faed 	bl	800b864 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2007      	movs	r0, #7
 8001292:	f7ff f983 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8001296:	2300      	movs	r3, #0
 8001298:	2201      	movs	r2, #1
 800129a:	2100      	movs	r1, #0
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff f97d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 80012a2:	2300      	movs	r3, #0
 80012a4:	2200      	movs	r2, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff f977 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 80012ae:	2301      	movs	r3, #1
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff f971 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 80012ba:	2300      	movs	r3, #0
 80012bc:	2201      	movs	r2, #1
 80012be:	2100      	movs	r1, #0
 80012c0:	2003      	movs	r0, #3
 80012c2:	f7ff f96b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 80012c6:	2300      	movs	r3, #0
 80012c8:	2200      	movs	r2, #0
 80012ca:	2101      	movs	r1, #1
 80012cc:	2004      	movs	r0, #4
 80012ce:	f7ff f965 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2005      	movs	r0, #5
 80012da:	f7ff f95f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 80012de:	2300      	movs	r3, #0
 80012e0:	2201      	movs	r2, #1
 80012e2:	2100      	movs	r1, #0
 80012e4:	2006      	movs	r0, #6
 80012e6:	f7ff f959 	bl	800059c <ws2812SetColor>
				break;
 80012ea:	e16e      	b.n	80015ca <StartTask04+0x406>
			case 3:
				printf("case3\n");
 80012ec:	4890      	ldr	r0, [pc, #576]	; (8001530 <StartTask04+0x36c>)
 80012ee:	f00a fab9 	bl	800b864 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 80012f2:	2301      	movs	r3, #1
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2006      	movs	r0, #6
 80012fa:	f7ff f94f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 80012fe:	2300      	movs	r3, #0
 8001300:	2201      	movs	r2, #1
 8001302:	2100      	movs	r1, #0
 8001304:	2007      	movs	r0, #7
 8001306:	f7ff f949 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 800130a:	2300      	movs	r3, #0
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff f943 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8001316:	2301      	movs	r3, #1
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff f93d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8001322:	2300      	movs	r3, #0
 8001324:	2201      	movs	r2, #1
 8001326:	2100      	movs	r1, #0
 8001328:	2002      	movs	r0, #2
 800132a:	f7ff f937 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	2101      	movs	r1, #1
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff f931 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 800133a:	2301      	movs	r3, #1
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2004      	movs	r0, #4
 8001342:	f7ff f92b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8001346:	2300      	movs	r3, #0
 8001348:	2201      	movs	r2, #1
 800134a:	2100      	movs	r1, #0
 800134c:	2005      	movs	r0, #5
 800134e:	f7ff f925 	bl	800059c <ws2812SetColor>
				break;
 8001352:	e13a      	b.n	80015ca <StartTask04+0x406>
			case 4:
				printf("case4\n");
 8001354:	4877      	ldr	r0, [pc, #476]	; (8001534 <StartTask04+0x370>)
 8001356:	f00a fa85 	bl	800b864 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 800135a:	2301      	movs	r3, #1
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2005      	movs	r0, #5
 8001362:	f7ff f91b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8001366:	2300      	movs	r3, #0
 8001368:	2201      	movs	r2, #1
 800136a:	2100      	movs	r1, #0
 800136c:	2006      	movs	r0, #6
 800136e:	f7ff f915 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8001372:	2300      	movs	r3, #0
 8001374:	2200      	movs	r2, #0
 8001376:	2101      	movs	r1, #1
 8001378:	2007      	movs	r0, #7
 800137a:	f7ff f90f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 800137e:	2301      	movs	r3, #1
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff f909 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 800138a:	2300      	movs	r3, #0
 800138c:	2201      	movs	r2, #1
 800138e:	2100      	movs	r1, #0
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff f903 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8001396:	2300      	movs	r3, #0
 8001398:	2200      	movs	r2, #0
 800139a:	2101      	movs	r1, #1
 800139c:	2002      	movs	r0, #2
 800139e:	f7ff f8fd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 80013a2:	2301      	movs	r3, #1
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2003      	movs	r0, #3
 80013aa:	f7ff f8f7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 80013ae:	2300      	movs	r3, #0
 80013b0:	2201      	movs	r2, #1
 80013b2:	2100      	movs	r1, #0
 80013b4:	2004      	movs	r0, #4
 80013b6:	f7ff f8f1 	bl	800059c <ws2812SetColor>
				break;
 80013ba:	e106      	b.n	80015ca <StartTask04+0x406>
			case 5:
				printf("case5\n");
 80013bc:	485e      	ldr	r0, [pc, #376]	; (8001538 <StartTask04+0x374>)
 80013be:	f00a fa51 	bl	800b864 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 80013c2:	2301      	movs	r3, #1
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff f8e7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 80013ce:	2300      	movs	r3, #0
 80013d0:	2201      	movs	r2, #1
 80013d2:	2100      	movs	r1, #0
 80013d4:	2005      	movs	r0, #5
 80013d6:	f7ff f8e1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 80013da:	2300      	movs	r3, #0
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	2006      	movs	r0, #6
 80013e2:	f7ff f8db 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 80013e6:	2301      	movs	r3, #1
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2007      	movs	r0, #7
 80013ee:	f7ff f8d5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 80013f2:	2300      	movs	r3, #0
 80013f4:	2201      	movs	r2, #1
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff f8cf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 80013fe:	2300      	movs	r3, #0
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff f8c9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 800140a:	2301      	movs	r3, #1
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2002      	movs	r0, #2
 8001412:	f7ff f8c3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8001416:	2300      	movs	r3, #0
 8001418:	2201      	movs	r2, #1
 800141a:	2100      	movs	r1, #0
 800141c:	2003      	movs	r0, #3
 800141e:	f7ff f8bd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 8001422:	2301      	movs	r3, #1
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2008      	movs	r0, #8
 800142a:	f7ff f8b7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 800142e:	2300      	movs	r3, #0
 8001430:	2201      	movs	r2, #1
 8001432:	2100      	movs	r1, #0
 8001434:	2009      	movs	r0, #9
 8001436:	f7ff f8b1 	bl	800059c <ws2812SetColor>

				break;
 800143a:	e0c6      	b.n	80015ca <StartTask04+0x406>
			case 6:
				printf("case6\n");
 800143c:	483f      	ldr	r0, [pc, #252]	; (800153c <StartTask04+0x378>)
 800143e:	f00a fa11 	bl	800b864 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8001442:	2301      	movs	r3, #1
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2003      	movs	r0, #3
 800144a:	f7ff f8a7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 800144e:	2300      	movs	r3, #0
 8001450:	2201      	movs	r2, #1
 8001452:	2100      	movs	r1, #0
 8001454:	2004      	movs	r0, #4
 8001456:	f7ff f8a1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 800145a:	2300      	movs	r3, #0
 800145c:	2200      	movs	r2, #0
 800145e:	2101      	movs	r1, #1
 8001460:	2005      	movs	r0, #5
 8001462:	f7ff f89b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8001466:	2301      	movs	r3, #1
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2006      	movs	r0, #6
 800146e:	f7ff f895 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8001472:	2300      	movs	r3, #0
 8001474:	2201      	movs	r2, #1
 8001476:	2100      	movs	r1, #0
 8001478:	2007      	movs	r0, #7
 800147a:	f7ff f88f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff f889 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800148a:	2301      	movs	r3, #1
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff f883 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8001496:	2300      	movs	r3, #0
 8001498:	2201      	movs	r2, #1
 800149a:	2100      	movs	r1, #0
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff f87d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 80014a2:	2301      	movs	r3, #1
 80014a4:	2201      	movs	r2, #1
 80014a6:	2100      	movs	r1, #0
 80014a8:	2008      	movs	r0, #8
 80014aa:	f7ff f877 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 80014ae:	2300      	movs	r3, #0
 80014b0:	2201      	movs	r2, #1
 80014b2:	2101      	movs	r1, #1
 80014b4:	2009      	movs	r0, #9
 80014b6:	f7ff f871 	bl	800059c <ws2812SetColor>
				break;
 80014ba:	e086      	b.n	80015ca <StartTask04+0x406>
			case 7:
				printf("case7\n");
 80014bc:	4820      	ldr	r0, [pc, #128]	; (8001540 <StartTask04+0x37c>)
 80014be:	f00a f9d1 	bl	800b864 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 80014c2:	2301      	movs	r3, #1
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff f867 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 80014ce:	2300      	movs	r3, #0
 80014d0:	2201      	movs	r2, #1
 80014d2:	2100      	movs	r1, #0
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7ff f861 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 80014da:	2300      	movs	r3, #0
 80014dc:	2200      	movs	r2, #0
 80014de:	2101      	movs	r1, #1
 80014e0:	2004      	movs	r0, #4
 80014e2:	f7ff f85b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 80014e6:	2301      	movs	r3, #1
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2005      	movs	r0, #5
 80014ee:	f7ff f855 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 80014f2:	2300      	movs	r3, #0
 80014f4:	2201      	movs	r2, #1
 80014f6:	2100      	movs	r1, #0
 80014f8:	2006      	movs	r0, #6
 80014fa:	f7ff f84f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 80014fe:	2300      	movs	r3, #0
 8001500:	2200      	movs	r2, #0
 8001502:	2101      	movs	r1, #1
 8001504:	2007      	movs	r0, #7
 8001506:	f7ff f849 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 800150a:	2301      	movs	r3, #1
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff f843 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8001516:	2300      	movs	r3, #0
 8001518:	2201      	movs	r2, #1
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff f83d 	bl	800059c <ws2812SetColor>
				break;
 8001522:	e052      	b.n	80015ca <StartTask04+0x406>
 8001524:	20000620 	.word	0x20000620
 8001528:	0800c6f0 	.word	0x0800c6f0
 800152c:	0800c6f8 	.word	0x0800c6f8
 8001530:	0800c700 	.word	0x0800c700
 8001534:	0800c708 	.word	0x0800c708
 8001538:	0800c710 	.word	0x0800c710
 800153c:	0800c718 	.word	0x0800c718
 8001540:	0800c720 	.word	0x0800c720
			case 8:
				printf("case8\n");
 8001544:	4825      	ldr	r0, [pc, #148]	; (80015dc <StartTask04+0x418>)
 8001546:	f00a f98d 	bl	800b864 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800154a:	2301      	movs	r3, #1
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff f823 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8001556:	2300      	movs	r3, #0
 8001558:	2201      	movs	r2, #1
 800155a:	2100      	movs	r1, #0
 800155c:	2002      	movs	r0, #2
 800155e:	f7ff f81d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8001562:	2300      	movs	r3, #0
 8001564:	2200      	movs	r2, #0
 8001566:	2101      	movs	r1, #1
 8001568:	2003      	movs	r0, #3
 800156a:	f7ff f817 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 800156e:	2301      	movs	r3, #1
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2004      	movs	r0, #4
 8001576:	f7ff f811 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 800157a:	2300      	movs	r3, #0
 800157c:	2201      	movs	r2, #1
 800157e:	2100      	movs	r1, #0
 8001580:	2005      	movs	r0, #5
 8001582:	f7ff f80b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8001586:	2300      	movs	r3, #0
 8001588:	2200      	movs	r2, #0
 800158a:	2101      	movs	r1, #1
 800158c:	2006      	movs	r0, #6
 800158e:	f7ff f805 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8001592:	2301      	movs	r3, #1
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2007      	movs	r0, #7
 800159a:	f7fe ffff 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 800159e:	2300      	movs	r3, #0
 80015a0:	2201      	movs	r2, #1
 80015a2:	2100      	movs	r1, #0
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7fe fff9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 80015aa:	2301      	movs	r3, #1
 80015ac:	2201      	movs	r2, #1
 80015ae:	2101      	movs	r1, #1
 80015b0:	2008      	movs	r0, #8
 80015b2:	f7fe fff3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 80015b6:	2301      	movs	r3, #1
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	2009      	movs	r0, #9
 80015be:	f7fe ffed 	bl	800059c <ws2812SetColor>
				temp=1;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <StartTask04+0x41c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
				break;
 80015c8:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff f83c 	bl	800064c <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 80015d4:	2018      	movs	r0, #24
 80015d6:	f7fe ffcd 	bl	8000574 <ws2812NumOn>
  {
 80015da:	e5fa      	b.n	80011d2 <StartTask04+0xe>
 80015dc:	0800c728 	.word	0x0800c728
 80015e0:	20000620 	.word	0x20000620

080015e4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 80015ec:	f006 fc98 	bl	8007f20 <osKernelGetTickCount>
 80015f0:	60f8      	str	r0, [r7, #12]

	fanInit();
 80015f2:	f7ff fb4d 	bl	8000c90 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80015fc:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f006 fe20 	bl	8008244 <osDelayUntil>
	fanOn(30);
 8001604:	201e      	movs	r0, #30
 8001606:	f7ff fb4d 	bl	8000ca4 <fanOn>
	lastTime += PERIOD_FAN;
 800160a:	e7f4      	b.n	80015f6 <StartTask05+0x12>

0800160c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
	char buf[48]={0,};
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	222c      	movs	r2, #44	; 0x2c
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f009 fffc 	bl	800b61e <memset>
  /* USER CODE BEGIN StartTask06 */
	//uint32_t lastTime = osKernelGetTickCount();
	osDelay(10);//for printf();
 8001626:	200a      	movs	r0, #10
 8001628:	f006 fdf1 	bl	800820e <osDelay>
	printf("StartTask06 PS_SIG3_Pin.%d: \n", PS_SIGx_Pin);
 800162c:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <StartTask06+0x194>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	485c      	ldr	r0, [pc, #368]	; (80017a4 <StartTask06+0x198>)
 8001634:	f00a f890 	bl	800b758 <iprintf>
  /* Infinite loop */
  for(;;)
  {
	osDelay(10);//for printf();
 8001638:	200a      	movs	r0, #10
 800163a:	f006 fde8 	bl	800820e <osDelay>
	printf("StartTask06 PS_SIG3_Pin.%d: \n", PS_SIGx_Pin);
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <StartTask06+0x194>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4857      	ldr	r0, [pc, #348]	; (80017a4 <StartTask06+0x198>)
 8001646:	f00a f887 	bl	800b758 <iprintf>

	if(PS_SIGx_Pin&1){//1ch init
 800164a:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <StartTask06+0x194>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d022      	beq.n	800169c <StartTask06+0x90>
		PS_SIGx_Pin=0; printf(" PS_SIG1_stop.\n");
 8001656:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <StartTask06+0x194>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	4852      	ldr	r0, [pc, #328]	; (80017a8 <StartTask06+0x19c>)
 800165e:	f00a f901 	bl	800b864 <puts>
		DataSetSteering(buf, 0, SERVO_CCW, 0, 0);
 8001662:	f107 0008 	add.w	r0, r7, #8
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	2201      	movs	r2, #1
 800166e:	2100      	movs	r1, #0
 8001670:	f000 fafe 	bl	8001c70 <DataSetSteering>
		ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fad1 	bl	8001c20 <ServoMotor_writeDMA>
		for(int i=0;i<48;i++){buf[i]=0;}//clear buf
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
 8001682:	e008      	b.n	8001696 <StartTask06+0x8a>
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168a:	4413      	add	r3, r2
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001692:	3301      	adds	r3, #1
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
 8001696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001698:	2b2f      	cmp	r3, #47	; 0x2f
 800169a:	ddf3      	ble.n	8001684 <StartTask06+0x78>
	}

	if(PS_SIGx_Pin&2){//2ch init
 800169c:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <StartTask06+0x194>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d022      	beq.n	80016ee <StartTask06+0xe2>
		PS_SIGx_Pin=0; printf(" PS_SIG2_stop.\n");
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <StartTask06+0x194>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	483f      	ldr	r0, [pc, #252]	; (80017ac <StartTask06+0x1a0>)
 80016b0:	f00a f8d8 	bl	800b864 <puts>
		DataSetSteering(buf, 1, SERVO_CCW, 0, 0);
 80016b4:	f107 0008 	add.w	r0, r7, #8
 80016b8:	2300      	movs	r3, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2300      	movs	r3, #0
 80016be:	2201      	movs	r2, #1
 80016c0:	2101      	movs	r1, #1
 80016c2:	f000 fad5 	bl	8001c70 <DataSetSteering>
		ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 faa8 	bl	8001c20 <ServoMotor_writeDMA>
		for(int i=0;i<48;i++){buf[i]=0;}//clear buf
 80016d0:	2300      	movs	r3, #0
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
 80016d4:	e008      	b.n	80016e8 <StartTask06+0xdc>
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016dc:	4413      	add	r3, r2
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e4:	3301      	adds	r3, #1
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
 80016e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ea:	2b2f      	cmp	r3, #47	; 0x2f
 80016ec:	ddf3      	ble.n	80016d6 <StartTask06+0xca>
	}
	if(PS_SIGx_Pin&4){//3ch init
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <StartTask06+0x194>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d022      	beq.n	8001740 <StartTask06+0x134>
		PS_SIGx_Pin=0; printf(" PS_SIG3_stop.\n");
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <StartTask06+0x194>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	482b      	ldr	r0, [pc, #172]	; (80017b0 <StartTask06+0x1a4>)
 8001702:	f00a f8af 	bl	800b864 <puts>
		DataSetSteering(buf, 2, SERVO_CCW, 0, 0);
 8001706:	f107 0008 	add.w	r0, r7, #8
 800170a:	2300      	movs	r3, #0
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2300      	movs	r3, #0
 8001710:	2201      	movs	r2, #1
 8001712:	2102      	movs	r1, #2
 8001714:	f000 faac 	bl	8001c70 <DataSetSteering>
		ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fa7f 	bl	8001c20 <ServoMotor_writeDMA>
		for(int i=0;i<48;i++){buf[i]=0;}//clear buf
 8001722:	2300      	movs	r3, #0
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001726:	e008      	b.n	800173a <StartTask06+0x12e>
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172e:	4413      	add	r3, r2
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001736:	3301      	adds	r3, #1
 8001738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173c:	2b2f      	cmp	r3, #47	; 0x2f
 800173e:	ddf3      	ble.n	8001728 <StartTask06+0x11c>
	}
	if(PS_SIGx_Pin&8){//4ch init
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <StartTask06+0x194>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d022      	beq.n	8001792 <StartTask06+0x186>
		PS_SIGx_Pin=0; printf(" PS_SIG4_stop.\n");
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <StartTask06+0x194>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	4818      	ldr	r0, [pc, #96]	; (80017b4 <StartTask06+0x1a8>)
 8001754:	f00a f886 	bl	800b864 <puts>
		DataSetSteering(buf, 3, SERVO_CCW, 0, 0);
 8001758:	f107 0008 	add.w	r0, r7, #8
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2201      	movs	r2, #1
 8001764:	2103      	movs	r1, #3
 8001766:	f000 fa83 	bl	8001c70 <DataSetSteering>
		ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fa56 	bl	8001c20 <ServoMotor_writeDMA>
		for(int i=0;i<48;i++){buf[i]=0;}//clear buf
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	; 0x38
 8001778:	e008      	b.n	800178c <StartTask06+0x180>
 800177a:	f107 0208 	add.w	r2, r7, #8
 800177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001780:	4413      	add	r3, r2
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	3301      	adds	r3, #1
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
 800178c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178e:	2b2f      	cmp	r3, #47	; 0x2f
 8001790:	ddf3      	ble.n	800177a <StartTask06+0x16e>
	}

	osThreadFlagsWait(1, 0, osWaitForever);
 8001792:	f04f 32ff 	mov.w	r2, #4294967295
 8001796:	2100      	movs	r1, #0
 8001798:	2001      	movs	r0, #1
 800179a:	f006 fcb7 	bl	800810c <osThreadFlagsWait>
	osDelay(10);//for printf();
 800179e:	e74b      	b.n	8001638 <StartTask06+0x2c>
 80017a0:	20000600 	.word	0x20000600
 80017a4:	0800c730 	.word	0x0800c730
 80017a8:	0800c750 	.word	0x0800c750
 80017ac:	0800c760 	.word	0x0800c760
 80017b0:	0800c770 	.word	0x0800c770
 80017b4:	0800c780 	.word	0x0800c780

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b57      	ldr	r3, [pc, #348]	; (8001930 <MX_GPIO_Init+0x178>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a56      	ldr	r2, [pc, #344]	; (8001930 <MX_GPIO_Init+0x178>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b54      	ldr	r3, [pc, #336]	; (8001930 <MX_GPIO_Init+0x178>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b50      	ldr	r3, [pc, #320]	; (8001930 <MX_GPIO_Init+0x178>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <MX_GPIO_Init+0x178>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <MX_GPIO_Init+0x178>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <MX_GPIO_Init+0x178>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a48      	ldr	r2, [pc, #288]	; (8001930 <MX_GPIO_Init+0x178>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b46      	ldr	r3, [pc, #280]	; (8001930 <MX_GPIO_Init+0x178>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b42      	ldr	r3, [pc, #264]	; (8001930 <MX_GPIO_Init+0x178>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a41      	ldr	r2, [pc, #260]	; (8001930 <MX_GPIO_Init+0x178>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <MX_GPIO_Init+0x178>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <MX_GPIO_Init+0x178>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <MX_GPIO_Init+0x178>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_GPIO_Init+0x178>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800185a:	2200      	movs	r2, #0
 800185c:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8001860:	4834      	ldr	r0, [pc, #208]	; (8001934 <MX_GPIO_Init+0x17c>)
 8001862:	f002 fe05 	bl	8004470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f244 0110 	movw	r1, #16400	; 0x4010
 800186c:	4832      	ldr	r0, [pc, #200]	; (8001938 <MX_GPIO_Init+0x180>)
 800186e:	f002 fdff 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2104      	movs	r1, #4
 8001876:	4831      	ldr	r0, [pc, #196]	; (800193c <MX_GPIO_Init+0x184>)
 8001878:	f002 fdfa 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800187c:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8001880:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4827      	ldr	r0, [pc, #156]	; (8001934 <MX_GPIO_Init+0x17c>)
 8001896:	f002 fc37 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189a:	2301      	movs	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <MX_GPIO_Init+0x17c>)
 80018ae:	f002 fc2b 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin|PS_SIG4_Pin;
 80018b2:	23f0      	movs	r3, #240	; 0xf0
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018b6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <MX_GPIO_Init+0x188>)
 80018c8:	f002 fc1e 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 80018cc:	f244 0310 	movw	r3, #16400	; 0x4010
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <MX_GPIO_Init+0x180>)
 80018e6:	f002 fc0f 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ea:	2304      	movs	r3, #4
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	480e      	ldr	r0, [pc, #56]	; (800193c <MX_GPIO_Init+0x184>)
 8001902:	f002 fc01 	bl	8004108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	200a      	movs	r0, #10
 800190c:	f001 ffc2 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001910:	200a      	movs	r0, #10
 8001912:	f001 ffdb 	bl	80038cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	2017      	movs	r0, #23
 800191c:	f001 ffba 	bl	8003894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001920:	2017      	movs	r0, #23
 8001922:	f001 ffd3 	bl	80038cc <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020800 	.word	0x40020800
 8001938:	40020400 	.word	0x40020400
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40020000 	.word	0x40020000

08001944 <MX_GPIO_disableirq>:

/* USER CODE BEGIN 2 */
void MX_GPIO_disableirq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001948:	200a      	movs	r0, #10
 800194a:	f001 ffcd 	bl	80038e8 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800194e:	2017      	movs	r0, #23
 8001950:	f001 ffca 	bl	80038e8 <HAL_NVIC_DisableIRQ>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 800195e:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <MX_I2C1_SMBUS_Init+0x6c>)
 8001960:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <MX_I2C1_SMBUS_Init+0x70>)
 8001966:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 8001970:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001974:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 8001996:	2202      	movs	r2, #2
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 800199c:	f003 fa3e 	bl	8004e1c <HAL_SMBUS_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 80019a6:	f000 f90b 	bl	8001bc0 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_I2C1_SMBUS_Init+0x68>)
 80019ac:	f003 faec 	bl	8004f88 <HAL_SMBUS_EnableAlert_IT>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 80019b6:	f000 f903 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000624 	.word	0x20000624
 80019c4:	40005400 	.word	0x40005400
 80019c8:	000186a0 	.word	0x000186a0

080019cc <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_SMBUS_MspInit+0x84>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12b      	bne.n	8001a46 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_SMBUS_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_SMBUS_MspInit+0x88>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_SMBUS_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a0a:	23e0      	movs	r3, #224	; 0xe0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0e:	2312      	movs	r3, #18
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <HAL_SMBUS_MspInit+0x8c>)
 8001a26:	f002 fb6f 	bl	8004108 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_SMBUS_MspInit+0x88>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_SMBUS_MspInit+0x88>)
 8001a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_SMBUS_MspInit+0x88>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400

08001a5c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <_write+0x24>)
 8001a72:	f005 f846 	bl	8006b02 <HAL_UART_Transmit>
	return (len);
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000080c 	.word	0x2000080c

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a88:	f000 ff4e 	bl	8002928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8c:	f000 f81c 	bl	8001ac8 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a90:	f7ff fe92 	bl	80017b8 <MX_GPIO_Init>
  MX_GPIO_disableirq();
 8001a94:	f7ff ff56 	bl	8001944 <MX_GPIO_disableirq>
  MX_CAN1_Init();
 8001a98:	f7fe fe26 	bl	80006e8 <MX_CAN1_Init>

  MX_TIM1_Init();
 8001a9c:	f000 fad6 	bl	800204c <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8001aa0:	f7ff ff5a 	bl	8001958 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8001aa4:	f7ff f8be 	bl	8000c24 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001aa8:	f000 fe2a 	bl	8002700 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001aac:	f000 fdfe 	bl	80026ac <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001ab0:	f000 fbfa 	bl	80022a8 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001ab4:	f000 fb7c 	bl	80021b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ab8:	f006 f9e8 	bl	8007e8c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001abc:	f7ff f962 	bl	8000d84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ac0:	f006 fa08 	bl	8007ed4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <main+0x40>
	...

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b094      	sub	sp, #80	; 0x50
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2230      	movs	r2, #48	; 0x30
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f009 fda1 	bl	800b61e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <SystemClock_Config+0xcc>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <SystemClock_Config+0xcc>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <SystemClock_Config+0xcc>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <SystemClock_Config+0xd0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <SystemClock_Config+0xd0>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <SystemClock_Config+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001b38:	2306      	movs	r3, #6
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b3c:	23a8      	movs	r3, #168	; 0xa8
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b44:	2304      	movs	r3, #4
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 fcdb 	bl	8004508 <HAL_RCC_OscConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b58:	f000 f832 	bl	8001bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b60:	2302      	movs	r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2105      	movs	r1, #5
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 ff3c 	bl	80049f8 <HAL_RCC_ClockConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b86:	f000 f81b 	bl	8001bc0 <Error_Handler>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3750      	adds	r7, #80	; 0x50
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bae:	f000 fedd 	bl	800296c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40001000 	.word	0x40001000

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <Error_Handler+0x8>
	...

08001bcc <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_UART_RxCpltCallback+0x3c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d109      	bne.n	8001bf2 <HAL_UART_RxCpltCallback+0x26>
 8001bde:	220c      	movs	r2, #12
 8001be0:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_UART_RxCpltCallback+0x40>)
 8001be2:	480b      	ldr	r0, [pc, #44]	; (8001c10 <HAL_UART_RxCpltCallback+0x44>)
 8001be4:	f005 f81f 	bl	8006c26 <HAL_UART_Receive_IT>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4619      	mov	r1, r3
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_UART_RxCpltCallback+0x48>)
 8001bee:	f009 fdb3 	bl	800b758 <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_UART_RxCpltCallback+0x4c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8001bf8:	4808      	ldr	r0, [pc, #32]	; (8001c1c <HAL_UART_RxCpltCallback+0x50>)
 8001bfa:	f009 fe33 	bl	800b864 <puts>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40004800 	.word	0x40004800
 8001c0c:	2000067c 	.word	0x2000067c
 8001c10:	20000850 	.word	0x20000850
 8001c14:	0800c790 	.word	0x0800c790
 8001c18:	20000678 	.word	0x20000678
 8001c1c:	0800c7a4 	.word	0x0800c7a4

08001c20 <ServoMotor_writeDMA>:

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
}

void ServoMotor_writeDMA(const char* str)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <ServoMotor_writeDMA+0x48>)
 8001c30:	f002 fc1e 	bl	8004470 <HAL_GPIO_WritePin>
    osDelay(6);//because transmit_DMA
 8001c34:	2006      	movs	r0, #6
 8001c36:	f006 faea 	bl	800820e <osDelay>
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 8001c3a:	2230      	movs	r2, #48	; 0x30
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	480b      	ldr	r0, [pc, #44]	; (8001c6c <ServoMotor_writeDMA+0x4c>)
 8001c40:	f005 f822 	bl	8006c88 <HAL_UART_Transmit_DMA>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <ServoMotor_writeDMA+0x2e>
 8001c4a:	f7ff ffb9 	bl	8001bc0 <Error_Handler>
    osDelay(6);//because transmit_DMA
 8001c4e:	2006      	movs	r0, #6
 8001c50:	f006 fadd 	bl	800820e <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c5a:	4803      	ldr	r0, [pc, #12]	; (8001c68 <ServoMotor_writeDMA+0x48>)
 8001c5c:	f002 fc08 	bl	8004470 <HAL_GPIO_WritePin>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	20000850 	.word	0x20000850

08001c70 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const char* str, char id, char direction, unsigned short position, char init)
{
 8001c70:	b490      	push	{r4, r7}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	70fb      	strb	r3, [r7, #3]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70bb      	strb	r3, [r7, #2]
 8001c86:	4613      	mov	r3, r2
 8001c88:	803b      	strh	r3, [r7, #0]
    char buf[12];

    buf[0]=0xFF;//header
 8001c8a:	23ff      	movs	r3, #255	; 0xff
 8001c8c:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8001c8e:	23fe      	movs	r3, #254	; 0xfe
 8001c90:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 8001c96:	2306      	movs	r3, #6
 8001c98:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8001c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 8001ca8:	78bb      	ldrb	r3, [r7, #2]
 8001caa:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 8001cac:	883b      	ldrh	r3, [r7, #0]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 8001cb6:	883b      	ldrh	r3, [r7, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	743b      	strb	r3, [r7, #16]
    if(init == 1){buf[9]=STOP_SPEED;}//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 8001cbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <DataSetSteering+0x5a>
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	747b      	strb	r3, [r7, #17]
 8001cc8:	e001      	b.n	8001cce <DataSetSteering+0x5e>
    else buf[9]=0x1E;//speed, position second = 3s
 8001cca:	231e      	movs	r3, #30
 8001ccc:	747b      	strb	r3, [r7, #17]
    buf[10]=0x00;//reservation
 8001cce:	2300      	movs	r3, #0
 8001cd0:	74bb      	strb	r3, [r7, #18]
    buf[11]=0x00;//reservation
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	74fb      	strb	r3, [r7, #19]

    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e00d      	b.n	8001cf8 <DataSetSteering+0x88>
 8001cdc:	f107 0208 	add.w	r2, r7, #8
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <DataSetSteering+0xc8>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <DataSetSteering+0xc8>)
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	ddee      	ble.n	8001cdc <DataSetSteering+0x6c>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <DataSetSteering+0xc8>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <DataSetSteering+0xc8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	461c      	mov	r4, r3
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d26:	6020      	str	r0, [r4, #0]
 8001d28:	6061      	str	r1, [r4, #4]
 8001d2a:	60a2      	str	r2, [r4, #8]

}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc90      	pop	{r4, r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000674 	.word	0x20000674

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_MspInit+0x54>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_MspInit+0x54>)
 8001d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_MspInit+0x54>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_MspInit+0x54>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_MspInit+0x54>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_MspInit+0x54>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	f06f 0001 	mvn.w	r0, #1
 8001d82:	f001 fd87 	bl	8003894 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	2036      	movs	r0, #54	; 0x36
 8001daa:	f001 fd73 	bl	8003894 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dae:	2036      	movs	r0, #54	; 0x36
 8001db0:	f001 fd8c 	bl	80038cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <HAL_InitTick+0xa4>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <HAL_InitTick+0xa4>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_InitTick+0xa4>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd0:	f107 0210 	add.w	r2, r7, #16
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 ffec 	bl	8004db8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001de0:	f002 ffc2 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8001de4:	4603      	mov	r3, r0
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_InitTick+0xa8>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	3b01      	subs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_InitTick+0xac>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <HAL_InitTick+0xb0>)
 8001dfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_InitTick+0xac>)
 8001e00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_InitTick+0xac>)
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_InitTick+0xac>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_InitTick+0xac>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <HAL_InitTick+0xac>)
 8001e1a:	f003 f8d5 	bl	8004fc8 <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e24:	4806      	ldr	r0, [pc, #24]	; (8001e40 <HAL_InitTick+0xac>)
 8001e26:	f003 f91f 	bl	8005068 <HAL_TIM_Base_Start_IT>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	20000688 	.word	0x20000688
 8001e44:	40001000 	.word	0x40001000

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler+0x4>

08001e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 8001e78:	2010      	movs	r0, #16
 8001e7a:	f002 fb2d 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <DMA1_Stream3_IRQHandler+0x10>)
 8001e8a:	f001 fed3 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000894 	.word	0x20000894

08001e98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <CAN1_RX0_IRQHandler+0x10>)
 8001e9e:	f001 f9ed 	bl	800327c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200005d8 	.word	0x200005d8

08001eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8001eb0:	2020      	movs	r0, #32
 8001eb2:	f002 fb11 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 8001eb6:	2040      	movs	r0, #64	; 0x40
 8001eb8:	f002 fb0e 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8001ebc:	2080      	movs	r0, #128	; 0x80
 8001ebe:	f002 fb0b 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <USART2_IRQHandler+0x10>)
 8001ece:	f004 ff59 	bl	8006d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000080c 	.word	0x2000080c

08001edc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <USART3_IRQHandler+0x10>)
 8001ee2:	f004 ff4f 	bl	8006d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000850 	.word	0x20000850

08001ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM6_DAC_IRQHandler+0x10>)
 8001ef6:	f003 fc60 	bl	80057ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000688 	.word	0x20000688

08001f04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <DMA2_Stream2_IRQHandler+0x10>)
 8001f0a:	f001 fe93 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200007ac 	.word	0x200007ac

08001f18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e00a      	b.n	8001f40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f2a:	f3af 8000 	nop.w
 8001f2e:	4601      	mov	r1, r0
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbf0      	blt.n	8001f2a <_read+0x12>
	}

return len;
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return -1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_isatty>:

int _isatty(int file)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
	return 1;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f009 f9e6 	bl	800b3bc <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	200006d0 	.word	0x200006d0
 8002024:	20005318 	.word	0x20005318

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b096      	sub	sp, #88	; 0x58
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002052:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	615a      	str	r2, [r3, #20]
 800206e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2220      	movs	r2, #32
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f009 faca 	bl	800b61e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <MX_TIM1_Init+0x15c>)
 800208c:	4a47      	ldr	r2, [pc, #284]	; (80021ac <MX_TIM1_Init+0x160>)
 800208e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8002090:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <MX_TIM1_Init+0x15c>)
 8002092:	f240 628f 	movw	r2, #1679	; 0x68f
 8002096:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <MX_TIM1_Init+0x15c>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800209e:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020a0:	2263      	movs	r2, #99	; 0x63
 80020a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020b6:	483c      	ldr	r0, [pc, #240]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020b8:	f003 f846 	bl	8005148 <HAL_TIM_PWM_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020c2:	f7ff fd7d 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80020c6:	4838      	ldr	r0, [pc, #224]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020c8:	f003 fb1e 	bl	8005708 <HAL_TIM_IC_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80020d2:	f7ff fd75 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020e2:	4619      	mov	r1, r3
 80020e4:	4830      	ldr	r0, [pc, #192]	; (80021a8 <MX_TIM1_Init+0x15c>)
 80020e6:	f004 fbdd 	bl	80068a4 <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020f0:	f7ff fd66 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	; 0x60
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	4823      	ldr	r0, [pc, #140]	; (80021a8 <MX_TIM1_Init+0x15c>)
 800211a:	f003 fcf3 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002124:	f7ff fd4c 	bl	8001bc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	2204      	movs	r2, #4
 800213e:	4619      	mov	r1, r3
 8002140:	4819      	ldr	r0, [pc, #100]	; (80021a8 <MX_TIM1_Init+0x15c>)
 8002142:	f003 fc42 	bl	80059ca <HAL_TIM_IC_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800214c:	f7ff fd38 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002154:	2208      	movs	r2, #8
 8002156:	4619      	mov	r1, r3
 8002158:	4813      	ldr	r0, [pc, #76]	; (80021a8 <MX_TIM1_Init+0x15c>)
 800215a:	f003 fc36 	bl	80059ca <HAL_TIM_IC_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8002164:	f7ff fd2c 	bl	8001bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800217c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002180:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4807      	ldr	r0, [pc, #28]	; (80021a8 <MX_TIM1_Init+0x15c>)
 800218c:	f004 fc06 	bl	800699c <HAL_TIMEx_ConfigBreakDeadTime>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002196:	f7ff fd13 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <MX_TIM1_Init+0x15c>)
 800219c:	f000 fa22 	bl	80025e4 <HAL_TIM_MspPostInit>

}
 80021a0:	bf00      	nop
 80021a2:	3758      	adds	r7, #88	; 0x58
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200006d4 	.word	0x200006d4
 80021ac:	40010000 	.word	0x40010000

080021b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021ce:	463b      	mov	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <MX_TIM3_Init+0xf0>)
 80021dc:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <MX_TIM3_Init+0xf4>)
 80021de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <MX_TIM3_Init+0xf0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <MX_TIM3_Init+0xf0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021ec:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <MX_TIM3_Init+0xf0>)
 80021ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <MX_TIM3_Init+0xf0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <MX_TIM3_Init+0xf0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002200:	4827      	ldr	r0, [pc, #156]	; (80022a0 <MX_TIM3_Init+0xf0>)
 8002202:	f002 fee1 	bl	8004fc8 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800220c:	f7ff fcd8 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002214:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002216:	f107 0318 	add.w	r3, r7, #24
 800221a:	4619      	mov	r1, r3
 800221c:	4820      	ldr	r0, [pc, #128]	; (80022a0 <MX_TIM3_Init+0xf0>)
 800221e:	f003 fd33 	bl	8005c88 <HAL_TIM_ConfigClockSource>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002228:	f7ff fcca 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800222c:	481c      	ldr	r0, [pc, #112]	; (80022a0 <MX_TIM3_Init+0xf0>)
 800222e:	f003 fa6b 	bl	8005708 <HAL_TIM_IC_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002238:	f7ff fcc2 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	4619      	mov	r1, r3
 800224a:	4815      	ldr	r0, [pc, #84]	; (80022a0 <MX_TIM3_Init+0xf0>)
 800224c:	f004 fb2a 	bl	80068a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002256:	f7ff fcb3 	bl	8001bc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800225e:	2301      	movs	r3, #1
 8002260:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800226a:	463b      	mov	r3, r7
 800226c:	2208      	movs	r2, #8
 800226e:	4619      	mov	r1, r3
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <MX_TIM3_Init+0xf0>)
 8002272:	f003 fbaa 	bl	80059ca <HAL_TIM_IC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800227c:	f7ff fca0 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	220c      	movs	r2, #12
 8002284:	4619      	mov	r1, r3
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <MX_TIM3_Init+0xf0>)
 8002288:	f003 fb9f 	bl	80059ca <HAL_TIM_IC_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002292:	f7ff fc95 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000071c 	.word	0x2000071c
 80022a4:	40000400 	.word	0x40000400

080022a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b096      	sub	sp, #88	; 0x58
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]
 80022d6:	615a      	str	r2, [r3, #20]
 80022d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f009 f99c 	bl	800b61e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <MX_TIM8_Init+0x180>)
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <MX_TIM8_Init+0x184>)
 80022ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80022ec:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <MX_TIM8_Init+0x180>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f2:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <MX_TIM8_Init+0x180>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <MX_TIM8_Init+0x180>)
 80022fa:	2268      	movs	r2, #104	; 0x68
 80022fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <MX_TIM8_Init+0x180>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002304:	4b48      	ldr	r3, [pc, #288]	; (8002428 <MX_TIM8_Init+0x180>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <MX_TIM8_Init+0x180>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002310:	4845      	ldr	r0, [pc, #276]	; (8002428 <MX_TIM8_Init+0x180>)
 8002312:	f002 fe59 	bl	8004fc8 <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800231c:	f7ff fc50 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800232a:	4619      	mov	r1, r3
 800232c:	483e      	ldr	r0, [pc, #248]	; (8002428 <MX_TIM8_Init+0x180>)
 800232e:	f003 fcab 	bl	8005c88 <HAL_TIM_ConfigClockSource>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002338:	f7ff fc42 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800233c:	483a      	ldr	r0, [pc, #232]	; (8002428 <MX_TIM8_Init+0x180>)
 800233e:	f002 ff03 	bl	8005148 <HAL_TIM_PWM_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002348:	f7ff fc3a 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002358:	4619      	mov	r1, r3
 800235a:	4833      	ldr	r0, [pc, #204]	; (8002428 <MX_TIM8_Init+0x180>)
 800235c:	f004 faa2 	bl	80068a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002366:	f7ff fc2b 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236a:	2360      	movs	r3, #96	; 0x60
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002376:	2300      	movs	r3, #0
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	4826      	ldr	r0, [pc, #152]	; (8002428 <MX_TIM8_Init+0x180>)
 8002390:	f003 fbb8 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800239a:	f7ff fc11 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800239e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a2:	2204      	movs	r2, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4820      	ldr	r0, [pc, #128]	; (8002428 <MX_TIM8_Init+0x180>)
 80023a8:	f003 fbac 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80023b2:	f7ff fc05 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ba:	2208      	movs	r2, #8
 80023bc:	4619      	mov	r1, r3
 80023be:	481a      	ldr	r0, [pc, #104]	; (8002428 <MX_TIM8_Init+0x180>)
 80023c0:	f003 fba0 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80023ca:	f7ff fbf9 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	220c      	movs	r2, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	4814      	ldr	r0, [pc, #80]	; (8002428 <MX_TIM8_Init+0x180>)
 80023d8:	f003 fb94 	bl	8005b04 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80023e2:	f7ff fbed 	bl	8001bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <MX_TIM8_Init+0x180>)
 800240a:	f004 fac7 	bl	800699c <HAL_TIMEx_ConfigBreakDeadTime>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8002414:	f7ff fbd4 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <MX_TIM8_Init+0x180>)
 800241a:	f000 f8e3 	bl	80025e4 <HAL_TIM_MspPostInit>

}
 800241e:	bf00      	nop
 8002420:	3758      	adds	r7, #88	; 0x58
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000764 	.word	0x20000764
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_TIM_PWM_MspInit+0x84>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d12c      	bne.n	80024ac <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6453      	str	r3, [r2, #68]	; 0x44
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800248a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_TIM_PWM_MspInit+0x8c>)
 80024a8:	f001 fe2e 	bl	8004108 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_TIM_Base_MspInit+0x10c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12c      	bne.n	800253c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a39      	ldr	r2, [pc, #228]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800251a:	2303      	movs	r3, #3
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800252a:	2302      	movs	r3, #2
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4827      	ldr	r0, [pc, #156]	; (80025d4 <HAL_TIM_Base_MspInit+0x114>)
 8002536:	f001 fde7 	bl	8004108 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800253a:	e042      	b.n	80025c2 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_TIM_Base_MspInit+0x118>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13d      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_TIM_Base_MspInit+0x110>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 8002564:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <HAL_TIM_Base_MspInit+0x120>)
 8002566:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 800256a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800256e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002570:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 800257e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002582:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 8002586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 800258e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002592:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 800259c:	2200      	movs	r2, #0
 800259e:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 80025a8:	f001 f9ac 	bl	8003904 <HAL_DMA_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 80025b2:	f7ff fb05 	bl	8001bc0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_TIM_Base_MspInit+0x11c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40010400 	.word	0x40010400
 80025dc:	200007ac 	.word	0x200007ac
 80025e0:	40026440 	.word	0x40026440

080025e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <HAL_TIM_MspPostInit+0xb4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d11f      	bne.n	8002646 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_TIM_MspPostInit+0xb8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a23      	ldr	r2, [pc, #140]	; (800269c <HAL_TIM_MspPostInit+0xb8>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_TIM_MspPostInit+0xb8>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	4818      	ldr	r0, [pc, #96]	; (80026a0 <HAL_TIM_MspPostInit+0xbc>)
 8002640:	f001 fd62 	bl	8004108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002644:	e023      	b.n	800268e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <HAL_TIM_MspPostInit+0xc0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d11e      	bne.n	800268e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_TIM_MspPostInit+0xb8>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_TIM_MspPostInit+0xb8>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6313      	str	r3, [r2, #48]	; 0x30
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_TIM_MspPostInit+0xb8>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800266c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800267e:	2303      	movs	r3, #3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4807      	ldr	r0, [pc, #28]	; (80026a8 <HAL_TIM_MspPostInit+0xc4>)
 800268a:	f001 fd3d 	bl	8004108 <HAL_GPIO_Init>
}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40010000 	.word	0x40010000
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40010400 	.word	0x40010400
 80026a8:	40020800 	.word	0x40020800

080026ac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <MX_USART2_UART_Init+0x50>)
 80026b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026d2:	220c      	movs	r2, #12
 80026d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART2_UART_Init+0x4c>)
 80026e4:	f004 f9c0 	bl	8006a68 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ee:	f7ff fa67 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000080c 	.word	0x2000080c
 80026fc:	40004400 	.word	0x40004400

08002700 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <MX_USART3_UART_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_USART3_UART_Init+0x4c>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_USART3_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <MX_USART3_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_USART3_UART_Init+0x4c>)
 8002738:	f004 f996 	bl	8006a68 <HAL_UART_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002742:	f7ff fa3d 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000850 	.word	0x20000850
 8002750:	40004800 	.word	0x40004800

08002754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a51      	ldr	r2, [pc, #324]	; (80028b8 <HAL_UART_MspInit+0x164>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d134      	bne.n	80027e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_UART_MspInit+0x168>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a4f      	ldr	r2, [pc, #316]	; (80028bc <HAL_UART_MspInit+0x168>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <HAL_UART_MspInit+0x168>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_UART_MspInit+0x168>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_UART_MspInit+0x168>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_UART_MspInit+0x168>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027ae:	230c      	movs	r3, #12
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027be:	2307      	movs	r3, #7
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	4619      	mov	r1, r3
 80027c8:	483d      	ldr	r0, [pc, #244]	; (80028c0 <HAL_UART_MspInit+0x16c>)
 80027ca:	f001 fc9d 	bl	8004108 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	2026      	movs	r0, #38	; 0x26
 80027d4:	f001 f85e 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027d8:	2026      	movs	r0, #38	; 0x26
 80027da:	f001 f877 	bl	80038cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027de:	e067      	b.n	80028b0 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <HAL_UART_MspInit+0x170>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d162      	bne.n	80028b0 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_UART_MspInit+0x168>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a32      	ldr	r2, [pc, #200]	; (80028bc <HAL_UART_MspInit+0x168>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_UART_MspInit+0x168>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_UART_MspInit+0x168>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <HAL_UART_MspInit+0x168>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_UART_MspInit+0x168>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002822:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002834:	2307      	movs	r3, #7
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	4619      	mov	r1, r3
 800283e:	4822      	ldr	r0, [pc, #136]	; (80028c8 <HAL_UART_MspInit+0x174>)
 8002840:	f001 fc62 	bl	8004108 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002846:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_UART_MspInit+0x17c>)
 8002848:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_UART_MspInit+0x178>)
 800284c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002850:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002854:	2240      	movs	r2, #64	; 0x40
 8002856:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_UART_MspInit+0x178>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002864:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_UART_MspInit+0x178>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_UART_MspInit+0x178>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002886:	f001 f83d 	bl	8003904 <HAL_DMA_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002890:	f7ff f996 	bl	8001bc0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_UART_MspInit+0x178>)
 8002898:	635a      	str	r2, [r3, #52]	; 0x34
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_UART_MspInit+0x178>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2105      	movs	r1, #5
 80028a4:	2027      	movs	r0, #39	; 0x27
 80028a6:	f000 fff5 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028aa:	2027      	movs	r0, #39	; 0x27
 80028ac:	f001 f80e 	bl	80038cc <HAL_NVIC_EnableIRQ>
}
 80028b0:	bf00      	nop
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40004400 	.word	0x40004400
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40004800 	.word	0x40004800
 80028c8:	40020400 	.word	0x40020400
 80028cc:	20000894 	.word	0x20000894
 80028d0:	40026058 	.word	0x40026058

080028d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028da:	490e      	ldr	r1, [pc, #56]	; (8002914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028f0:	4c0b      	ldr	r4, [pc, #44]	; (8002920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028fe:	f7ff fb93 	bl	8002028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002902:	f008 fe57 	bl	800b5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002906:	f7ff f8bd 	bl	8001a84 <main>
  bx  lr    
 800290a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800290c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002918:	0800ca48 	.word	0x0800ca48
  ldr r2, =_sbss
 800291c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002920:	20005318 	.word	0x20005318

08002924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC_IRQHandler>
	...

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_Init+0x40>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_Init+0x40>)
 8002932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_Init+0x40>)
 800293e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_Init+0x40>)
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f000 ff94 	bl	800387e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002956:	200f      	movs	r0, #15
 8002958:	f7ff fa1c 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800295c:	f7ff f9ee 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00

0800296c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_IncTick+0x20>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x24>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_IncTick+0x24>)
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000008 	.word	0x20000008
 8002990:	200008f4 	.word	0x200008f4

08002994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return uwTick;
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_GetTick+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	200008f4 	.word	0x200008f4

080029ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0ed      	b.n	8002b9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fd fec2 	bl	8000754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e0:	f7ff ffd8 	bl	8002994 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029e6:	e012      	b.n	8002a0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e8:	f7ff ffd4 	bl	8002994 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b0a      	cmp	r3, #10
 80029f4:	d90b      	bls.n	8002a0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2205      	movs	r2, #5
 8002a06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0c5      	b.n	8002b9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0e5      	beq.n	80029e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0202 	bic.w	r2, r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7ff ffb2 	bl	8002994 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a32:	e012      	b.n	8002a5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a34:	f7ff ffae 	bl	8002994 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d90b      	bls.n	8002a5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e09f      	b.n	8002b9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e007      	b.n	8002a92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7e5b      	ldrb	r3, [r3, #25]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d108      	bne.n	8002aac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e007      	b.n	8002abc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7e9b      	ldrb	r3, [r3, #26]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d108      	bne.n	8002ad6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e007      	b.n	8002ae6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0220 	bic.w	r2, r2, #32
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7edb      	ldrb	r3, [r3, #27]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d108      	bne.n	8002b00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0210 	bic.w	r2, r2, #16
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e007      	b.n	8002b10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0210 	orr.w	r2, r2, #16
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7f1b      	ldrb	r3, [r3, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7f5b      	ldrb	r3, [r3, #29]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0204 	orr.w	r2, r2, #4
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e007      	b.n	8002b64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	1e5a      	subs	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d003      	beq.n	8002bca <HAL_CAN_ConfigFilter+0x26>
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	f040 80be 	bne.w	8002d46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_CAN_ConfigFilter+0x1bc>)
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002be4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d123      	bne.n	8002c74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3248      	adds	r2, #72	; 0x48
 8002c54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	3348      	adds	r3, #72	; 0x48
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d122      	bne.n	8002cc2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3248      	adds	r2, #72	; 0x48
 8002ca2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cb8:	6979      	ldr	r1, [r7, #20]
 8002cba:	3348      	adds	r3, #72	; 0x48
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cdc:	e007      	b.n	8002cee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	401a      	ands	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d08:	e007      	b.n	8002d1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d38:	f023 0201 	bic.w	r2, r3, #1
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e006      	b.n	8002d54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40006400 	.word	0x40006400

08002d64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d12e      	bne.n	8002dd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d90:	f7ff fe00 	bl	8002994 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d96:	e012      	b.n	8002dbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d98:	f7ff fdfc 	bl	8002994 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b0a      	cmp	r3, #10
 8002da4:	d90b      	bls.n	8002dbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2205      	movs	r2, #5
 8002db6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e012      	b.n	8002de4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e5      	bne.n	8002d98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e006      	b.n	8002de4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d003      	beq.n	8002e18 <HAL_CAN_AddTxMessage+0x2c>
 8002e10:	7ffb      	ldrb	r3, [r7, #31]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	f040 80b8 	bne.w	8002f88 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80a0 	beq.w	8002f78 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	0e1b      	lsrs	r3, r3, #24
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d907      	bls.n	8002e58 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e09e      	b.n	8002f96 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e74:	68f9      	ldr	r1, [r7, #12]
 8002e76:	6809      	ldr	r1, [r1, #0]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	440b      	add	r3, r1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e00f      	b.n	8002ea6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3318      	adds	r3, #24
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	440b      	add	r3, r1
 8002ea4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	7d1b      	ldrb	r3, [r3, #20]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d111      	bne.n	8002ee6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3318      	adds	r3, #24
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	3304      	adds	r3, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3318      	adds	r3, #24
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3307      	adds	r3, #7
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	061a      	lsls	r2, r3, #24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3306      	adds	r3, #6
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3305      	adds	r3, #5
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	4313      	orrs	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	3204      	adds	r2, #4
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	4610      	mov	r0, r2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	6811      	ldr	r1, [r2, #0]
 8002f0e:	ea43 0200 	orr.w	r2, r3, r0
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	440b      	add	r3, r1
 8002f18:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3303      	adds	r3, #3
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	061a      	lsls	r2, r3, #24
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3302      	adds	r3, #2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3301      	adds	r3, #1
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	4610      	mov	r0, r2
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	ea43 0200 	orr.w	r2, r3, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3318      	adds	r3, #24
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	4413      	add	r3, r2
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	f043 0201 	orr.w	r2, r3, #1
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	440b      	add	r3, r1
 8002f72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e00e      	b.n	8002f96 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e006      	b.n	8002f96 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d002      	beq.n	8002fc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d11d      	bne.n	8002ffe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003020:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d003      	beq.n	8003030 <HAL_CAN_GetRxMessage+0x24>
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 80f3 	bne.w	8003216 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0e7      	b.n	8003224 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0d8      	b.n	8003224 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	331b      	adds	r3, #27
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	4413      	add	r3, r2
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0204 	and.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10c      	bne.n	80030aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	331b      	adds	r3, #27
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4413      	add	r3, r2
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0d5b      	lsrs	r3, r3, #21
 80030a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e00b      	b.n	80030c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	331b      	adds	r3, #27
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	331b      	adds	r3, #27
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	4413      	add	r3, r2
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0202 	and.w	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	331b      	adds	r3, #27
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	331b      	adds	r3, #27
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	b2da      	uxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	331b      	adds	r3, #27
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	4413      	add	r3, r2
 800312a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	4413      	add	r3, r2
 8003140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0a1a      	lsrs	r2, r3, #8
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0c1a      	lsrs	r2, r3, #16
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3302      	adds	r3, #2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0e1a      	lsrs	r2, r3, #24
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	3303      	adds	r3, #3
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3304      	adds	r3, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0a1a      	lsrs	r2, r3, #8
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	3305      	adds	r3, #5
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4413      	add	r3, r2
 80031c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0c1a      	lsrs	r2, r3, #16
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	3306      	adds	r3, #6
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	4413      	add	r3, r2
 80031da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e1a      	lsrs	r2, r3, #24
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	3307      	adds	r3, #7
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d108      	bne.n	8003202 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0220 	orr.w	r2, r2, #32
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e007      	b.n	8003212 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0220 	orr.w	r2, r2, #32
 8003210:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e006      	b.n	8003224 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003240:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <HAL_CAN_ActivateNotification+0x1e>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d109      	bne.n	8003262 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6959      	ldr	r1, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e006      	b.n	8003270 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d07c      	beq.n	80033bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f983 	bl	80035ea <HAL_CAN_TxMailbox0CompleteCallback>
 80032e4:	e016      	b.n	8003314 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	e00c      	b.n	8003314 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	e002      	b.n	8003314 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f989 	bl	8003626 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f963 	bl	80035fe <HAL_CAN_TxMailbox1CompleteCallback>
 8003338:	e016      	b.n	8003368 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e00c      	b.n	8003368 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	e002      	b.n	8003368 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f969 	bl	800363a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d024      	beq.n	80033bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800337a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f943 	bl	8003612 <HAL_CAN_TxMailbox2CompleteCallback>
 800338c:	e016      	b.n	80033bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e00c      	b.n	80033bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e002      	b.n	80033bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f949 	bl	800364e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d006      	beq.n	8003402 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2208      	movs	r2, #8
 80033fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f930 	bl	8003662 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fbe2 	bl	8000be4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2210      	movs	r2, #16
 8003442:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d006      	beq.n	8003466 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2208      	movs	r2, #8
 800345e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f912 	bl	800368a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8f9 	bl	8003676 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2210      	movs	r2, #16
 800349e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f8fc 	bl	800369e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2208      	movs	r2, #8
 80034c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8f5 	bl	80036b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07b      	beq.n	80035ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d072      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003536:	2b00      	cmp	r3, #0
 8003538:	d043      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03e      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800354a:	2b60      	cmp	r3, #96	; 0x60
 800354c:	d02b      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x32a>
 800354e:	2b60      	cmp	r3, #96	; 0x60
 8003550:	d82e      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 8003552:	2b50      	cmp	r3, #80	; 0x50
 8003554:	d022      	beq.n	800359c <HAL_CAN_IRQHandler+0x320>
 8003556:	2b50      	cmp	r3, #80	; 0x50
 8003558:	d82a      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d019      	beq.n	8003592 <HAL_CAN_IRQHandler+0x316>
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d826      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 8003562:	2b30      	cmp	r3, #48	; 0x30
 8003564:	d010      	beq.n	8003588 <HAL_CAN_IRQHandler+0x30c>
 8003566:	2b30      	cmp	r3, #48	; 0x30
 8003568:	d822      	bhi.n	80035b0 <HAL_CAN_IRQHandler+0x334>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d002      	beq.n	8003574 <HAL_CAN_IRQHandler+0x2f8>
 800356e:	2b20      	cmp	r3, #32
 8003570:	d005      	beq.n	800357e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003572:	e01d      	b.n	80035b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	f043 0308 	orr.w	r3, r3, #8
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800357c:	e019      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f043 0310 	orr.w	r3, r3, #16
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003586:	e014      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003590:	e00f      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800359a:	e00a      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035a4:	e005      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ae:	e000      	b.n	80035b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80035b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2204      	movs	r2, #4
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f872 	bl	80036c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035e2:	bf00      	nop
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db0b      	blt.n	800376a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4907      	ldr	r1, [pc, #28]	; (8003778 <__NVIC_EnableIRQ+0x38>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000e100 	.word	0xe000e100

0800377c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db12      	blt.n	80037b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	490a      	ldr	r1, [pc, #40]	; (80037c0 <__NVIC_DisableIRQ+0x44>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	3320      	adds	r3, #32
 80037a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037a8:	f3bf 8f4f 	dsb	sy
}
 80037ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037ae:	f3bf 8f6f 	isb	sy
}
 80037b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	; (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	; (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff28 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038a6:	f7ff ff3d 	bl	8003724 <__NVIC_GetPriorityGrouping>
 80038aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	6978      	ldr	r0, [r7, #20]
 80038b2:	f7ff ffb1 	bl	8003818 <NVIC_EncodePriority>
 80038b6:	4602      	mov	r2, r0
 80038b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff80 	bl	80037c4 <__NVIC_SetPriority>
}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff30 	bl	8003740 <__NVIC_EnableIRQ>
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff40 	bl	800377c <__NVIC_DisableIRQ>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff f840 	bl	8002994 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e099      	b.n	8003a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003940:	e00f      	b.n	8003962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003942:	f7ff f827 	bl	8002994 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b05      	cmp	r3, #5
 800394e:	d908      	bls.n	8003962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2203      	movs	r2, #3
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e078      	b.n	8003a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e8      	bne.n	8003942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_DMA_Init+0x158>)
 800397c:	4013      	ands	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	4313      	orrs	r3, r2
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d117      	bne.n	8003a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fb01 	bl	8004010 <DMA_CheckFifoParam>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2240      	movs	r2, #64	; 0x40
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a22:	2301      	movs	r3, #1
 8003a24:	e016      	b.n	8003a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fab8 	bl	8003fa4 <DMA_CalcBaseAndBitshift>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	223f      	movs	r2, #63	; 0x3f
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	f010803f 	.word	0xf010803f

08003a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_DMA_Start_IT+0x26>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e040      	b.n	8003b08 <HAL_DMA_Start_IT+0xa8>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d12f      	bne.n	8003afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa4a 	bl	8003f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	223f      	movs	r2, #63	; 0x3f
 8003aba:	409a      	lsls	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0216 	orr.w	r2, r2, #22
 8003ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0208 	orr.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e005      	b.n	8003b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
 8003b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b1e:	f7fe ff39 	bl	8002994 <HAL_GetTick>
 8003b22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d008      	beq.n	8003b42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e052      	b.n	8003be8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0216 	bic.w	r2, r2, #22
 8003b50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_DMA_Abort+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0208 	bic.w	r2, r2, #8
 8003b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b92:	e013      	b.n	8003bbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b94:	f7fe fefe 	bl	8002994 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d90c      	bls.n	8003bbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2203      	movs	r2, #3
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e015      	b.n	8003be8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e4      	bne.n	8003b94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	223f      	movs	r2, #63	; 0x3f
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00c      	b.n	8003c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2205      	movs	r2, #5
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c40:	4b8e      	ldr	r3, [pc, #568]	; (8003e7c <HAL_DMA_IRQHandler+0x248>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a8e      	ldr	r2, [pc, #568]	; (8003e80 <HAL_DMA_IRQHandler+0x24c>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2208      	movs	r2, #8
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01a      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	2204      	movs	r2, #4
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0204 	orr.w	r2, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	2210      	movs	r2, #16
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d043      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03c      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	2210      	movs	r2, #16
 8003d30:	409a      	lsls	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d024      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	e01f      	b.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e016      	b.n	8003da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0208 	bic.w	r2, r2, #8
 8003d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	2220      	movs	r2, #32
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 808f 	beq.w	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8087 	beq.w	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2220      	movs	r2, #32
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d136      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0216 	bic.w	r2, r2, #22
 8003dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <HAL_DMA_IRQHandler+0x1da>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0208 	bic.w	r2, r2, #8
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	223f      	movs	r2, #63	; 0x3f
 8003e24:	409a      	lsls	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d07e      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
        }
        return;
 8003e4a:	e079      	b.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01d      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
 8003e78:	e02c      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
 8003e7a:	bf00      	nop
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d023      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
 8003e94:	e01e      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10f      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0210 	bic.w	r2, r2, #16
 8003eb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d032      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2205      	movs	r2, #5
 8003eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	3301      	adds	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d307      	bcc.n	8003f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f2      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x2cc>
 8003f1a:	e000      	b.n	8003f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f40:	bf00      	nop
    }
  }
}
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d108      	bne.n	8003f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f86:	e007      	b.n	8003f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3b10      	subs	r3, #16
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <DMA_CalcBaseAndBitshift+0x64>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <DMA_CalcBaseAndBitshift+0x68>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d909      	bls.n	8003fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fe4:	e007      	b.n	8003ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	aaaaaaab 	.word	0xaaaaaaab
 800400c:	0800c998 	.word	0x0800c998

08004010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11f      	bne.n	800406a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d856      	bhi.n	80040de <DMA_CheckFifoParam+0xce>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <DMA_CheckFifoParam+0x28>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	0800405b 	.word	0x0800405b
 8004040:	08004049 	.word	0x08004049
 8004044:	080040df 	.word	0x080040df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d046      	beq.n	80040e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004058:	e043      	b.n	80040e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004062:	d140      	bne.n	80040e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004068:	e03d      	b.n	80040e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004072:	d121      	bne.n	80040b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d837      	bhi.n	80040ea <DMA_CheckFifoParam+0xda>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <DMA_CheckFifoParam+0x70>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	08004091 	.word	0x08004091
 8004084:	08004097 	.word	0x08004097
 8004088:	08004091 	.word	0x08004091
 800408c:	080040a9 	.word	0x080040a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      break;
 8004094:	e030      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d025      	beq.n	80040ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a6:	e022      	b.n	80040ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040b0:	d11f      	bne.n	80040f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040b6:	e01c      	b.n	80040f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d903      	bls.n	80040c6 <DMA_CheckFifoParam+0xb6>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d003      	beq.n	80040cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c4:	e018      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      break;
 80040ca:	e015      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e00b      	b.n	80040f6 <DMA_CheckFifoParam+0xe6>
      break;
 80040de:	bf00      	nop
 80040e0:	e00a      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e008      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e006      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
    }
  } 
  
  return status; 
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop

08004108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e16b      	b.n	80043fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 815a 	bne.w	80043f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d005      	beq.n	800415a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004156:	2b02      	cmp	r3, #2
 8004158:	d130      	bne.n	80041bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004190:	2201      	movs	r2, #1
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 0201 	and.w	r2, r3, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d017      	beq.n	80041f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d123      	bne.n	800424c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	220f      	movs	r2, #15
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80b4 	beq.w	80043f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_GPIO_Init+0x30c>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <HAL_GPIO_Init+0x30c>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800429c:	6453      	str	r3, [r2, #68]	; 0x44
 800429e:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_GPIO_Init+0x30c>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042aa:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <HAL_GPIO_Init+0x310>)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_GPIO_Init+0x314>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d02b      	beq.n	800432e <HAL_GPIO_Init+0x226>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a51      	ldr	r2, [pc, #324]	; (8004420 <HAL_GPIO_Init+0x318>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d025      	beq.n	800432a <HAL_GPIO_Init+0x222>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a50      	ldr	r2, [pc, #320]	; (8004424 <HAL_GPIO_Init+0x31c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01f      	beq.n	8004326 <HAL_GPIO_Init+0x21e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <HAL_GPIO_Init+0x320>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x21a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4e      	ldr	r2, [pc, #312]	; (800442c <HAL_GPIO_Init+0x324>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x216>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a4d      	ldr	r2, [pc, #308]	; (8004430 <HAL_GPIO_Init+0x328>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x212>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a4c      	ldr	r2, [pc, #304]	; (8004434 <HAL_GPIO_Init+0x32c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a4b      	ldr	r2, [pc, #300]	; (8004438 <HAL_GPIO_Init+0x330>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x20a>
 800430e:	2307      	movs	r3, #7
 8004310:	e00e      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004312:	2308      	movs	r3, #8
 8004314:	e00c      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004316:	2306      	movs	r3, #6
 8004318:	e00a      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800431a:	2305      	movs	r3, #5
 800431c:	e008      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800431e:	2304      	movs	r3, #4
 8004320:	e006      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004322:	2303      	movs	r3, #3
 8004324:	e004      	b.n	8004330 <HAL_GPIO_Init+0x228>
 8004326:	2302      	movs	r3, #2
 8004328:	e002      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_GPIO_Init+0x228>
 800432e:	2300      	movs	r3, #0
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f002 0203 	and.w	r2, r2, #3
 8004336:	0092      	lsls	r2, r2, #2
 8004338:	4093      	lsls	r3, r2
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004340:	4935      	ldr	r1, [pc, #212]	; (8004418 <HAL_GPIO_Init+0x310>)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800434e:	4b3b      	ldr	r3, [pc, #236]	; (800443c <HAL_GPIO_Init+0x334>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004372:	4a32      	ldr	r2, [pc, #200]	; (800443c <HAL_GPIO_Init+0x334>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004378:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_GPIO_Init+0x334>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800439c:	4a27      	ldr	r2, [pc, #156]	; (800443c <HAL_GPIO_Init+0x334>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <HAL_GPIO_Init+0x334>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043c6:	4a1d      	ldr	r2, [pc, #116]	; (800443c <HAL_GPIO_Init+0x334>)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_GPIO_Init+0x334>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043f0:	4a12      	ldr	r2, [pc, #72]	; (800443c <HAL_GPIO_Init+0x334>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	f67f ae90 	bls.w	8004124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	3724      	adds	r7, #36	; 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40013800 	.word	0x40013800
 800441c:	40020000 	.word	0x40020000
 8004420:	40020400 	.word	0x40020400
 8004424:	40020800 	.word	0x40020800
 8004428:	40020c00 	.word	0x40020c00
 800442c:	40021000 	.word	0x40021000
 8004430:	40021400 	.word	0x40021400
 8004434:	40021800 	.word	0x40021800
 8004438:	40021c00 	.word	0x40021c00
 800443c:	40013c00 	.word	0x40013c00

08004440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e001      	b.n	8004462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800448c:	e003      	b.n	8004496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	041a      	lsls	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	619a      	str	r2, [r3, #24]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	43d9      	mvns	r1, r3
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	400b      	ands	r3, r1
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc fbf2 	bl	8000ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40013c00 	.word	0x40013c00

08004508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e267      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d075      	beq.n	8004612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004526:	4b88      	ldr	r3, [pc, #544]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00c      	beq.n	800454c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004532:	4b85      	ldr	r3, [pc, #532]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800453a:	2b08      	cmp	r3, #8
 800453c:	d112      	bne.n	8004564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b82      	ldr	r3, [pc, #520]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454a:	d10b      	bne.n	8004564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d05b      	beq.n	8004610 <HAL_RCC_OscConfig+0x108>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d157      	bne.n	8004610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e242      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d106      	bne.n	800457c <HAL_RCC_OscConfig+0x74>
 800456e:	4b76      	ldr	r3, [pc, #472]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a75      	ldr	r2, [pc, #468]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e01d      	b.n	80045b8 <HAL_RCC_OscConfig+0xb0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x98>
 8004586:	4b70      	ldr	r3, [pc, #448]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a6f      	ldr	r2, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800458c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6c      	ldr	r2, [pc, #432]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0xb0>
 80045a0:	4b69      	ldr	r3, [pc, #420]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a68      	ldr	r2, [pc, #416]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80045a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b66      	ldr	r3, [pc, #408]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a65      	ldr	r2, [pc, #404]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d013      	beq.n	80045e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe f9e8 	bl	8002994 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fe f9e4 	bl	8002994 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e207      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045da:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0xc0>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe f9d4 	bl	8002994 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f0:	f7fe f9d0 	bl	8002994 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	; 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e1f3      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004602:	4b51      	ldr	r3, [pc, #324]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0xe8>
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d063      	beq.n	80046e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461e:	4b4a      	ldr	r3, [pc, #296]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004632:	2b08      	cmp	r3, #8
 8004634:	d11c      	bne.n	8004670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d116      	bne.n	8004670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_RCC_OscConfig+0x152>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d001      	beq.n	800465a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e1c7      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465a:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4937      	ldr	r1, [pc, #220]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466e:	e03a      	b.n	80046e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d020      	beq.n	80046ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004678:	4b34      	ldr	r3, [pc, #208]	; (800474c <HAL_RCC_OscConfig+0x244>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fe f989 	bl	8002994 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004686:	f7fe f985 	bl	8002994 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e1a8      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004698:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a4:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4925      	ldr	r1, [pc, #148]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]
 80046b8:	e015      	b.n	80046e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_OscConfig+0x244>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe f968 	bl	8002994 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c8:	f7fe f964 	bl	8002994 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e187      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d036      	beq.n	8004760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_RCC_OscConfig+0x248>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fe f948 	bl	8002994 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004708:	f7fe f944 	bl	8002994 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e167      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCC_OscConfig+0x240>)
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x200>
 8004726:	e01b      	b.n	8004760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_OscConfig+0x248>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472e:	f7fe f931 	bl	8002994 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004734:	e00e      	b.n	8004754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004736:	f7fe f92d 	bl	8002994 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d907      	bls.n	8004754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e150      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
 8004748:	40023800 	.word	0x40023800
 800474c:	42470000 	.word	0x42470000
 8004750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ea      	bne.n	8004736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8097 	beq.w	800489c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b81      	ldr	r3, [pc, #516]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	4b7d      	ldr	r3, [pc, #500]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	4a7c      	ldr	r2, [pc, #496]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478c:	6413      	str	r3, [r2, #64]	; 0x40
 800478e:	4b7a      	ldr	r3, [pc, #488]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	4b77      	ldr	r3, [pc, #476]	; (800497c <HAL_RCC_OscConfig+0x474>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d118      	bne.n	80047dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047aa:	4b74      	ldr	r3, [pc, #464]	; (800497c <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a73      	ldr	r2, [pc, #460]	; (800497c <HAL_RCC_OscConfig+0x474>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b6:	f7fe f8ed 	bl	8002994 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047be:	f7fe f8e9 	bl	8002994 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e10c      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d0:	4b6a      	ldr	r3, [pc, #424]	; (800497c <HAL_RCC_OscConfig+0x474>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d106      	bne.n	80047f2 <HAL_RCC_OscConfig+0x2ea>
 80047e4:	4b64      	ldr	r3, [pc, #400]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	4a63      	ldr	r2, [pc, #396]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	; 0x70
 80047f0:	e01c      	b.n	800482c <HAL_RCC_OscConfig+0x324>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b05      	cmp	r3, #5
 80047f8:	d10c      	bne.n	8004814 <HAL_RCC_OscConfig+0x30c>
 80047fa:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a5e      	ldr	r2, [pc, #376]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004800:	f043 0304 	orr.w	r3, r3, #4
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
 8004806:	4b5c      	ldr	r3, [pc, #368]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5b      	ldr	r2, [pc, #364]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	e00b      	b.n	800482c <HAL_RCC_OscConfig+0x324>
 8004814:	4b58      	ldr	r3, [pc, #352]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4a57      	ldr	r2, [pc, #348]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	6713      	str	r3, [r2, #112]	; 0x70
 8004820:	4b55      	ldr	r3, [pc, #340]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a54      	ldr	r2, [pc, #336]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0304 	bic.w	r3, r3, #4
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fe f8ae 	bl	8002994 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483a:	e00a      	b.n	8004852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483c:	f7fe f8aa 	bl	8002994 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	; 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0cb      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004852:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0ee      	beq.n	800483c <HAL_RCC_OscConfig+0x334>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004860:	f7fe f898 	bl	8002994 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004866:	e00a      	b.n	800487e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004868:	f7fe f894 	bl	8002994 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e0b5      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487e:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ee      	bne.n	8004868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004890:	4b39      	ldr	r3, [pc, #228]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4a38      	ldr	r2, [pc, #224]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a1 	beq.w	80049e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d05c      	beq.n	800496c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d141      	bne.n	800493e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_OscConfig+0x478>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fe f868 	bl	8002994 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fe f864 	bl	8002994 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e087      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	019b      	lsls	r3, r3, #6
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	3b01      	subs	r3, #1
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	491b      	ldr	r1, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <HAL_RCC_OscConfig+0x478>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004916:	f7fe f83d 	bl	8002994 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491e:	f7fe f839 	bl	8002994 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e05c      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x416>
 800493c:	e054      	b.n	80049e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <HAL_RCC_OscConfig+0x478>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fe f826 	bl	8002994 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494c:	f7fe f822 	bl	8002994 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e045      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCC_OscConfig+0x470>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x444>
 800496a:	e03d      	b.n	80049e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e038      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
 8004978:	40023800 	.word	0x40023800
 800497c:	40007000 	.word	0x40007000
 8004980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x4ec>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d028      	beq.n	80049e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d121      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d11a      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049bc:	4293      	cmp	r3, r2
 80049be:	d111      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800

080049f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0cc      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b68      	ldr	r3, [pc, #416]	; (8004bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d90c      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b65      	ldr	r3, [pc, #404]	; (8004bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b63      	ldr	r3, [pc, #396]	; (8004bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b8      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a4c:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a58      	ldr	r2, [pc, #352]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a64:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a52      	ldr	r2, [pc, #328]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a70:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	494d      	ldr	r1, [pc, #308]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d044      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d119      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07f      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab6:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e06f      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac6:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e067      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad6:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f023 0203 	bic.w	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4934      	ldr	r1, [pc, #208]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae8:	f7fd ff54 	bl	8002994 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af0:	f7fd ff50 	bl	8002994 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e04f      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b06:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 020c 	and.w	r2, r3, #12
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d1eb      	bne.n	8004af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d20c      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e032      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4916      	ldr	r1, [pc, #88]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	490e      	ldr	r1, [pc, #56]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b7e:	f000 f821 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b82:	4602      	mov	r2, r0
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	490a      	ldr	r1, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b90:	5ccb      	ldrb	r3, [r1, r3]
 8004b92:	fa22 f303 	lsr.w	r3, r2, r3
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fd f8f8 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023c00 	.word	0x40023c00
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	0800c980 	.word	0x0800c980
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	20000004 	.word	0x20000004

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b090      	sub	sp, #64	; 0x40
 8004bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bdc:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d00d      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x40>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	f200 80a1 	bhi.w	8004d30 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8004bf6:	e09b      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bfc:	e09b      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfe:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c02:	e098      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c04:	4b4f      	ldr	r3, [pc, #316]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0e:	4b4d      	ldr	r3, [pc, #308]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d028      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1a:	4b4a      	ldr	r3, [pc, #296]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	099b      	lsrs	r3, r3, #6
 8004c20:	2200      	movs	r2, #0
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	627a      	str	r2, [r7, #36]	; 0x24
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c30:	fb03 f201 	mul.w	r2, r3, r1
 8004c34:	2300      	movs	r3, #0
 8004c36:	fb00 f303 	mul.w	r3, r0, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	4a43      	ldr	r2, [pc, #268]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c44:	460a      	mov	r2, r1
 8004c46:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4a:	4413      	add	r3, r2
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	2200      	movs	r2, #0
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	61fa      	str	r2, [r7, #28]
 8004c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c5e:	f7fb fb07 	bl	8000270 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4613      	mov	r3, r2
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6a:	e053      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6c:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	2200      	movs	r2, #0
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	617a      	str	r2, [r7, #20]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c7e:	f04f 0b00 	mov.w	fp, #0
 8004c82:	4652      	mov	r2, sl
 8004c84:	465b      	mov	r3, fp
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	0159      	lsls	r1, r3, #5
 8004c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c94:	0150      	lsls	r0, r2, #5
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c9e:	eb63 090b 	sbc.w	r9, r3, fp
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cb6:	ebb2 0408 	subs.w	r4, r2, r8
 8004cba:	eb63 0509 	sbc.w	r5, r3, r9
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	00eb      	lsls	r3, r5, #3
 8004cc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ccc:	00e2      	lsls	r2, r4, #3
 8004cce:	4614      	mov	r4, r2
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	eb14 030a 	adds.w	r3, r4, sl
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	eb45 030b 	adc.w	r3, r5, fp
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cea:	4629      	mov	r1, r5
 8004cec:	028b      	lsls	r3, r1, #10
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	028a      	lsls	r2, r1, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	60fa      	str	r2, [r7, #12]
 8004d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d08:	f7fb fab2 	bl	8000270 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4613      	mov	r3, r2
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d2e:	e002      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3740      	adds	r7, #64	; 0x40
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	00b71b00 	.word	0x00b71b00

08004d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a9b      	lsrs	r3, r3, #10
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0800c990 	.word	0x0800c990

08004d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d94:	f7ff ffdc 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0b5b      	lsrs	r3, r3, #13
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	; (8004db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	0800c990 	.word	0x0800c990

08004db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_RCC_GetClockConfig+0x5c>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_RCC_GetClockConfig+0x60>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0207 	and.w	r2, r3, #7
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	601a      	str	r2, [r3, #0]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40023c00 	.word	0x40023c00

08004e1c <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0a1      	b.n	8004f7a <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fdbe 	bl	80019cc <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7ff ff7e 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a44      	ldr	r2, [pc, #272]	; (8004f84 <HAL_SMBUS_Init+0x168>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0c9b      	lsrs	r3, r3, #18
 8004e78:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6852      	ldr	r2, [r2, #4]
 8004eb6:	0052      	lsls	r2, r2, #1
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	fbb1 f1f2 	udiv	r1, r1, r2
 8004ebe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	2a00      	cmp	r2, #0
 8004ec6:	d006      	beq.n	8004ed6 <HAL_SMBUS_Init+0xba>
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6852      	ldr	r2, [r2, #4]
 8004ecc:	0052      	lsls	r2, r2, #1
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	fbb1 f2f2 	udiv	r2, r1, r2
 8004ed4:	e000      	b.n	8004ed8 <HAL_SMBUS_Init+0xbc>
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	6809      	ldr	r1, [r1, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6911      	ldr	r1, [r2, #16]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68d2      	ldr	r2, [r2, #12]
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	431bde83 	.word	0x431bde83

08004f88 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e041      	b.n	800505e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fd fa66 	bl	80024c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f001 f812 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e04e      	b.n	800511e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a23      	ldr	r2, [pc, #140]	; (800512c <HAL_TIM_Base_Start_IT+0xc4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d01d      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <HAL_TIM_Base_Start_IT+0xc8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_TIM_Base_Start_IT+0xcc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <HAL_TIM_Base_Start_IT+0xd0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_TIM_Base_Start_IT+0xd4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_TIM_Base_Start_IT+0xd8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIM_Base_Start_IT+0xdc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d111      	bne.n	800510c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d010      	beq.n	800511c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	e007      	b.n	800511c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800

08005148 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e041      	b.n	80051de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd f95e 	bl	8002430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f000 ff52 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start+0x24>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e022      	b.n	8005252 <HAL_TIM_PWM_Start+0x6a>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d109      	bne.n	8005226 <HAL_TIM_PWM_Start+0x3e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	bf14      	ite	ne
 800521e:	2301      	movne	r3, #1
 8005220:	2300      	moveq	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e015      	b.n	8005252 <HAL_TIM_PWM_Start+0x6a>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d109      	bne.n	8005240 <HAL_TIM_PWM_Start+0x58>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e008      	b.n	8005252 <HAL_TIM_PWM_Start+0x6a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e07c      	b.n	8005354 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Start+0x82>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005268:	e013      	b.n	8005292 <HAL_TIM_PWM_Start+0xaa>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Start+0x92>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	e00b      	b.n	8005292 <HAL_TIM_PWM_Start+0xaa>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d104      	bne.n	800528a <HAL_TIM_PWM_Start+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005288:	e003      	b.n	8005292 <HAL_TIM_PWM_Start+0xaa>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f001 fadc 	bl	8006858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a2d      	ldr	r2, [pc, #180]	; (800535c <HAL_TIM_PWM_Start+0x174>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIM_PWM_Start+0xcc>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <HAL_TIM_PWM_Start+0x178>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_PWM_Start+0xd0>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_TIM_PWM_Start+0xd2>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a22      	ldr	r2, [pc, #136]	; (800535c <HAL_TIM_PWM_Start+0x174>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d022      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d01d      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <HAL_TIM_PWM_Start+0x17c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d018      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <HAL_TIM_PWM_Start+0x180>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIM_PWM_Start+0x184>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_TIM_PWM_Start+0x178>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a18      	ldr	r2, [pc, #96]	; (8005370 <HAL_TIM_PWM_Start+0x188>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_TIM_PWM_Start+0x136>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIM_PWM_Start+0x18c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d111      	bne.n	8005342 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b06      	cmp	r3, #6
 800532e:	d010      	beq.n	8005352 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005340:	e007      	b.n	8005352 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40001800 	.word	0x40001800

08005378 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e022      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x72>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start_DMA+0x46>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e015      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x72>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start_DMA+0x60>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e008      	b.n	80053ea <HAL_TIM_PWM_Start_DMA+0x72>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
 80053f0:	e171      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_TIM_PWM_Start_DMA+0x94>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e022      	b.n	8005452 <HAL_TIM_PWM_Start_DMA+0xda>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d109      	bne.n	8005426 <HAL_TIM_PWM_Start_DMA+0xae>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e015      	b.n	8005452 <HAL_TIM_PWM_Start_DMA+0xda>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b08      	cmp	r3, #8
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start_DMA+0xc8>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e008      	b.n	8005452 <HAL_TIM_PWM_Start_DMA+0xda>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d024      	beq.n	80054a0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start_DMA+0xee>
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e137      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Start_DMA+0xfe>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005474:	e016      	b.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d104      	bne.n	8005486 <HAL_TIM_PWM_Start_DMA+0x10e>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005484:	e00e      	b.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d104      	bne.n	8005496 <HAL_TIM_PWM_Start_DMA+0x11e>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	e006      	b.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800549e:	e001      	b.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e118      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	f200 80ae 	bhi.w	8005608 <HAL_TIM_PWM_Start_DMA+0x290>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054e9 	.word	0x080054e9
 80054b8:	08005609 	.word	0x08005609
 80054bc:	08005609 	.word	0x08005609
 80054c0:	08005609 	.word	0x08005609
 80054c4:	08005531 	.word	0x08005531
 80054c8:	08005609 	.word	0x08005609
 80054cc:	08005609 	.word	0x08005609
 80054d0:	08005609 	.word	0x08005609
 80054d4:	08005579 	.word	0x08005579
 80054d8:	08005609 	.word	0x08005609
 80054dc:	08005609 	.word	0x08005609
 80054e0:	08005609 	.word	0x08005609
 80054e4:	080055c1 	.word	0x080055c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80054ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	4a7b      	ldr	r2, [pc, #492]	; (80056e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	4a7a      	ldr	r2, [pc, #488]	; (80056e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80054fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3334      	adds	r3, #52	; 0x34
 800550c:	461a      	mov	r2, r3
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	f7fe faa6 	bl	8003a60 <HAL_DMA_Start_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0db      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552c:	60da      	str	r2, [r3, #12]
      break;
 800552e:	e06e      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	4a6a      	ldr	r2, [pc, #424]	; (80056e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	4a69      	ldr	r2, [pc, #420]	; (80056e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	4a68      	ldr	r2, [pc, #416]	; (80056e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005546:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3338      	adds	r3, #56	; 0x38
 8005554:	461a      	mov	r2, r3
 8005556:	887b      	ldrh	r3, [r7, #2]
 8005558:	f7fe fa82 	bl	8003a60 <HAL_DMA_Start_IT>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0b7      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005574:	60da      	str	r2, [r3, #12]
      break;
 8005576:	e04a      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a58      	ldr	r2, [pc, #352]	; (80056e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800557e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800558e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	333c      	adds	r3, #60	; 0x3c
 800559c:	461a      	mov	r2, r3
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	f7fe fa5e 	bl	8003a60 <HAL_DMA_Start_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e093      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055bc:	60da      	str	r2, [r3, #12]
      break;
 80055be:	e026      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	4a46      	ldr	r2, [pc, #280]	; (80056e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80055c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	4a45      	ldr	r2, [pc, #276]	; (80056e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	4a44      	ldr	r2, [pc, #272]	; (80056e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80055d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3340      	adds	r3, #64	; 0x40
 80055e4:	461a      	mov	r2, r3
 80055e6:	887b      	ldrh	r3, [r7, #2]
 80055e8:	f7fe fa3a 	bl	8003a60 <HAL_DMA_Start_IT>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06f      	b.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005604:	60da      	str	r2, [r3, #12]
      break;
 8005606:	e002      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
      break;
 800560c:	bf00      	nop
  }

  if (status == HAL_OK)
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d15f      	bne.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2201      	movs	r2, #1
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f001 f91b 	bl	8006858 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a31      	ldr	r2, [pc, #196]	; (80056ec <HAL_TIM_PWM_Start_DMA+0x374>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIM_PWM_Start_DMA+0x2be>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800564e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a25      	ldr	r2, [pc, #148]	; (80056ec <HAL_TIM_PWM_Start_DMA+0x374>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d01d      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a21      	ldr	r2, [pc, #132]	; (80056f8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <HAL_TIM_PWM_Start_DMA+0x384>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1b      	ldr	r2, [pc, #108]	; (8005700 <HAL_TIM_PWM_Start_DMA+0x388>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d111      	bne.n	80056c4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d010      	beq.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	e007      	b.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	08005f21 	.word	0x08005f21
 80056e4:	08005fc9 	.word	0x08005fc9
 80056e8:	08005e8f 	.word	0x08005e8f
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40014000 	.word	0x40014000
 8005704:	40001800 	.word	0x40001800

08005708 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e041      	b.n	800579e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f839 	bl	80057a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f000 fc72 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d122      	bne.n	8005816 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d11b      	bne.n	8005816 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0202 	mvn.w	r2, #2
 80057e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb14 	bl	8005e2a <HAL_TIM_IC_CaptureCallback>
 8005802:	e005      	b.n	8005810 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb06 	bl	8005e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fb17 	bl	8005e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b04      	cmp	r3, #4
 8005822:	d122      	bne.n	800586a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b04      	cmp	r3, #4
 8005830:	d11b      	bne.n	800586a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f06f 0204 	mvn.w	r2, #4
 800583a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 faea 	bl	8005e2a <HAL_TIM_IC_CaptureCallback>
 8005856:	e005      	b.n	8005864 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fadc 	bl	8005e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 faed 	bl	8005e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d122      	bne.n	80058be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b08      	cmp	r3, #8
 8005884:	d11b      	bne.n	80058be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0208 	mvn.w	r2, #8
 800588e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2204      	movs	r2, #4
 8005894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fac0 	bl	8005e2a <HAL_TIM_IC_CaptureCallback>
 80058aa:	e005      	b.n	80058b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fab2 	bl	8005e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fac3 	bl	8005e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d122      	bne.n	8005912 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d11b      	bne.n	8005912 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f06f 0210 	mvn.w	r2, #16
 80058e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2208      	movs	r2, #8
 80058e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa96 	bl	8005e2a <HAL_TIM_IC_CaptureCallback>
 80058fe:	e005      	b.n	800590c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa88 	bl	8005e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa99 	bl	8005e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10e      	bne.n	800593e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0201 	mvn.w	r2, #1
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fc f92f 	bl	8001b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b80      	cmp	r3, #128	; 0x80
 800594a:	d10e      	bne.n	800596a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d107      	bne.n	800596a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f875 	bl	8006a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa68 	bl	8005e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d10e      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d107      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0220 	mvn.w	r2, #32
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f83f 	bl	8006a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e088      	b.n	8005afa <HAL_TIM_IC_ConfigChannel+0x130>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11b      	bne.n	8005a2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6819      	ldr	r1, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f000 fd63 	bl	80064d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 020c 	bic.w	r2, r2, #12
 8005a18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6999      	ldr	r1, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	619a      	str	r2, [r3, #24]
 8005a2c:	e060      	b.n	8005af0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d11c      	bne.n	8005a6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f000 fde7 	bl	8006616 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
 8005a6c:	e040      	b.n	8005af0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6819      	ldr	r1, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f000 fe34 	bl	80066f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 020c 	bic.w	r2, r2, #12
 8005a96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69d9      	ldr	r1, [r3, #28]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	61da      	str	r2, [r3, #28]
 8005aaa:	e021      	b.n	8005af0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d11c      	bne.n	8005aec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f000 fe51 	bl	8006768 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ad4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69d9      	ldr	r1, [r3, #28]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	021a      	lsls	r2, r3, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	61da      	str	r2, [r3, #28]
 8005aea:	e001      	b.n	8005af0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0ae      	b.n	8005c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	f200 809f 	bhi.w	8005c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005c71 	.word	0x08005c71
 8005b40:	08005c71 	.word	0x08005c71
 8005b44:	08005c71 	.word	0x08005c71
 8005b48:	08005bad 	.word	0x08005bad
 8005b4c:	08005c71 	.word	0x08005c71
 8005b50:	08005c71 	.word	0x08005c71
 8005b54:	08005c71 	.word	0x08005c71
 8005b58:	08005bef 	.word	0x08005bef
 8005b5c:	08005c71 	.word	0x08005c71
 8005b60:	08005c71 	.word	0x08005c71
 8005b64:	08005c71 	.word	0x08005c71
 8005b68:	08005c2f 	.word	0x08005c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fafc 	bl	8006170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0208 	orr.w	r2, r2, #8
 8005b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]
      break;
 8005baa:	e064      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fb4c 	bl	8006250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6999      	ldr	r1, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	021a      	lsls	r2, r3, #8
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	619a      	str	r2, [r3, #24]
      break;
 8005bec:	e043      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fba1 	bl	800633c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0208 	orr.w	r2, r2, #8
 8005c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0204 	bic.w	r2, r2, #4
 8005c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	61da      	str	r2, [r3, #28]
      break;
 8005c2c:	e023      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fbf5 	bl	8006424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69d9      	ldr	r1, [r3, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	021a      	lsls	r2, r3, #8
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	61da      	str	r2, [r3, #28]
      break;
 8005c6e:	e002      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
      break;
 8005c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e0b4      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x186>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cdc:	d03e      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0xd4>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	f200 8087 	bhi.w	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cea:	f000 8086 	beq.w	8005dfa <HAL_TIM_ConfigClockSource+0x172>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d87f      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b70      	cmp	r3, #112	; 0x70
 8005cf6:	d01a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0xa6>
 8005cf8:	2b70      	cmp	r3, #112	; 0x70
 8005cfa:	d87b      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b60      	cmp	r3, #96	; 0x60
 8005cfe:	d050      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d00:	2b60      	cmp	r3, #96	; 0x60
 8005d02:	d877      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b50      	cmp	r3, #80	; 0x50
 8005d06:	d03c      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xfa>
 8005d08:	2b50      	cmp	r3, #80	; 0x50
 8005d0a:	d873      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d058      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d86f      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b30      	cmp	r3, #48	; 0x30
 8005d16:	d064      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b30      	cmp	r3, #48	; 0x30
 8005d1a:	d86b      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d060      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d867      	bhi.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d05c      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d05a      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	e062      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6899      	ldr	r1, [r3, #8]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f000 fd6b 	bl	8006818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	609a      	str	r2, [r3, #8]
      break;
 8005d5a:	e04f      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f000 fd54 	bl	8006818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d7e:	609a      	str	r2, [r3, #8]
      break;
 8005d80:	e03c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fc12 	bl	80065b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2150      	movs	r1, #80	; 0x50
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fd21 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 8005da0:	e02c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fc6e 	bl	8006690 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2160      	movs	r1, #96	; 0x60
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fd11 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e01c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fbf2 	bl	80065b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2140      	movs	r1, #64	; 0x40
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fd01 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 8005de0:	e00c      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f000 fcf8 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 8005df2:	e003      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      break;
 8005df8:	e000      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d107      	bne.n	8005eb6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb4:	e02a      	b.n	8005f0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d107      	bne.n	8005ed0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ece:	e01d      	b.n	8005f0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d107      	bne.n	8005eea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2204      	movs	r2, #4
 8005ede:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	e010      	b.n	8005f0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d107      	bne.n	8005f04 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f02:	e003      	b.n	8005f0c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff ffb4 	bl	8005e7a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d10b      	bne.n	8005f50 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d136      	bne.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4e:	e031      	b.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d10b      	bne.n	8005f72 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d125      	bne.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f70:	e020      	b.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d10b      	bne.n	8005f94 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2204      	movs	r2, #4
 8005f80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d114      	bne.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f92:	e00f      	b.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d10a      	bne.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ff42 	bl	8005e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d103      	bne.n	8005fe8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	771a      	strb	r2, [r3, #28]
 8005fe6:	e019      	b.n	800601c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d103      	bne.n	8005ffa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	771a      	strb	r2, [r3, #28]
 8005ff8:	e010      	b.n	800601c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d103      	bne.n	800600c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2204      	movs	r2, #4
 8006008:	771a      	strb	r2, [r3, #28]
 800600a:	e007      	b.n	800601c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d102      	bne.n	800601c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2208      	movs	r2, #8
 800601a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff ff18 	bl	8005e52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a40      	ldr	r2, [pc, #256]	; (8006144 <TIM_Base_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d013      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d00f      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a3d      	ldr	r2, [pc, #244]	; (8006148 <TIM_Base_SetConfig+0x118>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00b      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a3c      	ldr	r2, [pc, #240]	; (800614c <TIM_Base_SetConfig+0x11c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d007      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a3b      	ldr	r2, [pc, #236]	; (8006150 <TIM_Base_SetConfig+0x120>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3a      	ldr	r2, [pc, #232]	; (8006154 <TIM_Base_SetConfig+0x124>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d108      	bne.n	8006082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <TIM_Base_SetConfig+0x114>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02b      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006090:	d027      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a2c      	ldr	r2, [pc, #176]	; (8006148 <TIM_Base_SetConfig+0x118>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d023      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a2b      	ldr	r2, [pc, #172]	; (800614c <TIM_Base_SetConfig+0x11c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01f      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2a      	ldr	r2, [pc, #168]	; (8006150 <TIM_Base_SetConfig+0x120>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01b      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a29      	ldr	r2, [pc, #164]	; (8006154 <TIM_Base_SetConfig+0x124>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d017      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a28      	ldr	r2, [pc, #160]	; (8006158 <TIM_Base_SetConfig+0x128>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a27      	ldr	r2, [pc, #156]	; (800615c <TIM_Base_SetConfig+0x12c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00f      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a26      	ldr	r2, [pc, #152]	; (8006160 <TIM_Base_SetConfig+0x130>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a25      	ldr	r2, [pc, #148]	; (8006164 <TIM_Base_SetConfig+0x134>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a24      	ldr	r2, [pc, #144]	; (8006168 <TIM_Base_SetConfig+0x138>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a23      	ldr	r2, [pc, #140]	; (800616c <TIM_Base_SetConfig+0x13c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <TIM_Base_SetConfig+0x114>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0xf8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <TIM_Base_SetConfig+0x124>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d103      	bne.n	8006130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	615a      	str	r2, [r3, #20]
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40010000 	.word	0x40010000
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	40000c00 	.word	0x40000c00
 8006154:	40010400 	.word	0x40010400
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800
 8006164:	40001800 	.word	0x40001800
 8006168:	40001c00 	.word	0x40001c00
 800616c:	40002000 	.word	0x40002000

08006170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0201 	bic.w	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 0302 	bic.w	r3, r3, #2
 80061b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a20      	ldr	r2, [pc, #128]	; (8006248 <TIM_OC1_SetConfig+0xd8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC1_SetConfig+0x64>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1f      	ldr	r2, [pc, #124]	; (800624c <TIM_OC1_SetConfig+0xdc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d10c      	bne.n	80061ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0308 	bic.w	r3, r3, #8
 80061da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <TIM_OC1_SetConfig+0xd8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC1_SetConfig+0x8e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <TIM_OC1_SetConfig+0xdc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d111      	bne.n	8006222 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800620c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	621a      	str	r2, [r3, #32]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400

08006250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0210 	bic.w	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0320 	bic.w	r3, r3, #32
 800629a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <TIM_OC2_SetConfig+0xe4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC2_SetConfig+0x68>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a21      	ldr	r2, [pc, #132]	; (8006338 <TIM_OC2_SetConfig+0xe8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d10d      	bne.n	80062d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a17      	ldr	r2, [pc, #92]	; (8006334 <TIM_OC2_SetConfig+0xe4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC2_SetConfig+0x94>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a16      	ldr	r2, [pc, #88]	; (8006338 <TIM_OC2_SetConfig+0xe8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d113      	bne.n	800630c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40010000 	.word	0x40010000
 8006338:	40010400 	.word	0x40010400

0800633c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a21      	ldr	r2, [pc, #132]	; (800641c <TIM_OC3_SetConfig+0xe0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_OC3_SetConfig+0x66>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a20      	ldr	r2, [pc, #128]	; (8006420 <TIM_OC3_SetConfig+0xe4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10d      	bne.n	80063be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <TIM_OC3_SetConfig+0xe0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC3_SetConfig+0x92>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a15      	ldr	r2, [pc, #84]	; (8006420 <TIM_OC3_SetConfig+0xe4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d113      	bne.n	80063f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400

08006424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800646e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <TIM_OC4_SetConfig+0xa4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC4_SetConfig+0x68>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a11      	ldr	r2, [pc, #68]	; (80064cc <TIM_OC4_SetConfig+0xa8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d109      	bne.n	80064a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	019b      	lsls	r3, r3, #6
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40010000 	.word	0x40010000
 80064cc:	40010400 	.word	0x40010400

080064d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f023 0201 	bic.w	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a28      	ldr	r2, [pc, #160]	; (800659c <TIM_TI1_SetConfig+0xcc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01b      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d017      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <TIM_TI1_SetConfig+0xd0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <TIM_TI1_SetConfig+0xd4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a23      	ldr	r2, [pc, #140]	; (80065a8 <TIM_TI1_SetConfig+0xd8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a22      	ldr	r2, [pc, #136]	; (80065ac <TIM_TI1_SetConfig+0xdc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <TIM_TI1_SetConfig+0xe0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_TI1_SetConfig+0x66>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a20      	ldr	r2, [pc, #128]	; (80065b4 <TIM_TI1_SetConfig+0xe4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d101      	bne.n	800653a <TIM_TI1_SetConfig+0x6a>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <TIM_TI1_SetConfig+0x6c>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e003      	b.n	800655a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	b2db      	uxtb	r3, r3
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f023 030a 	bic.w	r3, r3, #10
 8006574:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f003 030a 	and.w	r3, r3, #10
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40001800 	.word	0x40001800

080065b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f023 0201 	bic.w	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f023 030a 	bic.w	r3, r3, #10
 80065f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	621a      	str	r2, [r3, #32]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006616:	b480      	push	{r7}
 8006618:	b087      	sub	sp, #28
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f023 0210 	bic.w	r2, r3, #16
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	031b      	lsls	r3, r3, #12
 800665a:	b29b      	uxth	r3, r3
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006668:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	621a      	str	r2, [r3, #32]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f023 0210 	bic.w	r2, r3, #16
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	031b      	lsls	r3, r3, #12
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	621a      	str	r2, [r3, #32]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	b2db      	uxtb	r3, r3
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006740:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006794:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	031b      	lsls	r3, r3, #12
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	031b      	lsls	r3, r3, #12
 80067c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	f043 0307 	orr.w	r3, r3, #7
 8006804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	021a      	lsls	r2, r3, #8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	431a      	orrs	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	609a      	str	r2, [r3, #8]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	2201      	movs	r2, #1
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	43db      	mvns	r3, r3
 800687a:	401a      	ands	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a1a      	ldr	r2, [r3, #32]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	fa01 f303 	lsl.w	r3, r1, r3
 8006890:	431a      	orrs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e05a      	b.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a21      	ldr	r2, [pc, #132]	; (8006980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d01d      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1b      	ldr	r2, [pc, #108]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1a      	ldr	r2, [pc, #104]	; (800698c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a18      	ldr	r2, [pc, #96]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a17      	ldr	r2, [pc, #92]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a15      	ldr	r2, [pc, #84]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d10c      	bne.n	8006960 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800694c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	4313      	orrs	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40010400 	.word	0x40010400
 8006994:	40014000 	.word	0x40014000
 8006998:	40001800 	.word	0x40001800

0800699c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e03d      	b.n	8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e03f      	b.n	8006afa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fb fe60 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	; 0x24
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 ff35 	bl	800791c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b08a      	sub	sp, #40	; 0x28
 8006b06:	af02      	add	r7, sp, #8
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d17c      	bne.n	8006c1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_UART_Transmit+0x2c>
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e075      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_UART_Transmit+0x3e>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e06e      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2221      	movs	r2, #33	; 0x21
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b56:	f7fb ff1d 	bl	8002994 <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	88fa      	ldrh	r2, [r7, #6]
 8006b66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	d108      	bne.n	8006b84 <HAL_UART_Transmit+0x82>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	e003      	b.n	8006b8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b94:	e02a      	b.n	8006bec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fc4c 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e036      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	3302      	adds	r3, #2
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e007      	b.n	8006bde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1cf      	bne.n	8006b96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2140      	movs	r1, #64	; 0x40
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fc1c 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e006      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e000      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	4613      	mov	r3, r2
 8006c32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d11d      	bne.n	8006c7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Receive_IT+0x26>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e016      	b.n	8006c7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_UART_Receive_IT+0x38>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e00f      	b.n	8006c7e <HAL_UART_Receive_IT+0x58>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fc51 	bl	800751a <UART_Start_Receive_IT>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	e000      	b.n	8006c7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c7c:	2302      	movs	r3, #2
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08c      	sub	sp, #48	; 0x30
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d165      	bne.n	8006d6e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_UART_Transmit_DMA+0x26>
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e05e      	b.n	8006d70 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Transmit_DMA+0x38>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e057      	b.n	8006d70 <HAL_UART_Transmit_DMA+0xe8>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	88fa      	ldrh	r2, [r7, #6]
 8006cd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2221      	movs	r2, #33	; 0x21
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cec:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <HAL_UART_Transmit_DMA+0xf0>)
 8006cee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf4:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <HAL_UART_Transmit_DMA+0xf4>)
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	4a20      	ldr	r2, [pc, #128]	; (8006d80 <HAL_UART_Transmit_DMA+0xf8>)
 8006cfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d04:	2200      	movs	r2, #0
 8006d06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006d08:	f107 0308 	add.w	r3, r7, #8
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	6819      	ldr	r1, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	f7fc fe9e 	bl	8003a60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d2c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	617b      	str	r3, [r7, #20]
   return(result);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d56:	627a      	str	r2, [r7, #36]	; 0x24
 8006d58:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6a39      	ldr	r1, [r7, #32]
 8006d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006d6e:	2302      	movs	r3, #2
  }
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3730      	adds	r7, #48	; 0x30
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	080072f5 	.word	0x080072f5
 8006d7c:	0800738f 	.word	0x0800738f
 8006d80:	080073ab 	.word	0x080073ab

08006d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b0ba      	sub	sp, #232	; 0xe8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10f      	bne.n	8006dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <HAL_UART_IRQHandler+0x66>
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fcde 	bl	80077a4 <UART_Receive_IT>
      return;
 8006de8:	e256      	b.n	8007298 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 80de 	beq.w	8006fb0 <HAL_UART_IRQHandler+0x22c>
 8006df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 80d1 	beq.w	8006fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_UART_IRQHandler+0xae>
 8006e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	f043 0201 	orr.w	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <HAL_UART_IRQHandler+0xd2>
 8006e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f043 0202 	orr.w	r2, r3, #2
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <HAL_UART_IRQHandler+0xf6>
 8006e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f043 0204 	orr.w	r2, r3, #4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d011      	beq.n	8006eaa <HAL_UART_IRQHandler+0x126>
 8006e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d105      	bne.n	8006e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f043 0208 	orr.w	r2, r3, #8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 81ed 	beq.w	800728e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x14e>
 8006ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fc69 	bl	80077a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <HAL_UART_IRQHandler+0x17a>
 8006ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d04f      	beq.n	8006f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fb71 	bl	80075e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d141      	bne.n	8006f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3314      	adds	r3, #20
 8006f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1d9      	bne.n	8006f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d013      	beq.n	8006f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	4a7d      	ldr	r2, [pc, #500]	; (8007160 <HAL_UART_IRQHandler+0x3dc>)
 8006f6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fc fe3c 	bl	8003bf0 <HAL_DMA_Abort_IT>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8c:	e00e      	b.n	8006fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f99a 	bl	80072c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f94:	e00a      	b.n	8006fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f996 	bl	80072c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9c:	e006      	b.n	8006fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f992 	bl	80072c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006faa:	e170      	b.n	800728e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fac:	bf00      	nop
    return;
 8006fae:	e16e      	b.n	800728e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	f040 814a 	bne.w	800724e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8143 	beq.w	800724e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 813c 	beq.w	800724e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	f040 80b4 	bne.w	8007164 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8140 	beq.w	8007292 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800701a:	429a      	cmp	r2, r3
 800701c:	f080 8139 	bcs.w	8007292 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007026:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	f000 8088 	beq.w	8007146 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800704c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800706e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800707a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1d9      	bne.n	8007036 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3314      	adds	r3, #20
 80070a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e1      	bne.n	8007082 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3314      	adds	r3, #20
 80070c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3314      	adds	r3, #20
 80070de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e3      	bne.n	80070be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	330c      	adds	r3, #12
 800710a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007116:	f023 0310 	bic.w	r3, r3, #16
 800711a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	330c      	adds	r3, #12
 8007124:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007128:	65ba      	str	r2, [r7, #88]	; 0x58
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800712e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e3      	bne.n	8007104 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	4618      	mov	r0, r3
 8007142:	f7fc fce5 	bl	8003b10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800714e:	b29b      	uxth	r3, r3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	b29b      	uxth	r3, r3
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f8c0 	bl	80072dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800715c:	e099      	b.n	8007292 <HAL_UART_IRQHandler+0x50e>
 800715e:	bf00      	nop
 8007160:	080076ad 	.word	0x080076ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800716c:	b29b      	uxth	r3, r3
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 808b 	beq.w	8007296 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8086 	beq.w	8007296 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80071ae:	647a      	str	r2, [r7, #68]	; 0x44
 80071b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e3      	bne.n	800718a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	623b      	str	r3, [r7, #32]
   return(result);
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3314      	adds	r3, #20
 80071e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071e6:	633a      	str	r2, [r7, #48]	; 0x30
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e3      	bne.n	80071c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	60fb      	str	r3, [r7, #12]
   return(result);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0310 	bic.w	r3, r3, #16
 800721e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800722c:	61fa      	str	r2, [r7, #28]
 800722e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	69b9      	ldr	r1, [r7, #24]
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	617b      	str	r3, [r7, #20]
   return(result);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e3      	bne.n	8007208 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f848 	bl	80072dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800724c:	e023      	b.n	8007296 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <HAL_UART_IRQHandler+0x4ea>
 800725a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa34 	bl	80076d4 <UART_Transmit_IT>
    return;
 800726c:	e014      	b.n	8007298 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800726e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <HAL_UART_IRQHandler+0x514>
 800727a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa74 	bl	8007774 <UART_EndTransmit_IT>
    return;
 800728c:	e004      	b.n	8007298 <HAL_UART_IRQHandler+0x514>
    return;
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <HAL_UART_IRQHandler+0x514>
      return;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <HAL_UART_IRQHandler+0x514>
      return;
 8007296:	bf00      	nop
  }
}
 8007298:	37e8      	adds	r7, #232	; 0xe8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b090      	sub	sp, #64	; 0x40
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d137      	bne.n	8007380 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007312:	2200      	movs	r2, #0
 8007314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3314      	adds	r3, #20
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	623b      	str	r3, [r7, #32]
   return(result);
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732c:	63bb      	str	r3, [r7, #56]	; 0x38
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3314      	adds	r3, #20
 8007334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007336:	633a      	str	r2, [r7, #48]	; 0x30
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e5      	bne.n	8007316 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	60fb      	str	r3, [r7, #12]
   return(result);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800736a:	61fa      	str	r2, [r7, #28]
 800736c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	69b9      	ldr	r1, [r7, #24]
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	617b      	str	r3, [r7, #20]
   return(result);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e5      	bne.n	800734a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800737e:	e002      	b.n	8007386 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007380:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007382:	f7ff ff8d 	bl	80072a0 <HAL_UART_TxCpltCallback>
}
 8007386:	bf00      	nop
 8007388:	3740      	adds	r7, #64	; 0x40
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff ff89 	bl	80072b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	bf0c      	ite	eq
 80073ca:	2301      	moveq	r3, #1
 80073cc:	2300      	movne	r3, #0
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b21      	cmp	r3, #33	; 0x21
 80073dc:	d108      	bne.n	80073f0 <UART_DMAError+0x46>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073ea:	68b8      	ldr	r0, [r7, #8]
 80073ec:	f000 f8d3 	bl	8007596 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b40      	cmp	r3, #64	; 0x40
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b22      	cmp	r3, #34	; 0x22
 8007410:	d108      	bne.n	8007424 <UART_DMAError+0x7a>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800741e:	68b8      	ldr	r0, [r7, #8]
 8007420:	f000 f8e1 	bl	80075e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	f043 0210 	orr.w	r2, r3, #16
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007430:	68b8      	ldr	r0, [r7, #8]
 8007432:	f7ff ff49 	bl	80072c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b090      	sub	sp, #64	; 0x40
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744e:	e050      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d04c      	beq.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <UART_WaitOnFlagUntilTimeout+0x30>
 800745e:	f7fb fa99 	bl	8002994 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746a:	429a      	cmp	r2, r3
 800746c:	d241      	bcs.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	330c      	adds	r3, #12
 800748c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800748e:	637a      	str	r2, [r7, #52]	; 0x34
 8007490:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e5      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	613b      	str	r3, [r7, #16]
   return(result);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c2:	623a      	str	r2, [r7, #32]
 80074c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	69f9      	ldr	r1, [r7, #28]
 80074c8:	6a3a      	ldr	r2, [r7, #32]
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e5      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e00f      	b.n	8007512 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4013      	ands	r3, r2
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	429a      	cmp	r2, r3
 800750e:	d09f      	beq.n	8007450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3740      	adds	r7, #64	; 0x40
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	4613      	mov	r3, r2
 8007526:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	88fa      	ldrh	r2, [r7, #6]
 8007532:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	88fa      	ldrh	r2, [r7, #6]
 8007538:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2222      	movs	r2, #34	; 0x22
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007566:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0220 	orr.w	r2, r2, #32
 8007586:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007596:	b480      	push	{r7}
 8007598:	b089      	sub	sp, #36	; 0x24
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	61ba      	str	r2, [r7, #24]
 80075c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6979      	ldr	r1, [r7, #20]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	613b      	str	r3, [r7, #16]
   return(result);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e5      	bne.n	800759e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80075da:	bf00      	nop
 80075dc:	3724      	adds	r7, #36	; 0x24
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b095      	sub	sp, #84	; 0x54
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800760e:	643a      	str	r2, [r7, #64]	; 0x40
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e5      	bne.n	80075ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	61fb      	str	r3, [r7, #28]
   return(result);
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3314      	adds	r3, #20
 8007640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e5      	bne.n	8007622 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	2b01      	cmp	r3, #1
 800765c:	d119      	bne.n	8007692 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	60bb      	str	r3, [r7, #8]
   return(result);
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0310 	bic.w	r3, r3, #16
 8007674:	647b      	str	r3, [r7, #68]	; 0x44
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800767e:	61ba      	str	r2, [r7, #24]
 8007680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6979      	ldr	r1, [r7, #20]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	613b      	str	r3, [r7, #16]
   return(result);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e5      	bne.n	800765e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076a0:	bf00      	nop
 80076a2:	3754      	adds	r7, #84	; 0x54
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fdfe 	bl	80072c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b21      	cmp	r3, #33	; 0x21
 80076e6:	d13e      	bne.n	8007766 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f0:	d114      	bne.n	800771c <UART_Transmit_IT+0x48>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d110      	bne.n	800771c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	1c9a      	adds	r2, r3, #2
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]
 800771a:	e008      	b.n	800772e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	1c59      	adds	r1, r3, #1
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6211      	str	r1, [r2, #32]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b29b      	uxth	r3, r3
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	4619      	mov	r1, r3
 800773c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10f      	bne.n	8007762 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007750:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007760:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff fd83 	bl	80072a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08c      	sub	sp, #48	; 0x30
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b22      	cmp	r3, #34	; 0x22
 80077b6:	f040 80ab 	bne.w	8007910 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c2:	d117      	bne.n	80077f4 <UART_Receive_IT+0x50>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d113      	bne.n	80077f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	1c9a      	adds	r2, r3, #2
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	629a      	str	r2, [r3, #40]	; 0x28
 80077f2:	e026      	b.n	8007842 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007806:	d007      	beq.n	8007818 <UART_Receive_IT+0x74>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <UART_Receive_IT+0x82>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b2da      	uxtb	r2, r3
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	e008      	b.n	8007838 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007832:	b2da      	uxtb	r2, r3
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29b      	uxth	r3, r3
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	4619      	mov	r1, r3
 8007850:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007852:	2b00      	cmp	r3, #0
 8007854:	d15a      	bne.n	800790c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0220 	bic.w	r2, r2, #32
 8007864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0201 	bic.w	r2, r2, #1
 8007884:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	2b01      	cmp	r3, #1
 8007894:	d135      	bne.n	8007902 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	613b      	str	r3, [r7, #16]
   return(result);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f023 0310 	bic.w	r3, r3, #16
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078bc:	623a      	str	r2, [r7, #32]
 80078be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	69f9      	ldr	r1, [r7, #28]
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d10a      	bne.n	80078f4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fcee 	bl	80072dc <HAL_UARTEx_RxEventCallback>
 8007900:	e002      	b.n	8007908 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fa f962 	bl	8001bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e002      	b.n	8007912 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	e000      	b.n	8007912 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007910:	2302      	movs	r3, #2
  }
}
 8007912:	4618      	mov	r0, r3
 8007914:	3730      	adds	r7, #48	; 0x30
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800791c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007920:	b0c0      	sub	sp, #256	; 0x100
 8007922:	af00      	add	r7, sp, #0
 8007924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	68d9      	ldr	r1, [r3, #12]
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	ea40 0301 	orr.w	r3, r0, r1
 8007944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	431a      	orrs	r2, r3
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	431a      	orrs	r2, r3
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007974:	f021 010c 	bic.w	r1, r1, #12
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007982:	430b      	orrs	r3, r1
 8007984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007996:	6999      	ldr	r1, [r3, #24]
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	ea40 0301 	orr.w	r3, r0, r1
 80079a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b8f      	ldr	r3, [pc, #572]	; (8007be8 <UART_SetConfig+0x2cc>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d005      	beq.n	80079bc <UART_SetConfig+0xa0>
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b8d      	ldr	r3, [pc, #564]	; (8007bec <UART_SetConfig+0x2d0>)
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d104      	bne.n	80079c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079bc:	f7fd f9e8 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 80079c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079c4:	e003      	b.n	80079ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079c6:	f7fd f9cf 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80079ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d8:	f040 810c 	bne.w	8007bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079ee:	4622      	mov	r2, r4
 80079f0:	462b      	mov	r3, r5
 80079f2:	1891      	adds	r1, r2, r2
 80079f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80079f6:	415b      	adcs	r3, r3
 80079f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079fe:	4621      	mov	r1, r4
 8007a00:	eb12 0801 	adds.w	r8, r2, r1
 8007a04:	4629      	mov	r1, r5
 8007a06:	eb43 0901 	adc.w	r9, r3, r1
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a1e:	4690      	mov	r8, r2
 8007a20:	4699      	mov	r9, r3
 8007a22:	4623      	mov	r3, r4
 8007a24:	eb18 0303 	adds.w	r3, r8, r3
 8007a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	eb49 0303 	adc.w	r3, r9, r3
 8007a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	18db      	adds	r3, r3, r3
 8007a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a50:	4613      	mov	r3, r2
 8007a52:	eb42 0303 	adc.w	r3, r2, r3
 8007a56:	657b      	str	r3, [r7, #84]	; 0x54
 8007a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a60:	f7f8 fc06 	bl	8000270 <__aeabi_uldivmod>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4b61      	ldr	r3, [pc, #388]	; (8007bf0 <UART_SetConfig+0x2d4>)
 8007a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	011c      	lsls	r4, r3, #4
 8007a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	1891      	adds	r1, r2, r2
 8007a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a8c:	415b      	adcs	r3, r3
 8007a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a94:	4641      	mov	r1, r8
 8007a96:	eb12 0a01 	adds.w	sl, r2, r1
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab4:	4692      	mov	sl, r2
 8007ab6:	469b      	mov	fp, r3
 8007ab8:	4643      	mov	r3, r8
 8007aba:	eb1a 0303 	adds.w	r3, sl, r3
 8007abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	18db      	adds	r3, r3, r3
 8007ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	eb42 0303 	adc.w	r3, r2, r3
 8007aec:	647b      	str	r3, [r7, #68]	; 0x44
 8007aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007af6:	f7f8 fbbb 	bl	8000270 <__aeabi_uldivmod>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <UART_SetConfig+0x2d4>)
 8007b02:	fba3 2301 	umull	r2, r3, r3, r1
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	2264      	movs	r2, #100	; 0x64
 8007b0a:	fb02 f303 	mul.w	r3, r2, r3
 8007b0e:	1acb      	subs	r3, r1, r3
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b16:	4b36      	ldr	r3, [pc, #216]	; (8007bf0 <UART_SetConfig+0x2d4>)
 8007b18:	fba3 2302 	umull	r2, r3, r3, r2
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b24:	441c      	add	r4, r3
 8007b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	1891      	adds	r1, r2, r2
 8007b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b40:	415b      	adcs	r3, r3
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b48:	4641      	mov	r1, r8
 8007b4a:	1851      	adds	r1, r2, r1
 8007b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8007b4e:	4649      	mov	r1, r9
 8007b50:	414b      	adcs	r3, r1
 8007b52:	637b      	str	r3, [r7, #52]	; 0x34
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b60:	4659      	mov	r1, fp
 8007b62:	00cb      	lsls	r3, r1, #3
 8007b64:	4651      	mov	r1, sl
 8007b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6a:	4651      	mov	r1, sl
 8007b6c:	00ca      	lsls	r2, r1, #3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	4642      	mov	r2, r8
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	460a      	mov	r2, r1
 8007b80:	eb42 0303 	adc.w	r3, r2, r3
 8007b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	18db      	adds	r3, r3, r3
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	eb42 0303 	adc.w	r3, r2, r3
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bb2:	f7f8 fb5d 	bl	8000270 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <UART_SetConfig+0x2d4>)
 8007bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	2164      	movs	r1, #100	; 0x64
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	3332      	adds	r3, #50	; 0x32
 8007bce:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <UART_SetConfig+0x2d4>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f003 0207 	and.w	r2, r3, #7
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4422      	add	r2, r4
 8007be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007be4:	e105      	b.n	8007df2 <UART_SetConfig+0x4d6>
 8007be6:	bf00      	nop
 8007be8:	40011000 	.word	0x40011000
 8007bec:	40011400 	.word	0x40011400
 8007bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c06:	4642      	mov	r2, r8
 8007c08:	464b      	mov	r3, r9
 8007c0a:	1891      	adds	r1, r2, r2
 8007c0c:	6239      	str	r1, [r7, #32]
 8007c0e:	415b      	adcs	r3, r3
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
 8007c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c16:	4641      	mov	r1, r8
 8007c18:	1854      	adds	r4, r2, r1
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	eb43 0501 	adc.w	r5, r3, r1
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	00eb      	lsls	r3, r5, #3
 8007c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c2e:	00e2      	lsls	r2, r4, #3
 8007c30:	4614      	mov	r4, r2
 8007c32:	461d      	mov	r5, r3
 8007c34:	4643      	mov	r3, r8
 8007c36:	18e3      	adds	r3, r4, r3
 8007c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	eb45 0303 	adc.w	r3, r5, r3
 8007c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c62:	4629      	mov	r1, r5
 8007c64:	008b      	lsls	r3, r1, #2
 8007c66:	4621      	mov	r1, r4
 8007c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	008a      	lsls	r2, r1, #2
 8007c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c74:	f7f8 fafc 	bl	8000270 <__aeabi_uldivmod>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4b60      	ldr	r3, [pc, #384]	; (8007e00 <UART_SetConfig+0x4e4>)
 8007c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	011c      	lsls	r4, r3, #4
 8007c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	1891      	adds	r1, r2, r2
 8007c9e:	61b9      	str	r1, [r7, #24]
 8007ca0:	415b      	adcs	r3, r3
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ca8:	4641      	mov	r1, r8
 8007caa:	1851      	adds	r1, r2, r1
 8007cac:	6139      	str	r1, [r7, #16]
 8007cae:	4649      	mov	r1, r9
 8007cb0:	414b      	adcs	r3, r1
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	00cb      	lsls	r3, r1, #3
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cca:	4651      	mov	r1, sl
 8007ccc:	00ca      	lsls	r2, r1, #3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cdc:	464b      	mov	r3, r9
 8007cde:	460a      	mov	r2, r1
 8007ce0:	eb42 0303 	adc.w	r3, r2, r3
 8007ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d00:	4649      	mov	r1, r9
 8007d02:	008b      	lsls	r3, r1, #2
 8007d04:	4641      	mov	r1, r8
 8007d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	008a      	lsls	r2, r1, #2
 8007d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d12:	f7f8 faad 	bl	8000270 <__aeabi_uldivmod>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <UART_SetConfig+0x4e4>)
 8007d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d20:	095b      	lsrs	r3, r3, #5
 8007d22:	2164      	movs	r1, #100	; 0x64
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	3332      	adds	r3, #50	; 0x32
 8007d2e:	4a34      	ldr	r2, [pc, #208]	; (8007e00 <UART_SetConfig+0x4e4>)
 8007d30:	fba2 2303 	umull	r2, r3, r2, r3
 8007d34:	095b      	lsrs	r3, r3, #5
 8007d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d3a:	441c      	add	r4, r3
 8007d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d40:	2200      	movs	r2, #0
 8007d42:	673b      	str	r3, [r7, #112]	; 0x70
 8007d44:	677a      	str	r2, [r7, #116]	; 0x74
 8007d46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	464b      	mov	r3, r9
 8007d4e:	1891      	adds	r1, r2, r2
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	415b      	adcs	r3, r3
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d5a:	4641      	mov	r1, r8
 8007d5c:	1851      	adds	r1, r2, r1
 8007d5e:	6039      	str	r1, [r7, #0]
 8007d60:	4649      	mov	r1, r9
 8007d62:	414b      	adcs	r3, r1
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d72:	4659      	mov	r1, fp
 8007d74:	00cb      	lsls	r3, r1, #3
 8007d76:	4651      	mov	r1, sl
 8007d78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d7c:	4651      	mov	r1, sl
 8007d7e:	00ca      	lsls	r2, r1, #3
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	4603      	mov	r3, r0
 8007d86:	4642      	mov	r2, r8
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	460a      	mov	r2, r1
 8007d90:	eb42 0303 	adc.w	r3, r2, r3
 8007d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007da0:	667a      	str	r2, [r7, #100]	; 0x64
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dae:	4649      	mov	r1, r9
 8007db0:	008b      	lsls	r3, r1, #2
 8007db2:	4641      	mov	r1, r8
 8007db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007db8:	4641      	mov	r1, r8
 8007dba:	008a      	lsls	r2, r1, #2
 8007dbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dc0:	f7f8 fa56 	bl	8000270 <__aeabi_uldivmod>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <UART_SetConfig+0x4e4>)
 8007dca:	fba3 1302 	umull	r1, r3, r3, r2
 8007dce:	095b      	lsrs	r3, r3, #5
 8007dd0:	2164      	movs	r1, #100	; 0x64
 8007dd2:	fb01 f303 	mul.w	r3, r1, r3
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	3332      	adds	r3, #50	; 0x32
 8007ddc:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <UART_SetConfig+0x4e4>)
 8007dde:	fba2 2303 	umull	r2, r3, r2, r3
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	f003 020f 	and.w	r2, r3, #15
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4422      	add	r2, r4
 8007df0:	609a      	str	r2, [r3, #8]
}
 8007df2:	bf00      	nop
 8007df4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dfe:	bf00      	nop
 8007e00:	51eb851f 	.word	0x51eb851f

08007e04 <__NVIC_SetPriority>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	6039      	str	r1, [r7, #0]
 8007e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	db0a      	blt.n	8007e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	490c      	ldr	r1, [pc, #48]	; (8007e50 <__NVIC_SetPriority+0x4c>)
 8007e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e22:	0112      	lsls	r2, r2, #4
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	440b      	add	r3, r1
 8007e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e2c:	e00a      	b.n	8007e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4908      	ldr	r1, [pc, #32]	; (8007e54 <__NVIC_SetPriority+0x50>)
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	0112      	lsls	r2, r2, #4
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	440b      	add	r3, r1
 8007e42:	761a      	strb	r2, [r3, #24]
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	e000e100 	.word	0xe000e100
 8007e54:	e000ed00 	.word	0xe000ed00

08007e58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <SysTick_Handler+0x1c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e60:	f002 f844 	bl	8009eec <xTaskGetSchedulerState>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d001      	beq.n	8007e6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e6a:	f003 f82d 	bl	800aec8 <xPortSysTickHandler>
  }
}
 8007e6e:	bf00      	nop
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000e010 	.word	0xe000e010

08007e78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f06f 0004 	mvn.w	r0, #4
 8007e82:	f7ff ffbf 	bl	8007e04 <__NVIC_SetPriority>
#endif
}
 8007e86:	bf00      	nop
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e92:	f3ef 8305 	mrs	r3, IPSR
 8007e96:	603b      	str	r3, [r7, #0]
  return(result);
 8007e98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e9e:	f06f 0305 	mvn.w	r3, #5
 8007ea2:	607b      	str	r3, [r7, #4]
 8007ea4:	e00c      	b.n	8007ec0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <osKernelInitialize+0x44>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d105      	bne.n	8007eba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007eae:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <osKernelInitialize+0x44>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	607b      	str	r3, [r7, #4]
 8007eb8:	e002      	b.n	8007ec0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ec0:	687b      	ldr	r3, [r7, #4]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	200008f8 	.word	0x200008f8

08007ed4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eda:	f3ef 8305 	mrs	r3, IPSR
 8007ede:	603b      	str	r3, [r7, #0]
  return(result);
 8007ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ee6:	f06f 0305 	mvn.w	r3, #5
 8007eea:	607b      	str	r3, [r7, #4]
 8007eec:	e010      	b.n	8007f10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <osKernelStart+0x48>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d109      	bne.n	8007f0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ef6:	f7ff ffbf 	bl	8007e78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007efa:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <osKernelStart+0x48>)
 8007efc:	2202      	movs	r2, #2
 8007efe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f00:	f001 fb86 	bl	8009610 <vTaskStartScheduler>
      stat = osOK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	e002      	b.n	8007f10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f10:	687b      	ldr	r3, [r7, #4]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	200008f8 	.word	0x200008f8

08007f20 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f26:	f3ef 8305 	mrs	r3, IPSR
 8007f2a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f2c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007f32:	f001 fc99 	bl	8009868 <xTaskGetTickCountFromISR>
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	e002      	b.n	8007f40 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007f3a:	f001 fc85 	bl	8009848 <xTaskGetTickCount>
 8007f3e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007f40:	687b      	ldr	r3, [r7, #4]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b08e      	sub	sp, #56	; 0x38
 8007f4e:	af04      	add	r7, sp, #16
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5a:	f3ef 8305 	mrs	r3, IPSR
 8007f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8007f60:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d17e      	bne.n	8008064 <osThreadNew+0x11a>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d07b      	beq.n	8008064 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f70:	2318      	movs	r3, #24
 8007f72:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d045      	beq.n	8008010 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <osThreadNew+0x48>
        name = attr->name;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <osThreadNew+0x6e>
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2b38      	cmp	r3, #56	; 0x38
 8007faa:	d805      	bhi.n	8007fb8 <osThreadNew+0x6e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <osThreadNew+0x72>
        return (NULL);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e054      	b.n	8008066 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	089b      	lsrs	r3, r3, #2
 8007fca:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <osThreadNew+0xa8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2bbb      	cmp	r3, #187	; 0xbb
 8007fda:	d90a      	bls.n	8007ff2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d006      	beq.n	8007ff2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <osThreadNew+0xa8>
        mem = 1;
 8007fec:	2301      	movs	r3, #1
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	e010      	b.n	8008014 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10c      	bne.n	8008014 <osThreadNew+0xca>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d108      	bne.n	8008014 <osThreadNew+0xca>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d104      	bne.n	8008014 <osThreadNew+0xca>
          mem = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	e001      	b.n	8008014 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d110      	bne.n	800803c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008022:	9202      	str	r2, [sp, #8]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f001 f883 	bl	800913c <xTaskCreateStatic>
 8008036:	4603      	mov	r3, r0
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	e013      	b.n	8008064 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d110      	bne.n	8008064 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	b29a      	uxth	r2, r3
 8008046:	f107 0310 	add.w	r3, r7, #16
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f001 f8ce 	bl	80091f6 <xTaskCreate>
 800805a:	4603      	mov	r3, r0
 800805c:	2b01      	cmp	r3, #1
 800805e:	d001      	beq.n	8008064 <osThreadNew+0x11a>
            hTask = NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008064:	693b      	ldr	r3, [r7, #16]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3728      	adds	r7, #40	; 0x28
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <osThreadFlagsSet+0x1a>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	da03      	bge.n	8008092 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800808a:	f06f 0303 	mvn.w	r3, #3
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e035      	b.n	80080fe <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008092:	f04f 33ff 	mov.w	r3, #4294967295
 8008096:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008098:	f3ef 8305 	mrs	r3, IPSR
 800809c:	613b      	str	r3, [r7, #16]
  return(result);
 800809e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01f      	beq.n	80080e4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	2300      	movs	r3, #0
 80080b0:	2201      	movs	r2, #1
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6978      	ldr	r0, [r7, #20]
 80080b6:	f002 f8c3 	bl	800a240 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80080ba:	f107 030c 	add.w	r3, r7, #12
 80080be:	2200      	movs	r2, #0
 80080c0:	9200      	str	r2, [sp, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	2100      	movs	r1, #0
 80080c6:	6978      	ldr	r0, [r7, #20]
 80080c8:	f002 f8ba 	bl	800a240 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d015      	beq.n	80080fe <osThreadFlagsSet+0x8e>
 80080d2:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <osThreadFlagsSet+0x98>)
 80080d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	e00c      	b.n	80080fe <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80080e4:	2300      	movs	r3, #0
 80080e6:	2201      	movs	r2, #1
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6978      	ldr	r0, [r7, #20]
 80080ec:	f001 ffea 	bl	800a0c4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	6978      	ldr	r0, [r7, #20]
 80080fa:	f001 ffe3 	bl	800a0c4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	; 0x30
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008118:	f3ef 8305 	mrs	r3, IPSR
 800811c:	617b      	str	r3, [r7, #20]
  return(result);
 800811e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008124:	f06f 0305 	mvn.w	r3, #5
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800812a:	e06b      	b.n	8008204 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da03      	bge.n	800813a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008132:	f06f 0303 	mvn.w	r3, #3
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008138:	e064      	b.n	8008204 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28
 8008148:	e001      	b.n	800814e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008156:	f001 fb77 	bl	8009848 <xTaskGetTickCount>
 800815a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800815c:	f107 0210 	add.w	r2, r7, #16
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008164:	2000      	movs	r0, #0
 8008166:	f001 ff4d 	bl	800a004 <xTaskNotifyWait>
 800816a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d137      	bne.n	80081e2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4013      	ands	r3, r2
 8008178:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817e:	4313      	orrs	r3, r2
 8008180:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	4013      	ands	r3, r2
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d032      	beq.n	80081fe <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10f      	bne.n	80081be <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800819e:	f06f 0302 	mvn.w	r3, #2
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80081a4:	e02e      	b.n	8008204 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d128      	bne.n	8008202 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80081b6:	f06f 0302 	mvn.w	r3, #2
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80081bc:	e022      	b.n	8008204 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80081be:	f001 fb43 	bl	8009848 <xTaskGetTickCount>
 80081c2:	4602      	mov	r2, r0
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d902      	bls.n	80081d8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
 80081d6:	e00e      	b.n	80081f6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
 80081e0:	e009      	b.n	80081f6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80081e8:	f06f 0302 	mvn.w	r3, #2
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ee:	e002      	b.n	80081f6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80081f0:	f06f 0301 	mvn.w	r3, #1
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1af      	bne.n	800815c <osThreadFlagsWait+0x50>
 80081fc:	e002      	b.n	8008204 <osThreadFlagsWait+0xf8>
            break;
 80081fe:	bf00      	nop
 8008200:	e000      	b.n	8008204 <osThreadFlagsWait+0xf8>
            break;
 8008202:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008206:	4618      	mov	r0, r3
 8008208:	3730      	adds	r7, #48	; 0x30
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008216:	f3ef 8305 	mrs	r3, IPSR
 800821a:	60bb      	str	r3, [r7, #8]
  return(result);
 800821c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <osDelay+0x1c>
    stat = osErrorISR;
 8008222:	f06f 0305 	mvn.w	r3, #5
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e007      	b.n	800823a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <osDelay+0x2c>
      vTaskDelay(ticks);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 f9b7 	bl	80095a8 <vTaskDelay>
    }
  }

  return (stat);
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824c:	f3ef 8305 	mrs	r3, IPSR
 8008250:	60fb      	str	r3, [r7, #12]
  return(result);
 8008252:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008258:	f06f 0305 	mvn.w	r3, #5
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e019      	b.n	8008294 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008260:	2300      	movs	r3, #0
 8008262:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008264:	f001 faf0 	bl	8009848 <xTaskGetTickCount>
 8008268:	4603      	mov	r3, r0
 800826a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <osDelayUntil+0x4a>
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	db06      	blt.n	800828e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008280:	f107 0308 	add.w	r3, r7, #8
 8008284:	6939      	ldr	r1, [r7, #16]
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f910 	bl	80094ac <vTaskDelayUntil>
 800828c:	e002      	b.n	8008294 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800828e:	f06f 0303 	mvn.w	r3, #3
 8008292:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008294:	697b      	ldr	r3, [r7, #20]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800829e:	b580      	push	{r7, lr}
 80082a0:	b08a      	sub	sp, #40	; 0x28
 80082a2:	af02      	add	r7, sp, #8
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ae:	f3ef 8305 	mrs	r3, IPSR
 80082b2:	613b      	str	r3, [r7, #16]
  return(result);
 80082b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d175      	bne.n	80083a6 <osSemaphoreNew+0x108>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d072      	beq.n	80083a6 <osSemaphoreNew+0x108>
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d86e      	bhi.n	80083a6 <osSemaphoreNew+0x108>
    mem = -1;
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
 80082cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d015      	beq.n	8008300 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d006      	beq.n	80082ea <osSemaphoreNew+0x4c>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	2b4f      	cmp	r3, #79	; 0x4f
 80082e2:	d902      	bls.n	80082ea <osSemaphoreNew+0x4c>
        mem = 1;
 80082e4:	2301      	movs	r3, #1
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	e00c      	b.n	8008304 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d108      	bne.n	8008304 <osSemaphoreNew+0x66>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <osSemaphoreNew+0x66>
          mem = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	e001      	b.n	8008304 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d04c      	beq.n	80083a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d128      	bne.n	8008364 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d10a      	bne.n	800832e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2203      	movs	r2, #3
 800831e:	9200      	str	r2, [sp, #0]
 8008320:	2200      	movs	r2, #0
 8008322:	2100      	movs	r1, #0
 8008324:	2001      	movs	r0, #1
 8008326:	f000 f993 	bl	8008650 <xQueueGenericCreateStatic>
 800832a:	61f8      	str	r0, [r7, #28]
 800832c:	e005      	b.n	800833a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800832e:	2203      	movs	r2, #3
 8008330:	2100      	movs	r1, #0
 8008332:	2001      	movs	r0, #1
 8008334:	f000 fa04 	bl	8008740 <xQueueGenericCreate>
 8008338:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d022      	beq.n	8008386 <osSemaphoreNew+0xe8>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01f      	beq.n	8008386 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008346:	2300      	movs	r3, #0
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	69f8      	ldr	r0, [r7, #28]
 800834e:	f000 fabf 	bl	80088d0 <xQueueGenericSend>
 8008352:	4603      	mov	r3, r0
 8008354:	2b01      	cmp	r3, #1
 8008356:	d016      	beq.n	8008386 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008358:	69f8      	ldr	r0, [r7, #28]
 800835a:	f000 fd33 	bl	8008dc4 <vQueueDelete>
            hSemaphore = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	e010      	b.n	8008386 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d108      	bne.n	800837c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	461a      	mov	r2, r3
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fa41 	bl	80087fa <xQueueCreateCountingSemaphoreStatic>
 8008378:	61f8      	str	r0, [r7, #28]
 800837a:	e004      	b.n	8008386 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fa72 	bl	8008868 <xQueueCreateCountingSemaphore>
 8008384:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <osSemaphoreNew+0xfc>
          name = attr->name;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e001      	b.n	800839e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800839e:	6979      	ldr	r1, [r7, #20]
 80083a0:	69f8      	ldr	r0, [r7, #28]
 80083a2:	f000 fe43 	bl	800902c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80083a6:	69fb      	ldr	r3, [r7, #28]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4a07      	ldr	r2, [pc, #28]	; (80083dc <vApplicationGetIdleTaskMemory+0x2c>)
 80083c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4a06      	ldr	r2, [pc, #24]	; (80083e0 <vApplicationGetIdleTaskMemory+0x30>)
 80083c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2280      	movs	r2, #128	; 0x80
 80083cc:	601a      	str	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	200008fc 	.word	0x200008fc
 80083e0:	200009b8 	.word	0x200009b8

080083e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a07      	ldr	r2, [pc, #28]	; (8008410 <vApplicationGetTimerTaskMemory+0x2c>)
 80083f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4a06      	ldr	r2, [pc, #24]	; (8008414 <vApplicationGetTimerTaskMemory+0x30>)
 80083fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	20000bb8 	.word	0x20000bb8
 8008414:	20000c74 	.word	0x20000c74

08008418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f103 0208 	add.w	r2, r3, #8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f103 0208 	add.w	r2, r3, #8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0208 	add.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d103      	bne.n	80084da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e00c      	b.n	80084f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3308      	adds	r3, #8
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e002      	b.n	80084e8 <vListInsert+0x2e>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d2f6      	bcs.n	80084e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6852      	ldr	r2, [r2, #4]
 800854c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d103      	bne.n	8008560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1e5a      	subs	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085aa:	f002 fbfb 	bl	800ada4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	68f9      	ldr	r1, [r7, #12]
 80085b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085ba:	fb01 f303 	mul.w	r3, r1, r3
 80085be:	441a      	add	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	3b01      	subs	r3, #1
 80085dc:	68f9      	ldr	r1, [r7, #12]
 80085de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085e0:	fb01 f303 	mul.w	r3, r1, r3
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	22ff      	movs	r2, #255	; 0xff
 80085ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	22ff      	movs	r2, #255	; 0xff
 80085f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d114      	bne.n	800862a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d01a      	beq.n	800863e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3310      	adds	r3, #16
 800860c:	4618      	mov	r0, r3
 800860e:	f001 faab 	bl	8009b68 <xTaskRemoveFromEventList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d012      	beq.n	800863e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008618:	4b0c      	ldr	r3, [pc, #48]	; (800864c <xQueueGenericReset+0xcc>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	e009      	b.n	800863e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3310      	adds	r3, #16
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fef2 	bl	8008418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3324      	adds	r3, #36	; 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff feed 	bl	8008418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800863e:	f002 fbe1 	bl	800ae04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008642:	2301      	movs	r3, #1
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	; 0x38
 8008654:	af02      	add	r7, sp, #8
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <xQueueGenericCreateStatic+0x52>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <xQueueGenericCreateStatic+0x56>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueGenericCreateStatic+0x58>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	623b      	str	r3, [r7, #32]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <xQueueGenericCreateStatic+0x7e>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <xQueueGenericCreateStatic+0x82>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xQueueGenericCreateStatic+0x84>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	61fb      	str	r3, [r7, #28]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086ee:	2350      	movs	r3, #80	; 0x50
 80086f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b50      	cmp	r3, #80	; 0x50
 80086f6:	d00a      	beq.n	800870e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	61bb      	str	r3, [r7, #24]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800870e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008722:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	4613      	mov	r3, r2
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f83f 	bl	80087b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008738:	4618      	mov	r0, r3
 800873a:	3730      	adds	r7, #48	; 0x30
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af02      	add	r7, sp, #8
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	613b      	str	r3, [r7, #16]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	fb02 f303 	mul.w	r3, r2, r3
 8008772:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	3350      	adds	r3, #80	; 0x50
 8008778:	4618      	mov	r0, r3
 800877a:	f002 fc35 	bl	800afe8 <pvPortMalloc>
 800877e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d011      	beq.n	80087aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	3350      	adds	r3, #80	; 0x50
 800878e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008798:	79fa      	ldrb	r2, [r7, #7]
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4613      	mov	r3, r2
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f805 	bl	80087b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087aa:	69bb      	ldr	r3, [r7, #24]
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d103      	bne.n	80087d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e002      	b.n	80087d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087e2:	2101      	movs	r1, #1
 80087e4:	69b8      	ldr	r0, [r7, #24]
 80087e6:	f7ff fecb 	bl	8008580 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b08a      	sub	sp, #40	; 0x28
 80087fe:	af02      	add	r7, sp, #8
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	61bb      	str	r3, [r7, #24]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	429a      	cmp	r2, r3
 8008828:	d90a      	bls.n	8008840 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	617b      	str	r3, [r7, #20]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008840:	2302      	movs	r3, #2
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff00 	bl	8008650 <xQueueGenericCreateStatic>
 8008850:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800885e:	69fb      	ldr	r3, [r7, #28]
	}
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	613b      	str	r3, [r7, #16]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	429a      	cmp	r2, r3
 8008894:	d90a      	bls.n	80088ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	60fb      	str	r3, [r7, #12]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80088ac:	2202      	movs	r2, #2
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff ff45 	bl	8008740 <xQueueGenericCreate>
 80088b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80088c4:	697b      	ldr	r3, [r7, #20]
	}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08e      	sub	sp, #56	; 0x38
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088de:	2300      	movs	r3, #0
 80088e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <xQueueGenericSend+0x32>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <xQueueGenericSend+0x40>
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <xQueueGenericSend+0x44>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <xQueueGenericSend+0x46>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <xQueueGenericSend+0x60>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d103      	bne.n	800893e <xQueueGenericSend+0x6e>
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <xQueueGenericSend+0x72>
 800893e:	2301      	movs	r3, #1
 8008940:	e000      	b.n	8008944 <xQueueGenericSend+0x74>
 8008942:	2300      	movs	r3, #0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <xQueueGenericSend+0x8e>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	623b      	str	r3, [r7, #32]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800895e:	f001 fac5 	bl	8009eec <xTaskGetSchedulerState>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <xQueueGenericSend+0x9e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <xQueueGenericSend+0xa2>
 800896e:	2301      	movs	r3, #1
 8008970:	e000      	b.n	8008974 <xQueueGenericSend+0xa4>
 8008972:	2300      	movs	r3, #0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <xQueueGenericSend+0xbe>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	61fb      	str	r3, [r7, #28]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800898e:	f002 fa09 	bl	800ada4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	429a      	cmp	r2, r3
 800899c:	d302      	bcc.n	80089a4 <xQueueGenericSend+0xd4>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d129      	bne.n	80089f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089aa:	f000 fa2e 	bl	8008e0a <prvCopyDataToQueue>
 80089ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d010      	beq.n	80089da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	3324      	adds	r3, #36	; 0x24
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 f8d3 	bl	8009b68 <xTaskRemoveFromEventList>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d013      	beq.n	80089f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089c8:	4b3f      	ldr	r3, [pc, #252]	; (8008ac8 <xQueueGenericSend+0x1f8>)
 80089ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	e00a      	b.n	80089f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089e0:	4b39      	ldr	r3, [pc, #228]	; (8008ac8 <xQueueGenericSend+0x1f8>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089f0:	f002 fa08 	bl	800ae04 <vPortExitCritical>
				return pdPASS;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e063      	b.n	8008ac0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089fe:	f002 fa01 	bl	800ae04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	e05c      	b.n	8008ac0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a0c:	f107 0314 	add.w	r3, r7, #20
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 f90d 	bl	8009c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a16:	2301      	movs	r3, #1
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a1a:	f002 f9f3 	bl	800ae04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a1e:	f000 fe67 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a22:	f002 f9bf 	bl	800ada4 <vPortEnterCritical>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d103      	bne.n	8008a3c <xQueueGenericSend+0x16c>
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d103      	bne.n	8008a52 <xQueueGenericSend+0x182>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a52:	f002 f9d7 	bl	800ae04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a56:	1d3a      	adds	r2, r7, #4
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 f8fc 	bl	8009c5c <xTaskCheckForTimeOut>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d124      	bne.n	8008ab4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a6c:	f000 fac5 	bl	8008ffa <prvIsQueueFull>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d018      	beq.n	8008aa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	3310      	adds	r3, #16
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 f822 	bl	8009ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a86:	f000 fa50 	bl	8008f2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a8a:	f000 fe3f 	bl	800970c <xTaskResumeAll>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f47f af7c 	bne.w	800898e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <xQueueGenericSend+0x1f8>)
 8008a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	e772      	b.n	800898e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aaa:	f000 fa3e 	bl	8008f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aae:	f000 fe2d 	bl	800970c <xTaskResumeAll>
 8008ab2:	e76c      	b.n	800898e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab6:	f000 fa38 	bl	8008f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aba:	f000 fe27 	bl	800970c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3738      	adds	r7, #56	; 0x38
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b090      	sub	sp, #64	; 0x40
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <xQueueGenericSendFromISR+0x3c>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <xQueueGenericSendFromISR+0x40>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e000      	b.n	8008b0e <xQueueGenericSendFromISR+0x42>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d103      	bne.n	8008b36 <xQueueGenericSendFromISR+0x6a>
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <xQueueGenericSendFromISR+0x6e>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <xQueueGenericSendFromISR+0x70>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	623b      	str	r3, [r7, #32]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b56:	f002 fa07 	bl	800af68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	61fa      	str	r2, [r7, #28]
 8008b70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d302      	bcc.n	8008b88 <xQueueGenericSendFromISR+0xbc>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d12f      	bne.n	8008be8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b9e:	f000 f934 	bl	8008e0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ba2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008baa:	d112      	bne.n	8008bd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d016      	beq.n	8008be2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	3324      	adds	r3, #36	; 0x24
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 ffd5 	bl	8009b68 <xTaskRemoveFromEventList>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00e      	beq.n	8008be2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	e007      	b.n	8008be2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	b25a      	sxtb	r2, r3
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008be2:	2301      	movs	r3, #1
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008be6:	e001      	b.n	8008bec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3740      	adds	r7, #64	; 0x40
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08c      	sub	sp, #48	; 0x30
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <xQueueReceive+0x30>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	623b      	str	r3, [r7, #32]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <xQueueReceive+0x3e>
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <xQueueReceive+0x42>
 8008c42:	2301      	movs	r3, #1
 8008c44:	e000      	b.n	8008c48 <xQueueReceive+0x44>
 8008c46:	2300      	movs	r3, #0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <xQueueReceive+0x5e>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	61fb      	str	r3, [r7, #28]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c62:	f001 f943 	bl	8009eec <xTaskGetSchedulerState>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <xQueueReceive+0x6e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <xQueueReceive+0x72>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xQueueReceive+0x74>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xQueueReceive+0x8e>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	61bb      	str	r3, [r7, #24]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c92:	f002 f887 	bl	800ada4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01f      	beq.n	8008ce2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca6:	f000 f91a 	bl	8008ede <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00f      	beq.n	8008cda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	3310      	adds	r3, #16
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 ff52 	bl	8009b68 <xTaskRemoveFromEventList>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cca:	4b3d      	ldr	r3, [pc, #244]	; (8008dc0 <xQueueReceive+0x1bc>)
 8008ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cda:	f002 f893 	bl	800ae04 <vPortExitCritical>
				return pdPASS;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e069      	b.n	8008db6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ce8:	f002 f88c 	bl	800ae04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e062      	b.n	8008db6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cf6:	f107 0310 	add.w	r3, r7, #16
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ff98 	bl	8009c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d04:	f002 f87e 	bl	800ae04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d08:	f000 fcf2 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d0c:	f002 f84a 	bl	800ada4 <vPortEnterCritical>
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d103      	bne.n	8008d26 <xQueueReceive+0x122>
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d2c:	b25b      	sxtb	r3, r3
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	d103      	bne.n	8008d3c <xQueueReceive+0x138>
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d3c:	f002 f862 	bl	800ae04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d40:	1d3a      	adds	r2, r7, #4
 8008d42:	f107 0310 	add.w	r3, r7, #16
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 ff87 	bl	8009c5c <xTaskCheckForTimeOut>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d123      	bne.n	8008d9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d56:	f000 f93a 	bl	8008fce <prvIsQueueEmpty>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d017      	beq.n	8008d90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fead 	bl	8009ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d70:	f000 f8db 	bl	8008f2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d74:	f000 fcca 	bl	800970c <xTaskResumeAll>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d189      	bne.n	8008c92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <xQueueReceive+0x1bc>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	e780      	b.n	8008c92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d92:	f000 f8ca 	bl	8008f2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d96:	f000 fcb9 	bl	800970c <xTaskResumeAll>
 8008d9a:	e77a      	b.n	8008c92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9e:	f000 f8c4 	bl	8008f2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008da2:	f000 fcb3 	bl	800970c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da8:	f000 f911 	bl	8008fce <prvIsQueueEmpty>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f43f af6f 	beq.w	8008c92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3730      	adds	r7, #48	; 0x30
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <vQueueDelete+0x28>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60bb      	str	r3, [r7, #8]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f947 	bl	8009080 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f002 f9bf 	bl	800b180 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10d      	bne.n	8008e44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d14d      	bne.n	8008ecc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 f877 	bl	8009f28 <xTaskPriorityDisinherit>
 8008e3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	609a      	str	r2, [r3, #8]
 8008e42:	e043      	b.n	8008ecc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d119      	bne.n	8008e7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6858      	ldr	r0, [r3, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	461a      	mov	r2, r3
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	f002 fbd4 	bl	800b602 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	441a      	add	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d32b      	bcc.n	8008ecc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	605a      	str	r2, [r3, #4]
 8008e7c:	e026      	b.n	8008ecc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68d8      	ldr	r0, [r3, #12]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	461a      	mov	r2, r3
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	f002 fbba 	bl	800b602 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	425b      	negs	r3, r3
 8008e98:	441a      	add	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d207      	bcs.n	8008eba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	425b      	negs	r3, r3
 8008eb4:	441a      	add	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d105      	bne.n	8008ecc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ed4:	697b      	ldr	r3, [r7, #20]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d018      	beq.n	8008f22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	441a      	add	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d303      	bcc.n	8008f12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68d9      	ldr	r1, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6838      	ldr	r0, [r7, #0]
 8008f1e:	f002 fb70 	bl	800b602 <memcpy>
	}
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f32:	f001 ff37 	bl	800ada4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f3e:	e011      	b.n	8008f64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d012      	beq.n	8008f6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3324      	adds	r3, #36	; 0x24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fe0b 	bl	8009b68 <xTaskRemoveFromEventList>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f58:	f000 fee2 	bl	8009d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dce9      	bgt.n	8008f40 <prvUnlockQueue+0x16>
 8008f6c:	e000      	b.n	8008f70 <prvUnlockQueue+0x46>
					break;
 8008f6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	22ff      	movs	r2, #255	; 0xff
 8008f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f78:	f001 ff44 	bl	800ae04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f7c:	f001 ff12 	bl	800ada4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f88:	e011      	b.n	8008fae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d012      	beq.n	8008fb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3310      	adds	r3, #16
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fde6 	bl	8009b68 <xTaskRemoveFromEventList>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fa2:	f000 febd 	bl	8009d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dce9      	bgt.n	8008f8a <prvUnlockQueue+0x60>
 8008fb6:	e000      	b.n	8008fba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	22ff      	movs	r2, #255	; 0xff
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fc2:	f001 ff1f 	bl	800ae04 <vPortExitCritical>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fd6:	f001 fee5 	bl	800ada4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	e001      	b.n	8008fec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fec:	f001 ff0a 	bl	800ae04 <vPortExitCritical>

	return xReturn;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009002:	f001 fecf 	bl	800ada4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	429a      	cmp	r2, r3
 8009010:	d102      	bne.n	8009018 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009012:	2301      	movs	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	e001      	b.n	800901c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800901c:	f001 fef2 	bl	800ae04 <vPortExitCritical>

	return xReturn;
 8009020:	68fb      	ldr	r3, [r7, #12]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e014      	b.n	8009066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800903c:	4a0f      	ldr	r2, [pc, #60]	; (800907c <vQueueAddToRegistry+0x50>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009048:	490c      	ldr	r1, [pc, #48]	; (800907c <vQueueAddToRegistry+0x50>)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009052:	4a0a      	ldr	r2, [pc, #40]	; (800907c <vQueueAddToRegistry+0x50>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4413      	add	r3, r2
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800905e:	e006      	b.n	800906e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b07      	cmp	r3, #7
 800906a:	d9e7      	bls.n	800903c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	20001074 	.word	0x20001074

08009080 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	e016      	b.n	80090bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800908e:	4a10      	ldr	r2, [pc, #64]	; (80090d0 <vQueueUnregisterQueue+0x50>)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d10b      	bne.n	80090b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800909e:	4a0c      	ldr	r2, [pc, #48]	; (80090d0 <vQueueUnregisterQueue+0x50>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2100      	movs	r1, #0
 80090a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80090a8:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <vQueueUnregisterQueue+0x50>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	4413      	add	r3, r2
 80090b0:	2200      	movs	r2, #0
 80090b2:	605a      	str	r2, [r3, #4]
				break;
 80090b4:	e006      	b.n	80090c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3301      	adds	r3, #1
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b07      	cmp	r3, #7
 80090c0:	d9e5      	bls.n	800908e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	20001074 	.word	0x20001074

080090d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090e4:	f001 fe5e 	bl	800ada4 <vPortEnterCritical>
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ee:	b25b      	sxtb	r3, r3
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f4:	d103      	bne.n	80090fe <vQueueWaitForMessageRestricted+0x2a>
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009104:	b25b      	sxtb	r3, r3
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d103      	bne.n	8009114 <vQueueWaitForMessageRestricted+0x40>
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009114:	f001 fe76 	bl	800ae04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fcf1 	bl	8009b10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800912e:	6978      	ldr	r0, [r7, #20]
 8009130:	f7ff fefb 	bl	8008f2a <prvUnlockQueue>
	}
 8009134:	bf00      	nop
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08e      	sub	sp, #56	; 0x38
 8009140:	af04      	add	r7, sp, #16
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	623b      	str	r3, [r7, #32]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xTaskCreateStatic+0x46>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	61fb      	str	r3, [r7, #28]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009182:	23bc      	movs	r3, #188	; 0xbc
 8009184:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2bbc      	cmp	r3, #188	; 0xbc
 800918a:	d00a      	beq.n	80091a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	61bb      	str	r3, [r7, #24]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01e      	beq.n	80091e8 <xTaskCreateStatic+0xac>
 80091aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01b      	beq.n	80091e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	2202      	movs	r2, #2
 80091be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091c2:	2300      	movs	r3, #0
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	9302      	str	r3, [sp, #8]
 80091ca:	f107 0314 	add.w	r3, r7, #20
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f850 	bl	8009280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091e2:	f000 f8f3 	bl	80093cc <prvAddNewTaskToReadyList>
 80091e6:	e001      	b.n	80091ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091ec:	697b      	ldr	r3, [r7, #20]
	}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3728      	adds	r7, #40	; 0x28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b08c      	sub	sp, #48	; 0x30
 80091fa:	af04      	add	r7, sp, #16
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	60b9      	str	r1, [r7, #8]
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	4613      	mov	r3, r2
 8009204:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4618      	mov	r0, r3
 800920c:	f001 feec 	bl	800afe8 <pvPortMalloc>
 8009210:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00e      	beq.n	8009236 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009218:	20bc      	movs	r0, #188	; 0xbc
 800921a:	f001 fee5 	bl	800afe8 <pvPortMalloc>
 800921e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d003      	beq.n	800922e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	631a      	str	r2, [r3, #48]	; 0x30
 800922c:	e005      	b.n	800923a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800922e:	6978      	ldr	r0, [r7, #20]
 8009230:	f001 ffa6 	bl	800b180 <vPortFree>
 8009234:	e001      	b.n	800923a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d017      	beq.n	8009270 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009248:	88fa      	ldrh	r2, [r7, #6]
 800924a:	2300      	movs	r3, #0
 800924c:	9303      	str	r3, [sp, #12]
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	9302      	str	r3, [sp, #8]
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 f80e 	bl	8009280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009264:	69f8      	ldr	r0, [r7, #28]
 8009266:	f000 f8b1 	bl	80093cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800926a:	2301      	movs	r3, #1
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	e002      	b.n	8009276 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009270:	f04f 33ff 	mov.w	r3, #4294967295
 8009274:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009276:	69bb      	ldr	r3, [r7, #24]
	}
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	461a      	mov	r2, r3
 8009298:	21a5      	movs	r1, #165	; 0xa5
 800929a:	f002 f9c0 	bl	800b61e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092a8:	3b01      	subs	r3, #1
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	617b      	str	r3, [r7, #20]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01f      	beq.n	800931e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
 80092e2:	e012      	b.n	800930a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	7819      	ldrb	r1, [r3, #0]
 80092ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	3334      	adds	r3, #52	; 0x34
 80092f4:	460a      	mov	r2, r1
 80092f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	4413      	add	r3, r2
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d006      	beq.n	8009312 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	3301      	adds	r3, #1
 8009308:	61fb      	str	r3, [r7, #28]
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	2b0f      	cmp	r3, #15
 800930e:	d9e9      	bls.n	80092e4 <prvInitialiseNewTask+0x64>
 8009310:	e000      	b.n	8009314 <prvInitialiseNewTask+0x94>
			{
				break;
 8009312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800931c:	e003      	b.n	8009326 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	2b37      	cmp	r3, #55	; 0x37
 800932a:	d901      	bls.n	8009330 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800932c:	2337      	movs	r3, #55	; 0x37
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	2200      	movs	r2, #0
 8009340:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	3304      	adds	r3, #4
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff f886 	bl	8008458 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	3318      	adds	r3, #24
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff f881 	bl	8008458 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800936a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	2200      	movs	r2, #0
 8009378:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800937c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937e:	3354      	adds	r3, #84	; 0x54
 8009380:	2260      	movs	r2, #96	; 0x60
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f002 f94a 	bl	800b61e <memset>
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	4a0c      	ldr	r2, [pc, #48]	; (80093c0 <prvInitialiseNewTask+0x140>)
 800938e:	659a      	str	r2, [r3, #88]	; 0x58
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	4a0c      	ldr	r2, [pc, #48]	; (80093c4 <prvInitialiseNewTask+0x144>)
 8009394:	65da      	str	r2, [r3, #92]	; 0x5c
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	4a0b      	ldr	r2, [pc, #44]	; (80093c8 <prvInitialiseNewTask+0x148>)
 800939a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	69b8      	ldr	r0, [r7, #24]
 80093a2:	f001 fbd3 	bl	800ab4c <pxPortInitialiseStack>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b8:	bf00      	nop
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	0800c9c0 	.word	0x0800c9c0
 80093c4:	0800c9e0 	.word	0x0800c9e0
 80093c8:	0800c9a0 	.word	0x0800c9a0

080093cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093d4:	f001 fce6 	bl	800ada4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093d8:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <prvAddNewTaskToReadyList+0xc4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3301      	adds	r3, #1
 80093de:	4a2c      	ldr	r2, [pc, #176]	; (8009490 <prvAddNewTaskToReadyList+0xc4>)
 80093e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093e2:	4b2c      	ldr	r3, [pc, #176]	; (8009494 <prvAddNewTaskToReadyList+0xc8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093ea:	4a2a      	ldr	r2, [pc, #168]	; (8009494 <prvAddNewTaskToReadyList+0xc8>)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093f0:	4b27      	ldr	r3, [pc, #156]	; (8009490 <prvAddNewTaskToReadyList+0xc4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d110      	bne.n	800941a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093f8:	f000 fcb6 	bl	8009d68 <prvInitialiseTaskLists>
 80093fc:	e00d      	b.n	800941a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093fe:	4b26      	ldr	r3, [pc, #152]	; (8009498 <prvAddNewTaskToReadyList+0xcc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d109      	bne.n	800941a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009406:	4b23      	ldr	r3, [pc, #140]	; (8009494 <prvAddNewTaskToReadyList+0xc8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	429a      	cmp	r2, r3
 8009412:	d802      	bhi.n	800941a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009414:	4a1f      	ldr	r2, [pc, #124]	; (8009494 <prvAddNewTaskToReadyList+0xc8>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800941a:	4b20      	ldr	r3, [pc, #128]	; (800949c <prvAddNewTaskToReadyList+0xd0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	4a1e      	ldr	r2, [pc, #120]	; (800949c <prvAddNewTaskToReadyList+0xd0>)
 8009422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009424:	4b1d      	ldr	r3, [pc, #116]	; (800949c <prvAddNewTaskToReadyList+0xd0>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4b1b      	ldr	r3, [pc, #108]	; (80094a0 <prvAddNewTaskToReadyList+0xd4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d903      	bls.n	8009440 <prvAddNewTaskToReadyList+0x74>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	4a18      	ldr	r2, [pc, #96]	; (80094a0 <prvAddNewTaskToReadyList+0xd4>)
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4a15      	ldr	r2, [pc, #84]	; (80094a4 <prvAddNewTaskToReadyList+0xd8>)
 800944e:	441a      	add	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4610      	mov	r0, r2
 8009458:	f7ff f80b 	bl	8008472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800945c:	f001 fcd2 	bl	800ae04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009460:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <prvAddNewTaskToReadyList+0xcc>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00e      	beq.n	8009486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <prvAddNewTaskToReadyList+0xc8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	429a      	cmp	r2, r3
 8009474:	d207      	bcs.n	8009486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009476:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <prvAddNewTaskToReadyList+0xdc>)
 8009478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009486:	bf00      	nop
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20001588 	.word	0x20001588
 8009494:	200010b4 	.word	0x200010b4
 8009498:	20001594 	.word	0x20001594
 800949c:	200015a4 	.word	0x200015a4
 80094a0:	20001590 	.word	0x20001590
 80094a4:	200010b8 	.word	0x200010b8
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08a      	sub	sp, #40	; 0x28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10a      	bne.n	80094d6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	617b      	str	r3, [r7, #20]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10a      	bne.n	80094f2 <vTaskDelayUntil+0x46>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	613b      	str	r3, [r7, #16]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80094f2:	4b2a      	ldr	r3, [pc, #168]	; (800959c <vTaskDelayUntil+0xf0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <vTaskDelayUntil+0x64>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	60fb      	str	r3, [r7, #12]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009510:	f000 f8ee 	bl	80096f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009514:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <vTaskDelayUntil+0xf4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4413      	add	r3, r2
 8009522:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6a3a      	ldr	r2, [r7, #32]
 800952a:	429a      	cmp	r2, r3
 800952c:	d20b      	bcs.n	8009546 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69fa      	ldr	r2, [r7, #28]
 8009534:	429a      	cmp	r2, r3
 8009536:	d211      	bcs.n	800955c <vTaskDelayUntil+0xb0>
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	429a      	cmp	r2, r3
 800953e:	d90d      	bls.n	800955c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009540:	2301      	movs	r3, #1
 8009542:	627b      	str	r3, [r7, #36]	; 0x24
 8009544:	e00a      	b.n	800955c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	429a      	cmp	r2, r3
 800954e:	d303      	bcc.n	8009558 <vTaskDelayUntil+0xac>
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	429a      	cmp	r2, r3
 8009556:	d901      	bls.n	800955c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009558:	2301      	movs	r3, #1
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	d006      	beq.n	8009576 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2100      	movs	r1, #0
 8009570:	4618      	mov	r0, r3
 8009572:	f000 ff49 	bl	800a408 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009576:	f000 f8c9 	bl	800970c <xTaskResumeAll>
 800957a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d107      	bne.n	8009592 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009582:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <vTaskDelayUntil+0xf8>)
 8009584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009592:	bf00      	nop
 8009594:	3728      	adds	r7, #40	; 0x28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200015b0 	.word	0x200015b0
 80095a0:	2000158c 	.word	0x2000158c
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d017      	beq.n	80095ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <vTaskDelay+0x60>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <vTaskDelay+0x30>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	60bb      	str	r3, [r7, #8]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095d8:	f000 f88a 	bl	80096f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 ff12 	bl	800a408 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095e4:	f000 f892 	bl	800970c <xTaskResumeAll>
 80095e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d107      	bne.n	8009600 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <vTaskDelay+0x64>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009600:	bf00      	nop
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	200015b0 	.word	0x200015b0
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08a      	sub	sp, #40	; 0x28
 8009614:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800961e:	463a      	mov	r2, r7
 8009620:	1d39      	adds	r1, r7, #4
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fec2 	bl	80083b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	9202      	str	r2, [sp, #8]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	2300      	movs	r3, #0
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	2300      	movs	r3, #0
 800963c:	460a      	mov	r2, r1
 800963e:	4924      	ldr	r1, [pc, #144]	; (80096d0 <vTaskStartScheduler+0xc0>)
 8009640:	4824      	ldr	r0, [pc, #144]	; (80096d4 <vTaskStartScheduler+0xc4>)
 8009642:	f7ff fd7b 	bl	800913c <xTaskCreateStatic>
 8009646:	4603      	mov	r3, r0
 8009648:	4a23      	ldr	r2, [pc, #140]	; (80096d8 <vTaskStartScheduler+0xc8>)
 800964a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800964c:	4b22      	ldr	r3, [pc, #136]	; (80096d8 <vTaskStartScheduler+0xc8>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e001      	b.n	800965e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d102      	bne.n	800966a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009664:	f000 ff24 	bl	800a4b0 <xTimerCreateTimerTask>
 8009668:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d11b      	bne.n	80096a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	613b      	str	r3, [r7, #16]
}
 8009682:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009684:	4b15      	ldr	r3, [pc, #84]	; (80096dc <vTaskStartScheduler+0xcc>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3354      	adds	r3, #84	; 0x54
 800968a:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <vTaskStartScheduler+0xd0>)
 800968c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800968e:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <vTaskStartScheduler+0xd4>)
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <vTaskStartScheduler+0xd8>)
 8009698:	2201      	movs	r2, #1
 800969a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800969c:	4b13      	ldr	r3, [pc, #76]	; (80096ec <vTaskStartScheduler+0xdc>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096a2:	f001 fadd 	bl	800ac60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096a6:	e00e      	b.n	80096c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ae:	d10a      	bne.n	80096c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	60fb      	str	r3, [r7, #12]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <vTaskStartScheduler+0xb4>
}
 80096c6:	bf00      	nop
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	0800c880 	.word	0x0800c880
 80096d4:	08009d39 	.word	0x08009d39
 80096d8:	200015ac 	.word	0x200015ac
 80096dc:	200010b4 	.word	0x200010b4
 80096e0:	20000010 	.word	0x20000010
 80096e4:	200015a8 	.word	0x200015a8
 80096e8:	20001594 	.word	0x20001594
 80096ec:	2000158c 	.word	0x2000158c

080096f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096f4:	4b04      	ldr	r3, [pc, #16]	; (8009708 <vTaskSuspendAll+0x18>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	4a03      	ldr	r2, [pc, #12]	; (8009708 <vTaskSuspendAll+0x18>)
 80096fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	200015b0 	.word	0x200015b0

0800970c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800971a:	4b42      	ldr	r3, [pc, #264]	; (8009824 <xTaskResumeAll+0x118>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <xTaskResumeAll+0x2c>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	603b      	str	r3, [r7, #0]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009738:	f001 fb34 	bl	800ada4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800973c:	4b39      	ldr	r3, [pc, #228]	; (8009824 <xTaskResumeAll+0x118>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3b01      	subs	r3, #1
 8009742:	4a38      	ldr	r2, [pc, #224]	; (8009824 <xTaskResumeAll+0x118>)
 8009744:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009746:	4b37      	ldr	r3, [pc, #220]	; (8009824 <xTaskResumeAll+0x118>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d162      	bne.n	8009814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800974e:	4b36      	ldr	r3, [pc, #216]	; (8009828 <xTaskResumeAll+0x11c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d05e      	beq.n	8009814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009756:	e02f      	b.n	80097b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009758:	4b34      	ldr	r3, [pc, #208]	; (800982c <xTaskResumeAll+0x120>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3318      	adds	r3, #24
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe fee1 	bl	800852c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3304      	adds	r3, #4
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fedc 	bl	800852c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	4b2d      	ldr	r3, [pc, #180]	; (8009830 <xTaskResumeAll+0x124>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d903      	bls.n	8009788 <xTaskResumeAll+0x7c>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <xTaskResumeAll+0x124>)
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4a27      	ldr	r2, [pc, #156]	; (8009834 <xTaskResumeAll+0x128>)
 8009796:	441a      	add	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe fe67 	bl	8008472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4b23      	ldr	r3, [pc, #140]	; (8009838 <xTaskResumeAll+0x12c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d302      	bcc.n	80097b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80097b2:	4b22      	ldr	r3, [pc, #136]	; (800983c <xTaskResumeAll+0x130>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097b8:	4b1c      	ldr	r3, [pc, #112]	; (800982c <xTaskResumeAll+0x120>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1cb      	bne.n	8009758 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097c6:	f000 fb71 	bl	8009eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097ca:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <xTaskResumeAll+0x134>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d010      	beq.n	80097f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097d6:	f000 f859 	bl	800988c <xTaskIncrementTick>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80097e0:	4b16      	ldr	r3, [pc, #88]	; (800983c <xTaskResumeAll+0x130>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1f1      	bne.n	80097d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80097f2:	4b13      	ldr	r3, [pc, #76]	; (8009840 <xTaskResumeAll+0x134>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <xTaskResumeAll+0x130>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d009      	beq.n	8009814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009804:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <xTaskResumeAll+0x138>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009814:	f001 faf6 	bl	800ae04 <vPortExitCritical>

	return xAlreadyYielded;
 8009818:	68bb      	ldr	r3, [r7, #8]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	200015b0 	.word	0x200015b0
 8009828:	20001588 	.word	0x20001588
 800982c:	20001548 	.word	0x20001548
 8009830:	20001590 	.word	0x20001590
 8009834:	200010b8 	.word	0x200010b8
 8009838:	200010b4 	.word	0x200010b4
 800983c:	2000159c 	.word	0x2000159c
 8009840:	20001598 	.word	0x20001598
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <xTaskGetTickCount+0x1c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009854:	687b      	ldr	r3, [r7, #4]
}
 8009856:	4618      	mov	r0, r3
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	2000158c 	.word	0x2000158c

08009868 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800986e:	f001 fb7b 	bl	800af68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009872:	2300      	movs	r3, #0
 8009874:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009876:	4b04      	ldr	r3, [pc, #16]	; (8009888 <xTaskGetTickCountFromISR+0x20>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800987c:	683b      	ldr	r3, [r7, #0]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	2000158c 	.word	0x2000158c

0800988c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009896:	4b4f      	ldr	r3, [pc, #316]	; (80099d4 <xTaskIncrementTick+0x148>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 808f 	bne.w	80099be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098a0:	4b4d      	ldr	r3, [pc, #308]	; (80099d8 <xTaskIncrementTick+0x14c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3301      	adds	r3, #1
 80098a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098a8:	4a4b      	ldr	r2, [pc, #300]	; (80099d8 <xTaskIncrementTick+0x14c>)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d120      	bne.n	80098f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80098b4:	4b49      	ldr	r3, [pc, #292]	; (80099dc <xTaskIncrementTick+0x150>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	603b      	str	r3, [r7, #0]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xTaskIncrementTick+0x46>
 80098d4:	4b41      	ldr	r3, [pc, #260]	; (80099dc <xTaskIncrementTick+0x150>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <xTaskIncrementTick+0x154>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a3f      	ldr	r2, [pc, #252]	; (80099dc <xTaskIncrementTick+0x150>)
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	4a3f      	ldr	r2, [pc, #252]	; (80099e0 <xTaskIncrementTick+0x154>)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	4b3e      	ldr	r3, [pc, #248]	; (80099e4 <xTaskIncrementTick+0x158>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	4a3d      	ldr	r2, [pc, #244]	; (80099e4 <xTaskIncrementTick+0x158>)
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	f000 fadb 	bl	8009eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098f6:	4b3c      	ldr	r3, [pc, #240]	; (80099e8 <xTaskIncrementTick+0x15c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d349      	bcc.n	8009994 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009900:	4b36      	ldr	r3, [pc, #216]	; (80099dc <xTaskIncrementTick+0x150>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800990a:	4b37      	ldr	r3, [pc, #220]	; (80099e8 <xTaskIncrementTick+0x15c>)
 800990c:	f04f 32ff 	mov.w	r2, #4294967295
 8009910:	601a      	str	r2, [r3, #0]
					break;
 8009912:	e03f      	b.n	8009994 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009914:	4b31      	ldr	r3, [pc, #196]	; (80099dc <xTaskIncrementTick+0x150>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	429a      	cmp	r2, r3
 800992a:	d203      	bcs.n	8009934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800992c:	4a2e      	ldr	r2, [pc, #184]	; (80099e8 <xTaskIncrementTick+0x15c>)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009932:	e02f      	b.n	8009994 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	3304      	adds	r3, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe fdf7 	bl	800852c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d004      	beq.n	8009950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	3318      	adds	r3, #24
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe fdee 	bl	800852c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009954:	4b25      	ldr	r3, [pc, #148]	; (80099ec <xTaskIncrementTick+0x160>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	429a      	cmp	r2, r3
 800995a:	d903      	bls.n	8009964 <xTaskIncrementTick+0xd8>
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	4a22      	ldr	r2, [pc, #136]	; (80099ec <xTaskIncrementTick+0x160>)
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4a1f      	ldr	r2, [pc, #124]	; (80099f0 <xTaskIncrementTick+0x164>)
 8009972:	441a      	add	r2, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fe fd79 	bl	8008472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	4b1b      	ldr	r3, [pc, #108]	; (80099f4 <xTaskIncrementTick+0x168>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	429a      	cmp	r2, r3
 800998c:	d3b8      	bcc.n	8009900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800998e:	2301      	movs	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009992:	e7b5      	b.n	8009900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009994:	4b17      	ldr	r3, [pc, #92]	; (80099f4 <xTaskIncrementTick+0x168>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999a:	4915      	ldr	r1, [pc, #84]	; (80099f0 <xTaskIncrementTick+0x164>)
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d901      	bls.n	80099b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099b0:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <xTaskIncrementTick+0x16c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099b8:	2301      	movs	r3, #1
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	e004      	b.n	80099c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <xTaskIncrementTick+0x170>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4a0d      	ldr	r2, [pc, #52]	; (80099fc <xTaskIncrementTick+0x170>)
 80099c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099c8:	697b      	ldr	r3, [r7, #20]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	200015b0 	.word	0x200015b0
 80099d8:	2000158c 	.word	0x2000158c
 80099dc:	20001540 	.word	0x20001540
 80099e0:	20001544 	.word	0x20001544
 80099e4:	200015a0 	.word	0x200015a0
 80099e8:	200015a8 	.word	0x200015a8
 80099ec:	20001590 	.word	0x20001590
 80099f0:	200010b8 	.word	0x200010b8
 80099f4:	200010b4 	.word	0x200010b4
 80099f8:	2000159c 	.word	0x2000159c
 80099fc:	20001598 	.word	0x20001598

08009a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a06:	4b2a      	ldr	r3, [pc, #168]	; (8009ab0 <vTaskSwitchContext+0xb0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a0e:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <vTaskSwitchContext+0xb4>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a14:	e046      	b.n	8009aa4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009a16:	4b27      	ldr	r3, [pc, #156]	; (8009ab4 <vTaskSwitchContext+0xb4>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1c:	4b26      	ldr	r3, [pc, #152]	; (8009ab8 <vTaskSwitchContext+0xb8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e010      	b.n	8009a46 <vTaskSwitchContext+0x46>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <vTaskSwitchContext+0x40>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	607b      	str	r3, [r7, #4]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <vTaskSwitchContext+0x3e>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3b01      	subs	r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	491d      	ldr	r1, [pc, #116]	; (8009abc <vTaskSwitchContext+0xbc>)
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0e4      	beq.n	8009a24 <vTaskSwitchContext+0x24>
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4a15      	ldr	r2, [pc, #84]	; (8009abc <vTaskSwitchContext+0xbc>)
 8009a66:	4413      	add	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	605a      	str	r2, [r3, #4]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d104      	bne.n	8009a8a <vTaskSwitchContext+0x8a>
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	605a      	str	r2, [r3, #4]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	4a0b      	ldr	r2, [pc, #44]	; (8009ac0 <vTaskSwitchContext+0xc0>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	4a08      	ldr	r2, [pc, #32]	; (8009ab8 <vTaskSwitchContext+0xb8>)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a9a:	4b09      	ldr	r3, [pc, #36]	; (8009ac0 <vTaskSwitchContext+0xc0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3354      	adds	r3, #84	; 0x54
 8009aa0:	4a08      	ldr	r2, [pc, #32]	; (8009ac4 <vTaskSwitchContext+0xc4>)
 8009aa2:	6013      	str	r3, [r2, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	200015b0 	.word	0x200015b0
 8009ab4:	2000159c 	.word	0x2000159c
 8009ab8:	20001590 	.word	0x20001590
 8009abc:	200010b8 	.word	0x200010b8
 8009ac0:	200010b4 	.word	0x200010b4
 8009ac4:	20000010 	.word	0x20000010

08009ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60fb      	str	r3, [r7, #12]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <vTaskPlaceOnEventList+0x44>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3318      	adds	r3, #24
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7fe fcdf 	bl	80084ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009afc:	2101      	movs	r1, #1
 8009afe:	6838      	ldr	r0, [r7, #0]
 8009b00:	f000 fc82 	bl	800a408 <prvAddCurrentTaskToDelayedList>
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	200010b4 	.word	0x200010b4

08009b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	617b      	str	r3, [r7, #20]
}
 8009b34:	bf00      	nop
 8009b36:	e7fe      	b.n	8009b36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b38:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3318      	adds	r3, #24
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7fe fc96 	bl	8008472 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b52:	6879      	ldr	r1, [r7, #4]
 8009b54:	68b8      	ldr	r0, [r7, #8]
 8009b56:	f000 fc57 	bl	800a408 <prvAddCurrentTaskToDelayedList>
	}
 8009b5a:	bf00      	nop
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	200010b4 	.word	0x200010b4

08009b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	60fb      	str	r3, [r7, #12]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	3318      	adds	r3, #24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fcc7 	bl	800852c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b9e:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <xTaskRemoveFromEventList+0xb0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11d      	bne.n	8009be2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fcbe 	bl	800852c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <xTaskRemoveFromEventList+0xb4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d903      	bls.n	8009bc4 <xTaskRemoveFromEventList+0x5c>
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	4a16      	ldr	r2, [pc, #88]	; (8009c1c <xTaskRemoveFromEventList+0xb4>)
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <xTaskRemoveFromEventList+0xb8>)
 8009bd2:	441a      	add	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f7fe fc49 	bl	8008472 <vListInsertEnd>
 8009be0:	e005      	b.n	8009bee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3318      	adds	r3, #24
 8009be6:	4619      	mov	r1, r3
 8009be8:	480e      	ldr	r0, [pc, #56]	; (8009c24 <xTaskRemoveFromEventList+0xbc>)
 8009bea:	f7fe fc42 	bl	8008472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <xTaskRemoveFromEventList+0xc0>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d905      	bls.n	8009c08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c00:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <xTaskRemoveFromEventList+0xc4>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e001      	b.n	8009c0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c0c:	697b      	ldr	r3, [r7, #20]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200015b0 	.word	0x200015b0
 8009c1c:	20001590 	.word	0x20001590
 8009c20:	200010b8 	.word	0x200010b8
 8009c24:	20001548 	.word	0x20001548
 8009c28:	200010b4 	.word	0x200010b4
 8009c2c:	2000159c 	.word	0x2000159c

08009c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <vTaskInternalSetTimeOutState+0x24>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <vTaskInternalSetTimeOutState+0x28>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	605a      	str	r2, [r3, #4]
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	200015a0 	.word	0x200015a0
 8009c58:	2000158c 	.word	0x2000158c

08009c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	613b      	str	r3, [r7, #16]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	60fb      	str	r3, [r7, #12]
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c9e:	f001 f881 	bl	800ada4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	; (8009d18 <xTaskCheckForTimeOut+0xbc>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	69ba      	ldr	r2, [r7, #24]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d102      	bne.n	8009cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]
 8009cc0:	e023      	b.n	8009d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <xTaskCheckForTimeOut+0xc0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d007      	beq.n	8009cde <xTaskCheckForTimeOut+0x82>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d302      	bcc.n	8009cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
 8009cdc:	e015      	b.n	8009d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d20b      	bcs.n	8009d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff ff9b 	bl	8009c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	61fb      	str	r3, [r7, #28]
 8009cfe:	e004      	b.n	8009d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d06:	2301      	movs	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d0a:	f001 f87b 	bl	800ae04 <vPortExitCritical>

	return xReturn;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3720      	adds	r7, #32
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2000158c 	.word	0x2000158c
 8009d1c:	200015a0 	.word	0x200015a0

08009d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d24:	4b03      	ldr	r3, [pc, #12]	; (8009d34 <vTaskMissedYield+0x14>)
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
}
 8009d2a:	bf00      	nop
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	2000159c 	.word	0x2000159c

08009d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d40:	f000 f852 	bl	8009de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <prvIdleTask+0x28>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d9f9      	bls.n	8009d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <prvIdleTask+0x2c>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d5c:	e7f0      	b.n	8009d40 <prvIdleTask+0x8>
 8009d5e:	bf00      	nop
 8009d60:	200010b8 	.word	0x200010b8
 8009d64:	e000ed04 	.word	0xe000ed04

08009d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d6e:	2300      	movs	r3, #0
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	e00c      	b.n	8009d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4a12      	ldr	r2, [pc, #72]	; (8009dc8 <prvInitialiseTaskLists+0x60>)
 8009d80:	4413      	add	r3, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fb48 	bl	8008418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	607b      	str	r3, [r7, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b37      	cmp	r3, #55	; 0x37
 8009d92:	d9ef      	bls.n	8009d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d94:	480d      	ldr	r0, [pc, #52]	; (8009dcc <prvInitialiseTaskLists+0x64>)
 8009d96:	f7fe fb3f 	bl	8008418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d9a:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <prvInitialiseTaskLists+0x68>)
 8009d9c:	f7fe fb3c 	bl	8008418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009da0:	480c      	ldr	r0, [pc, #48]	; (8009dd4 <prvInitialiseTaskLists+0x6c>)
 8009da2:	f7fe fb39 	bl	8008418 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009da6:	480c      	ldr	r0, [pc, #48]	; (8009dd8 <prvInitialiseTaskLists+0x70>)
 8009da8:	f7fe fb36 	bl	8008418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dac:	480b      	ldr	r0, [pc, #44]	; (8009ddc <prvInitialiseTaskLists+0x74>)
 8009dae:	f7fe fb33 	bl	8008418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009db2:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <prvInitialiseTaskLists+0x78>)
 8009db4:	4a05      	ldr	r2, [pc, #20]	; (8009dcc <prvInitialiseTaskLists+0x64>)
 8009db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009db8:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <prvInitialiseTaskLists+0x7c>)
 8009dba:	4a05      	ldr	r2, [pc, #20]	; (8009dd0 <prvInitialiseTaskLists+0x68>)
 8009dbc:	601a      	str	r2, [r3, #0]
}
 8009dbe:	bf00      	nop
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200010b8 	.word	0x200010b8
 8009dcc:	20001518 	.word	0x20001518
 8009dd0:	2000152c 	.word	0x2000152c
 8009dd4:	20001548 	.word	0x20001548
 8009dd8:	2000155c 	.word	0x2000155c
 8009ddc:	20001574 	.word	0x20001574
 8009de0:	20001540 	.word	0x20001540
 8009de4:	20001544 	.word	0x20001544

08009de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dee:	e019      	b.n	8009e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009df0:	f000 ffd8 	bl	800ada4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df4:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <prvCheckTasksWaitingTermination+0x50>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fb93 	bl	800852c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e06:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <prvCheckTasksWaitingTermination+0x54>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4a0b      	ldr	r2, [pc, #44]	; (8009e3c <prvCheckTasksWaitingTermination+0x54>)
 8009e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <prvCheckTasksWaitingTermination+0x58>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	4a0a      	ldr	r2, [pc, #40]	; (8009e40 <prvCheckTasksWaitingTermination+0x58>)
 8009e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e1a:	f000 fff3 	bl	800ae04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f810 	bl	8009e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e24:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <prvCheckTasksWaitingTermination+0x58>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e1      	bne.n	8009df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2000155c 	.word	0x2000155c
 8009e3c:	20001588 	.word	0x20001588
 8009e40:	20001570 	.word	0x20001570

08009e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3354      	adds	r3, #84	; 0x54
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fd1d 	bl	800b890 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d108      	bne.n	8009e72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 f98b 	bl	800b180 <vPortFree>
				vPortFree( pxTCB );
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 f988 	bl	800b180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e70:	e018      	b.n	8009ea4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d103      	bne.n	8009e84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f97f 	bl	800b180 <vPortFree>
	}
 8009e82:	e00f      	b.n	8009ea4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d00a      	beq.n	8009ea4 <prvDeleteTCB+0x60>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60fb      	str	r3, [r7, #12]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <prvDeleteTCB+0x5e>
	}
 8009ea4:	bf00      	nop
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <prvResetNextTaskUnblockTime+0x38>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ec4:	e008      	b.n	8009ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <prvResetNextTaskUnblockTime+0x38>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	4a04      	ldr	r2, [pc, #16]	; (8009ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ed6:	6013      	str	r3, [r2, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	20001540 	.word	0x20001540
 8009ee8:	200015a8 	.word	0x200015a8

08009eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <xTaskGetSchedulerState+0x34>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009efa:	2301      	movs	r3, #1
 8009efc:	607b      	str	r3, [r7, #4]
 8009efe:	e008      	b.n	8009f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f00:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <xTaskGetSchedulerState+0x38>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d102      	bne.n	8009f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	607b      	str	r3, [r7, #4]
 8009f0c:	e001      	b.n	8009f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f12:	687b      	ldr	r3, [r7, #4]
	}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	20001594 	.word	0x20001594
 8009f24:	200015b0 	.word	0x200015b0

08009f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d056      	beq.n	8009fec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f3e:	4b2e      	ldr	r3, [pc, #184]	; (8009ff8 <xTaskPriorityDisinherit+0xd0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d00a      	beq.n	8009f5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	60fb      	str	r3, [r7, #12]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	60bb      	str	r3, [r7, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f80:	1e5a      	subs	r2, r3, #1
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d02c      	beq.n	8009fec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d128      	bne.n	8009fec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fac4 	bl	800852c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbc:	4b0f      	ldr	r3, [pc, #60]	; (8009ffc <xTaskPriorityDisinherit+0xd4>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d903      	bls.n	8009fcc <xTaskPriorityDisinherit+0xa4>
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	4a0c      	ldr	r2, [pc, #48]	; (8009ffc <xTaskPriorityDisinherit+0xd4>)
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4a09      	ldr	r2, [pc, #36]	; (800a000 <xTaskPriorityDisinherit+0xd8>)
 8009fda:	441a      	add	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	f7fe fa45 	bl	8008472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fec:	697b      	ldr	r3, [r7, #20]
	}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	200010b4 	.word	0x200010b4
 8009ffc:	20001590 	.word	0x20001590
 800a000:	200010b8 	.word	0x200010b8

0800a004 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a012:	f000 fec7 	bl	800ada4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a016:	4b29      	ldr	r3, [pc, #164]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b02      	cmp	r3, #2
 800a022:	d01c      	beq.n	800a05e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a024:	4b25      	ldr	r3, [pc, #148]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	43d2      	mvns	r2, r2
 800a030:	400a      	ands	r2, r1
 800a032:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a036:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00b      	beq.n	800a05e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a046:	2101      	movs	r1, #1
 800a048:	6838      	ldr	r0, [r7, #0]
 800a04a:	f000 f9dd 	bl	800a408 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a04e:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <xTaskNotifyWait+0xbc>)
 800a050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a05e:	f000 fed1 	bl	800ae04 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a062:	f000 fe9f 	bl	800ada4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d005      	beq.n	800a078 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a06c:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a078:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d002      	beq.n	800a08c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	e00a      	b.n	800a0a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	43d2      	mvns	r2, r2
 800a098:	400a      	ands	r2, r1
 800a09a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0a2:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <xTaskNotifyWait+0xb8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800a0ac:	f000 feaa 	bl	800ae04 <vPortExitCritical>

		return xReturn;
 800a0b0:	697b      	ldr	r3, [r7, #20]
	}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200010b4 	.word	0x200010b4
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	; 0x28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <xTaskGenericNotify+0x30>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	61bb      	str	r3, [r7, #24]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a0f8:	f000 fe54 	bl	800ada4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a112:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	2b04      	cmp	r3, #4
 800a120:	d82d      	bhi.n	800a17e <xTaskGenericNotify+0xba>
 800a122:	a201      	add	r2, pc, #4	; (adr r2, 800a128 <xTaskGenericNotify+0x64>)
 800a124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a128:	0800a1a1 	.word	0x0800a1a1
 800a12c:	0800a13d 	.word	0x0800a13d
 800a130:	0800a14f 	.word	0x0800a14f
 800a134:	0800a15f 	.word	0x0800a15f
 800a138:	0800a169 	.word	0x0800a169
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	431a      	orrs	r2, r3
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a14c:	e02b      	b.n	800a1a6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a15c:	e023      	b.n	800a1a6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a166:	e01e      	b.n	800a1a6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a168:	7ffb      	ldrb	r3, [r7, #31]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d004      	beq.n	800a178 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a176:	e016      	b.n	800a1a6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a178:	2300      	movs	r3, #0
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a17c:	e013      	b.n	800a1a6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d00c      	beq.n	800a1a4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	617b      	str	r3, [r7, #20]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <xTaskGenericNotify+0xda>
					break;
 800a1a0:	bf00      	nop
 800a1a2:	e000      	b.n	800a1a6 <xTaskGenericNotify+0xe2>

					break;
 800a1a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a1a6:	7ffb      	ldrb	r3, [r7, #31]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d13a      	bne.n	800a222 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe f9bb 	bl	800852c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <xTaskGenericNotify+0x16c>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d903      	bls.n	800a1ca <xTaskGenericNotify+0x106>
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	4a1a      	ldr	r2, [pc, #104]	; (800a230 <xTaskGenericNotify+0x16c>)
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4a17      	ldr	r2, [pc, #92]	; (800a234 <xTaskGenericNotify+0x170>)
 800a1d8:	441a      	add	r2, r3
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fe f946 	bl	8008472 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00a      	beq.n	800a204 <xTaskGenericNotify+0x140>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	613b      	str	r3, [r7, #16]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a208:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <xTaskGenericNotify+0x174>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	429a      	cmp	r2, r3
 800a210:	d907      	bls.n	800a222 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a212:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <xTaskGenericNotify+0x178>)
 800a214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a222:	f000 fdef 	bl	800ae04 <vPortExitCritical>

		return xReturn;
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a228:	4618      	mov	r0, r3
 800a22a:	3728      	adds	r7, #40	; 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20001590 	.word	0x20001590
 800a234:	200010b8 	.word	0x200010b8
 800a238:	200010b4 	.word	0x200010b4
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08e      	sub	sp, #56	; 0x38
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a250:	2301      	movs	r3, #1
 800a252:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10a      	bne.n	800a270 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a270:	f000 fe7a 	bl	800af68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a278:	f3ef 8211 	mrs	r2, BASEPRI
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	623a      	str	r2, [r7, #32]
 800a28e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a290:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d82f      	bhi.n	800a31c <xTaskGenericNotifyFromISR+0xdc>
 800a2bc:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <xTaskGenericNotifyFromISR+0x84>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a33f 	.word	0x0800a33f
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2eb 	.word	0x0800a2eb
 800a2d0:	0800a2fb 	.word	0x0800a2fb
 800a2d4:	0800a305 	.word	0x0800a305
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a2e8:	e02c      	b.n	800a344 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a2f0:	1c5a      	adds	r2, r3, #1
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a2f8:	e024      	b.n	800a344 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a302:	e01f      	b.n	800a344 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a304:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d004      	beq.n	800a316 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a314:	e016      	b.n	800a344 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a316:	2300      	movs	r3, #0
 800a318:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a31a:	e013      	b.n	800a344 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d00c      	beq.n	800a342 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61bb      	str	r3, [r7, #24]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a33e:	bf00      	nop
 800a340:	e000      	b.n	800a344 <xTaskGenericNotifyFromISR+0x104>
					break;
 800a342:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d146      	bne.n	800a3da <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00a      	beq.n	800a36a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	617b      	str	r3, [r7, #20]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a36a:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <xTaskGenericNotifyFromISR+0x1b0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d11d      	bne.n	800a3ae <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	3304      	adds	r3, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe f8d8 	bl	800852c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a380:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d903      	bls.n	800a390 <xTaskGenericNotifyFromISR+0x150>
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	4a19      	ldr	r2, [pc, #100]	; (800a3f4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4613      	mov	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4a16      	ldr	r2, [pc, #88]	; (800a3f8 <xTaskGenericNotifyFromISR+0x1b8>)
 800a39e:	441a      	add	r2, r3
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f7fe f863 	bl	8008472 <vListInsertEnd>
 800a3ac:	e005      	b.n	800a3ba <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	3318      	adds	r3, #24
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4811      	ldr	r0, [pc, #68]	; (800a3fc <xTaskGenericNotifyFromISR+0x1bc>)
 800a3b6:	f7fe f85c 	bl	8008472 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3be:	4b10      	ldr	r3, [pc, #64]	; (800a400 <xTaskGenericNotifyFromISR+0x1c0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d908      	bls.n	800a3da <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a3d4:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <xTaskGenericNotifyFromISR+0x1c4>)
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f383 8811 	msr	BASEPRI, r3
}
 800a3e4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3738      	adds	r7, #56	; 0x38
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	200015b0 	.word	0x200015b0
 800a3f4:	20001590 	.word	0x20001590
 800a3f8:	200010b8 	.word	0x200010b8
 800a3fc:	20001548 	.word	0x20001548
 800a400:	200010b4 	.word	0x200010b4
 800a404:	2000159c 	.word	0x2000159c

0800a408 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a412:	4b21      	ldr	r3, [pc, #132]	; (800a498 <prvAddCurrentTaskToDelayedList+0x90>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a418:	4b20      	ldr	r3, [pc, #128]	; (800a49c <prvAddCurrentTaskToDelayedList+0x94>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe f884 	bl	800852c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d10a      	bne.n	800a442 <prvAddCurrentTaskToDelayedList+0x3a>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d007      	beq.n	800a442 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a432:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <prvAddCurrentTaskToDelayedList+0x94>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3304      	adds	r3, #4
 800a438:	4619      	mov	r1, r3
 800a43a:	4819      	ldr	r0, [pc, #100]	; (800a4a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a43c:	f7fe f819 	bl	8008472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a440:	e026      	b.n	800a490 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4413      	add	r3, r2
 800a448:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a44a:	4b14      	ldr	r3, [pc, #80]	; (800a49c <prvAddCurrentTaskToDelayedList+0x94>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	429a      	cmp	r2, r3
 800a458:	d209      	bcs.n	800a46e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a45a:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	4b0f      	ldr	r3, [pc, #60]	; (800a49c <prvAddCurrentTaskToDelayedList+0x94>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f7fe f827 	bl	80084ba <vListInsert>
}
 800a46c:	e010      	b.n	800a490 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a46e:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <prvAddCurrentTaskToDelayedList+0x94>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3304      	adds	r3, #4
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fe f81d 	bl	80084ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	429a      	cmp	r2, r3
 800a488:	d202      	bcs.n	800a490 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a48a:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	6013      	str	r3, [r2, #0]
}
 800a490:	bf00      	nop
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	2000158c 	.word	0x2000158c
 800a49c:	200010b4 	.word	0x200010b4
 800a4a0:	20001574 	.word	0x20001574
 800a4a4:	20001544 	.word	0x20001544
 800a4a8:	20001540 	.word	0x20001540
 800a4ac:	200015a8 	.word	0x200015a8

0800a4b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	; 0x28
 800a4b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4ba:	f000 fb07 	bl	800aacc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4be:	4b1c      	ldr	r3, [pc, #112]	; (800a530 <xTimerCreateTimerTask+0x80>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d021      	beq.n	800a50a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4ce:	1d3a      	adds	r2, r7, #4
 800a4d0:	f107 0108 	add.w	r1, r7, #8
 800a4d4:	f107 030c 	add.w	r3, r7, #12
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fd ff83 	bl	80083e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	9202      	str	r2, [sp, #8]
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	460a      	mov	r2, r1
 800a4f0:	4910      	ldr	r1, [pc, #64]	; (800a534 <xTimerCreateTimerTask+0x84>)
 800a4f2:	4811      	ldr	r0, [pc, #68]	; (800a538 <xTimerCreateTimerTask+0x88>)
 800a4f4:	f7fe fe22 	bl	800913c <xTaskCreateStatic>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	4a10      	ldr	r2, [pc, #64]	; (800a53c <xTimerCreateTimerTask+0x8c>)
 800a4fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <xTimerCreateTimerTask+0x8c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a506:	2301      	movs	r3, #1
 800a508:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	613b      	str	r3, [r7, #16]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a526:	697b      	ldr	r3, [r7, #20]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	200015e4 	.word	0x200015e4
 800a534:	0800c888 	.word	0x0800c888
 800a538:	0800a675 	.word	0x0800a675
 800a53c:	200015e8 	.word	0x200015e8

0800a540 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	; 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a54e:	2300      	movs	r3, #0
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	623b      	str	r3, [r7, #32]
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a56e:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <xTimerGenericCommand+0x98>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d02a      	beq.n	800a5cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b05      	cmp	r3, #5
 800a586:	dc18      	bgt.n	800a5ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a588:	f7ff fcb0 	bl	8009eec <xTaskGetSchedulerState>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d109      	bne.n	800a5a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a592:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <xTimerGenericCommand+0x98>)
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	f107 0110 	add.w	r1, r7, #16
 800a59a:	2300      	movs	r3, #0
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	f7fe f997 	bl	80088d0 <xQueueGenericSend>
 800a5a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a5a4:	e012      	b.n	800a5cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <xTimerGenericCommand+0x98>)
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	f107 0110 	add.w	r1, r7, #16
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f7fe f98d 	bl	80088d0 <xQueueGenericSend>
 800a5b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a5b8:	e008      	b.n	800a5cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <xTimerGenericCommand+0x98>)
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f107 0110 	add.w	r1, r7, #16
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	f7fe fa81 	bl	8008acc <xQueueGenericSendFromISR>
 800a5ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3728      	adds	r7, #40	; 0x28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	200015e4 	.word	0x200015e4

0800a5dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af02      	add	r7, sp, #8
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e6:	4b22      	ldr	r3, [pc, #136]	; (800a670 <prvProcessExpiredTimer+0x94>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fd ff99 	bl	800852c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b00      	cmp	r3, #0
 800a606:	d022      	beq.n	800a64e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	699a      	ldr	r2, [r3, #24]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	18d1      	adds	r1, r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	6978      	ldr	r0, [r7, #20]
 800a616:	f000 f8d1 	bl	800a7bc <prvInsertTimerInActiveList>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01f      	beq.n	800a660 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a620:	2300      	movs	r3, #0
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	2300      	movs	r3, #0
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	2100      	movs	r1, #0
 800a62a:	6978      	ldr	r0, [r7, #20]
 800a62c:	f7ff ff88 	bl	800a540 <xTimerGenericCommand>
 800a630:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d113      	bne.n	800a660 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	60fb      	str	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a654:	f023 0301 	bic.w	r3, r3, #1
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	6978      	ldr	r0, [r7, #20]
 800a666:	4798      	blx	r3
}
 800a668:	bf00      	nop
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	200015dc 	.word	0x200015dc

0800a674 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4618      	mov	r0, r3
 800a682:	f000 f857 	bl	800a734 <prvGetNextExpireTime>
 800a686:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4619      	mov	r1, r3
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 f803 	bl	800a698 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a692:	f000 f8d5 	bl	800a840 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a696:	e7f1      	b.n	800a67c <prvTimerTask+0x8>

0800a698 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6a2:	f7ff f825 	bl	80096f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6a6:	f107 0308 	add.w	r3, r7, #8
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 f866 	bl	800a77c <prvSampleTimeNow>
 800a6b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d130      	bne.n	800a71a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <prvProcessTimerOrBlockTask+0x3c>
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d806      	bhi.n	800a6d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6c6:	f7ff f821 	bl	800970c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6ca:	68f9      	ldr	r1, [r7, #12]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff ff85 	bl	800a5dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6d2:	e024      	b.n	800a71e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6da:	4b13      	ldr	r3, [pc, #76]	; (800a728 <prvProcessTimerOrBlockTask+0x90>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <prvProcessTimerOrBlockTask+0x50>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e000      	b.n	800a6ea <prvProcessTimerOrBlockTask+0x52>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6ec:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <prvProcessTimerOrBlockTask+0x94>)
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	f7fe fceb 	bl	80090d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6fe:	f7ff f805 	bl	800970c <xTaskResumeAll>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a708:	4b09      	ldr	r3, [pc, #36]	; (800a730 <prvProcessTimerOrBlockTask+0x98>)
 800a70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
}
 800a718:	e001      	b.n	800a71e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a71a:	f7fe fff7 	bl	800970c <xTaskResumeAll>
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200015e0 	.word	0x200015e0
 800a72c:	200015e4 	.word	0x200015e4
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a73c:	4b0e      	ldr	r3, [pc, #56]	; (800a778 <prvGetNextExpireTime+0x44>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <prvGetNextExpireTime+0x16>
 800a746:	2201      	movs	r2, #1
 800a748:	e000      	b.n	800a74c <prvGetNextExpireTime+0x18>
 800a74a:	2200      	movs	r2, #0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d105      	bne.n	800a764 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a758:	4b07      	ldr	r3, [pc, #28]	; (800a778 <prvGetNextExpireTime+0x44>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	e001      	b.n	800a768 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a768:	68fb      	ldr	r3, [r7, #12]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	200015dc 	.word	0x200015dc

0800a77c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a784:	f7ff f860 	bl	8009848 <xTaskGetTickCount>
 800a788:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <prvSampleTimeNow+0x3c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	429a      	cmp	r2, r3
 800a792:	d205      	bcs.n	800a7a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a794:	f000 f936 	bl	800aa04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e002      	b.n	800a7a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7a6:	4a04      	ldr	r2, [pc, #16]	; (800a7b8 <prvSampleTimeNow+0x3c>)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200015ec 	.word	0x200015ec

0800a7bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d812      	bhi.n	800a808 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d302      	bcc.n	800a7f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	617b      	str	r3, [r7, #20]
 800a7f4:	e01b      	b.n	800a82e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7f6:	4b10      	ldr	r3, [pc, #64]	; (800a838 <prvInsertTimerInActiveList+0x7c>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f7fd fe5a 	bl	80084ba <vListInsert>
 800a806:	e012      	b.n	800a82e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d206      	bcs.n	800a81e <prvInsertTimerInActiveList+0x62>
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d302      	bcc.n	800a81e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a818:	2301      	movs	r3, #1
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e007      	b.n	800a82e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a81e:	4b07      	ldr	r3, [pc, #28]	; (800a83c <prvInsertTimerInActiveList+0x80>)
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3304      	adds	r3, #4
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fd fe46 	bl	80084ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a82e:	697b      	ldr	r3, [r7, #20]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	200015e0 	.word	0x200015e0
 800a83c:	200015dc 	.word	0x200015dc

0800a840 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08e      	sub	sp, #56	; 0x38
 800a844:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a846:	e0ca      	b.n	800a9de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	da18      	bge.n	800a880 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a84e:	1d3b      	adds	r3, r7, #4
 800a850:	3304      	adds	r3, #4
 800a852:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	61fb      	str	r3, [r7, #28]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a876:	6850      	ldr	r0, [r2, #4]
 800a878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a87a:	6892      	ldr	r2, [r2, #8]
 800a87c:	4611      	mov	r1, r2
 800a87e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	f2c0 80aa 	blt.w	800a9dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	3304      	adds	r3, #4
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fd fe47 	bl	800852c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a89e:	463b      	mov	r3, r7
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff ff6b 	bl	800a77c <prvSampleTimeNow>
 800a8a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b09      	cmp	r3, #9
 800a8ac:	f200 8097 	bhi.w	800a9de <prvProcessReceivedCommands+0x19e>
 800a8b0:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <prvProcessReceivedCommands+0x78>)
 800a8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b6:	bf00      	nop
 800a8b8:	0800a8e1 	.word	0x0800a8e1
 800a8bc:	0800a8e1 	.word	0x0800a8e1
 800a8c0:	0800a8e1 	.word	0x0800a8e1
 800a8c4:	0800a955 	.word	0x0800a955
 800a8c8:	0800a969 	.word	0x0800a969
 800a8cc:	0800a9b3 	.word	0x0800a9b3
 800a8d0:	0800a8e1 	.word	0x0800a8e1
 800a8d4:	0800a8e1 	.word	0x0800a8e1
 800a8d8:	0800a955 	.word	0x0800a955
 800a8dc:	0800a969 	.word	0x0800a969
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e6:	f043 0301 	orr.w	r3, r3, #1
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	18d1      	adds	r1, r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a900:	f7ff ff5c 	bl	800a7bc <prvInsertTimerInActiveList>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d069      	beq.n	800a9de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a910:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d05e      	beq.n	800a9de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	441a      	add	r2, r3
 800a928:	2300      	movs	r3, #0
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	2300      	movs	r3, #0
 800a92e:	2100      	movs	r1, #0
 800a930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a932:	f7ff fe05 	bl	800a540 <xTimerGenericCommand>
 800a936:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d14f      	bne.n	800a9de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	61bb      	str	r3, [r7, #24]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95a:	f023 0301 	bic.w	r3, r3, #1
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a966:	e03a      	b.n	800a9de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a96e:	f043 0301 	orr.w	r3, r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	617b      	str	r3, [r7, #20]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	699a      	ldr	r2, [r3, #24]
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	18d1      	adds	r1, r2, r3
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ac:	f7ff ff06 	bl	800a7bc <prvInsertTimerInActiveList>
					break;
 800a9b0:	e015      	b.n	800a9de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d103      	bne.n	800a9c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a9c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c2:	f000 fbdd 	bl	800b180 <vPortFree>
 800a9c6:	e00a      	b.n	800a9de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ce:	f023 0301 	bic.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9da:	e000      	b.n	800a9de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a9dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9de:	4b08      	ldr	r3, [pc, #32]	; (800aa00 <prvProcessReceivedCommands+0x1c0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	1d39      	adds	r1, r7, #4
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe f90c 	bl	8008c04 <xQueueReceive>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f47f af2a 	bne.w	800a848 <prvProcessReceivedCommands+0x8>
	}
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop
 800a9f8:	3730      	adds	r7, #48	; 0x30
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	200015e4 	.word	0x200015e4

0800aa04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa0a:	e048      	b.n	800aa9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa0c:	4b2d      	ldr	r3, [pc, #180]	; (800aac4 <prvSwitchTimerLists+0xc0>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa16:	4b2b      	ldr	r3, [pc, #172]	; (800aac4 <prvSwitchTimerLists+0xc0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fd fd81 	bl	800852c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d02e      	beq.n	800aa9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	4413      	add	r3, r2
 800aa48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d90e      	bls.n	800aa70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa5e:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <prvSwitchTimerLists+0xc0>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3304      	adds	r3, #4
 800aa66:	4619      	mov	r1, r3
 800aa68:	4610      	mov	r0, r2
 800aa6a:	f7fd fd26 	bl	80084ba <vListInsert>
 800aa6e:	e016      	b.n	800aa9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa70:	2300      	movs	r3, #0
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	2100      	movs	r1, #0
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7ff fd60 	bl	800a540 <xTimerGenericCommand>
 800aa80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	603b      	str	r3, [r7, #0]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa9e:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <prvSwitchTimerLists+0xc0>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1b1      	bne.n	800aa0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aaa8:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <prvSwitchTimerLists+0xc0>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aaae:	4b06      	ldr	r3, [pc, #24]	; (800aac8 <prvSwitchTimerLists+0xc4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a04      	ldr	r2, [pc, #16]	; (800aac4 <prvSwitchTimerLists+0xc0>)
 800aab4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aab6:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <prvSwitchTimerLists+0xc4>)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	6013      	str	r3, [r2, #0]
}
 800aabc:	bf00      	nop
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	200015dc 	.word	0x200015dc
 800aac8:	200015e0 	.word	0x200015e0

0800aacc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aad2:	f000 f967 	bl	800ada4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aad6:	4b15      	ldr	r3, [pc, #84]	; (800ab2c <prvCheckForValidListAndQueue+0x60>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d120      	bne.n	800ab20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aade:	4814      	ldr	r0, [pc, #80]	; (800ab30 <prvCheckForValidListAndQueue+0x64>)
 800aae0:	f7fd fc9a 	bl	8008418 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aae4:	4813      	ldr	r0, [pc, #76]	; (800ab34 <prvCheckForValidListAndQueue+0x68>)
 800aae6:	f7fd fc97 	bl	8008418 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aaea:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <prvCheckForValidListAndQueue+0x6c>)
 800aaec:	4a10      	ldr	r2, [pc, #64]	; (800ab30 <prvCheckForValidListAndQueue+0x64>)
 800aaee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aaf0:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <prvCheckForValidListAndQueue+0x70>)
 800aaf2:	4a10      	ldr	r2, [pc, #64]	; (800ab34 <prvCheckForValidListAndQueue+0x68>)
 800aaf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <prvCheckForValidListAndQueue+0x74>)
 800aafc:	4a11      	ldr	r2, [pc, #68]	; (800ab44 <prvCheckForValidListAndQueue+0x78>)
 800aafe:	2110      	movs	r1, #16
 800ab00:	200a      	movs	r0, #10
 800ab02:	f7fd fda5 	bl	8008650 <xQueueGenericCreateStatic>
 800ab06:	4603      	mov	r3, r0
 800ab08:	4a08      	ldr	r2, [pc, #32]	; (800ab2c <prvCheckForValidListAndQueue+0x60>)
 800ab0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab0c:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <prvCheckForValidListAndQueue+0x60>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <prvCheckForValidListAndQueue+0x60>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	490b      	ldr	r1, [pc, #44]	; (800ab48 <prvCheckForValidListAndQueue+0x7c>)
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fa86 	bl	800902c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab20:	f000 f970 	bl	800ae04 <vPortExitCritical>
}
 800ab24:	bf00      	nop
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	200015e4 	.word	0x200015e4
 800ab30:	200015b4 	.word	0x200015b4
 800ab34:	200015c8 	.word	0x200015c8
 800ab38:	200015dc 	.word	0x200015dc
 800ab3c:	200015e0 	.word	0x200015e0
 800ab40:	20001690 	.word	0x20001690
 800ab44:	200015f0 	.word	0x200015f0
 800ab48:	0800c890 	.word	0x0800c890

0800ab4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3b04      	subs	r3, #4
 800ab5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3b04      	subs	r3, #4
 800ab6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f023 0201 	bic.w	r2, r3, #1
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3b04      	subs	r3, #4
 800ab7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab7c:	4a0c      	ldr	r2, [pc, #48]	; (800abb0 <pxPortInitialiseStack+0x64>)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3b14      	subs	r3, #20
 800ab86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3b04      	subs	r3, #4
 800ab92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f06f 0202 	mvn.w	r2, #2
 800ab9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3b20      	subs	r3, #32
 800aba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aba2:	68fb      	ldr	r3, [r7, #12]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	0800abb5 	.word	0x0800abb5

0800abb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abbe:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <prvTaskExitError+0x54>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc6:	d00a      	beq.n	800abde <prvTaskExitError+0x2a>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	60fb      	str	r3, [r7, #12]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <prvTaskExitError+0x28>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	60bb      	str	r3, [r7, #8]
}
 800abf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abf2:	bf00      	nop
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0fc      	beq.n	800abf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abfa:	bf00      	nop
 800abfc:	bf00      	nop
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	2000000c 	.word	0x2000000c
 800ac0c:	00000000 	.word	0x00000000

0800ac10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <pxCurrentTCBConst2>)
 800ac12:	6819      	ldr	r1, [r3, #0]
 800ac14:	6808      	ldr	r0, [r1, #0]
 800ac16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1a:	f380 8809 	msr	PSP, r0
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f04f 0000 	mov.w	r0, #0
 800ac26:	f380 8811 	msr	BASEPRI, r0
 800ac2a:	4770      	bx	lr
 800ac2c:	f3af 8000 	nop.w

0800ac30 <pxCurrentTCBConst2>:
 800ac30:	200010b4 	.word	0x200010b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop

0800ac38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac38:	4808      	ldr	r0, [pc, #32]	; (800ac5c <prvPortStartFirstTask+0x24>)
 800ac3a:	6800      	ldr	r0, [r0, #0]
 800ac3c:	6800      	ldr	r0, [r0, #0]
 800ac3e:	f380 8808 	msr	MSP, r0
 800ac42:	f04f 0000 	mov.w	r0, #0
 800ac46:	f380 8814 	msr	CONTROL, r0
 800ac4a:	b662      	cpsie	i
 800ac4c:	b661      	cpsie	f
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	df00      	svc	0
 800ac58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac5a:	bf00      	nop
 800ac5c:	e000ed08 	.word	0xe000ed08

0800ac60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac66:	4b46      	ldr	r3, [pc, #280]	; (800ad80 <xPortStartScheduler+0x120>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a46      	ldr	r2, [pc, #280]	; (800ad84 <xPortStartScheduler+0x124>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d10a      	bne.n	800ac86 <xPortStartScheduler+0x26>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	613b      	str	r3, [r7, #16]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac86:	4b3e      	ldr	r3, [pc, #248]	; (800ad80 <xPortStartScheduler+0x120>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a3f      	ldr	r2, [pc, #252]	; (800ad88 <xPortStartScheduler+0x128>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10a      	bne.n	800aca6 <xPortStartScheduler+0x46>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	60fb      	str	r3, [r7, #12]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aca6:	4b39      	ldr	r3, [pc, #228]	; (800ad8c <xPortStartScheduler+0x12c>)
 800aca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	22ff      	movs	r2, #255	; 0xff
 800acb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	4b31      	ldr	r3, [pc, #196]	; (800ad90 <xPortStartScheduler+0x130>)
 800accc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acce:	4b31      	ldr	r3, [pc, #196]	; (800ad94 <xPortStartScheduler+0x134>)
 800acd0:	2207      	movs	r2, #7
 800acd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acd4:	e009      	b.n	800acea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800acd6:	4b2f      	ldr	r3, [pc, #188]	; (800ad94 <xPortStartScheduler+0x134>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3b01      	subs	r3, #1
 800acdc:	4a2d      	ldr	r2, [pc, #180]	; (800ad94 <xPortStartScheduler+0x134>)
 800acde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d0ef      	beq.n	800acd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800acf6:	4b27      	ldr	r3, [pc, #156]	; (800ad94 <xPortStartScheduler+0x134>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1c3 0307 	rsb	r3, r3, #7
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d00a      	beq.n	800ad18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	60bb      	str	r3, [r7, #8]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad18:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	021b      	lsls	r3, r3, #8
 800ad1e:	4a1d      	ldr	r2, [pc, #116]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad22:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad2a:	4a1a      	ldr	r2, [pc, #104]	; (800ad94 <xPortStartScheduler+0x134>)
 800ad2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad36:	4b18      	ldr	r3, [pc, #96]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a17      	ldr	r2, [pc, #92]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad42:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a14      	ldr	r2, [pc, #80]	; (800ad98 <xPortStartScheduler+0x138>)
 800ad48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad4e:	f000 f8dd 	bl	800af0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad52:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <xPortStartScheduler+0x13c>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad58:	f000 f8fc 	bl	800af54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad5c:	4b10      	ldr	r3, [pc, #64]	; (800ada0 <xPortStartScheduler+0x140>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a0f      	ldr	r2, [pc, #60]	; (800ada0 <xPortStartScheduler+0x140>)
 800ad62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad68:	f7ff ff66 	bl	800ac38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad6c:	f7fe fe48 	bl	8009a00 <vTaskSwitchContext>
	prvTaskExitError();
 800ad70:	f7ff ff20 	bl	800abb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	e000ed00 	.word	0xe000ed00
 800ad84:	410fc271 	.word	0x410fc271
 800ad88:	410fc270 	.word	0x410fc270
 800ad8c:	e000e400 	.word	0xe000e400
 800ad90:	200016e0 	.word	0x200016e0
 800ad94:	200016e4 	.word	0x200016e4
 800ad98:	e000ed20 	.word	0xe000ed20
 800ad9c:	2000000c 	.word	0x2000000c
 800ada0:	e000ef34 	.word	0xe000ef34

0800ada4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	607b      	str	r3, [r7, #4]
}
 800adbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adbe:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <vPortEnterCritical+0x58>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	4a0d      	ldr	r2, [pc, #52]	; (800adfc <vPortEnterCritical+0x58>)
 800adc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adc8:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <vPortEnterCritical+0x58>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d10f      	bne.n	800adf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800add0:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <vPortEnterCritical+0x5c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	603b      	str	r3, [r7, #0]
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <vPortEnterCritical+0x4a>
	}
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	2000000c 	.word	0x2000000c
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae0a:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <vPortExitCritical+0x50>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10a      	bne.n	800ae28 <vPortExitCritical+0x24>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	607b      	str	r3, [r7, #4]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <vPortExitCritical+0x50>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <vPortExitCritical+0x50>)
 800ae30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae32:	4b08      	ldr	r3, [pc, #32]	; (800ae54 <vPortExitCritical+0x50>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d105      	bne.n	800ae46 <vPortExitCritical+0x42>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	f383 8811 	msr	BASEPRI, r3
}
 800ae44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	2000000c 	.word	0x2000000c
	...

0800ae60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae60:	f3ef 8009 	mrs	r0, PSP
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <pxCurrentTCBConst>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	f01e 0f10 	tst.w	lr, #16
 800ae70:	bf08      	it	eq
 800ae72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7a:	6010      	str	r0, [r2, #0]
 800ae7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae84:	f380 8811 	msr	BASEPRI, r0
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f7fe fdb6 	bl	8009a00 <vTaskSwitchContext>
 800ae94:	f04f 0000 	mov.w	r0, #0
 800ae98:	f380 8811 	msr	BASEPRI, r0
 800ae9c:	bc09      	pop	{r0, r3}
 800ae9e:	6819      	ldr	r1, [r3, #0]
 800aea0:	6808      	ldr	r0, [r1, #0]
 800aea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea6:	f01e 0f10 	tst.w	lr, #16
 800aeaa:	bf08      	it	eq
 800aeac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aeb0:	f380 8809 	msr	PSP, r0
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	f3af 8000 	nop.w

0800aec0 <pxCurrentTCBConst>:
 800aec0:	200010b4 	.word	0x200010b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop

0800aec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	607b      	str	r3, [r7, #4]
}
 800aee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aee2:	f7fe fcd3 	bl	800988c <xTaskIncrementTick>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aeec:	4b06      	ldr	r3, [pc, #24]	; (800af08 <xPortSysTickHandler+0x40>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	f383 8811 	msr	BASEPRI, r3
}
 800aefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af10:	4b0b      	ldr	r3, [pc, #44]	; (800af40 <vPortSetupTimerInterrupt+0x34>)
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af16:	4b0b      	ldr	r3, [pc, #44]	; (800af44 <vPortSetupTimerInterrupt+0x38>)
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af1c:	4b0a      	ldr	r3, [pc, #40]	; (800af48 <vPortSetupTimerInterrupt+0x3c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a0a      	ldr	r2, [pc, #40]	; (800af4c <vPortSetupTimerInterrupt+0x40>)
 800af22:	fba2 2303 	umull	r2, r3, r2, r3
 800af26:	099b      	lsrs	r3, r3, #6
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <vPortSetupTimerInterrupt+0x44>)
 800af2a:	3b01      	subs	r3, #1
 800af2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af2e:	4b04      	ldr	r3, [pc, #16]	; (800af40 <vPortSetupTimerInterrupt+0x34>)
 800af30:	2207      	movs	r2, #7
 800af32:	601a      	str	r2, [r3, #0]
}
 800af34:	bf00      	nop
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000e010 	.word	0xe000e010
 800af44:	e000e018 	.word	0xe000e018
 800af48:	20000000 	.word	0x20000000
 800af4c:	10624dd3 	.word	0x10624dd3
 800af50:	e000e014 	.word	0xe000e014

0800af54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af64 <vPortEnableVFP+0x10>
 800af58:	6801      	ldr	r1, [r0, #0]
 800af5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af5e:	6001      	str	r1, [r0, #0]
 800af60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af62:	bf00      	nop
 800af64:	e000ed88 	.word	0xe000ed88

0800af68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af6e:	f3ef 8305 	mrs	r3, IPSR
 800af72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b0f      	cmp	r3, #15
 800af78:	d914      	bls.n	800afa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af7a:	4a17      	ldr	r2, [pc, #92]	; (800afd8 <vPortValidateInterruptPriority+0x70>)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4413      	add	r3, r2
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af84:	4b15      	ldr	r3, [pc, #84]	; (800afdc <vPortValidateInterruptPriority+0x74>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	7afa      	ldrb	r2, [r7, #11]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d20a      	bcs.n	800afa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	607b      	str	r3, [r7, #4]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afa4:	4b0e      	ldr	r3, [pc, #56]	; (800afe0 <vPortValidateInterruptPriority+0x78>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <vPortValidateInterruptPriority+0x7c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d90a      	bls.n	800afca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	603b      	str	r3, [r7, #0]
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <vPortValidateInterruptPriority+0x60>
	}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	e000e3f0 	.word	0xe000e3f0
 800afdc:	200016e0 	.word	0x200016e0
 800afe0:	e000ed0c 	.word	0xe000ed0c
 800afe4:	200016e4 	.word	0x200016e4

0800afe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08a      	sub	sp, #40	; 0x28
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aff4:	f7fe fb7c 	bl	80096f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aff8:	4b5b      	ldr	r3, [pc, #364]	; (800b168 <pvPortMalloc+0x180>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b000:	f000 f920 	bl	800b244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b004:	4b59      	ldr	r3, [pc, #356]	; (800b16c <pvPortMalloc+0x184>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f040 8093 	bne.w	800b138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01d      	beq.n	800b054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b018:	2208      	movs	r2, #8
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	2b00      	cmp	r3, #0
 800b028:	d014      	beq.n	800b054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f023 0307 	bic.w	r3, r3, #7
 800b030:	3308      	adds	r3, #8
 800b032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <pvPortMalloc+0x6c>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	617b      	str	r3, [r7, #20]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d06e      	beq.n	800b138 <pvPortMalloc+0x150>
 800b05a:	4b45      	ldr	r3, [pc, #276]	; (800b170 <pvPortMalloc+0x188>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d869      	bhi.n	800b138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b064:	4b43      	ldr	r3, [pc, #268]	; (800b174 <pvPortMalloc+0x18c>)
 800b066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b068:	4b42      	ldr	r3, [pc, #264]	; (800b174 <pvPortMalloc+0x18c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b06e:	e004      	b.n	800b07a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d903      	bls.n	800b08c <pvPortMalloc+0xa4>
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1f1      	bne.n	800b070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b08c:	4b36      	ldr	r3, [pc, #216]	; (800b168 <pvPortMalloc+0x180>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	429a      	cmp	r2, r3
 800b094:	d050      	beq.n	800b138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2208      	movs	r2, #8
 800b09c:	4413      	add	r3, r2
 800b09e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d91f      	bls.n	800b0f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	613b      	str	r3, [r7, #16]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	1ad2      	subs	r2, r2, r3
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0f2:	69b8      	ldr	r0, [r7, #24]
 800b0f4:	f000 f908 	bl	800b308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0f8:	4b1d      	ldr	r3, [pc, #116]	; (800b170 <pvPortMalloc+0x188>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	4a1b      	ldr	r2, [pc, #108]	; (800b170 <pvPortMalloc+0x188>)
 800b104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b106:	4b1a      	ldr	r3, [pc, #104]	; (800b170 <pvPortMalloc+0x188>)
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <pvPortMalloc+0x190>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d203      	bcs.n	800b11a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b112:	4b17      	ldr	r3, [pc, #92]	; (800b170 <pvPortMalloc+0x188>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a18      	ldr	r2, [pc, #96]	; (800b178 <pvPortMalloc+0x190>)
 800b118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	4b13      	ldr	r3, [pc, #76]	; (800b16c <pvPortMalloc+0x184>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	431a      	orrs	r2, r3
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b12e:	4b13      	ldr	r3, [pc, #76]	; (800b17c <pvPortMalloc+0x194>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3301      	adds	r3, #1
 800b134:	4a11      	ldr	r2, [pc, #68]	; (800b17c <pvPortMalloc+0x194>)
 800b136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b138:	f7fe fae8 	bl	800970c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <pvPortMalloc+0x174>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	60fb      	str	r3, [r7, #12]
}
 800b158:	bf00      	nop
 800b15a:	e7fe      	b.n	800b15a <pvPortMalloc+0x172>
	return pvReturn;
 800b15c:	69fb      	ldr	r3, [r7, #28]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3728      	adds	r7, #40	; 0x28
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	200052f0 	.word	0x200052f0
 800b16c:	20005304 	.word	0x20005304
 800b170:	200052f4 	.word	0x200052f4
 800b174:	200052e8 	.word	0x200052e8
 800b178:	200052f8 	.word	0x200052f8
 800b17c:	200052fc 	.word	0x200052fc

0800b180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d04d      	beq.n	800b22e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b192:	2308      	movs	r3, #8
 800b194:	425b      	negs	r3, r3
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	4413      	add	r3, r2
 800b19a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	4b24      	ldr	r3, [pc, #144]	; (800b238 <vPortFree+0xb8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <vPortFree+0x44>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60fb      	str	r3, [r7, #12]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00a      	beq.n	800b1e2 <vPortFree+0x62>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	60bb      	str	r3, [r7, #8]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <vPortFree+0xb8>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01e      	beq.n	800b22e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d11a      	bne.n	800b22e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <vPortFree+0xb8>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	43db      	mvns	r3, r3
 800b202:	401a      	ands	r2, r3
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b208:	f7fe fa72 	bl	80096f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	4b0a      	ldr	r3, [pc, #40]	; (800b23c <vPortFree+0xbc>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4413      	add	r3, r2
 800b216:	4a09      	ldr	r2, [pc, #36]	; (800b23c <vPortFree+0xbc>)
 800b218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b21a:	6938      	ldr	r0, [r7, #16]
 800b21c:	f000 f874 	bl	800b308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <vPortFree+0xc0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	4a06      	ldr	r2, [pc, #24]	; (800b240 <vPortFree+0xc0>)
 800b228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b22a:	f7fe fa6f 	bl	800970c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b22e:	bf00      	nop
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20005304 	.word	0x20005304
 800b23c:	200052f4 	.word	0x200052f4
 800b240:	20005300 	.word	0x20005300

0800b244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b24a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b24e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b250:	4b27      	ldr	r3, [pc, #156]	; (800b2f0 <prvHeapInit+0xac>)
 800b252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f003 0307 	and.w	r3, r3, #7
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00c      	beq.n	800b278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3307      	adds	r3, #7
 800b262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0307 	bic.w	r3, r3, #7
 800b26a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	4a1f      	ldr	r2, [pc, #124]	; (800b2f0 <prvHeapInit+0xac>)
 800b274:	4413      	add	r3, r2
 800b276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b27c:	4a1d      	ldr	r2, [pc, #116]	; (800b2f4 <prvHeapInit+0xb0>)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b282:	4b1c      	ldr	r3, [pc, #112]	; (800b2f4 <prvHeapInit+0xb0>)
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b290:	2208      	movs	r2, #8
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	1a9b      	subs	r3, r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f023 0307 	bic.w	r3, r3, #7
 800b29e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4a15      	ldr	r2, [pc, #84]	; (800b2f8 <prvHeapInit+0xb4>)
 800b2a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2a6:	4b14      	ldr	r3, [pc, #80]	; (800b2f8 <prvHeapInit+0xb4>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2ae:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <prvHeapInit+0xb4>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2c4:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <prvHeapInit+0xb4>)
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <prvHeapInit+0xb8>)
 800b2d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	4a09      	ldr	r2, [pc, #36]	; (800b300 <prvHeapInit+0xbc>)
 800b2da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2dc:	4b09      	ldr	r3, [pc, #36]	; (800b304 <prvHeapInit+0xc0>)
 800b2de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2e2:	601a      	str	r2, [r3, #0]
}
 800b2e4:	bf00      	nop
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	200016e8 	.word	0x200016e8
 800b2f4:	200052e8 	.word	0x200052e8
 800b2f8:	200052f0 	.word	0x200052f0
 800b2fc:	200052f8 	.word	0x200052f8
 800b300:	200052f4 	.word	0x200052f4
 800b304:	20005304 	.word	0x20005304

0800b308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b310:	4b28      	ldr	r3, [pc, #160]	; (800b3b4 <prvInsertBlockIntoFreeList+0xac>)
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	e002      	b.n	800b31c <prvInsertBlockIntoFreeList+0x14>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	429a      	cmp	r2, r3
 800b324:	d8f7      	bhi.n	800b316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	4413      	add	r3, r2
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	429a      	cmp	r2, r3
 800b336:	d108      	bne.n	800b34a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	441a      	add	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	441a      	add	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d118      	bne.n	800b390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	4b15      	ldr	r3, [pc, #84]	; (800b3b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d00d      	beq.n	800b386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	441a      	add	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	e008      	b.n	800b398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b386:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	e003      	b.n	800b398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d002      	beq.n	800b3a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	200052e8 	.word	0x200052e8
 800b3b8:	200052f0 	.word	0x200052f0

0800b3bc <__errno>:
 800b3bc:	4b01      	ldr	r3, [pc, #4]	; (800b3c4 <__errno+0x8>)
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000010 	.word	0x20000010

0800b3c8 <std>:
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3d6:	6083      	str	r3, [r0, #8]
 800b3d8:	8181      	strh	r1, [r0, #12]
 800b3da:	6643      	str	r3, [r0, #100]	; 0x64
 800b3dc:	81c2      	strh	r2, [r0, #14]
 800b3de:	6183      	str	r3, [r0, #24]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	2208      	movs	r2, #8
 800b3e4:	305c      	adds	r0, #92	; 0x5c
 800b3e6:	f000 f91a 	bl	800b61e <memset>
 800b3ea:	4b05      	ldr	r3, [pc, #20]	; (800b400 <std+0x38>)
 800b3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800b3ee:	4b05      	ldr	r3, [pc, #20]	; (800b404 <std+0x3c>)
 800b3f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3f2:	4b05      	ldr	r3, [pc, #20]	; (800b408 <std+0x40>)
 800b3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <std+0x44>)
 800b3f8:	6224      	str	r4, [r4, #32]
 800b3fa:	6323      	str	r3, [r4, #48]	; 0x30
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	0800b969 	.word	0x0800b969
 800b404:	0800b98b 	.word	0x0800b98b
 800b408:	0800b9c3 	.word	0x0800b9c3
 800b40c:	0800b9e7 	.word	0x0800b9e7

0800b410 <_cleanup_r>:
 800b410:	4901      	ldr	r1, [pc, #4]	; (800b418 <_cleanup_r+0x8>)
 800b412:	f000 b8af 	b.w	800b574 <_fwalk_reent>
 800b416:	bf00      	nop
 800b418:	0800bcc1 	.word	0x0800bcc1

0800b41c <__sfmoreglue>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	2268      	movs	r2, #104	; 0x68
 800b420:	1e4d      	subs	r5, r1, #1
 800b422:	4355      	muls	r5, r2
 800b424:	460e      	mov	r6, r1
 800b426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b42a:	f000 f921 	bl	800b670 <_malloc_r>
 800b42e:	4604      	mov	r4, r0
 800b430:	b140      	cbz	r0, 800b444 <__sfmoreglue+0x28>
 800b432:	2100      	movs	r1, #0
 800b434:	e9c0 1600 	strd	r1, r6, [r0]
 800b438:	300c      	adds	r0, #12
 800b43a:	60a0      	str	r0, [r4, #8]
 800b43c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b440:	f000 f8ed 	bl	800b61e <memset>
 800b444:	4620      	mov	r0, r4
 800b446:	bd70      	pop	{r4, r5, r6, pc}

0800b448 <__sfp_lock_acquire>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__sfp_lock_acquire+0x8>)
 800b44a:	f000 b8d8 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	20005309 	.word	0x20005309

0800b454 <__sfp_lock_release>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__sfp_lock_release+0x8>)
 800b456:	f000 b8d3 	b.w	800b600 <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	20005309 	.word	0x20005309

0800b460 <__sinit_lock_acquire>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__sinit_lock_acquire+0x8>)
 800b462:	f000 b8cc 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800b466:	bf00      	nop
 800b468:	2000530a 	.word	0x2000530a

0800b46c <__sinit_lock_release>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__sinit_lock_release+0x8>)
 800b46e:	f000 b8c7 	b.w	800b600 <__retarget_lock_release_recursive>
 800b472:	bf00      	nop
 800b474:	2000530a 	.word	0x2000530a

0800b478 <__sinit>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	4604      	mov	r4, r0
 800b47c:	f7ff fff0 	bl	800b460 <__sinit_lock_acquire>
 800b480:	69a3      	ldr	r3, [r4, #24]
 800b482:	b11b      	cbz	r3, 800b48c <__sinit+0x14>
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	f7ff bff0 	b.w	800b46c <__sinit_lock_release>
 800b48c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b490:	6523      	str	r3, [r4, #80]	; 0x50
 800b492:	4b13      	ldr	r3, [pc, #76]	; (800b4e0 <__sinit+0x68>)
 800b494:	4a13      	ldr	r2, [pc, #76]	; (800b4e4 <__sinit+0x6c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	62a2      	str	r2, [r4, #40]	; 0x28
 800b49a:	42a3      	cmp	r3, r4
 800b49c:	bf04      	itt	eq
 800b49e:	2301      	moveq	r3, #1
 800b4a0:	61a3      	streq	r3, [r4, #24]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 f820 	bl	800b4e8 <__sfp>
 800b4a8:	6060      	str	r0, [r4, #4]
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 f81c 	bl	800b4e8 <__sfp>
 800b4b0:	60a0      	str	r0, [r4, #8]
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 f818 	bl	800b4e8 <__sfp>
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	60e0      	str	r0, [r4, #12]
 800b4bc:	2104      	movs	r1, #4
 800b4be:	6860      	ldr	r0, [r4, #4]
 800b4c0:	f7ff ff82 	bl	800b3c8 <std>
 800b4c4:	68a0      	ldr	r0, [r4, #8]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	2109      	movs	r1, #9
 800b4ca:	f7ff ff7d 	bl	800b3c8 <std>
 800b4ce:	68e0      	ldr	r0, [r4, #12]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	2112      	movs	r1, #18
 800b4d4:	f7ff ff78 	bl	800b3c8 <std>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	61a3      	str	r3, [r4, #24]
 800b4dc:	e7d2      	b.n	800b484 <__sinit+0xc>
 800b4de:	bf00      	nop
 800b4e0:	0800ca00 	.word	0x0800ca00
 800b4e4:	0800b411 	.word	0x0800b411

0800b4e8 <__sfp>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	f7ff ffac 	bl	800b448 <__sfp_lock_acquire>
 800b4f0:	4b1e      	ldr	r3, [pc, #120]	; (800b56c <__sfp+0x84>)
 800b4f2:	681e      	ldr	r6, [r3, #0]
 800b4f4:	69b3      	ldr	r3, [r6, #24]
 800b4f6:	b913      	cbnz	r3, 800b4fe <__sfp+0x16>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7ff ffbd 	bl	800b478 <__sinit>
 800b4fe:	3648      	adds	r6, #72	; 0x48
 800b500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b504:	3b01      	subs	r3, #1
 800b506:	d503      	bpl.n	800b510 <__sfp+0x28>
 800b508:	6833      	ldr	r3, [r6, #0]
 800b50a:	b30b      	cbz	r3, 800b550 <__sfp+0x68>
 800b50c:	6836      	ldr	r6, [r6, #0]
 800b50e:	e7f7      	b.n	800b500 <__sfp+0x18>
 800b510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b514:	b9d5      	cbnz	r5, 800b54c <__sfp+0x64>
 800b516:	4b16      	ldr	r3, [pc, #88]	; (800b570 <__sfp+0x88>)
 800b518:	60e3      	str	r3, [r4, #12]
 800b51a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b51e:	6665      	str	r5, [r4, #100]	; 0x64
 800b520:	f000 f86c 	bl	800b5fc <__retarget_lock_init_recursive>
 800b524:	f7ff ff96 	bl	800b454 <__sfp_lock_release>
 800b528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b52c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b530:	6025      	str	r5, [r4, #0]
 800b532:	61a5      	str	r5, [r4, #24]
 800b534:	2208      	movs	r2, #8
 800b536:	4629      	mov	r1, r5
 800b538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b53c:	f000 f86f 	bl	800b61e <memset>
 800b540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b548:	4620      	mov	r0, r4
 800b54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b54c:	3468      	adds	r4, #104	; 0x68
 800b54e:	e7d9      	b.n	800b504 <__sfp+0x1c>
 800b550:	2104      	movs	r1, #4
 800b552:	4638      	mov	r0, r7
 800b554:	f7ff ff62 	bl	800b41c <__sfmoreglue>
 800b558:	4604      	mov	r4, r0
 800b55a:	6030      	str	r0, [r6, #0]
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d1d5      	bne.n	800b50c <__sfp+0x24>
 800b560:	f7ff ff78 	bl	800b454 <__sfp_lock_release>
 800b564:	230c      	movs	r3, #12
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	e7ee      	b.n	800b548 <__sfp+0x60>
 800b56a:	bf00      	nop
 800b56c:	0800ca00 	.word	0x0800ca00
 800b570:	ffff0001 	.word	0xffff0001

0800b574 <_fwalk_reent>:
 800b574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b578:	4606      	mov	r6, r0
 800b57a:	4688      	mov	r8, r1
 800b57c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b580:	2700      	movs	r7, #0
 800b582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b586:	f1b9 0901 	subs.w	r9, r9, #1
 800b58a:	d505      	bpl.n	800b598 <_fwalk_reent+0x24>
 800b58c:	6824      	ldr	r4, [r4, #0]
 800b58e:	2c00      	cmp	r4, #0
 800b590:	d1f7      	bne.n	800b582 <_fwalk_reent+0xe>
 800b592:	4638      	mov	r0, r7
 800b594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b598:	89ab      	ldrh	r3, [r5, #12]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d907      	bls.n	800b5ae <_fwalk_reent+0x3a>
 800b59e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	d003      	beq.n	800b5ae <_fwalk_reent+0x3a>
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	47c0      	blx	r8
 800b5ac:	4307      	orrs	r7, r0
 800b5ae:	3568      	adds	r5, #104	; 0x68
 800b5b0:	e7e9      	b.n	800b586 <_fwalk_reent+0x12>
	...

0800b5b4 <__libc_init_array>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4d0d      	ldr	r5, [pc, #52]	; (800b5ec <__libc_init_array+0x38>)
 800b5b8:	4c0d      	ldr	r4, [pc, #52]	; (800b5f0 <__libc_init_array+0x3c>)
 800b5ba:	1b64      	subs	r4, r4, r5
 800b5bc:	10a4      	asrs	r4, r4, #2
 800b5be:	2600      	movs	r6, #0
 800b5c0:	42a6      	cmp	r6, r4
 800b5c2:	d109      	bne.n	800b5d8 <__libc_init_array+0x24>
 800b5c4:	4d0b      	ldr	r5, [pc, #44]	; (800b5f4 <__libc_init_array+0x40>)
 800b5c6:	4c0c      	ldr	r4, [pc, #48]	; (800b5f8 <__libc_init_array+0x44>)
 800b5c8:	f000 ffa8 	bl	800c51c <_init>
 800b5cc:	1b64      	subs	r4, r4, r5
 800b5ce:	10a4      	asrs	r4, r4, #2
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	42a6      	cmp	r6, r4
 800b5d4:	d105      	bne.n	800b5e2 <__libc_init_array+0x2e>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5dc:	4798      	blx	r3
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7ee      	b.n	800b5c0 <__libc_init_array+0xc>
 800b5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e6:	4798      	blx	r3
 800b5e8:	3601      	adds	r6, #1
 800b5ea:	e7f2      	b.n	800b5d2 <__libc_init_array+0x1e>
 800b5ec:	0800ca40 	.word	0x0800ca40
 800b5f0:	0800ca40 	.word	0x0800ca40
 800b5f4:	0800ca40 	.word	0x0800ca40
 800b5f8:	0800ca44 	.word	0x0800ca44

0800b5fc <__retarget_lock_init_recursive>:
 800b5fc:	4770      	bx	lr

0800b5fe <__retarget_lock_acquire_recursive>:
 800b5fe:	4770      	bx	lr

0800b600 <__retarget_lock_release_recursive>:
 800b600:	4770      	bx	lr

0800b602 <memcpy>:
 800b602:	440a      	add	r2, r1
 800b604:	4291      	cmp	r1, r2
 800b606:	f100 33ff 	add.w	r3, r0, #4294967295
 800b60a:	d100      	bne.n	800b60e <memcpy+0xc>
 800b60c:	4770      	bx	lr
 800b60e:	b510      	push	{r4, lr}
 800b610:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b614:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b618:	4291      	cmp	r1, r2
 800b61a:	d1f9      	bne.n	800b610 <memcpy+0xe>
 800b61c:	bd10      	pop	{r4, pc}

0800b61e <memset>:
 800b61e:	4402      	add	r2, r0
 800b620:	4603      	mov	r3, r0
 800b622:	4293      	cmp	r3, r2
 800b624:	d100      	bne.n	800b628 <memset+0xa>
 800b626:	4770      	bx	lr
 800b628:	f803 1b01 	strb.w	r1, [r3], #1
 800b62c:	e7f9      	b.n	800b622 <memset+0x4>
	...

0800b630 <sbrk_aligned>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4e0e      	ldr	r6, [pc, #56]	; (800b66c <sbrk_aligned+0x3c>)
 800b634:	460c      	mov	r4, r1
 800b636:	6831      	ldr	r1, [r6, #0]
 800b638:	4605      	mov	r5, r0
 800b63a:	b911      	cbnz	r1, 800b642 <sbrk_aligned+0x12>
 800b63c:	f000 f984 	bl	800b948 <_sbrk_r>
 800b640:	6030      	str	r0, [r6, #0]
 800b642:	4621      	mov	r1, r4
 800b644:	4628      	mov	r0, r5
 800b646:	f000 f97f 	bl	800b948 <_sbrk_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	d00a      	beq.n	800b664 <sbrk_aligned+0x34>
 800b64e:	1cc4      	adds	r4, r0, #3
 800b650:	f024 0403 	bic.w	r4, r4, #3
 800b654:	42a0      	cmp	r0, r4
 800b656:	d007      	beq.n	800b668 <sbrk_aligned+0x38>
 800b658:	1a21      	subs	r1, r4, r0
 800b65a:	4628      	mov	r0, r5
 800b65c:	f000 f974 	bl	800b948 <_sbrk_r>
 800b660:	3001      	adds	r0, #1
 800b662:	d101      	bne.n	800b668 <sbrk_aligned+0x38>
 800b664:	f04f 34ff 	mov.w	r4, #4294967295
 800b668:	4620      	mov	r0, r4
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	20005310 	.word	0x20005310

0800b670 <_malloc_r>:
 800b670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b674:	1ccd      	adds	r5, r1, #3
 800b676:	f025 0503 	bic.w	r5, r5, #3
 800b67a:	3508      	adds	r5, #8
 800b67c:	2d0c      	cmp	r5, #12
 800b67e:	bf38      	it	cc
 800b680:	250c      	movcc	r5, #12
 800b682:	2d00      	cmp	r5, #0
 800b684:	4607      	mov	r7, r0
 800b686:	db01      	blt.n	800b68c <_malloc_r+0x1c>
 800b688:	42a9      	cmp	r1, r5
 800b68a:	d905      	bls.n	800b698 <_malloc_r+0x28>
 800b68c:	230c      	movs	r3, #12
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	2600      	movs	r6, #0
 800b692:	4630      	mov	r0, r6
 800b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b698:	4e2e      	ldr	r6, [pc, #184]	; (800b754 <_malloc_r+0xe4>)
 800b69a:	f000 fbc5 	bl	800be28 <__malloc_lock>
 800b69e:	6833      	ldr	r3, [r6, #0]
 800b6a0:	461c      	mov	r4, r3
 800b6a2:	bb34      	cbnz	r4, 800b6f2 <_malloc_r+0x82>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	f7ff ffc2 	bl	800b630 <sbrk_aligned>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	d14d      	bne.n	800b74e <_malloc_r+0xde>
 800b6b2:	6834      	ldr	r4, [r6, #0]
 800b6b4:	4626      	mov	r6, r4
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	d140      	bne.n	800b73c <_malloc_r+0xcc>
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4638      	mov	r0, r7
 800b6c0:	eb04 0803 	add.w	r8, r4, r3
 800b6c4:	f000 f940 	bl	800b948 <_sbrk_r>
 800b6c8:	4580      	cmp	r8, r0
 800b6ca:	d13a      	bne.n	800b742 <_malloc_r+0xd2>
 800b6cc:	6821      	ldr	r1, [r4, #0]
 800b6ce:	3503      	adds	r5, #3
 800b6d0:	1a6d      	subs	r5, r5, r1
 800b6d2:	f025 0503 	bic.w	r5, r5, #3
 800b6d6:	3508      	adds	r5, #8
 800b6d8:	2d0c      	cmp	r5, #12
 800b6da:	bf38      	it	cc
 800b6dc:	250c      	movcc	r5, #12
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7ff ffa5 	bl	800b630 <sbrk_aligned>
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d02b      	beq.n	800b742 <_malloc_r+0xd2>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	442b      	add	r3, r5
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	e00e      	b.n	800b710 <_malloc_r+0xa0>
 800b6f2:	6822      	ldr	r2, [r4, #0]
 800b6f4:	1b52      	subs	r2, r2, r5
 800b6f6:	d41e      	bmi.n	800b736 <_malloc_r+0xc6>
 800b6f8:	2a0b      	cmp	r2, #11
 800b6fa:	d916      	bls.n	800b72a <_malloc_r+0xba>
 800b6fc:	1961      	adds	r1, r4, r5
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	6025      	str	r5, [r4, #0]
 800b702:	bf18      	it	ne
 800b704:	6059      	strne	r1, [r3, #4]
 800b706:	6863      	ldr	r3, [r4, #4]
 800b708:	bf08      	it	eq
 800b70a:	6031      	streq	r1, [r6, #0]
 800b70c:	5162      	str	r2, [r4, r5]
 800b70e:	604b      	str	r3, [r1, #4]
 800b710:	4638      	mov	r0, r7
 800b712:	f104 060b 	add.w	r6, r4, #11
 800b716:	f000 fb8d 	bl	800be34 <__malloc_unlock>
 800b71a:	f026 0607 	bic.w	r6, r6, #7
 800b71e:	1d23      	adds	r3, r4, #4
 800b720:	1af2      	subs	r2, r6, r3
 800b722:	d0b6      	beq.n	800b692 <_malloc_r+0x22>
 800b724:	1b9b      	subs	r3, r3, r6
 800b726:	50a3      	str	r3, [r4, r2]
 800b728:	e7b3      	b.n	800b692 <_malloc_r+0x22>
 800b72a:	6862      	ldr	r2, [r4, #4]
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	bf0c      	ite	eq
 800b730:	6032      	streq	r2, [r6, #0]
 800b732:	605a      	strne	r2, [r3, #4]
 800b734:	e7ec      	b.n	800b710 <_malloc_r+0xa0>
 800b736:	4623      	mov	r3, r4
 800b738:	6864      	ldr	r4, [r4, #4]
 800b73a:	e7b2      	b.n	800b6a2 <_malloc_r+0x32>
 800b73c:	4634      	mov	r4, r6
 800b73e:	6876      	ldr	r6, [r6, #4]
 800b740:	e7b9      	b.n	800b6b6 <_malloc_r+0x46>
 800b742:	230c      	movs	r3, #12
 800b744:	603b      	str	r3, [r7, #0]
 800b746:	4638      	mov	r0, r7
 800b748:	f000 fb74 	bl	800be34 <__malloc_unlock>
 800b74c:	e7a1      	b.n	800b692 <_malloc_r+0x22>
 800b74e:	6025      	str	r5, [r4, #0]
 800b750:	e7de      	b.n	800b710 <_malloc_r+0xa0>
 800b752:	bf00      	nop
 800b754:	2000530c 	.word	0x2000530c

0800b758 <iprintf>:
 800b758:	b40f      	push	{r0, r1, r2, r3}
 800b75a:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <iprintf+0x2c>)
 800b75c:	b513      	push	{r0, r1, r4, lr}
 800b75e:	681c      	ldr	r4, [r3, #0]
 800b760:	b124      	cbz	r4, 800b76c <iprintf+0x14>
 800b762:	69a3      	ldr	r3, [r4, #24]
 800b764:	b913      	cbnz	r3, 800b76c <iprintf+0x14>
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff fe86 	bl	800b478 <__sinit>
 800b76c:	ab05      	add	r3, sp, #20
 800b76e:	9a04      	ldr	r2, [sp, #16]
 800b770:	68a1      	ldr	r1, [r4, #8]
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fbd9 	bl	800bf2c <_vfiprintf_r>
 800b77a:	b002      	add	sp, #8
 800b77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b780:	b004      	add	sp, #16
 800b782:	4770      	bx	lr
 800b784:	20000010 	.word	0x20000010

0800b788 <_puts_r>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	460e      	mov	r6, r1
 800b78c:	4605      	mov	r5, r0
 800b78e:	b118      	cbz	r0, 800b798 <_puts_r+0x10>
 800b790:	6983      	ldr	r3, [r0, #24]
 800b792:	b90b      	cbnz	r3, 800b798 <_puts_r+0x10>
 800b794:	f7ff fe70 	bl	800b478 <__sinit>
 800b798:	69ab      	ldr	r3, [r5, #24]
 800b79a:	68ac      	ldr	r4, [r5, #8]
 800b79c:	b913      	cbnz	r3, 800b7a4 <_puts_r+0x1c>
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7ff fe6a 	bl	800b478 <__sinit>
 800b7a4:	4b2c      	ldr	r3, [pc, #176]	; (800b858 <_puts_r+0xd0>)
 800b7a6:	429c      	cmp	r4, r3
 800b7a8:	d120      	bne.n	800b7ec <_puts_r+0x64>
 800b7aa:	686c      	ldr	r4, [r5, #4]
 800b7ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7ae:	07db      	lsls	r3, r3, #31
 800b7b0:	d405      	bmi.n	800b7be <_puts_r+0x36>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	0598      	lsls	r0, r3, #22
 800b7b6:	d402      	bmi.n	800b7be <_puts_r+0x36>
 800b7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ba:	f7ff ff20 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	0719      	lsls	r1, r3, #28
 800b7c2:	d51d      	bpl.n	800b800 <_puts_r+0x78>
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	b1db      	cbz	r3, 800b800 <_puts_r+0x78>
 800b7c8:	3e01      	subs	r6, #1
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	60a3      	str	r3, [r4, #8]
 800b7d4:	bb39      	cbnz	r1, 800b826 <_puts_r+0x9e>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da38      	bge.n	800b84c <_puts_r+0xc4>
 800b7da:	4622      	mov	r2, r4
 800b7dc:	210a      	movs	r1, #10
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f000 f906 	bl	800b9f0 <__swbuf_r>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d011      	beq.n	800b80c <_puts_r+0x84>
 800b7e8:	250a      	movs	r5, #10
 800b7ea:	e011      	b.n	800b810 <_puts_r+0x88>
 800b7ec:	4b1b      	ldr	r3, [pc, #108]	; (800b85c <_puts_r+0xd4>)
 800b7ee:	429c      	cmp	r4, r3
 800b7f0:	d101      	bne.n	800b7f6 <_puts_r+0x6e>
 800b7f2:	68ac      	ldr	r4, [r5, #8]
 800b7f4:	e7da      	b.n	800b7ac <_puts_r+0x24>
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	; (800b860 <_puts_r+0xd8>)
 800b7f8:	429c      	cmp	r4, r3
 800b7fa:	bf08      	it	eq
 800b7fc:	68ec      	ldreq	r4, [r5, #12]
 800b7fe:	e7d5      	b.n	800b7ac <_puts_r+0x24>
 800b800:	4621      	mov	r1, r4
 800b802:	4628      	mov	r0, r5
 800b804:	f000 f958 	bl	800bab8 <__swsetup_r>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0dd      	beq.n	800b7c8 <_puts_r+0x40>
 800b80c:	f04f 35ff 	mov.w	r5, #4294967295
 800b810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b812:	07da      	lsls	r2, r3, #31
 800b814:	d405      	bmi.n	800b822 <_puts_r+0x9a>
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	059b      	lsls	r3, r3, #22
 800b81a:	d402      	bmi.n	800b822 <_puts_r+0x9a>
 800b81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b81e:	f7ff feef 	bl	800b600 <__retarget_lock_release_recursive>
 800b822:	4628      	mov	r0, r5
 800b824:	bd70      	pop	{r4, r5, r6, pc}
 800b826:	2b00      	cmp	r3, #0
 800b828:	da04      	bge.n	800b834 <_puts_r+0xac>
 800b82a:	69a2      	ldr	r2, [r4, #24]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	dc06      	bgt.n	800b83e <_puts_r+0xb6>
 800b830:	290a      	cmp	r1, #10
 800b832:	d004      	beq.n	800b83e <_puts_r+0xb6>
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	1c5a      	adds	r2, r3, #1
 800b838:	6022      	str	r2, [r4, #0]
 800b83a:	7019      	strb	r1, [r3, #0]
 800b83c:	e7c5      	b.n	800b7ca <_puts_r+0x42>
 800b83e:	4622      	mov	r2, r4
 800b840:	4628      	mov	r0, r5
 800b842:	f000 f8d5 	bl	800b9f0 <__swbuf_r>
 800b846:	3001      	adds	r0, #1
 800b848:	d1bf      	bne.n	800b7ca <_puts_r+0x42>
 800b84a:	e7df      	b.n	800b80c <_puts_r+0x84>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	250a      	movs	r5, #10
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	6022      	str	r2, [r4, #0]
 800b854:	701d      	strb	r5, [r3, #0]
 800b856:	e7db      	b.n	800b810 <_puts_r+0x88>
 800b858:	0800c9c0 	.word	0x0800c9c0
 800b85c:	0800c9e0 	.word	0x0800c9e0
 800b860:	0800c9a0 	.word	0x0800c9a0

0800b864 <puts>:
 800b864:	4b02      	ldr	r3, [pc, #8]	; (800b870 <puts+0xc>)
 800b866:	4601      	mov	r1, r0
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	f7ff bf8d 	b.w	800b788 <_puts_r>
 800b86e:	bf00      	nop
 800b870:	20000010 	.word	0x20000010

0800b874 <cleanup_glue>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	460c      	mov	r4, r1
 800b878:	6809      	ldr	r1, [r1, #0]
 800b87a:	4605      	mov	r5, r0
 800b87c:	b109      	cbz	r1, 800b882 <cleanup_glue+0xe>
 800b87e:	f7ff fff9 	bl	800b874 <cleanup_glue>
 800b882:	4621      	mov	r1, r4
 800b884:	4628      	mov	r0, r5
 800b886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b88a:	f000 bad9 	b.w	800be40 <_free_r>
	...

0800b890 <_reclaim_reent>:
 800b890:	4b2c      	ldr	r3, [pc, #176]	; (800b944 <_reclaim_reent+0xb4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4283      	cmp	r3, r0
 800b896:	b570      	push	{r4, r5, r6, lr}
 800b898:	4604      	mov	r4, r0
 800b89a:	d051      	beq.n	800b940 <_reclaim_reent+0xb0>
 800b89c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b89e:	b143      	cbz	r3, 800b8b2 <_reclaim_reent+0x22>
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d14a      	bne.n	800b93c <_reclaim_reent+0xac>
 800b8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a8:	6819      	ldr	r1, [r3, #0]
 800b8aa:	b111      	cbz	r1, 800b8b2 <_reclaim_reent+0x22>
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 fac7 	bl	800be40 <_free_r>
 800b8b2:	6961      	ldr	r1, [r4, #20]
 800b8b4:	b111      	cbz	r1, 800b8bc <_reclaim_reent+0x2c>
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 fac2 	bl	800be40 <_free_r>
 800b8bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b8be:	b111      	cbz	r1, 800b8c6 <_reclaim_reent+0x36>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f000 fabd 	bl	800be40 <_free_r>
 800b8c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8c8:	b111      	cbz	r1, 800b8d0 <_reclaim_reent+0x40>
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fab8 	bl	800be40 <_free_r>
 800b8d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b8d2:	b111      	cbz	r1, 800b8da <_reclaim_reent+0x4a>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fab3 	bl	800be40 <_free_r>
 800b8da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b8dc:	b111      	cbz	r1, 800b8e4 <_reclaim_reent+0x54>
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 faae 	bl	800be40 <_free_r>
 800b8e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b8e6:	b111      	cbz	r1, 800b8ee <_reclaim_reent+0x5e>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 faa9 	bl	800be40 <_free_r>
 800b8ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b8f0:	b111      	cbz	r1, 800b8f8 <_reclaim_reent+0x68>
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 faa4 	bl	800be40 <_free_r>
 800b8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8fa:	b111      	cbz	r1, 800b902 <_reclaim_reent+0x72>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 fa9f 	bl	800be40 <_free_r>
 800b902:	69a3      	ldr	r3, [r4, #24]
 800b904:	b1e3      	cbz	r3, 800b940 <_reclaim_reent+0xb0>
 800b906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b908:	4620      	mov	r0, r4
 800b90a:	4798      	blx	r3
 800b90c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b90e:	b1b9      	cbz	r1, 800b940 <_reclaim_reent+0xb0>
 800b910:	4620      	mov	r0, r4
 800b912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b916:	f7ff bfad 	b.w	800b874 <cleanup_glue>
 800b91a:	5949      	ldr	r1, [r1, r5]
 800b91c:	b941      	cbnz	r1, 800b930 <_reclaim_reent+0xa0>
 800b91e:	3504      	adds	r5, #4
 800b920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b922:	2d80      	cmp	r5, #128	; 0x80
 800b924:	68d9      	ldr	r1, [r3, #12]
 800b926:	d1f8      	bne.n	800b91a <_reclaim_reent+0x8a>
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 fa89 	bl	800be40 <_free_r>
 800b92e:	e7ba      	b.n	800b8a6 <_reclaim_reent+0x16>
 800b930:	680e      	ldr	r6, [r1, #0]
 800b932:	4620      	mov	r0, r4
 800b934:	f000 fa84 	bl	800be40 <_free_r>
 800b938:	4631      	mov	r1, r6
 800b93a:	e7ef      	b.n	800b91c <_reclaim_reent+0x8c>
 800b93c:	2500      	movs	r5, #0
 800b93e:	e7ef      	b.n	800b920 <_reclaim_reent+0x90>
 800b940:	bd70      	pop	{r4, r5, r6, pc}
 800b942:	bf00      	nop
 800b944:	20000010 	.word	0x20000010

0800b948 <_sbrk_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d06      	ldr	r5, [pc, #24]	; (800b964 <_sbrk_r+0x1c>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7f6 fb32 	bl	8001fbc <_sbrk>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_sbrk_r+0x1a>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_sbrk_r+0x1a>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	20005314 	.word	0x20005314

0800b968 <__sread>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b970:	f000 fda0 	bl	800c4b4 <_read_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	bfab      	itete	ge
 800b978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b97a:	89a3      	ldrhlt	r3, [r4, #12]
 800b97c:	181b      	addge	r3, r3, r0
 800b97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b982:	bfac      	ite	ge
 800b984:	6563      	strge	r3, [r4, #84]	; 0x54
 800b986:	81a3      	strhlt	r3, [r4, #12]
 800b988:	bd10      	pop	{r4, pc}

0800b98a <__swrite>:
 800b98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98e:	461f      	mov	r7, r3
 800b990:	898b      	ldrh	r3, [r1, #12]
 800b992:	05db      	lsls	r3, r3, #23
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	4616      	mov	r6, r2
 800b99a:	d505      	bpl.n	800b9a8 <__swrite+0x1e>
 800b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f000 f9c8 	bl	800bd38 <_lseek_r>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9be:	f000 b869 	b.w	800ba94 <_write_r>

0800b9c2 <__sseek>:
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ca:	f000 f9b5 	bl	800bd38 <_lseek_r>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	bf15      	itete	ne
 800b9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9de:	81a3      	strheq	r3, [r4, #12]
 800b9e0:	bf18      	it	ne
 800b9e2:	81a3      	strhne	r3, [r4, #12]
 800b9e4:	bd10      	pop	{r4, pc}

0800b9e6 <__sclose>:
 800b9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ea:	f000 b8d3 	b.w	800bb94 <_close_r>
	...

0800b9f0 <__swbuf_r>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	460e      	mov	r6, r1
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	b118      	cbz	r0, 800ba02 <__swbuf_r+0x12>
 800b9fa:	6983      	ldr	r3, [r0, #24]
 800b9fc:	b90b      	cbnz	r3, 800ba02 <__swbuf_r+0x12>
 800b9fe:	f7ff fd3b 	bl	800b478 <__sinit>
 800ba02:	4b21      	ldr	r3, [pc, #132]	; (800ba88 <__swbuf_r+0x98>)
 800ba04:	429c      	cmp	r4, r3
 800ba06:	d12b      	bne.n	800ba60 <__swbuf_r+0x70>
 800ba08:	686c      	ldr	r4, [r5, #4]
 800ba0a:	69a3      	ldr	r3, [r4, #24]
 800ba0c:	60a3      	str	r3, [r4, #8]
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	071a      	lsls	r2, r3, #28
 800ba12:	d52f      	bpl.n	800ba74 <__swbuf_r+0x84>
 800ba14:	6923      	ldr	r3, [r4, #16]
 800ba16:	b36b      	cbz	r3, 800ba74 <__swbuf_r+0x84>
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	6820      	ldr	r0, [r4, #0]
 800ba1c:	1ac0      	subs	r0, r0, r3
 800ba1e:	6963      	ldr	r3, [r4, #20]
 800ba20:	b2f6      	uxtb	r6, r6
 800ba22:	4283      	cmp	r3, r0
 800ba24:	4637      	mov	r7, r6
 800ba26:	dc04      	bgt.n	800ba32 <__swbuf_r+0x42>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 f948 	bl	800bcc0 <_fflush_r>
 800ba30:	bb30      	cbnz	r0, 800ba80 <__swbuf_r+0x90>
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	60a3      	str	r3, [r4, #8]
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	701e      	strb	r6, [r3, #0]
 800ba40:	6963      	ldr	r3, [r4, #20]
 800ba42:	3001      	adds	r0, #1
 800ba44:	4283      	cmp	r3, r0
 800ba46:	d004      	beq.n	800ba52 <__swbuf_r+0x62>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	07db      	lsls	r3, r3, #31
 800ba4c:	d506      	bpl.n	800ba5c <__swbuf_r+0x6c>
 800ba4e:	2e0a      	cmp	r6, #10
 800ba50:	d104      	bne.n	800ba5c <__swbuf_r+0x6c>
 800ba52:	4621      	mov	r1, r4
 800ba54:	4628      	mov	r0, r5
 800ba56:	f000 f933 	bl	800bcc0 <_fflush_r>
 800ba5a:	b988      	cbnz	r0, 800ba80 <__swbuf_r+0x90>
 800ba5c:	4638      	mov	r0, r7
 800ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <__swbuf_r+0x9c>)
 800ba62:	429c      	cmp	r4, r3
 800ba64:	d101      	bne.n	800ba6a <__swbuf_r+0x7a>
 800ba66:	68ac      	ldr	r4, [r5, #8]
 800ba68:	e7cf      	b.n	800ba0a <__swbuf_r+0x1a>
 800ba6a:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <__swbuf_r+0xa0>)
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	bf08      	it	eq
 800ba70:	68ec      	ldreq	r4, [r5, #12]
 800ba72:	e7ca      	b.n	800ba0a <__swbuf_r+0x1a>
 800ba74:	4621      	mov	r1, r4
 800ba76:	4628      	mov	r0, r5
 800ba78:	f000 f81e 	bl	800bab8 <__swsetup_r>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0cb      	beq.n	800ba18 <__swbuf_r+0x28>
 800ba80:	f04f 37ff 	mov.w	r7, #4294967295
 800ba84:	e7ea      	b.n	800ba5c <__swbuf_r+0x6c>
 800ba86:	bf00      	nop
 800ba88:	0800c9c0 	.word	0x0800c9c0
 800ba8c:	0800c9e0 	.word	0x0800c9e0
 800ba90:	0800c9a0 	.word	0x0800c9a0

0800ba94 <_write_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d07      	ldr	r5, [pc, #28]	; (800bab4 <_write_r+0x20>)
 800ba98:	4604      	mov	r4, r0
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	602a      	str	r2, [r5, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f7f5 ffda 	bl	8001a5c <_write>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_write_r+0x1e>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_write_r+0x1e>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	20005314 	.word	0x20005314

0800bab8 <__swsetup_r>:
 800bab8:	4b32      	ldr	r3, [pc, #200]	; (800bb84 <__swsetup_r+0xcc>)
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	681d      	ldr	r5, [r3, #0]
 800babe:	4606      	mov	r6, r0
 800bac0:	460c      	mov	r4, r1
 800bac2:	b125      	cbz	r5, 800bace <__swsetup_r+0x16>
 800bac4:	69ab      	ldr	r3, [r5, #24]
 800bac6:	b913      	cbnz	r3, 800bace <__swsetup_r+0x16>
 800bac8:	4628      	mov	r0, r5
 800baca:	f7ff fcd5 	bl	800b478 <__sinit>
 800bace:	4b2e      	ldr	r3, [pc, #184]	; (800bb88 <__swsetup_r+0xd0>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d10f      	bne.n	800baf4 <__swsetup_r+0x3c>
 800bad4:	686c      	ldr	r4, [r5, #4]
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800badc:	0719      	lsls	r1, r3, #28
 800bade:	d42c      	bmi.n	800bb3a <__swsetup_r+0x82>
 800bae0:	06dd      	lsls	r5, r3, #27
 800bae2:	d411      	bmi.n	800bb08 <__swsetup_r+0x50>
 800bae4:	2309      	movs	r3, #9
 800bae6:	6033      	str	r3, [r6, #0]
 800bae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800baec:	81a3      	strh	r3, [r4, #12]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	e03e      	b.n	800bb72 <__swsetup_r+0xba>
 800baf4:	4b25      	ldr	r3, [pc, #148]	; (800bb8c <__swsetup_r+0xd4>)
 800baf6:	429c      	cmp	r4, r3
 800baf8:	d101      	bne.n	800bafe <__swsetup_r+0x46>
 800bafa:	68ac      	ldr	r4, [r5, #8]
 800bafc:	e7eb      	b.n	800bad6 <__swsetup_r+0x1e>
 800bafe:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <__swsetup_r+0xd8>)
 800bb00:	429c      	cmp	r4, r3
 800bb02:	bf08      	it	eq
 800bb04:	68ec      	ldreq	r4, [r5, #12]
 800bb06:	e7e6      	b.n	800bad6 <__swsetup_r+0x1e>
 800bb08:	0758      	lsls	r0, r3, #29
 800bb0a:	d512      	bpl.n	800bb32 <__swsetup_r+0x7a>
 800bb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb0e:	b141      	cbz	r1, 800bb22 <__swsetup_r+0x6a>
 800bb10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb14:	4299      	cmp	r1, r3
 800bb16:	d002      	beq.n	800bb1e <__swsetup_r+0x66>
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f000 f991 	bl	800be40 <_free_r>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	6363      	str	r3, [r4, #52]	; 0x34
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb28:	81a3      	strh	r3, [r4, #12]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	6063      	str	r3, [r4, #4]
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	f043 0308 	orr.w	r3, r3, #8
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	b94b      	cbnz	r3, 800bb52 <__swsetup_r+0x9a>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb48:	d003      	beq.n	800bb52 <__swsetup_r+0x9a>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f000 f92b 	bl	800bda8 <__smakebuf_r>
 800bb52:	89a0      	ldrh	r0, [r4, #12]
 800bb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb58:	f010 0301 	ands.w	r3, r0, #1
 800bb5c:	d00a      	beq.n	800bb74 <__swsetup_r+0xbc>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60a3      	str	r3, [r4, #8]
 800bb62:	6963      	ldr	r3, [r4, #20]
 800bb64:	425b      	negs	r3, r3
 800bb66:	61a3      	str	r3, [r4, #24]
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	b943      	cbnz	r3, 800bb7e <__swsetup_r+0xc6>
 800bb6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb70:	d1ba      	bne.n	800bae8 <__swsetup_r+0x30>
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	0781      	lsls	r1, r0, #30
 800bb76:	bf58      	it	pl
 800bb78:	6963      	ldrpl	r3, [r4, #20]
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	e7f4      	b.n	800bb68 <__swsetup_r+0xb0>
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e7f7      	b.n	800bb72 <__swsetup_r+0xba>
 800bb82:	bf00      	nop
 800bb84:	20000010 	.word	0x20000010
 800bb88:	0800c9c0 	.word	0x0800c9c0
 800bb8c:	0800c9e0 	.word	0x0800c9e0
 800bb90:	0800c9a0 	.word	0x0800c9a0

0800bb94 <_close_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d06      	ldr	r5, [pc, #24]	; (800bbb0 <_close_r+0x1c>)
 800bb98:	2300      	movs	r3, #0
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	602b      	str	r3, [r5, #0]
 800bba0:	f7f6 f9d7 	bl	8001f52 <_close>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d102      	bne.n	800bbae <_close_r+0x1a>
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	b103      	cbz	r3, 800bbae <_close_r+0x1a>
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	20005314 	.word	0x20005314

0800bbb4 <__sflush_r>:
 800bbb4:	898a      	ldrh	r2, [r1, #12]
 800bbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbba:	4605      	mov	r5, r0
 800bbbc:	0710      	lsls	r0, r2, #28
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	d458      	bmi.n	800bc74 <__sflush_r+0xc0>
 800bbc2:	684b      	ldr	r3, [r1, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	dc05      	bgt.n	800bbd4 <__sflush_r+0x20>
 800bbc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	dc02      	bgt.n	800bbd4 <__sflush_r+0x20>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	d0f9      	beq.n	800bbce <__sflush_r+0x1a>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbe0:	682f      	ldr	r7, [r5, #0]
 800bbe2:	602b      	str	r3, [r5, #0]
 800bbe4:	d032      	beq.n	800bc4c <__sflush_r+0x98>
 800bbe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	075a      	lsls	r2, r3, #29
 800bbec:	d505      	bpl.n	800bbfa <__sflush_r+0x46>
 800bbee:	6863      	ldr	r3, [r4, #4]
 800bbf0:	1ac0      	subs	r0, r0, r3
 800bbf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbf4:	b10b      	cbz	r3, 800bbfa <__sflush_r+0x46>
 800bbf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbf8:	1ac0      	subs	r0, r0, r3
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc00:	6a21      	ldr	r1, [r4, #32]
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b0      	blx	r6
 800bc06:	1c43      	adds	r3, r0, #1
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	d106      	bne.n	800bc1a <__sflush_r+0x66>
 800bc0c:	6829      	ldr	r1, [r5, #0]
 800bc0e:	291d      	cmp	r1, #29
 800bc10:	d82c      	bhi.n	800bc6c <__sflush_r+0xb8>
 800bc12:	4a2a      	ldr	r2, [pc, #168]	; (800bcbc <__sflush_r+0x108>)
 800bc14:	40ca      	lsrs	r2, r1
 800bc16:	07d6      	lsls	r6, r2, #31
 800bc18:	d528      	bpl.n	800bc6c <__sflush_r+0xb8>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	6062      	str	r2, [r4, #4]
 800bc1e:	04d9      	lsls	r1, r3, #19
 800bc20:	6922      	ldr	r2, [r4, #16]
 800bc22:	6022      	str	r2, [r4, #0]
 800bc24:	d504      	bpl.n	800bc30 <__sflush_r+0x7c>
 800bc26:	1c42      	adds	r2, r0, #1
 800bc28:	d101      	bne.n	800bc2e <__sflush_r+0x7a>
 800bc2a:	682b      	ldr	r3, [r5, #0]
 800bc2c:	b903      	cbnz	r3, 800bc30 <__sflush_r+0x7c>
 800bc2e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc32:	602f      	str	r7, [r5, #0]
 800bc34:	2900      	cmp	r1, #0
 800bc36:	d0ca      	beq.n	800bbce <__sflush_r+0x1a>
 800bc38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc3c:	4299      	cmp	r1, r3
 800bc3e:	d002      	beq.n	800bc46 <__sflush_r+0x92>
 800bc40:	4628      	mov	r0, r5
 800bc42:	f000 f8fd 	bl	800be40 <_free_r>
 800bc46:	2000      	movs	r0, #0
 800bc48:	6360      	str	r0, [r4, #52]	; 0x34
 800bc4a:	e7c1      	b.n	800bbd0 <__sflush_r+0x1c>
 800bc4c:	6a21      	ldr	r1, [r4, #32]
 800bc4e:	2301      	movs	r3, #1
 800bc50:	4628      	mov	r0, r5
 800bc52:	47b0      	blx	r6
 800bc54:	1c41      	adds	r1, r0, #1
 800bc56:	d1c7      	bne.n	800bbe8 <__sflush_r+0x34>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0c4      	beq.n	800bbe8 <__sflush_r+0x34>
 800bc5e:	2b1d      	cmp	r3, #29
 800bc60:	d001      	beq.n	800bc66 <__sflush_r+0xb2>
 800bc62:	2b16      	cmp	r3, #22
 800bc64:	d101      	bne.n	800bc6a <__sflush_r+0xb6>
 800bc66:	602f      	str	r7, [r5, #0]
 800bc68:	e7b1      	b.n	800bbce <__sflush_r+0x1a>
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc70:	81a3      	strh	r3, [r4, #12]
 800bc72:	e7ad      	b.n	800bbd0 <__sflush_r+0x1c>
 800bc74:	690f      	ldr	r7, [r1, #16]
 800bc76:	2f00      	cmp	r7, #0
 800bc78:	d0a9      	beq.n	800bbce <__sflush_r+0x1a>
 800bc7a:	0793      	lsls	r3, r2, #30
 800bc7c:	680e      	ldr	r6, [r1, #0]
 800bc7e:	bf08      	it	eq
 800bc80:	694b      	ldreq	r3, [r1, #20]
 800bc82:	600f      	str	r7, [r1, #0]
 800bc84:	bf18      	it	ne
 800bc86:	2300      	movne	r3, #0
 800bc88:	eba6 0807 	sub.w	r8, r6, r7
 800bc8c:	608b      	str	r3, [r1, #8]
 800bc8e:	f1b8 0f00 	cmp.w	r8, #0
 800bc92:	dd9c      	ble.n	800bbce <__sflush_r+0x1a>
 800bc94:	6a21      	ldr	r1, [r4, #32]
 800bc96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc98:	4643      	mov	r3, r8
 800bc9a:	463a      	mov	r2, r7
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b0      	blx	r6
 800bca0:	2800      	cmp	r0, #0
 800bca2:	dc06      	bgt.n	800bcb2 <__sflush_r+0xfe>
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcaa:	81a3      	strh	r3, [r4, #12]
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	e78e      	b.n	800bbd0 <__sflush_r+0x1c>
 800bcb2:	4407      	add	r7, r0
 800bcb4:	eba8 0800 	sub.w	r8, r8, r0
 800bcb8:	e7e9      	b.n	800bc8e <__sflush_r+0xda>
 800bcba:	bf00      	nop
 800bcbc:	20400001 	.word	0x20400001

0800bcc0 <_fflush_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	690b      	ldr	r3, [r1, #16]
 800bcc4:	4605      	mov	r5, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	b913      	cbnz	r3, 800bcd0 <_fflush_r+0x10>
 800bcca:	2500      	movs	r5, #0
 800bccc:	4628      	mov	r0, r5
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	b118      	cbz	r0, 800bcda <_fflush_r+0x1a>
 800bcd2:	6983      	ldr	r3, [r0, #24]
 800bcd4:	b90b      	cbnz	r3, 800bcda <_fflush_r+0x1a>
 800bcd6:	f7ff fbcf 	bl	800b478 <__sinit>
 800bcda:	4b14      	ldr	r3, [pc, #80]	; (800bd2c <_fflush_r+0x6c>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	d11b      	bne.n	800bd18 <_fflush_r+0x58>
 800bce0:	686c      	ldr	r4, [r5, #4]
 800bce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d0ef      	beq.n	800bcca <_fflush_r+0xa>
 800bcea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcec:	07d0      	lsls	r0, r2, #31
 800bcee:	d404      	bmi.n	800bcfa <_fflush_r+0x3a>
 800bcf0:	0599      	lsls	r1, r3, #22
 800bcf2:	d402      	bmi.n	800bcfa <_fflush_r+0x3a>
 800bcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcf6:	f7ff fc82 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	f7ff ff59 	bl	800bbb4 <__sflush_r>
 800bd02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd04:	07da      	lsls	r2, r3, #31
 800bd06:	4605      	mov	r5, r0
 800bd08:	d4e0      	bmi.n	800bccc <_fflush_r+0xc>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	059b      	lsls	r3, r3, #22
 800bd0e:	d4dd      	bmi.n	800bccc <_fflush_r+0xc>
 800bd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd12:	f7ff fc75 	bl	800b600 <__retarget_lock_release_recursive>
 800bd16:	e7d9      	b.n	800bccc <_fflush_r+0xc>
 800bd18:	4b05      	ldr	r3, [pc, #20]	; (800bd30 <_fflush_r+0x70>)
 800bd1a:	429c      	cmp	r4, r3
 800bd1c:	d101      	bne.n	800bd22 <_fflush_r+0x62>
 800bd1e:	68ac      	ldr	r4, [r5, #8]
 800bd20:	e7df      	b.n	800bce2 <_fflush_r+0x22>
 800bd22:	4b04      	ldr	r3, [pc, #16]	; (800bd34 <_fflush_r+0x74>)
 800bd24:	429c      	cmp	r4, r3
 800bd26:	bf08      	it	eq
 800bd28:	68ec      	ldreq	r4, [r5, #12]
 800bd2a:	e7da      	b.n	800bce2 <_fflush_r+0x22>
 800bd2c:	0800c9c0 	.word	0x0800c9c0
 800bd30:	0800c9e0 	.word	0x0800c9e0
 800bd34:	0800c9a0 	.word	0x0800c9a0

0800bd38 <_lseek_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d07      	ldr	r5, [pc, #28]	; (800bd58 <_lseek_r+0x20>)
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4611      	mov	r1, r2
 800bd42:	2200      	movs	r2, #0
 800bd44:	602a      	str	r2, [r5, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	f7f6 f92a 	bl	8001fa0 <_lseek>
 800bd4c:	1c43      	adds	r3, r0, #1
 800bd4e:	d102      	bne.n	800bd56 <_lseek_r+0x1e>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	b103      	cbz	r3, 800bd56 <_lseek_r+0x1e>
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	bd38      	pop	{r3, r4, r5, pc}
 800bd58:	20005314 	.word	0x20005314

0800bd5c <__swhatbuf_r>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	460e      	mov	r6, r1
 800bd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd64:	2900      	cmp	r1, #0
 800bd66:	b096      	sub	sp, #88	; 0x58
 800bd68:	4614      	mov	r4, r2
 800bd6a:	461d      	mov	r5, r3
 800bd6c:	da08      	bge.n	800bd80 <__swhatbuf_r+0x24>
 800bd6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	602a      	str	r2, [r5, #0]
 800bd76:	061a      	lsls	r2, r3, #24
 800bd78:	d410      	bmi.n	800bd9c <__swhatbuf_r+0x40>
 800bd7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd7e:	e00e      	b.n	800bd9e <__swhatbuf_r+0x42>
 800bd80:	466a      	mov	r2, sp
 800bd82:	f000 fba9 	bl	800c4d8 <_fstat_r>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	dbf1      	blt.n	800bd6e <__swhatbuf_r+0x12>
 800bd8a:	9a01      	ldr	r2, [sp, #4]
 800bd8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd94:	425a      	negs	r2, r3
 800bd96:	415a      	adcs	r2, r3
 800bd98:	602a      	str	r2, [r5, #0]
 800bd9a:	e7ee      	b.n	800bd7a <__swhatbuf_r+0x1e>
 800bd9c:	2340      	movs	r3, #64	; 0x40
 800bd9e:	2000      	movs	r0, #0
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	b016      	add	sp, #88	; 0x58
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bda8 <__smakebuf_r>:
 800bda8:	898b      	ldrh	r3, [r1, #12]
 800bdaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdac:	079d      	lsls	r5, r3, #30
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	d507      	bpl.n	800bdc4 <__smakebuf_r+0x1c>
 800bdb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	6123      	str	r3, [r4, #16]
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	6163      	str	r3, [r4, #20]
 800bdc0:	b002      	add	sp, #8
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	ab01      	add	r3, sp, #4
 800bdc6:	466a      	mov	r2, sp
 800bdc8:	f7ff ffc8 	bl	800bd5c <__swhatbuf_r>
 800bdcc:	9900      	ldr	r1, [sp, #0]
 800bdce:	4605      	mov	r5, r0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f7ff fc4d 	bl	800b670 <_malloc_r>
 800bdd6:	b948      	cbnz	r0, 800bdec <__smakebuf_r+0x44>
 800bdd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bddc:	059a      	lsls	r2, r3, #22
 800bdde:	d4ef      	bmi.n	800bdc0 <__smakebuf_r+0x18>
 800bde0:	f023 0303 	bic.w	r3, r3, #3
 800bde4:	f043 0302 	orr.w	r3, r3, #2
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	e7e3      	b.n	800bdb4 <__smakebuf_r+0xc>
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <__smakebuf_r+0x7c>)
 800bdee:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	6020      	str	r0, [r4, #0]
 800bdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	9b00      	ldr	r3, [sp, #0]
 800bdfc:	6163      	str	r3, [r4, #20]
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	6120      	str	r0, [r4, #16]
 800be02:	b15b      	cbz	r3, 800be1c <__smakebuf_r+0x74>
 800be04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be08:	4630      	mov	r0, r6
 800be0a:	f000 fb77 	bl	800c4fc <_isatty_r>
 800be0e:	b128      	cbz	r0, 800be1c <__smakebuf_r+0x74>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	f023 0303 	bic.w	r3, r3, #3
 800be16:	f043 0301 	orr.w	r3, r3, #1
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	89a0      	ldrh	r0, [r4, #12]
 800be1e:	4305      	orrs	r5, r0
 800be20:	81a5      	strh	r5, [r4, #12]
 800be22:	e7cd      	b.n	800bdc0 <__smakebuf_r+0x18>
 800be24:	0800b411 	.word	0x0800b411

0800be28 <__malloc_lock>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__malloc_lock+0x8>)
 800be2a:	f7ff bbe8 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800be2e:	bf00      	nop
 800be30:	20005308 	.word	0x20005308

0800be34 <__malloc_unlock>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__malloc_unlock+0x8>)
 800be36:	f7ff bbe3 	b.w	800b600 <__retarget_lock_release_recursive>
 800be3a:	bf00      	nop
 800be3c:	20005308 	.word	0x20005308

0800be40 <_free_r>:
 800be40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be42:	2900      	cmp	r1, #0
 800be44:	d044      	beq.n	800bed0 <_free_r+0x90>
 800be46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be4a:	9001      	str	r0, [sp, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f1a1 0404 	sub.w	r4, r1, #4
 800be52:	bfb8      	it	lt
 800be54:	18e4      	addlt	r4, r4, r3
 800be56:	f7ff ffe7 	bl	800be28 <__malloc_lock>
 800be5a:	4a1e      	ldr	r2, [pc, #120]	; (800bed4 <_free_r+0x94>)
 800be5c:	9801      	ldr	r0, [sp, #4]
 800be5e:	6813      	ldr	r3, [r2, #0]
 800be60:	b933      	cbnz	r3, 800be70 <_free_r+0x30>
 800be62:	6063      	str	r3, [r4, #4]
 800be64:	6014      	str	r4, [r2, #0]
 800be66:	b003      	add	sp, #12
 800be68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be6c:	f7ff bfe2 	b.w	800be34 <__malloc_unlock>
 800be70:	42a3      	cmp	r3, r4
 800be72:	d908      	bls.n	800be86 <_free_r+0x46>
 800be74:	6825      	ldr	r5, [r4, #0]
 800be76:	1961      	adds	r1, r4, r5
 800be78:	428b      	cmp	r3, r1
 800be7a:	bf01      	itttt	eq
 800be7c:	6819      	ldreq	r1, [r3, #0]
 800be7e:	685b      	ldreq	r3, [r3, #4]
 800be80:	1949      	addeq	r1, r1, r5
 800be82:	6021      	streq	r1, [r4, #0]
 800be84:	e7ed      	b.n	800be62 <_free_r+0x22>
 800be86:	461a      	mov	r2, r3
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	b10b      	cbz	r3, 800be90 <_free_r+0x50>
 800be8c:	42a3      	cmp	r3, r4
 800be8e:	d9fa      	bls.n	800be86 <_free_r+0x46>
 800be90:	6811      	ldr	r1, [r2, #0]
 800be92:	1855      	adds	r5, r2, r1
 800be94:	42a5      	cmp	r5, r4
 800be96:	d10b      	bne.n	800beb0 <_free_r+0x70>
 800be98:	6824      	ldr	r4, [r4, #0]
 800be9a:	4421      	add	r1, r4
 800be9c:	1854      	adds	r4, r2, r1
 800be9e:	42a3      	cmp	r3, r4
 800bea0:	6011      	str	r1, [r2, #0]
 800bea2:	d1e0      	bne.n	800be66 <_free_r+0x26>
 800bea4:	681c      	ldr	r4, [r3, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	6053      	str	r3, [r2, #4]
 800beaa:	4421      	add	r1, r4
 800beac:	6011      	str	r1, [r2, #0]
 800beae:	e7da      	b.n	800be66 <_free_r+0x26>
 800beb0:	d902      	bls.n	800beb8 <_free_r+0x78>
 800beb2:	230c      	movs	r3, #12
 800beb4:	6003      	str	r3, [r0, #0]
 800beb6:	e7d6      	b.n	800be66 <_free_r+0x26>
 800beb8:	6825      	ldr	r5, [r4, #0]
 800beba:	1961      	adds	r1, r4, r5
 800bebc:	428b      	cmp	r3, r1
 800bebe:	bf04      	itt	eq
 800bec0:	6819      	ldreq	r1, [r3, #0]
 800bec2:	685b      	ldreq	r3, [r3, #4]
 800bec4:	6063      	str	r3, [r4, #4]
 800bec6:	bf04      	itt	eq
 800bec8:	1949      	addeq	r1, r1, r5
 800beca:	6021      	streq	r1, [r4, #0]
 800becc:	6054      	str	r4, [r2, #4]
 800bece:	e7ca      	b.n	800be66 <_free_r+0x26>
 800bed0:	b003      	add	sp, #12
 800bed2:	bd30      	pop	{r4, r5, pc}
 800bed4:	2000530c 	.word	0x2000530c

0800bed8 <__sfputc_r>:
 800bed8:	6893      	ldr	r3, [r2, #8]
 800beda:	3b01      	subs	r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	b410      	push	{r4}
 800bee0:	6093      	str	r3, [r2, #8]
 800bee2:	da08      	bge.n	800bef6 <__sfputc_r+0x1e>
 800bee4:	6994      	ldr	r4, [r2, #24]
 800bee6:	42a3      	cmp	r3, r4
 800bee8:	db01      	blt.n	800beee <__sfputc_r+0x16>
 800beea:	290a      	cmp	r1, #10
 800beec:	d103      	bne.n	800bef6 <__sfputc_r+0x1e>
 800beee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef2:	f7ff bd7d 	b.w	800b9f0 <__swbuf_r>
 800bef6:	6813      	ldr	r3, [r2, #0]
 800bef8:	1c58      	adds	r0, r3, #1
 800befa:	6010      	str	r0, [r2, #0]
 800befc:	7019      	strb	r1, [r3, #0]
 800befe:	4608      	mov	r0, r1
 800bf00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <__sfputs_r>:
 800bf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf08:	4606      	mov	r6, r0
 800bf0a:	460f      	mov	r7, r1
 800bf0c:	4614      	mov	r4, r2
 800bf0e:	18d5      	adds	r5, r2, r3
 800bf10:	42ac      	cmp	r4, r5
 800bf12:	d101      	bne.n	800bf18 <__sfputs_r+0x12>
 800bf14:	2000      	movs	r0, #0
 800bf16:	e007      	b.n	800bf28 <__sfputs_r+0x22>
 800bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1c:	463a      	mov	r2, r7
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7ff ffda 	bl	800bed8 <__sfputc_r>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d1f3      	bne.n	800bf10 <__sfputs_r+0xa>
 800bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf2c <_vfiprintf_r>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	460d      	mov	r5, r1
 800bf32:	b09d      	sub	sp, #116	; 0x74
 800bf34:	4614      	mov	r4, r2
 800bf36:	4698      	mov	r8, r3
 800bf38:	4606      	mov	r6, r0
 800bf3a:	b118      	cbz	r0, 800bf44 <_vfiprintf_r+0x18>
 800bf3c:	6983      	ldr	r3, [r0, #24]
 800bf3e:	b90b      	cbnz	r3, 800bf44 <_vfiprintf_r+0x18>
 800bf40:	f7ff fa9a 	bl	800b478 <__sinit>
 800bf44:	4b89      	ldr	r3, [pc, #548]	; (800c16c <_vfiprintf_r+0x240>)
 800bf46:	429d      	cmp	r5, r3
 800bf48:	d11b      	bne.n	800bf82 <_vfiprintf_r+0x56>
 800bf4a:	6875      	ldr	r5, [r6, #4]
 800bf4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf4e:	07d9      	lsls	r1, r3, #31
 800bf50:	d405      	bmi.n	800bf5e <_vfiprintf_r+0x32>
 800bf52:	89ab      	ldrh	r3, [r5, #12]
 800bf54:	059a      	lsls	r2, r3, #22
 800bf56:	d402      	bmi.n	800bf5e <_vfiprintf_r+0x32>
 800bf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf5a:	f7ff fb50 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800bf5e:	89ab      	ldrh	r3, [r5, #12]
 800bf60:	071b      	lsls	r3, r3, #28
 800bf62:	d501      	bpl.n	800bf68 <_vfiprintf_r+0x3c>
 800bf64:	692b      	ldr	r3, [r5, #16]
 800bf66:	b9eb      	cbnz	r3, 800bfa4 <_vfiprintf_r+0x78>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7ff fda4 	bl	800bab8 <__swsetup_r>
 800bf70:	b1c0      	cbz	r0, 800bfa4 <_vfiprintf_r+0x78>
 800bf72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf74:	07dc      	lsls	r4, r3, #31
 800bf76:	d50e      	bpl.n	800bf96 <_vfiprintf_r+0x6a>
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7c:	b01d      	add	sp, #116	; 0x74
 800bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf82:	4b7b      	ldr	r3, [pc, #492]	; (800c170 <_vfiprintf_r+0x244>)
 800bf84:	429d      	cmp	r5, r3
 800bf86:	d101      	bne.n	800bf8c <_vfiprintf_r+0x60>
 800bf88:	68b5      	ldr	r5, [r6, #8]
 800bf8a:	e7df      	b.n	800bf4c <_vfiprintf_r+0x20>
 800bf8c:	4b79      	ldr	r3, [pc, #484]	; (800c174 <_vfiprintf_r+0x248>)
 800bf8e:	429d      	cmp	r5, r3
 800bf90:	bf08      	it	eq
 800bf92:	68f5      	ldreq	r5, [r6, #12]
 800bf94:	e7da      	b.n	800bf4c <_vfiprintf_r+0x20>
 800bf96:	89ab      	ldrh	r3, [r5, #12]
 800bf98:	0598      	lsls	r0, r3, #22
 800bf9a:	d4ed      	bmi.n	800bf78 <_vfiprintf_r+0x4c>
 800bf9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf9e:	f7ff fb2f 	bl	800b600 <__retarget_lock_release_recursive>
 800bfa2:	e7e9      	b.n	800bf78 <_vfiprintf_r+0x4c>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa8:	2320      	movs	r3, #32
 800bfaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfb2:	2330      	movs	r3, #48	; 0x30
 800bfb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c178 <_vfiprintf_r+0x24c>
 800bfb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfbc:	f04f 0901 	mov.w	r9, #1
 800bfc0:	4623      	mov	r3, r4
 800bfc2:	469a      	mov	sl, r3
 800bfc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc8:	b10a      	cbz	r2, 800bfce <_vfiprintf_r+0xa2>
 800bfca:	2a25      	cmp	r2, #37	; 0x25
 800bfcc:	d1f9      	bne.n	800bfc2 <_vfiprintf_r+0x96>
 800bfce:	ebba 0b04 	subs.w	fp, sl, r4
 800bfd2:	d00b      	beq.n	800bfec <_vfiprintf_r+0xc0>
 800bfd4:	465b      	mov	r3, fp
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	4629      	mov	r1, r5
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f7ff ff93 	bl	800bf06 <__sfputs_r>
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	f000 80aa 	beq.w	800c13a <_vfiprintf_r+0x20e>
 800bfe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe8:	445a      	add	r2, fp
 800bfea:	9209      	str	r2, [sp, #36]	; 0x24
 800bfec:	f89a 3000 	ldrb.w	r3, [sl]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 80a2 	beq.w	800c13a <_vfiprintf_r+0x20e>
 800bff6:	2300      	movs	r3, #0
 800bff8:	f04f 32ff 	mov.w	r2, #4294967295
 800bffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c000:	f10a 0a01 	add.w	sl, sl, #1
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	9307      	str	r3, [sp, #28]
 800c008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c00c:	931a      	str	r3, [sp, #104]	; 0x68
 800c00e:	4654      	mov	r4, sl
 800c010:	2205      	movs	r2, #5
 800c012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c016:	4858      	ldr	r0, [pc, #352]	; (800c178 <_vfiprintf_r+0x24c>)
 800c018:	f7f4 f8da 	bl	80001d0 <memchr>
 800c01c:	9a04      	ldr	r2, [sp, #16]
 800c01e:	b9d8      	cbnz	r0, 800c058 <_vfiprintf_r+0x12c>
 800c020:	06d1      	lsls	r1, r2, #27
 800c022:	bf44      	itt	mi
 800c024:	2320      	movmi	r3, #32
 800c026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c02a:	0713      	lsls	r3, r2, #28
 800c02c:	bf44      	itt	mi
 800c02e:	232b      	movmi	r3, #43	; 0x2b
 800c030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c034:	f89a 3000 	ldrb.w	r3, [sl]
 800c038:	2b2a      	cmp	r3, #42	; 0x2a
 800c03a:	d015      	beq.n	800c068 <_vfiprintf_r+0x13c>
 800c03c:	9a07      	ldr	r2, [sp, #28]
 800c03e:	4654      	mov	r4, sl
 800c040:	2000      	movs	r0, #0
 800c042:	f04f 0c0a 	mov.w	ip, #10
 800c046:	4621      	mov	r1, r4
 800c048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c04c:	3b30      	subs	r3, #48	; 0x30
 800c04e:	2b09      	cmp	r3, #9
 800c050:	d94e      	bls.n	800c0f0 <_vfiprintf_r+0x1c4>
 800c052:	b1b0      	cbz	r0, 800c082 <_vfiprintf_r+0x156>
 800c054:	9207      	str	r2, [sp, #28]
 800c056:	e014      	b.n	800c082 <_vfiprintf_r+0x156>
 800c058:	eba0 0308 	sub.w	r3, r0, r8
 800c05c:	fa09 f303 	lsl.w	r3, r9, r3
 800c060:	4313      	orrs	r3, r2
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	46a2      	mov	sl, r4
 800c066:	e7d2      	b.n	800c00e <_vfiprintf_r+0xe2>
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	1d19      	adds	r1, r3, #4
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	9103      	str	r1, [sp, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	bfbb      	ittet	lt
 800c074:	425b      	neglt	r3, r3
 800c076:	f042 0202 	orrlt.w	r2, r2, #2
 800c07a:	9307      	strge	r3, [sp, #28]
 800c07c:	9307      	strlt	r3, [sp, #28]
 800c07e:	bfb8      	it	lt
 800c080:	9204      	strlt	r2, [sp, #16]
 800c082:	7823      	ldrb	r3, [r4, #0]
 800c084:	2b2e      	cmp	r3, #46	; 0x2e
 800c086:	d10c      	bne.n	800c0a2 <_vfiprintf_r+0x176>
 800c088:	7863      	ldrb	r3, [r4, #1]
 800c08a:	2b2a      	cmp	r3, #42	; 0x2a
 800c08c:	d135      	bne.n	800c0fa <_vfiprintf_r+0x1ce>
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	1d1a      	adds	r2, r3, #4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	9203      	str	r2, [sp, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	bfb8      	it	lt
 800c09a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c09e:	3402      	adds	r4, #2
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c188 <_vfiprintf_r+0x25c>
 800c0a6:	7821      	ldrb	r1, [r4, #0]
 800c0a8:	2203      	movs	r2, #3
 800c0aa:	4650      	mov	r0, sl
 800c0ac:	f7f4 f890 	bl	80001d0 <memchr>
 800c0b0:	b140      	cbz	r0, 800c0c4 <_vfiprintf_r+0x198>
 800c0b2:	2340      	movs	r3, #64	; 0x40
 800c0b4:	eba0 000a 	sub.w	r0, r0, sl
 800c0b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c0bc:	9b04      	ldr	r3, [sp, #16]
 800c0be:	4303      	orrs	r3, r0
 800c0c0:	3401      	adds	r4, #1
 800c0c2:	9304      	str	r3, [sp, #16]
 800c0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c8:	482c      	ldr	r0, [pc, #176]	; (800c17c <_vfiprintf_r+0x250>)
 800c0ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ce:	2206      	movs	r2, #6
 800c0d0:	f7f4 f87e 	bl	80001d0 <memchr>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d03f      	beq.n	800c158 <_vfiprintf_r+0x22c>
 800c0d8:	4b29      	ldr	r3, [pc, #164]	; (800c180 <_vfiprintf_r+0x254>)
 800c0da:	bb1b      	cbnz	r3, 800c124 <_vfiprintf_r+0x1f8>
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	3307      	adds	r3, #7
 800c0e0:	f023 0307 	bic.w	r3, r3, #7
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	9303      	str	r3, [sp, #12]
 800c0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ea:	443b      	add	r3, r7
 800c0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ee:	e767      	b.n	800bfc0 <_vfiprintf_r+0x94>
 800c0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	e7a5      	b.n	800c046 <_vfiprintf_r+0x11a>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	3401      	adds	r4, #1
 800c0fe:	9305      	str	r3, [sp, #20]
 800c100:	4619      	mov	r1, r3
 800c102:	f04f 0c0a 	mov.w	ip, #10
 800c106:	4620      	mov	r0, r4
 800c108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c10c:	3a30      	subs	r2, #48	; 0x30
 800c10e:	2a09      	cmp	r2, #9
 800c110:	d903      	bls.n	800c11a <_vfiprintf_r+0x1ee>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d0c5      	beq.n	800c0a2 <_vfiprintf_r+0x176>
 800c116:	9105      	str	r1, [sp, #20]
 800c118:	e7c3      	b.n	800c0a2 <_vfiprintf_r+0x176>
 800c11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c11e:	4604      	mov	r4, r0
 800c120:	2301      	movs	r3, #1
 800c122:	e7f0      	b.n	800c106 <_vfiprintf_r+0x1da>
 800c124:	ab03      	add	r3, sp, #12
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	462a      	mov	r2, r5
 800c12a:	4b16      	ldr	r3, [pc, #88]	; (800c184 <_vfiprintf_r+0x258>)
 800c12c:	a904      	add	r1, sp, #16
 800c12e:	4630      	mov	r0, r6
 800c130:	f3af 8000 	nop.w
 800c134:	4607      	mov	r7, r0
 800c136:	1c78      	adds	r0, r7, #1
 800c138:	d1d6      	bne.n	800c0e8 <_vfiprintf_r+0x1bc>
 800c13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c13c:	07d9      	lsls	r1, r3, #31
 800c13e:	d405      	bmi.n	800c14c <_vfiprintf_r+0x220>
 800c140:	89ab      	ldrh	r3, [r5, #12]
 800c142:	059a      	lsls	r2, r3, #22
 800c144:	d402      	bmi.n	800c14c <_vfiprintf_r+0x220>
 800c146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c148:	f7ff fa5a 	bl	800b600 <__retarget_lock_release_recursive>
 800c14c:	89ab      	ldrh	r3, [r5, #12]
 800c14e:	065b      	lsls	r3, r3, #25
 800c150:	f53f af12 	bmi.w	800bf78 <_vfiprintf_r+0x4c>
 800c154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c156:	e711      	b.n	800bf7c <_vfiprintf_r+0x50>
 800c158:	ab03      	add	r3, sp, #12
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	462a      	mov	r2, r5
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <_vfiprintf_r+0x258>)
 800c160:	a904      	add	r1, sp, #16
 800c162:	4630      	mov	r0, r6
 800c164:	f000 f880 	bl	800c268 <_printf_i>
 800c168:	e7e4      	b.n	800c134 <_vfiprintf_r+0x208>
 800c16a:	bf00      	nop
 800c16c:	0800c9c0 	.word	0x0800c9c0
 800c170:	0800c9e0 	.word	0x0800c9e0
 800c174:	0800c9a0 	.word	0x0800c9a0
 800c178:	0800ca04 	.word	0x0800ca04
 800c17c:	0800ca0e 	.word	0x0800ca0e
 800c180:	00000000 	.word	0x00000000
 800c184:	0800bf07 	.word	0x0800bf07
 800c188:	0800ca0a 	.word	0x0800ca0a

0800c18c <_printf_common>:
 800c18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c190:	4616      	mov	r6, r2
 800c192:	4699      	mov	r9, r3
 800c194:	688a      	ldr	r2, [r1, #8]
 800c196:	690b      	ldr	r3, [r1, #16]
 800c198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c19c:	4293      	cmp	r3, r2
 800c19e:	bfb8      	it	lt
 800c1a0:	4613      	movlt	r3, r2
 800c1a2:	6033      	str	r3, [r6, #0]
 800c1a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	b10a      	cbz	r2, 800c1b2 <_printf_common+0x26>
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	6033      	str	r3, [r6, #0]
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	0699      	lsls	r1, r3, #26
 800c1b6:	bf42      	ittt	mi
 800c1b8:	6833      	ldrmi	r3, [r6, #0]
 800c1ba:	3302      	addmi	r3, #2
 800c1bc:	6033      	strmi	r3, [r6, #0]
 800c1be:	6825      	ldr	r5, [r4, #0]
 800c1c0:	f015 0506 	ands.w	r5, r5, #6
 800c1c4:	d106      	bne.n	800c1d4 <_printf_common+0x48>
 800c1c6:	f104 0a19 	add.w	sl, r4, #25
 800c1ca:	68e3      	ldr	r3, [r4, #12]
 800c1cc:	6832      	ldr	r2, [r6, #0]
 800c1ce:	1a9b      	subs	r3, r3, r2
 800c1d0:	42ab      	cmp	r3, r5
 800c1d2:	dc26      	bgt.n	800c222 <_printf_common+0x96>
 800c1d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1d8:	1e13      	subs	r3, r2, #0
 800c1da:	6822      	ldr	r2, [r4, #0]
 800c1dc:	bf18      	it	ne
 800c1de:	2301      	movne	r3, #1
 800c1e0:	0692      	lsls	r2, r2, #26
 800c1e2:	d42b      	bmi.n	800c23c <_printf_common+0xb0>
 800c1e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	47c0      	blx	r8
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d01e      	beq.n	800c230 <_printf_common+0xa4>
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	68e5      	ldr	r5, [r4, #12]
 800c1f6:	6832      	ldr	r2, [r6, #0]
 800c1f8:	f003 0306 	and.w	r3, r3, #6
 800c1fc:	2b04      	cmp	r3, #4
 800c1fe:	bf08      	it	eq
 800c200:	1aad      	subeq	r5, r5, r2
 800c202:	68a3      	ldr	r3, [r4, #8]
 800c204:	6922      	ldr	r2, [r4, #16]
 800c206:	bf0c      	ite	eq
 800c208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c20c:	2500      	movne	r5, #0
 800c20e:	4293      	cmp	r3, r2
 800c210:	bfc4      	itt	gt
 800c212:	1a9b      	subgt	r3, r3, r2
 800c214:	18ed      	addgt	r5, r5, r3
 800c216:	2600      	movs	r6, #0
 800c218:	341a      	adds	r4, #26
 800c21a:	42b5      	cmp	r5, r6
 800c21c:	d11a      	bne.n	800c254 <_printf_common+0xc8>
 800c21e:	2000      	movs	r0, #0
 800c220:	e008      	b.n	800c234 <_printf_common+0xa8>
 800c222:	2301      	movs	r3, #1
 800c224:	4652      	mov	r2, sl
 800c226:	4649      	mov	r1, r9
 800c228:	4638      	mov	r0, r7
 800c22a:	47c0      	blx	r8
 800c22c:	3001      	adds	r0, #1
 800c22e:	d103      	bne.n	800c238 <_printf_common+0xac>
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c238:	3501      	adds	r5, #1
 800c23a:	e7c6      	b.n	800c1ca <_printf_common+0x3e>
 800c23c:	18e1      	adds	r1, r4, r3
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	2030      	movs	r0, #48	; 0x30
 800c242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c246:	4422      	add	r2, r4
 800c248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c24c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c250:	3302      	adds	r3, #2
 800c252:	e7c7      	b.n	800c1e4 <_printf_common+0x58>
 800c254:	2301      	movs	r3, #1
 800c256:	4622      	mov	r2, r4
 800c258:	4649      	mov	r1, r9
 800c25a:	4638      	mov	r0, r7
 800c25c:	47c0      	blx	r8
 800c25e:	3001      	adds	r0, #1
 800c260:	d0e6      	beq.n	800c230 <_printf_common+0xa4>
 800c262:	3601      	adds	r6, #1
 800c264:	e7d9      	b.n	800c21a <_printf_common+0x8e>
	...

0800c268 <_printf_i>:
 800c268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c26c:	7e0f      	ldrb	r7, [r1, #24]
 800c26e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c270:	2f78      	cmp	r7, #120	; 0x78
 800c272:	4691      	mov	r9, r2
 800c274:	4680      	mov	r8, r0
 800c276:	460c      	mov	r4, r1
 800c278:	469a      	mov	sl, r3
 800c27a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c27e:	d807      	bhi.n	800c290 <_printf_i+0x28>
 800c280:	2f62      	cmp	r7, #98	; 0x62
 800c282:	d80a      	bhi.n	800c29a <_printf_i+0x32>
 800c284:	2f00      	cmp	r7, #0
 800c286:	f000 80d8 	beq.w	800c43a <_printf_i+0x1d2>
 800c28a:	2f58      	cmp	r7, #88	; 0x58
 800c28c:	f000 80a3 	beq.w	800c3d6 <_printf_i+0x16e>
 800c290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c298:	e03a      	b.n	800c310 <_printf_i+0xa8>
 800c29a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c29e:	2b15      	cmp	r3, #21
 800c2a0:	d8f6      	bhi.n	800c290 <_printf_i+0x28>
 800c2a2:	a101      	add	r1, pc, #4	; (adr r1, 800c2a8 <_printf_i+0x40>)
 800c2a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2a8:	0800c301 	.word	0x0800c301
 800c2ac:	0800c315 	.word	0x0800c315
 800c2b0:	0800c291 	.word	0x0800c291
 800c2b4:	0800c291 	.word	0x0800c291
 800c2b8:	0800c291 	.word	0x0800c291
 800c2bc:	0800c291 	.word	0x0800c291
 800c2c0:	0800c315 	.word	0x0800c315
 800c2c4:	0800c291 	.word	0x0800c291
 800c2c8:	0800c291 	.word	0x0800c291
 800c2cc:	0800c291 	.word	0x0800c291
 800c2d0:	0800c291 	.word	0x0800c291
 800c2d4:	0800c421 	.word	0x0800c421
 800c2d8:	0800c345 	.word	0x0800c345
 800c2dc:	0800c403 	.word	0x0800c403
 800c2e0:	0800c291 	.word	0x0800c291
 800c2e4:	0800c291 	.word	0x0800c291
 800c2e8:	0800c443 	.word	0x0800c443
 800c2ec:	0800c291 	.word	0x0800c291
 800c2f0:	0800c345 	.word	0x0800c345
 800c2f4:	0800c291 	.word	0x0800c291
 800c2f8:	0800c291 	.word	0x0800c291
 800c2fc:	0800c40b 	.word	0x0800c40b
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	1d1a      	adds	r2, r3, #4
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	602a      	str	r2, [r5, #0]
 800c308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c30c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c310:	2301      	movs	r3, #1
 800c312:	e0a3      	b.n	800c45c <_printf_i+0x1f4>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	6829      	ldr	r1, [r5, #0]
 800c318:	0606      	lsls	r6, r0, #24
 800c31a:	f101 0304 	add.w	r3, r1, #4
 800c31e:	d50a      	bpl.n	800c336 <_printf_i+0xce>
 800c320:	680e      	ldr	r6, [r1, #0]
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	2e00      	cmp	r6, #0
 800c326:	da03      	bge.n	800c330 <_printf_i+0xc8>
 800c328:	232d      	movs	r3, #45	; 0x2d
 800c32a:	4276      	negs	r6, r6
 800c32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c330:	485e      	ldr	r0, [pc, #376]	; (800c4ac <_printf_i+0x244>)
 800c332:	230a      	movs	r3, #10
 800c334:	e019      	b.n	800c36a <_printf_i+0x102>
 800c336:	680e      	ldr	r6, [r1, #0]
 800c338:	602b      	str	r3, [r5, #0]
 800c33a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c33e:	bf18      	it	ne
 800c340:	b236      	sxthne	r6, r6
 800c342:	e7ef      	b.n	800c324 <_printf_i+0xbc>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	6820      	ldr	r0, [r4, #0]
 800c348:	1d19      	adds	r1, r3, #4
 800c34a:	6029      	str	r1, [r5, #0]
 800c34c:	0601      	lsls	r1, r0, #24
 800c34e:	d501      	bpl.n	800c354 <_printf_i+0xec>
 800c350:	681e      	ldr	r6, [r3, #0]
 800c352:	e002      	b.n	800c35a <_printf_i+0xf2>
 800c354:	0646      	lsls	r6, r0, #25
 800c356:	d5fb      	bpl.n	800c350 <_printf_i+0xe8>
 800c358:	881e      	ldrh	r6, [r3, #0]
 800c35a:	4854      	ldr	r0, [pc, #336]	; (800c4ac <_printf_i+0x244>)
 800c35c:	2f6f      	cmp	r7, #111	; 0x6f
 800c35e:	bf0c      	ite	eq
 800c360:	2308      	moveq	r3, #8
 800c362:	230a      	movne	r3, #10
 800c364:	2100      	movs	r1, #0
 800c366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c36a:	6865      	ldr	r5, [r4, #4]
 800c36c:	60a5      	str	r5, [r4, #8]
 800c36e:	2d00      	cmp	r5, #0
 800c370:	bfa2      	ittt	ge
 800c372:	6821      	ldrge	r1, [r4, #0]
 800c374:	f021 0104 	bicge.w	r1, r1, #4
 800c378:	6021      	strge	r1, [r4, #0]
 800c37a:	b90e      	cbnz	r6, 800c380 <_printf_i+0x118>
 800c37c:	2d00      	cmp	r5, #0
 800c37e:	d04d      	beq.n	800c41c <_printf_i+0x1b4>
 800c380:	4615      	mov	r5, r2
 800c382:	fbb6 f1f3 	udiv	r1, r6, r3
 800c386:	fb03 6711 	mls	r7, r3, r1, r6
 800c38a:	5dc7      	ldrb	r7, [r0, r7]
 800c38c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c390:	4637      	mov	r7, r6
 800c392:	42bb      	cmp	r3, r7
 800c394:	460e      	mov	r6, r1
 800c396:	d9f4      	bls.n	800c382 <_printf_i+0x11a>
 800c398:	2b08      	cmp	r3, #8
 800c39a:	d10b      	bne.n	800c3b4 <_printf_i+0x14c>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	07de      	lsls	r6, r3, #31
 800c3a0:	d508      	bpl.n	800c3b4 <_printf_i+0x14c>
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	6861      	ldr	r1, [r4, #4]
 800c3a6:	4299      	cmp	r1, r3
 800c3a8:	bfde      	ittt	le
 800c3aa:	2330      	movle	r3, #48	; 0x30
 800c3ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3b4:	1b52      	subs	r2, r2, r5
 800c3b6:	6122      	str	r2, [r4, #16]
 800c3b8:	f8cd a000 	str.w	sl, [sp]
 800c3bc:	464b      	mov	r3, r9
 800c3be:	aa03      	add	r2, sp, #12
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	f7ff fee2 	bl	800c18c <_printf_common>
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d14c      	bne.n	800c466 <_printf_i+0x1fe>
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	b004      	add	sp, #16
 800c3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d6:	4835      	ldr	r0, [pc, #212]	; (800c4ac <_printf_i+0x244>)
 800c3d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3dc:	6829      	ldr	r1, [r5, #0]
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3e4:	6029      	str	r1, [r5, #0]
 800c3e6:	061d      	lsls	r5, r3, #24
 800c3e8:	d514      	bpl.n	800c414 <_printf_i+0x1ac>
 800c3ea:	07df      	lsls	r7, r3, #31
 800c3ec:	bf44      	itt	mi
 800c3ee:	f043 0320 	orrmi.w	r3, r3, #32
 800c3f2:	6023      	strmi	r3, [r4, #0]
 800c3f4:	b91e      	cbnz	r6, 800c3fe <_printf_i+0x196>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	f023 0320 	bic.w	r3, r3, #32
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	2310      	movs	r3, #16
 800c400:	e7b0      	b.n	800c364 <_printf_i+0xfc>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	f043 0320 	orr.w	r3, r3, #32
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	2378      	movs	r3, #120	; 0x78
 800c40c:	4828      	ldr	r0, [pc, #160]	; (800c4b0 <_printf_i+0x248>)
 800c40e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c412:	e7e3      	b.n	800c3dc <_printf_i+0x174>
 800c414:	0659      	lsls	r1, r3, #25
 800c416:	bf48      	it	mi
 800c418:	b2b6      	uxthmi	r6, r6
 800c41a:	e7e6      	b.n	800c3ea <_printf_i+0x182>
 800c41c:	4615      	mov	r5, r2
 800c41e:	e7bb      	b.n	800c398 <_printf_i+0x130>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	6826      	ldr	r6, [r4, #0]
 800c424:	6961      	ldr	r1, [r4, #20]
 800c426:	1d18      	adds	r0, r3, #4
 800c428:	6028      	str	r0, [r5, #0]
 800c42a:	0635      	lsls	r5, r6, #24
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	d501      	bpl.n	800c434 <_printf_i+0x1cc>
 800c430:	6019      	str	r1, [r3, #0]
 800c432:	e002      	b.n	800c43a <_printf_i+0x1d2>
 800c434:	0670      	lsls	r0, r6, #25
 800c436:	d5fb      	bpl.n	800c430 <_printf_i+0x1c8>
 800c438:	8019      	strh	r1, [r3, #0]
 800c43a:	2300      	movs	r3, #0
 800c43c:	6123      	str	r3, [r4, #16]
 800c43e:	4615      	mov	r5, r2
 800c440:	e7ba      	b.n	800c3b8 <_printf_i+0x150>
 800c442:	682b      	ldr	r3, [r5, #0]
 800c444:	1d1a      	adds	r2, r3, #4
 800c446:	602a      	str	r2, [r5, #0]
 800c448:	681d      	ldr	r5, [r3, #0]
 800c44a:	6862      	ldr	r2, [r4, #4]
 800c44c:	2100      	movs	r1, #0
 800c44e:	4628      	mov	r0, r5
 800c450:	f7f3 febe 	bl	80001d0 <memchr>
 800c454:	b108      	cbz	r0, 800c45a <_printf_i+0x1f2>
 800c456:	1b40      	subs	r0, r0, r5
 800c458:	6060      	str	r0, [r4, #4]
 800c45a:	6863      	ldr	r3, [r4, #4]
 800c45c:	6123      	str	r3, [r4, #16]
 800c45e:	2300      	movs	r3, #0
 800c460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c464:	e7a8      	b.n	800c3b8 <_printf_i+0x150>
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	462a      	mov	r2, r5
 800c46a:	4649      	mov	r1, r9
 800c46c:	4640      	mov	r0, r8
 800c46e:	47d0      	blx	sl
 800c470:	3001      	adds	r0, #1
 800c472:	d0ab      	beq.n	800c3cc <_printf_i+0x164>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	079b      	lsls	r3, r3, #30
 800c478:	d413      	bmi.n	800c4a2 <_printf_i+0x23a>
 800c47a:	68e0      	ldr	r0, [r4, #12]
 800c47c:	9b03      	ldr	r3, [sp, #12]
 800c47e:	4298      	cmp	r0, r3
 800c480:	bfb8      	it	lt
 800c482:	4618      	movlt	r0, r3
 800c484:	e7a4      	b.n	800c3d0 <_printf_i+0x168>
 800c486:	2301      	movs	r3, #1
 800c488:	4632      	mov	r2, r6
 800c48a:	4649      	mov	r1, r9
 800c48c:	4640      	mov	r0, r8
 800c48e:	47d0      	blx	sl
 800c490:	3001      	adds	r0, #1
 800c492:	d09b      	beq.n	800c3cc <_printf_i+0x164>
 800c494:	3501      	adds	r5, #1
 800c496:	68e3      	ldr	r3, [r4, #12]
 800c498:	9903      	ldr	r1, [sp, #12]
 800c49a:	1a5b      	subs	r3, r3, r1
 800c49c:	42ab      	cmp	r3, r5
 800c49e:	dcf2      	bgt.n	800c486 <_printf_i+0x21e>
 800c4a0:	e7eb      	b.n	800c47a <_printf_i+0x212>
 800c4a2:	2500      	movs	r5, #0
 800c4a4:	f104 0619 	add.w	r6, r4, #25
 800c4a8:	e7f5      	b.n	800c496 <_printf_i+0x22e>
 800c4aa:	bf00      	nop
 800c4ac:	0800ca15 	.word	0x0800ca15
 800c4b0:	0800ca26 	.word	0x0800ca26

0800c4b4 <_read_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d07      	ldr	r5, [pc, #28]	; (800c4d4 <_read_r+0x20>)
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	4611      	mov	r1, r2
 800c4be:	2200      	movs	r2, #0
 800c4c0:	602a      	str	r2, [r5, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	f7f5 fd28 	bl	8001f18 <_read>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d102      	bne.n	800c4d2 <_read_r+0x1e>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b103      	cbz	r3, 800c4d2 <_read_r+0x1e>
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	20005314 	.word	0x20005314

0800c4d8 <_fstat_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4d07      	ldr	r5, [pc, #28]	; (800c4f8 <_fstat_r+0x20>)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	f7f5 fd40 	bl	8001f6a <_fstat>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	d102      	bne.n	800c4f4 <_fstat_r+0x1c>
 800c4ee:	682b      	ldr	r3, [r5, #0]
 800c4f0:	b103      	cbz	r3, 800c4f4 <_fstat_r+0x1c>
 800c4f2:	6023      	str	r3, [r4, #0]
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20005314 	.word	0x20005314

0800c4fc <_isatty_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d06      	ldr	r5, [pc, #24]	; (800c518 <_isatty_r+0x1c>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f5 fd3f 	bl	8001f8a <_isatty>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_isatty_r+0x1a>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_isatty_r+0x1a>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20005314 	.word	0x20005314

0800c51c <_init>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr

0800c528 <_fini>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr
