
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013594  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  08013728  08013728  00023728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142a8  080142a8  00030270  2**0
                  CONTENTS
  4 .ARM          00000008  080142a8  080142a8  000242a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142b0  080142b0  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142b0  080142b0  000242b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142b4  080142b4  000242b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080142b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030270  2**0
                  CONTENTS
 10 .bss          000058a8  20000270  20000270  00030270  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005b18  20005b18  00030270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023358  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ee0  00000000  00000000  000535f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  000584d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  00059f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000073b6  00000000  00000000  0005b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcab  00000000  00000000  00062c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d25ca  00000000  00000000  000828c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154e8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083bc  00000000  00000000  00154edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801370c 	.word	0x0801370c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0801370c 	.word	0x0801370c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*32)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000eb4:	f240 4304 	movw	r3, #1028	; 0x404
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <ws2812NumOn+0x48>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ebe:	f006 ffd7 	bl	8007e70 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ec2:	f240 4304 	movw	r3, #1028	; 0x404
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ec8:	2104      	movs	r1, #4
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ecc:	f006 ffd0 	bl	8007e70 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_3, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ed0:	f240 4304 	movw	r3, #1028	; 0x404
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000eda:	f006 ffc9 	bl	8007e70 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_4, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ede:	f240 4304 	movw	r3, #1028	; 0x404
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ee4:	210c      	movs	r1, #12
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ee8:	f006 ffc2 	bl	8007e70 <HAL_TIM_PWM_Start_DMA>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000028c 	.word	0x2000028c
 8000ef8:	20000de4 	.word	0x20000de4

08000efc <ws2812AllColor>:
	}
}


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
	uint32_t buf=0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]

	buf = green*0x1000000 + red*0x10000 + blue*0x100;	//8bit+8bit+8bit=24bit
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	021a      	lsls	r2, r3, #8
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4413      	add	r3, r2
 8000f1a:	021a      	lsls	r2, r3, #8
 8000f1c:	797b      	ldrb	r3, [r7, #5]
 8000f1e:	4413      	add	r3, r2
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 8000f24:	231d      	movs	r3, #29
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e025      	b.n	8000f76 <ws2812AllColor+0x7a>
	{
		for(int i=0;i<32;i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e01c      	b.n	8000f6a <ws2812AllColor+0x6e>
		{
			if(buf&(1<<i)) {g_led_data[(j*32)-i] = BIT_HIGH;}
 8000f30:	2201      	movs	r2, #1
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <ws2812AllColor+0x58>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <ws2812AllColor+0x90>)
 8000f4c:	2134      	movs	r1, #52	; 0x34
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f52:	e007      	b.n	8000f64 <ws2812AllColor+0x68>
			else {g_led_data[(j*32)-i] = BIT_LOW;}
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <ws2812AllColor+0x90>)
 8000f5e:	2123      	movs	r1, #35	; 0x23
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<32;i++)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3301      	adds	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b1f      	cmp	r3, #31
 8000f6e:	dddf      	ble.n	8000f30 <ws2812AllColor+0x34>
	for(int j=TOTALNUM;j>0;j--)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dcd6      	bgt.n	8000f2a <ws2812AllColor+0x2e>
		}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000028c 	.word	0x2000028c

08000f90 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_CAN1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f9c:	2206      	movs	r2, #6
 8000f9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000fb2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fe2:	f004 fa5f 	bl	80054a4 <HAL_CAN_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fec:	f003 f986 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000b98 	.word	0x20000b98
 8000ff8:	40006400 	.word	0x40006400

08000ffc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_CAN_MspInit+0x94>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d134      	bne.n	8001088 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_CAN_MspInit+0x98>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001068:	2309      	movs	r3, #9
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_CAN_MspInit+0x9c>)
 8001074:	f005 fdc4 	bl	8006c00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	2014      	movs	r0, #20
 800107e:	f005 f985 	bl	800638c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001082:	2014      	movs	r0, #20
 8001084:	f005 f99e 	bl	80063c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40006400 	.word	0x40006400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <CAN_disableirq>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_disableirq(void){HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);}
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
 80010a0:	2014      	movs	r0, #20
 80010a2:	f005 f99d 	bl	80063e0 <HAL_NVIC_DisableIRQ>
 80010a6:	2015      	movs	r0, #21
 80010a8:	f005 f99a 	bl	80063e0 <HAL_NVIC_DisableIRQ>
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <CAN_enableirq>:
void CAN_enableirq(void){HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);/*HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);*/}
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	2014      	movs	r0, #20
 80010b6:	f005 f985 	bl	80063c4 <HAL_NVIC_EnableIRQ>
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <CanInit>:

void CanInit(uint32_t id, uint32_t mask, uint8_t EXT_Select)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	71fb      	strb	r3, [r7, #7]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <CanInit+0x88>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <CanInit+0x88>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <CanInit+0x88>)
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
//    sFilterConfig.FilterIdHigh = (id<<3)>>16;
//    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(EXT_Select<<2);//(0x1<<2) is extended id check register
//    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
//    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(EXT_Select<<2);
    sFilterConfig.FilterIdHigh = (id<<5);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <CanInit+0x88>)
 80010e6:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = 0;//(0x1<<2) is extended id check register
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <CanInit+0x88>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<5);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <CanInit+0x88>)
 80010f4:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <CanInit+0x88>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <CanInit+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <CanInit+0x88>)
 8001104:	2201      	movs	r2, #1
 8001106:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <CanInit+0x88>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <CanInit+0x8c>)
 8001110:	f004 fba4 	bl	800585c <HAL_CAN_Start>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <CanInit+0x5e>
 800111a:	f003 f8ef 	bl	80042fc <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800111e:	2102      	movs	r1, #2
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <CanInit+0x8c>)
 8001122:	f004 fe01 	bl	8005d28 <HAL_CAN_ActivateNotification>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d000      	beq.n	800112e <CanInit+0x6e>
 800112c:	e7fe      	b.n	800112c <CanInit+0x6c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800112e:	4906      	ldr	r1, [pc, #24]	; (8001148 <CanInit+0x88>)
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <CanInit+0x8c>)
 8001132:	f004 fab3 	bl	800569c <HAL_CAN_ConfigFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <CanInit+0x80>
    {
		/* Filter configuration Error */
		Error_Handler();
 800113c:	f003 f8de 	bl	80042fc <Error_Handler>
    }
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000b70 	.word	0x20000b70
 800114c:	20000b98 	.word	0x20000b98

08001150 <sendCan>:
		Error_Handler();
    }
}

void sendCan(uint32_t ID, int8_t *buf, uint8_t len, uint8_t ext)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	4613      	mov	r3, r2
 8001164:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <sendCan+0x2c>
 8001178:	2304      	movs	r3, #4
 800117a:	e000      	b.n	800117e <sendCan+0x2e>
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <sendCan+0x74>)
 800118c:	f004 fc85 	bl	8005a9a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001190:	4603      	mov	r3, r0
 8001192:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00d      	beq.n	80011b6 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	f107 0114 	add.w	r1, r7, #20
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <sendCan+0x74>)
 80011a6:	f004 fb9d 	bl	80058e4 <HAL_CAN_AddTxMessage>
 80011aa:	4603      	mov	r3, r0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d000      	beq.n	80011b6 <sendCan+0x66>
 80011b4:	e7fe      	b.n	80011b4 <sendCan+0x64>
    }
    osDelay(1);//must be
 80011b6:	2001      	movs	r0, #1
 80011b8:	f009 fdc6 	bl	800ad48 <osDelay>
}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000b98 	.word	0x20000b98

080011c8 <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	80bb      	strh	r3, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]

	switch (len) {
 80011e4:	7e3b      	ldrb	r3, [r7, #24]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d817      	bhi.n	800121c <SDOMsg+0x54>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <SDOMsg+0x2c>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	0800120b 	.word	0x0800120b
 80011fc:	08001211 	.word	0x08001211
 8001200:	08001217 	.word	0x08001217
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8001204:	232f      	movs	r3, #47	; 0x2f
 8001206:	723b      	strb	r3, [r7, #8]
 8001208:	e008      	b.n	800121c <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800120a:	232b      	movs	r3, #43	; 0x2b
 800120c:	723b      	strb	r3, [r7, #8]
 800120e:	e005      	b.n	800121c <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 8001210:	2327      	movs	r3, #39	; 0x27
 8001212:	723b      	strb	r3, [r7, #8]
 8001214:	e002      	b.n	800121c <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 8001216:	2323      	movs	r3, #35	; 0x23
 8001218:	723b      	strb	r3, [r7, #8]
 800121a:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	3301      	adds	r3, #1
 8001222:	88ba      	ldrh	r2, [r7, #4]
 8001224:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	3304      	adds	r3, #4
 8001230:	7e3a      	ldrb	r2, [r7, #24]
 8001232:	4639      	mov	r1, r7
 8001234:	4618      	mov	r0, r3
 8001236:	f00d fcf4 	bl	800ec22 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001240:	4618      	mov	r0, r3
 8001242:	f107 0108 	add.w	r1, r7, #8
 8001246:	2300      	movs	r3, #0
 8001248:	2208      	movs	r2, #8
 800124a:	f7ff ff81 	bl	8001150 <sendCan>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop

08001258 <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <NMT_Mode+0x24>
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	723b      	strb	r3, [r7, #8]
 800127a:	e001      	b.n	8001280 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 800127c:	2301      	movs	r3, #1
 800127e:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 8001284:	f107 0108 	add.w	r1, r7, #8
 8001288:	2300      	movs	r3, #0
 800128a:	2208      	movs	r2, #8
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff5f 	bl	8001150 <sendCan>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 800129c:	b082      	sub	sp, #8
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b089      	sub	sp, #36	; 0x24
 80012a2:	af02      	add	r7, sp, #8
 80012a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012a8:	e884 000c 	stmia.w	r4, {r2, r3}
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	460b      	mov	r3, r1
 80012b2:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	uint16_t tmp_TxRx = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	82fb      	strh	r3, [r7, #22]
	uint8_t type = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	757b      	strb	r3, [r7, #21]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 80012c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d907      	bls.n	80012d8 <PDOMapping+0x3c>
 80012c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4858      	ldr	r0, [pc, #352]	; (8001430 <PDOMapping+0x194>)
 80012d0:	f00e f9bc 	bl	800f64c <iprintf>
 80012d4:	2300      	movs	r3, #0
 80012d6:	e0a4      	b.n	8001422 <PDOMapping+0x186>

	if(PDO_index>=0x1600&&PDO_index<=0x17ff){tmp_TxRx=0x200+0x100*(PDO_index-0x1600); type=0xff;}
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80012de:	d30d      	bcc.n	80012fc <PDOMapping+0x60>
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80012e6:	d209      	bcs.n	80012fc <PDOMapping+0x60>
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	f5a3 53af 	sub.w	r3, r3, #5600	; 0x15e0
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	82fb      	strh	r3, [r7, #22]
 80012f6:	23ff      	movs	r3, #255	; 0xff
 80012f8:	757b      	strb	r3, [r7, #21]
 80012fa:	e021      	b.n	8001340 <PDOMapping+0xa4>
	else if(PDO_index>=0x1a00&&PDO_index<=0x1bff) {
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8001302:	d316      	bcc.n	8001332 <PDOMapping+0x96>
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800130a:	d212      	bcs.n	8001332 <PDOMapping+0x96>
		tmp_TxRx=0x180+0x100*(PDO_index-0x1a00);
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	f5a3 53d0 	sub.w	r3, r3, #6656	; 0x1a00
 8001312:	b29b      	uxth	r3, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800131c:	82fb      	strh	r3, [r7, #22]
		if(Param.option==0){type=0xfe;}
 800131e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <PDOMapping+0x90>
 8001326:	23fe      	movs	r3, #254	; 0xfe
 8001328:	757b      	strb	r3, [r7, #21]
 800132a:	e009      	b.n	8001340 <PDOMapping+0xa4>
		else {type=0xff;}
 800132c:	23ff      	movs	r3, #255	; 0xff
 800132e:	757b      	strb	r3, [r7, #21]
		if(Param.option==0){type=0xfe;}
 8001330:	e006      	b.n	8001340 <PDOMapping+0xa4>
		}
	else {printf("PDO_index error: %d\n", PDO_index); return 0;}
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	483f      	ldr	r0, [pc, #252]	; (8001434 <PDOMapping+0x198>)
 8001338:	f00e f988 	bl	800f64c <iprintf>
 800133c:	2300      	movs	r3, #0
 800133e:	e070      	b.n	8001422 <PDOMapping+0x186>

	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4619      	mov	r1, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ff87 	bl	8001258 <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	e05d      	b.n	800140c <PDOMapping+0x170>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 8001350:	88b9      	ldrh	r1, [r7, #4]
 8001352:	79f8      	ldrb	r0, [r7, #7]
 8001354:	2301      	movs	r3, #1
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	2200      	movs	r2, #0
 800135c:	f7ff ff34 	bl	80011c8 <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	440a      	add	r2, r1
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	4413      	add	r3, r2
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	440a      	add	r2, r1
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	88b9      	ldrh	r1, [r7, #4]
 8001392:	79f8      	ldrb	r0, [r7, #7]
 8001394:	2304      	movs	r3, #4
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f7ff ff15 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, tmp_TxRx+Node_id, 4);//cob-id??
 800139e:	88bb      	ldrh	r3, [r7, #4]
 80013a0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013a4:	b299      	uxth	r1, r3
 80013a6:	8afa      	ldrh	r2, [r7, #22]
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4413      	add	r3, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	79f8      	ldrb	r0, [r7, #7]
 80013b0:	2304      	movs	r3, #4
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	f7ff ff06 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, type, 1);//transmission type, fix asynchronous with 0xff
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013c2:	b299      	uxth	r1, r3
 80013c4:	7d7b      	ldrb	r3, [r7, #21]
 80013c6:	79f8      	ldrb	r0, [r7, #7]
 80013c8:	2201      	movs	r2, #1
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f7ff fefb 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 2);//not necessary 3= inhibit mode, 5=event timer mode
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013d8:	b299      	uxth	r1, r3
 80013da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3303      	adds	r3, #3
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80013e8:	461c      	mov	r4, r3
 80013ea:	79f8      	ldrb	r0, [r7, #7]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4623      	mov	r3, r4
 80013f2:	f7ff fee9 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 80013f6:	88b9      	ldrh	r1, [r7, #4]
 80013f8:	79f8      	ldrb	r0, [r7, #7]
 80013fa:	2301      	movs	r3, #1
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2200      	movs	r2, #0
 8001402:	f7ff fee1 	bl	80011c8 <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	db9c      	blt.n	8001350 <PDOMapping+0xb4>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff ff1c 	bl	8001258 <NMT_Mode>

	return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800142c:	b002      	add	sp, #8
 800142e:	4770      	bx	lr
 8001430:	08013728 	.word	0x08013728
 8001434:	08013740 	.word	0x08013740

08001438 <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf, uint8_t length)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	603a      	str	r2, [r7, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	460b      	mov	r3, r1
 8001448:	80bb      	strh	r3, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	71bb      	strb	r3, [r7, #6]
	sendCan((PDO_index-0x1800)+Node_id,buf,length,0);
 800144e:	88bb      	ldrh	r3, [r7, #4]
 8001450:	f5a3 52c0 	sub.w	r2, r3, #6144	; 0x1800
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4413      	add	r3, r2
 8001458:	4618      	mov	r0, r3
 800145a:	79ba      	ldrb	r2, [r7, #6]
 800145c:	2300      	movs	r3, #0
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	f7ff fe76 	bl	8001150 <sendCan>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b29b      	uxth	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 800149a:	883b      	ldrh	r3, [r7, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 80014a0:	883b      	ldrh	r3, [r7, #0]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf, 4);
 80014aa:	f107 0208 	add.w	r2, r7, #8
 80014ae:	88b9      	ldrh	r1, [r7, #4]
 80014b0:	79f8      	ldrb	r0, [r7, #7]
 80014b2:	2304      	movs	r3, #4
 80014b4:	f7ff ffc0 	bl	8001438 <PDOMsg>
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}

080014c0 <Tor_OnOff>:


void Tor_OnOff(uint8_t OnOff)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	if(OnOff==1){
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d139      	bne.n	8001544 <Tor_OnOff+0x84>
		for(int i=0;i<2;i++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e032      	b.n	800153c <Tor_OnOff+0x7c>
			SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	b2d8      	uxtb	r0, r3
 80014de:	2302      	movs	r3, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	f246 0140 	movw	r1, #24640	; 0x6040
 80014ea:	f7ff fe6d 	bl	80011c8 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2d8      	uxtb	r0, r3
 80014f6:	2302      	movs	r3, #2
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2306      	movs	r3, #6
 80014fc:	2200      	movs	r2, #0
 80014fe:	f246 0140 	movw	r1, #24640	; 0x6040
 8001502:	f7ff fe61 	bl	80011c8 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3301      	adds	r3, #1
 800150c:	b2d8      	uxtb	r0, r3
 800150e:	2302      	movs	r3, #2
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2307      	movs	r3, #7
 8001514:	2200      	movs	r2, #0
 8001516:	f246 0140 	movw	r1, #24640	; 0x6040
 800151a:	f7ff fe55 	bl	80011c8 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3301      	adds	r3, #1
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	2302      	movs	r3, #2
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	230f      	movs	r3, #15
 800152c:	2200      	movs	r2, #0
 800152e:	f246 0140 	movw	r1, #24640	; 0x6040
 8001532:	f7ff fe49 	bl	80011c8 <SDOMsg>
		for(int i=0;i<2;i++){
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	ddc9      	ble.n	80014d6 <Tor_OnOff+0x16>
		}
	}
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
}
 8001542:	e014      	b.n	800156e <Tor_OnOff+0xae>
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	e00e      	b.n	8001568 <Tor_OnOff+0xa8>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3301      	adds	r3, #1
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	2302      	movs	r3, #2
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	2200      	movs	r2, #0
 800155a:	f246 0140 	movw	r1, #24640	; 0x6040
 800155e:	f7ff fe33 	bl	80011c8 <SDOMsg>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3301      	adds	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	dded      	ble.n	800154a <Tor_OnOff+0x8a>
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	if(FLAG_RxCplt<5)
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d81a      	bhi.n	80015be <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
	{
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header[FLAG_RxCplt], g_uCAN_Rx_Data[FLAG_RxCplt]) != HAL_OK){while(1){;}}
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001596:	441a      	add	r2, r3
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4911      	ldr	r1, [pc, #68]	; (80015e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80015a0:	440b      	add	r3, r1
 80015a2:	2100      	movs	r1, #0
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015a6:	f004 faad 	bl	8005b04 <HAL_CAN_GetRxMessage>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d000      	beq.n	80015b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
 80015b0:	e7fe      	b.n	80015b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
//		printf("%d: RF %d %d %d\n", osKernelGetTickCount(),
//				g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].IDE);
		FLAG_RxCplt++;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80015ba:	6013      	str	r3, [r2, #0]
//		printf("%d: RF_TC %d %d %d\n", osKernelGetTickCount(),
//						g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].IDE);
	}


}
 80015bc:	e009      	b.n	80015d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header[6], g_uCAN_Rx_Data[6]) != HAL_OK){while(1){;}}
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015c6:	f004 fa9d 	bl	8005b04 <HAL_CAN_GetRxMessage>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d000      	beq.n	80015d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80015d0:	e7fe      	b.n	80015d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000a94 	.word	0x20000a94
 80015e0:	20000ac8 	.word	0x20000ac8
 80015e4:	20000a98 	.word	0x20000a98
 80015e8:	20000b98 	.word	0x20000b98
 80015ec:	20000ac8 	.word	0x20000ac8
 80015f0:	20000b70 	.word	0x20000b70

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <MX_DMA_Init+0xa8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a26      	ldr	r2, [pc, #152]	; (800169c <MX_DMA_Init+0xa8>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <MX_DMA_Init+0xa8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <MX_DMA_Init+0xa8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <MX_DMA_Init+0xa8>)
 8001620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_DMA_Init+0xa8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2105      	movs	r1, #5
 8001636:	200e      	movs	r0, #14
 8001638:	f004 fea8 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800163c:	200e      	movs	r0, #14
 800163e:	f004 fec1 	bl	80063c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2105      	movs	r1, #5
 8001646:	2011      	movs	r0, #17
 8001648:	f004 fea0 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800164c:	2011      	movs	r0, #17
 800164e:	f004 feb9 	bl	80063c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2105      	movs	r1, #5
 8001656:	203a      	movs	r0, #58	; 0x3a
 8001658:	f004 fe98 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800165c:	203a      	movs	r0, #58	; 0x3a
 800165e:	f004 feb1 	bl	80063c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2105      	movs	r1, #5
 8001666:	203b      	movs	r0, #59	; 0x3b
 8001668:	f004 fe90 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800166c:	203b      	movs	r0, #59	; 0x3b
 800166e:	f004 fea9 	bl	80063c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2105      	movs	r1, #5
 8001676:	203c      	movs	r0, #60	; 0x3c
 8001678:	f004 fe88 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800167c:	203c      	movs	r0, #60	; 0x3c
 800167e:	f004 fea1 	bl	80063c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2105      	movs	r1, #5
 8001686:	2046      	movs	r0, #70	; 0x46
 8001688:	f004 fe80 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800168c:	2046      	movs	r0, #70	; 0x46
 800168e:	f004 fe99 	bl	80063c4 <HAL_NVIC_EnableIRQ>

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	4802      	ldr	r0, [pc, #8]	; (80016b0 <fanInit+0x10>)
 80016a8:	f006 fb1a 	bl	8007ce0 <HAL_TIM_PWM_Start>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000d54 	.word	0x20000d54

080016b4 <fanOn>:

void fanOn(uint8_t duty)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b63      	cmp	r3, #99	; 0x63
 80016c2:	d901      	bls.n	80016c8 <fanOn+0x14>
 80016c4:	2364      	movs	r3, #100	; 0x64
 80016c6:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d104      	bne.n	80016d8 <fanOn+0x24>
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <fanOn+0x38>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 80016d6:	e003      	b.n	80016e0 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <fanOn+0x38>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000d54 	.word	0x20000d54

080016f0 <debugcansend>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void debugcansend(int8_t * tmp)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	int8_t buf[8]={0,};
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
	memcpy(buf, tmp, sizeof(tmp));
 8001704:	60bb      	str	r3, [r7, #8]

	sendCan(0x3e8, buf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
 8001706:	f107 0108 	add.w	r1, r7, #8
 800170a:	2300      	movs	r3, #0
 800170c:	2208      	movs	r2, #8
 800170e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001712:	f7ff fd1d 	bl	8001150 <sendCan>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <Cal_Real_cmd>:
void Cal_Real_cmd(void)
{
 8001720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001724:	b088      	sub	sp, #32
 8001726:	af00      	add	r7, sp, #0

	double tempL;
	double tempR;

	tempL=(double)(Tmp_cmd_FL+Tmp_cmd_RL)/(2*10);
 8001728:	4bc3      	ldr	r3, [pc, #780]	; (8001a38 <Cal_Real_cmd+0x318>)
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	461a      	mov	r2, r3
 8001730:	4bc2      	ldr	r3, [pc, #776]	; (8001a3c <Cal_Real_cmd+0x31c>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	4413      	add	r3, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fef3 	bl	8000524 <__aeabi_i2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4bbf      	ldr	r3, [pc, #764]	; (8001a40 <Cal_Real_cmd+0x320>)
 8001744:	f7ff f882 	bl	800084c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tempR=-(double)(Tmp_cmd_FR+Tmp_cmd_RR)/(2*10);
 8001750:	4bbc      	ldr	r3, [pc, #752]	; (8001a44 <Cal_Real_cmd+0x324>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	461a      	mov	r2, r3
 8001758:	4bbb      	ldr	r3, [pc, #748]	; (8001a48 <Cal_Real_cmd+0x328>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	4413      	add	r3, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fedf 	bl	8000524 <__aeabi_i2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4bb2      	ldr	r3, [pc, #712]	; (8001a40 <Cal_Real_cmd+0x320>)
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7ff f867 	bl	800084c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9c7 2304 	strd	r2, r3, [r7, #16]
//	Real_cmd_v_x = C_2PIRxINv60*(((double)(Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR))/4)/10*fabs(cos(ANGLE_RAD_A));
//	Real_cmd_v_y = C_2PIRxINv60*(((double)(Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR))/4)/10*fabs(sin(ANGLE_RAD_A));

//	Real_cmd_v_x = (C_2PIRxINv60/2)*((sin(angle_rad_i)*tempL/2)+(sin(angle_rad_o)*tempR/2))/sin(angle_rad_c);
	if(angle_rad_c == 0){
 8001786:	4bb1      	ldr	r3, [pc, #708]	; (8001a4c <Cal_Real_cmd+0x32c>)
 8001788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f7ff f998 	bl	8000ac8 <__aeabi_dcmpeq>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d047      	beq.n	800182e <Cal_Real_cmd+0x10e>
//		Real_cmd_v_x = C_2PIRxINv60*(((double)(Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR))/4)*fabs(cos(ANGLE_RAD_A));
		Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
 800179e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a6:	f7fe fd71 	bl	800028c <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ba:	f7ff f847 	bl	800084c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	a398      	add	r3, pc, #608	; (adr r3, 8001a28 <Cal_Real_cmd+0x308>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff14 	bl	80005f8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	4b9d      	ldr	r3, [pc, #628]	; (8001a50 <Cal_Real_cmd+0x330>)
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	4b9d      	ldr	r3, [pc, #628]	; (8001a54 <Cal_Real_cmd+0x334>)
 80017e0:	ed93 6b00 	vldr	d6, [r3]
 80017e4:	eeb0 1a46 	vmov.f32	s2, s12
 80017e8:	eef0 1a66 	vmov.f32	s3, s13
 80017ec:	eeb0 0a47 	vmov.f32	s0, s14
 80017f0:	eef0 0a67 	vmov.f32	s1, s15
 80017f4:	f010 f848 	bl	8011888 <atan2>
 80017f8:	eeb0 7a40 	vmov.f32	s14, s0
 80017fc:	eef0 7a60 	vmov.f32	s15, s1
 8001800:	eeb0 0a47 	vmov.f32	s0, s14
 8001804:	eef0 0a67 	vmov.f32	s1, s15
 8001808:	f00f ff2a 	bl	8011660 <cos>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	4690      	mov	r8, r2
 8001812:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001816:	4642      	mov	r2, r8
 8001818:	464b      	mov	r3, r9
 800181a:	4620      	mov	r0, r4
 800181c:	4629      	mov	r1, r5
 800181e:	f7fe feeb 	bl	80005f8 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	498c      	ldr	r1, [pc, #560]	; (8001a58 <Cal_Real_cmd+0x338>)
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
 800182c:	e211      	b.n	8001c52 <Cal_Real_cmd+0x532>
	}
	else{
		if((tempL<tempR)  &&  ((tempL>0) && (tempR>0))){
 800182e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001836:	f7ff f951 	bl	8000adc <__aeabi_dcmplt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d072      	beq.n	8001926 <Cal_Real_cmd+0x206>
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184c:	f7ff f964 	bl	8000b18 <__aeabi_dcmpgt>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d067      	beq.n	8001926 <Cal_Real_cmd+0x206>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001862:	f7ff f959 	bl	8000b18 <__aeabi_dcmpgt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05c      	beq.n	8001926 <Cal_Real_cmd+0x206>
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempL)
 800186c:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <Cal_Real_cmd+0x33c>)
 800186e:	ed93 7b00 	vldr	d7, [r3]
 8001872:	eeb0 0a47 	vmov.f32	s0, s14
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	f00f ff45 	bl	8011708 <sin>
 800187e:	ec55 4b10 	vmov	r4, r5, d0
 8001882:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <Cal_Real_cmd+0x32c>)
 8001884:	ed93 7b00 	vldr	d7, [r3]
 8001888:	eeb0 0a47 	vmov.f32	s0, s14
 800188c:	eef0 0a67 	vmov.f32	s1, s15
 8001890:	f00f ff3a 	bl	8011708 <sin>
 8001894:	ec53 2b10 	vmov	r2, r3, d0
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe ffd6 	bl	800084c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ac:	f7fe fea4 	bl	80005f8 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
				+((sin(angle_rad_o)/sin(angle_rad_c))*tempR));
 80018b8:	4b69      	ldr	r3, [pc, #420]	; (8001a60 <Cal_Real_cmd+0x340>)
 80018ba:	ed93 7b00 	vldr	d7, [r3]
 80018be:	eeb0 0a47 	vmov.f32	s0, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	f00f ff1f 	bl	8011708 <sin>
 80018ca:	ec59 8b10 	vmov	r8, r9, d0
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <Cal_Real_cmd+0x32c>)
 80018d0:	ed93 7b00 	vldr	d7, [r3]
 80018d4:	eeb0 0a47 	vmov.f32	s0, s14
 80018d8:	eef0 0a67 	vmov.f32	s1, s15
 80018dc:	f00f ff14 	bl	8011708 <sin>
 80018e0:	ec53 2b10 	vmov	r2, r3, d0
 80018e4:	4640      	mov	r0, r8
 80018e6:	4649      	mov	r1, r9
 80018e8:	f7fe ffb0 	bl	800084c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018f8:	f7fe fe7e 	bl	80005f8 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fcc2 	bl	800028c <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempL)
 8001910:	a347      	add	r3, pc, #284	; (adr r3, 8001a30 <Cal_Real_cmd+0x310>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe6f 	bl	80005f8 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	494e      	ldr	r1, [pc, #312]	; (8001a58 <Cal_Real_cmd+0x338>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
 8001924:	e195      	b.n	8001c52 <Cal_Real_cmd+0x532>
		}

		else if((tempL>tempR)  &&  ((tempL>0) && (tempR>0))){
 8001926:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800192a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800192e:	f7ff f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 8095 	beq.w	8001a64 <Cal_Real_cmd+0x344>
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001946:	f7ff f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8089 	beq.w	8001a64 <Cal_Real_cmd+0x344>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800195e:	f7ff f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d07d      	beq.n	8001a64 <Cal_Real_cmd+0x344>
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempR)
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <Cal_Real_cmd+0x33c>)
 800196a:	ed93 7b00 	vldr	d7, [r3]
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	eef0 0a67 	vmov.f32	s1, s15
 8001976:	f00f fec7 	bl	8011708 <sin>
 800197a:	ec55 4b10 	vmov	r4, r5, d0
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <Cal_Real_cmd+0x32c>)
 8001980:	ed93 7b00 	vldr	d7, [r3]
 8001984:	eeb0 0a47 	vmov.f32	s0, s14
 8001988:	eef0 0a67 	vmov.f32	s1, s15
 800198c:	f00f febc 	bl	8011708 <sin>
 8001990:	ec53 2b10 	vmov	r2, r3, d0
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe ff58 	bl	800084c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019a8:	f7fe fe26 	bl	80005f8 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4614      	mov	r4, r2
 80019b2:	461d      	mov	r5, r3
				+((sin(angle_rad_o)/sin(angle_rad_c))*tempL));
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <Cal_Real_cmd+0x340>)
 80019b6:	ed93 7b00 	vldr	d7, [r3]
 80019ba:	eeb0 0a47 	vmov.f32	s0, s14
 80019be:	eef0 0a67 	vmov.f32	s1, s15
 80019c2:	f00f fea1 	bl	8011708 <sin>
 80019c6:	ec59 8b10 	vmov	r8, r9, d0
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <Cal_Real_cmd+0x32c>)
 80019cc:	ed93 7b00 	vldr	d7, [r3]
 80019d0:	eeb0 0a47 	vmov.f32	s0, s14
 80019d4:	eef0 0a67 	vmov.f32	s1, s15
 80019d8:	f00f fe96 	bl	8011708 <sin>
 80019dc:	ec53 2b10 	vmov	r2, r3, d0
 80019e0:	4640      	mov	r0, r8
 80019e2:	4649      	mov	r1, r9
 80019e4:	f7fe ff32 	bl	800084c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc44 	bl	800028c <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempR)
 8001a0c:	a308      	add	r3, pc, #32	; (adr r3, 8001a30 <Cal_Real_cmd+0x310>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fdf1 	bl	80005f8 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	490f      	ldr	r1, [pc, #60]	; (8001a58 <Cal_Real_cmd+0x338>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a20:	e117      	b.n	8001c52 <Cal_Real_cmd+0x532>
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	198abd1e 	.word	0x198abd1e
 8001a2c:	40221dd4 	.word	0x40221dd4
 8001a30:	198abd1e 	.word	0x198abd1e
 8001a34:	40121dd4 	.word	0x40121dd4
 8001a38:	20000c40 	.word	0x20000c40
 8001a3c:	20000c44 	.word	0x20000c44
 8001a40:	40340000 	.word	0x40340000
 8001a44:	20000c42 	.word	0x20000c42
 8001a48:	20000c46 	.word	0x20000c46
 8001a4c:	20000be0 	.word	0x20000be0
 8001a50:	20000c10 	.word	0x20000c10
 8001a54:	20000bf8 	.word	0x20000bf8
 8001a58:	20000c28 	.word	0x20000c28
 8001a5c:	20000be8 	.word	0x20000be8
 8001a60:	20000bf0 	.word	0x20000bf0
		}

		else if((tempL<tempR)  &&  ((tempL<0) && (tempR<0))){
 8001a64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a6c:	f7ff f836 	bl	8000adc <__aeabi_dcmplt>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d072      	beq.n	8001b5c <Cal_Real_cmd+0x43c>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a82:	f7ff f82b 	bl	8000adc <__aeabi_dcmplt>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d067      	beq.n	8001b5c <Cal_Real_cmd+0x43c>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a98:	f7ff f820 	bl	8000adc <__aeabi_dcmplt>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d05c      	beq.n	8001b5c <Cal_Real_cmd+0x43c>
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempR)
 8001aa2:	4bb1      	ldr	r3, [pc, #708]	; (8001d68 <Cal_Real_cmd+0x648>)
 8001aa4:	ed93 7b00 	vldr	d7, [r3]
 8001aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aac:	eef0 0a67 	vmov.f32	s1, s15
 8001ab0:	f00f fe2a 	bl	8011708 <sin>
 8001ab4:	ec55 4b10 	vmov	r4, r5, d0
 8001ab8:	4bac      	ldr	r3, [pc, #688]	; (8001d6c <Cal_Real_cmd+0x64c>)
 8001aba:	ed93 7b00 	vldr	d7, [r3]
 8001abe:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac2:	eef0 0a67 	vmov.f32	s1, s15
 8001ac6:	f00f fe1f 	bl	8011708 <sin>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ae2:	f7fe fd89 	bl	80005f8 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4614      	mov	r4, r2
 8001aec:	461d      	mov	r5, r3
				+((sin(angle_rad_o)/sin(angle_rad_c))*tempL));
 8001aee:	4ba0      	ldr	r3, [pc, #640]	; (8001d70 <Cal_Real_cmd+0x650>)
 8001af0:	ed93 7b00 	vldr	d7, [r3]
 8001af4:	eeb0 0a47 	vmov.f32	s0, s14
 8001af8:	eef0 0a67 	vmov.f32	s1, s15
 8001afc:	f00f fe04 	bl	8011708 <sin>
 8001b00:	ec59 8b10 	vmov	r8, r9, d0
 8001b04:	4b99      	ldr	r3, [pc, #612]	; (8001d6c <Cal_Real_cmd+0x64c>)
 8001b06:	ed93 7b00 	vldr	d7, [r3]
 8001b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0e:	eef0 0a67 	vmov.f32	s1, s15
 8001b12:	f00f fdf9 	bl	8011708 <sin>
 8001b16:	ec53 2b10 	vmov	r2, r3, d0
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	f7fe fe95 	bl	800084c <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2e:	f7fe fd63 	bl	80005f8 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fba7 	bl	800028c <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempR)
 8001b46:	a382      	add	r3, pc, #520	; (adr r3, 8001d50 <Cal_Real_cmd+0x630>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fd54 	bl	80005f8 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4987      	ldr	r1, [pc, #540]	; (8001d74 <Cal_Real_cmd+0x654>)
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
 8001b5a:	e07a      	b.n	8001c52 <Cal_Real_cmd+0x532>
		}

		else if((tempL>tempR)  &&  ((tempL<0) && (tempR<0))){
 8001b5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b64:	f7fe ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d071      	beq.n	8001c52 <Cal_Real_cmd+0x532>
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b7a:	f7fe ffaf 	bl	8000adc <__aeabi_dcmplt>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d066      	beq.n	8001c52 <Cal_Real_cmd+0x532>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b90:	f7fe ffa4 	bl	8000adc <__aeabi_dcmplt>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d05b      	beq.n	8001c52 <Cal_Real_cmd+0x532>
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempL)
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <Cal_Real_cmd+0x648>)
 8001b9c:	ed93 7b00 	vldr	d7, [r3]
 8001ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba4:	eef0 0a67 	vmov.f32	s1, s15
 8001ba8:	f00f fdae 	bl	8011708 <sin>
 8001bac:	ec55 4b10 	vmov	r4, r5, d0
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <Cal_Real_cmd+0x64c>)
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bba:	eef0 0a67 	vmov.f32	s1, s15
 8001bbe:	f00f fda3 	bl	8011708 <sin>
 8001bc2:	ec53 2b10 	vmov	r2, r3, d0
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fe3f 	bl	800084c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	f7fe fd0d 	bl	80005f8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4614      	mov	r4, r2
 8001be4:	461d      	mov	r5, r3
				+((sin(angle_rad_o)/sin(angle_rad_c))*tempR));
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <Cal_Real_cmd+0x650>)
 8001be8:	ed93 7b00 	vldr	d7, [r3]
 8001bec:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf0:	eef0 0a67 	vmov.f32	s1, s15
 8001bf4:	f00f fd88 	bl	8011708 <sin>
 8001bf8:	ec59 8b10 	vmov	r8, r9, d0
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <Cal_Real_cmd+0x64c>)
 8001bfe:	ed93 7b00 	vldr	d7, [r3]
 8001c02:	eeb0 0a47 	vmov.f32	s0, s14
 8001c06:	eef0 0a67 	vmov.f32	s1, s15
 8001c0a:	f00f fd7d 	bl	8011708 <sin>
 8001c0e:	ec53 2b10 	vmov	r2, r3, d0
 8001c12:	4640      	mov	r0, r8
 8001c14:	4649      	mov	r1, r9
 8001c16:	f7fe fe19 	bl	800084c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c26:	f7fe fce7 	bl	80005f8 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fb2b 	bl	800028c <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(angle_rad_i)/sin(angle_rad_c))*tempL)
 8001c3e:	a344      	add	r3, pc, #272	; (adr r3, 8001d50 <Cal_Real_cmd+0x630>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4949      	ldr	r1, [pc, #292]	; (8001d74 <Cal_Real_cmd+0x654>)
 8001c4e:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}

	if((Tmp_cmd_FL>=0) && (Tmp_cmd_FR>=0)  ||  (Tmp_cmd_FL<=0) && (Tmp_cmd_FR<=0))//mode C
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <Cal_Real_cmd+0x658>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db04      	blt.n	8001c66 <Cal_Real_cmd+0x546>
 8001c5c:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <Cal_Real_cmd+0x65c>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da09      	bge.n	8001c7a <Cal_Real_cmd+0x55a>
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <Cal_Real_cmd+0x658>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dc26      	bgt.n	8001cbe <Cal_Real_cmd+0x59e>
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <Cal_Real_cmd+0x65c>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dc21      	bgt.n	8001cbe <Cal_Real_cmd+0x59e>
	{
		Real_cmd_w = -(CONSTANT_C_AxC_V*((tempL-tempR)/2));
 8001c7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c82:	f7fe fb01 	bl	8000288 <__aeabi_dsub>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c96:	f7fe fdd9 	bl	800084c <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	a32d      	add	r3, pc, #180	; (adr r3, 8001d58 <Cal_Real_cmd+0x638>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fca6 	bl	80005f8 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4692      	mov	sl, r2
 8001cb2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <Cal_Real_cmd+0x660>)
 8001cb8:	e9c3 ab00 	strd	sl, fp, [r3]
 8001cbc:	e140      	b.n	8001f40 <Cal_Real_cmd+0x820>
	}
	else//mode B
	{
//		Real_cmd_w = (C_4PIRxINv60WB*((tempL+tempR)/2)*fabs(sin(angle_rad_c)))*1000;
		if		((tempL<tempR)  &&  ((tempL>0) && (tempR>0))){Real_cmd_w = ((Real_cmd_v_x*sin(angle_rad_c))/230)*1000;}
 8001cbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cc6:	f7fe ff09 	bl	8000adc <__aeabi_dcmplt>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d05b      	beq.n	8001d88 <Cal_Real_cmd+0x668>
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cdc:	f7fe ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d050      	beq.n	8001d88 <Cal_Real_cmd+0x668>
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cf2:	f7fe ff11 	bl	8000b18 <__aeabi_dcmpgt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d045      	beq.n	8001d88 <Cal_Real_cmd+0x668>
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <Cal_Real_cmd+0x64c>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	eeb0 0a47 	vmov.f32	s0, s14
 8001d06:	eef0 0a67 	vmov.f32	s1, s15
 8001d0a:	f00f fcfd 	bl	8011708 <sin>
 8001d0e:	ec51 0b10 	vmov	r0, r1, d0
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <Cal_Real_cmd+0x654>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc6e 	bl	80005f8 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	a30e      	add	r3, pc, #56	; (adr r3, 8001d60 <Cal_Real_cmd+0x640>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fd8f 	bl	800084c <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <Cal_Real_cmd+0x664>)
 8001d3c:	f7fe fc5c 	bl	80005f8 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	490e      	ldr	r1, [pc, #56]	; (8001d80 <Cal_Real_cmd+0x660>)
 8001d46:	e9c1 2300 	strd	r2, r3, [r1]
 8001d4a:	e0f9      	b.n	8001f40 <Cal_Real_cmd+0x820>
 8001d4c:	f3af 8000 	nop.w
 8001d50:	198abd1e 	.word	0x198abd1e
 8001d54:	40121dd4 	.word	0x40121dd4
 8001d58:	8ccd1fe0 	.word	0x8ccd1fe0
 8001d5c:	40412c3c 	.word	0x40412c3c
 8001d60:	00000000 	.word	0x00000000
 8001d64:	406cc000 	.word	0x406cc000
 8001d68:	20000be8 	.word	0x20000be8
 8001d6c:	20000be0 	.word	0x20000be0
 8001d70:	20000bf0 	.word	0x20000bf0
 8001d74:	20000c28 	.word	0x20000c28
 8001d78:	20000c40 	.word	0x20000c40
 8001d7c:	20000c42 	.word	0x20000c42
 8001d80:	20000c38 	.word	0x20000c38
 8001d84:	408f4000 	.word	0x408f4000
		else if	((tempL>tempR)  &&  ((tempL>0) && (tempR>0))){Real_cmd_w = -((Real_cmd_v_x*sin(angle_rad_c))/230)*1000;}
 8001d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d90:	f7fe fec2 	bl	8000b18 <__aeabi_dcmpgt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d041      	beq.n	8001e1e <Cal_Real_cmd+0x6fe>
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001da6:	f7fe feb7 	bl	8000b18 <__aeabi_dcmpgt>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d036      	beq.n	8001e1e <Cal_Real_cmd+0x6fe>
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dbc:	f7fe feac 	bl	8000b18 <__aeabi_dcmpgt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02b      	beq.n	8001e1e <Cal_Real_cmd+0x6fe>
 8001dc6:	4b8a      	ldr	r3, [pc, #552]	; (8001ff0 <Cal_Real_cmd+0x8d0>)
 8001dc8:	ed93 7b00 	vldr	d7, [r3]
 8001dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd0:	eef0 0a67 	vmov.f32	s1, s15
 8001dd4:	f00f fc98 	bl	8011708 <sin>
 8001dd8:	ec51 0b10 	vmov	r0, r1, d0
 8001ddc:	4b85      	ldr	r3, [pc, #532]	; (8001ff4 <Cal_Real_cmd+0x8d4>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fc09 	bl	80005f8 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	a37e      	add	r3, pc, #504	; (adr r3, 8001fe8 <Cal_Real_cmd+0x8c8>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fd2a 	bl	800084c <__aeabi_ddiv>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <Cal_Real_cmd+0x8d8>)
 8001e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e0e:	f7fe fbf3 	bl	80005f8 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4979      	ldr	r1, [pc, #484]	; (8001ffc <Cal_Real_cmd+0x8dc>)
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
 8001e1c:	e090      	b.n	8001f40 <Cal_Real_cmd+0x820>
		else if	((tempL<tempR)  &&  ((tempL<0) && (tempR<0))){Real_cmd_w = -((Real_cmd_v_x*sin(angle_rad_c))/230)*1000;}
 8001e1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e26:	f7fe fe59 	bl	8000adc <__aeabi_dcmplt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d041      	beq.n	8001eb4 <Cal_Real_cmd+0x794>
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e3c:	f7fe fe4e 	bl	8000adc <__aeabi_dcmplt>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d036      	beq.n	8001eb4 <Cal_Real_cmd+0x794>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e52:	f7fe fe43 	bl	8000adc <__aeabi_dcmplt>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02b      	beq.n	8001eb4 <Cal_Real_cmd+0x794>
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <Cal_Real_cmd+0x8d0>)
 8001e5e:	ed93 7b00 	vldr	d7, [r3]
 8001e62:	eeb0 0a47 	vmov.f32	s0, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	f00f fc4d 	bl	8011708 <sin>
 8001e6e:	ec51 0b10 	vmov	r0, r1, d0
 8001e72:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <Cal_Real_cmd+0x8d4>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	a358      	add	r3, pc, #352	; (adr r3, 8001fe8 <Cal_Real_cmd+0x8c8>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fcdf 	bl	800084c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	603a      	str	r2, [r7, #0]
 8001e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <Cal_Real_cmd+0x8d8>)
 8001ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ea4:	f7fe fba8 	bl	80005f8 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4953      	ldr	r1, [pc, #332]	; (8001ffc <Cal_Real_cmd+0x8dc>)
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
 8001eb2:	e045      	b.n	8001f40 <Cal_Real_cmd+0x820>
		else if	((tempL>tempR)  &&  ((tempL<0) && (tempR<0))){Real_cmd_w = ((Real_cmd_v_x*sin(angle_rad_c))/230)*1000;}
 8001eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ebc:	f7fe fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <Cal_Real_cmd+0x820>
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ed2:	f7fe fe03 	bl	8000adc <__aeabi_dcmplt>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d031      	beq.n	8001f40 <Cal_Real_cmd+0x820>
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee8:	f7fe fdf8 	bl	8000adc <__aeabi_dcmplt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d026      	beq.n	8001f40 <Cal_Real_cmd+0x820>
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <Cal_Real_cmd+0x8d0>)
 8001ef4:	ed93 7b00 	vldr	d7, [r3]
 8001ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8001efc:	eef0 0a67 	vmov.f32	s1, s15
 8001f00:	f00f fc02 	bl	8011708 <sin>
 8001f04:	ec51 0b10 	vmov	r0, r1, d0
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <Cal_Real_cmd+0x8d4>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb73 	bl	80005f8 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	a333      	add	r3, pc, #204	; (adr r3, 8001fe8 <Cal_Real_cmd+0x8c8>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fc94 	bl	800084c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <Cal_Real_cmd+0x8d8>)
 8001f32:	f7fe fb61 	bl	80005f8 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4930      	ldr	r1, [pc, #192]	; (8001ffc <Cal_Real_cmd+0x8dc>)
 8001f3c:	e9c1 2300 	strd	r2, r3, [r1]

	}

	sendcanbuf[5] = (((int16_t)(Real_cmd_w)))>>8 & 0xff;
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <Cal_Real_cmd+0x8dc>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe05 	bl	8000b58 <__aeabi_d2iz>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	121b      	asrs	r3, r3, #8
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	b25a      	sxtb	r2, r3
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <Cal_Real_cmd+0x8e0>)
 8001f5a:	715a      	strb	r2, [r3, #5]
	sendcanbuf[4] = (int16_t)(Real_cmd_w)&0xff;
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <Cal_Real_cmd+0x8dc>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fdf7 	bl	8000b58 <__aeabi_d2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	b25a      	sxtb	r2, r3
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <Cal_Real_cmd+0x8e0>)
 8001f72:	711a      	strb	r2, [r3, #4]
	sendcanbuf[3] = (((int16_t)(Real_cmd_v_y)))>>8 & 0xff;
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <Cal_Real_cmd+0x8e4>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fdeb 	bl	8000b58 <__aeabi_d2iz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	121b      	asrs	r3, r3, #8
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <Cal_Real_cmd+0x8e0>)
 8001f8e:	70da      	strb	r2, [r3, #3]
	sendcanbuf[2] = (int16_t)(Real_cmd_v_y)&0xff;
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <Cal_Real_cmd+0x8e4>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fddd 	bl	8000b58 <__aeabi_d2iz>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <Cal_Real_cmd+0x8e0>)
 8001fa6:	709a      	strb	r2, [r3, #2]
	sendcanbuf[1] = (((int16_t)(Real_cmd_v_x)))>>8 & 0xff;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <Cal_Real_cmd+0x8d4>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fdd1 	bl	8000b58 <__aeabi_d2iz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	121b      	asrs	r3, r3, #8
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	b25a      	sxtb	r2, r3
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <Cal_Real_cmd+0x8e0>)
 8001fc2:	705a      	strb	r2, [r3, #1]
	sendcanbuf[0] = (int16_t)(Real_cmd_v_x)&0xff;
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <Cal_Real_cmd+0x8d4>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fdc3 	bl	8000b58 <__aeabi_d2iz>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	b25a      	sxtb	r2, r3
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <Cal_Real_cmd+0x8e0>)
 8001fda:	701a      	strb	r2, [r3, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe6:	bf00      	nop
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	406cc000 	.word	0x406cc000
 8001ff0:	20000be0 	.word	0x20000be0
 8001ff4:	20000c28 	.word	0x20000c28
 8001ff8:	408f4000 	.word	0x408f4000
 8001ffc:	20000c38 	.word	0x20000c38
 8002000:	20000c58 	.word	0x20000c58
 8002004:	20000c30 	.word	0x20000c30

08002008 <Stopflagcheck>:


int32_t Stopflagcheck(uint8_t RW, uint8_t value)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	71bb      	strb	r3, [r7, #6]
	if(osMutexWait(Stop_flagHandle, osWaitForever)==osOK)
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <Stopflagcheck+0x78>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	4618      	mov	r0, r3
 8002022:	f009 f81f 	bl	800b064 <osMutexAcquire>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d124      	bne.n	8002076 <Stopflagcheck+0x6e>
	{
		if(RW){
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <Stopflagcheck+0x5e>
			if(value == 0){Stop_flag = 0;}
 8002032:	79bb      	ldrb	r3, [r7, #6]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d103      	bne.n	8002040 <Stopflagcheck+0x38>
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <Stopflagcheck+0x7c>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e004      	b.n	800204a <Stopflagcheck+0x42>
			else {Stop_flag++;}
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <Stopflagcheck+0x7c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <Stopflagcheck+0x7c>)
 8002048:	6013      	str	r3, [r2, #0]
			if(Stop_flag>0xfffffff0){Stop_flag = 1;}
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <Stopflagcheck+0x7c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f113 0f10 	cmn.w	r3, #16
 8002052:	d902      	bls.n	800205a <Stopflagcheck+0x52>
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <Stopflagcheck+0x7c>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
			osMutexRelease(Stop_flagHandle);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <Stopflagcheck+0x78>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f009 f84b 	bl	800b0fa <osMutexRelease>
 8002064:	e007      	b.n	8002076 <Stopflagcheck+0x6e>
		}
		else {
			osMutexRelease(Stop_flagHandle);
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <Stopflagcheck+0x78>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f009 f845 	bl	800b0fa <osMutexRelease>
			return Stop_flag;
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <Stopflagcheck+0x7c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	e7ff      	b.n	8002076 <Stopflagcheck+0x6e>
		}
	}
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000c94 	.word	0x20000c94
 8002084:	20000bd8 	.word	0x20000bd8

08002088 <Deg2Ste>:

int16_t Deg2Ste(uint8_t RW, int16_t deg, uint8_t num)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	460b      	mov	r3, r1
 8002094:	80bb      	strh	r3, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	71bb      	strb	r3, [r7, #6]
	if(num>4){
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d908      	bls.n	80020b2 <Deg2Ste+0x2a>
		printf("%d:osError\n", osKernelGetTickCount());
 80020a0:	f008 fcba 	bl	800aa18 <osKernelGetTickCount>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4619      	mov	r1, r3
 80020a8:	4819      	ldr	r0, [pc, #100]	; (8002110 <Deg2Ste+0x88>)
 80020aa:	f00d facf 	bl	800f64c <iprintf>
		return 0;}
 80020ae:	2300      	movs	r3, #0
 80020b0:	e02a      	b.n	8002108 <Deg2Ste+0x80>
	if(osMutexWait(DegmsgHandle, osWaitForever)==osOK)
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <Deg2Ste+0x8c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ba:	4618      	mov	r0, r3
 80020bc:	f008 ffd2 	bl	800b064 <osMutexAcquire>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <Deg2Ste+0x70>
	{
		if(RW){//write
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <Deg2Ste+0x5c>
			SteDeg[num] = deg; //printf("%d:deg in mut:%d \n", osKernelGetTickCount(), SteDeg);
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	4912      	ldr	r1, [pc, #72]	; (8002118 <Deg2Ste+0x90>)
 80020d0:	88ba      	ldrh	r2, [r7, #4]
 80020d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			osMutexRelease(DegmsgHandle);
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <Deg2Ste+0x8c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f009 f80d 	bl	800b0fa <osMutexRelease>
			return 1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e011      	b.n	8002108 <Deg2Ste+0x80>
		}
		else{//read
			osMutexRelease(DegmsgHandle);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <Deg2Ste+0x8c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 f806 	bl	800b0fa <osMutexRelease>
			return SteDeg[num];
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	4a09      	ldr	r2, [pc, #36]	; (8002118 <Deg2Ste+0x90>)
 80020f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80020f6:	e007      	b.n	8002108 <Deg2Ste+0x80>
		}
	}
	else{
		printf("%d:osError\n", osKernelGetTickCount());
 80020f8:	f008 fc8e 	bl	800aa18 <osKernelGetTickCount>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <Deg2Ste+0x88>)
 8002102:	f00d faa3 	bl	800f64c <iprintf>
		return 0;
 8002106:	2300      	movs	r3, #0
	}
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	080137ec 	.word	0x080137ec
 8002114:	20000c90 	.word	0x20000c90
 8002118:	20000bcc 	.word	0x20000bcc
 800211c:	00000000 	.word	0x00000000

08002120 <rad2deg>:

int16_t rad2deg(double radian)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)(radian*180/MATH_PI);
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <rad2deg+0x50>)
 8002130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002134:	f7fe fa60 	bl	80005f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	a309      	add	r3, pc, #36	; (adr r3, 8002168 <rad2deg+0x48>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe fb81 	bl	800084c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fd01 	bl	8000b58 <__aeabi_d2iz>
 8002156:	4603      	mov	r3, r0
 8002158:	b21b      	sxth	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
 8002168:	54442d18 	.word	0x54442d18
 800216c:	400921fb 	.word	0x400921fb
 8002170:	40668000 	.word	0x40668000

08002174 <HAL_GPIO_EXTI_Callback>:
	//ModeD//for stop
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]


    if(GPIO_Pin == PS_SIG1_Pin) {
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b10      	cmp	r3, #16
 8002182:	d109      	bne.n	8002198 <HAL_GPIO_EXTI_Callback+0x24>
    	PS_SIGx_Pin |= 0b00000001;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002190:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8002192:	4818      	ldr	r0, [pc, #96]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x80>)
 8002194:	f00d fae0 	bl	800f758 <puts>
	}

    if(GPIO_Pin == PS_SIG2_Pin) {
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	2b20      	cmp	r3, #32
 800219c:	d109      	bne.n	80021b2 <HAL_GPIO_EXTI_Callback+0x3e>
    	PS_SIGx_Pin |= 0b00000010;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80021aa:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG2_Pin.\n");
 80021ac:	4812      	ldr	r0, [pc, #72]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x84>)
 80021ae:	f00d fad3 	bl	800f758 <puts>
    }

    if(GPIO_Pin == PS_SIG3_Pin) {
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d109      	bne.n	80021cc <HAL_GPIO_EXTI_Callback+0x58>
    	PS_SIGx_Pin |= 0b00000100;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80021c4:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG3_Pin.\n");
 80021c6:	480d      	ldr	r0, [pc, #52]	; (80021fc <HAL_GPIO_EXTI_Callback+0x88>)
 80021c8:	f00d fac6 	bl	800f758 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d109      	bne.n	80021e6 <HAL_GPIO_EXTI_Callback+0x72>
    	PS_SIGx_Pin |= 0b00001000;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80021de:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
 80021e0:	4807      	ldr	r0, [pc, #28]	; (8002200 <HAL_GPIO_EXTI_Callback+0x8c>)
 80021e2:	f00d fab9 	bl	800f758 <puts>
    }
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000bc8 	.word	0x20000bc8
 80021f4:	080137f8 	.word	0x080137f8
 80021f8:	08013818 	.word	0x08013818
 80021fc:	08013838 	.word	0x08013838
 8002200:	08013858 	.word	0x08013858

08002204 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of canmsg */
  canmsgHandle = osMutexNew(&canmsg_attributes);
 8002208:	4839      	ldr	r0, [pc, #228]	; (80022f0 <MX_FREERTOS_Init+0xec>)
 800220a:	f008 fea5 	bl	800af58 <osMutexNew>
 800220e:	4603      	mov	r3, r0
 8002210:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <MX_FREERTOS_Init+0xf0>)
 8002212:	6013      	str	r3, [r2, #0]

  /* creation of Degmsg */
  DegmsgHandle = osMutexNew(&Degmsg_attributes);
 8002214:	4838      	ldr	r0, [pc, #224]	; (80022f8 <MX_FREERTOS_Init+0xf4>)
 8002216:	f008 fe9f 	bl	800af58 <osMutexNew>
 800221a:	4603      	mov	r3, r0
 800221c:	4a37      	ldr	r2, [pc, #220]	; (80022fc <MX_FREERTOS_Init+0xf8>)
 800221e:	6013      	str	r3, [r2, #0]

  /* creation of Stop_flag */
  Stop_flagHandle = osMutexNew(&Stop_flag_attributes);
 8002220:	4837      	ldr	r0, [pc, #220]	; (8002300 <MX_FREERTOS_Init+0xfc>)
 8002222:	f008 fe99 	bl	800af58 <osMutexNew>
 8002226:	4603      	mov	r3, r0
 8002228:	4a36      	ldr	r2, [pc, #216]	; (8002304 <MX_FREERTOS_Init+0x100>)
 800222a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 800222c:	4a36      	ldr	r2, [pc, #216]	; (8002308 <MX_FREERTOS_Init+0x104>)
 800222e:	2101      	movs	r1, #1
 8002230:	2001      	movs	r0, #1
 8002232:	f008 ff9f 	bl	800b174 <osSemaphoreNew>
 8002236:	4603      	mov	r3, r0
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <MX_FREERTOS_Init+0x108>)
 800223a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of VelStopTimer */
  VelStopTimerHandle = osTimerNew(VelStopTimerCallback, osTimerPeriodic, NULL, &VelStopTimer_attributes);
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <MX_FREERTOS_Init+0x10c>)
 800223e:	2200      	movs	r2, #0
 8002240:	2101      	movs	r1, #1
 8002242:	4834      	ldr	r0, [pc, #208]	; (8002314 <MX_FREERTOS_Init+0x110>)
 8002244:	f008 fdde 	bl	800ae04 <osTimerNew>
 8002248:	4603      	mov	r3, r0
 800224a:	4a33      	ldr	r2, [pc, #204]	; (8002318 <MX_FREERTOS_Init+0x114>)
 800224c:	6013      	str	r3, [r2, #0]

  /* creation of EndModeDTimer */
  EndModeDTimerHandle = osTimerNew(EndModeDTimerCallback, osTimerOnce, NULL, &EndModeDTimer_attributes);
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <MX_FREERTOS_Init+0x118>)
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	4832      	ldr	r0, [pc, #200]	; (8002320 <MX_FREERTOS_Init+0x11c>)
 8002256:	f008 fdd5 	bl	800ae04 <osTimerNew>
 800225a:	4603      	mov	r3, r0
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <MX_FREERTOS_Init+0x120>)
 800225e:	6013      	str	r3, [r2, #0]

  /* creation of SendCanTimer */
  SendCanTimerHandle = osTimerNew(SendCanTimerCallback, osTimerPeriodic, NULL, &SendCanTimer_attributes);
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <MX_FREERTOS_Init+0x124>)
 8002262:	2200      	movs	r2, #0
 8002264:	2101      	movs	r1, #1
 8002266:	4831      	ldr	r0, [pc, #196]	; (800232c <MX_FREERTOS_Init+0x128>)
 8002268:	f008 fdcc 	bl	800ae04 <osTimerNew>
 800226c:	4603      	mov	r3, r0
 800226e:	4a30      	ldr	r2, [pc, #192]	; (8002330 <MX_FREERTOS_Init+0x12c>)
 8002270:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(VelStopTimerHandle, 1000);
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <MX_FREERTOS_Init+0x114>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800227a:	4618      	mov	r0, r3
 800227c:	f008 fe3e 	bl	800aefc <osTimerStart>
  osTimerStart(SendCanTimerHandle, 100);
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <MX_FREERTOS_Init+0x12c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2164      	movs	r1, #100	; 0x64
 8002286:	4618      	mov	r0, r3
 8002288:	f008 fe38 	bl	800aefc <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <MX_FREERTOS_Init+0x130>)
 800228e:	2100      	movs	r1, #0
 8002290:	4829      	ldr	r0, [pc, #164]	; (8002338 <MX_FREERTOS_Init+0x134>)
 8002292:	f008 fbd6 	bl	800aa42 <osThreadNew>
 8002296:	4603      	mov	r3, r0
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <MX_FREERTOS_Init+0x138>)
 800229a:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <MX_FREERTOS_Init+0x13c>)
 800229e:	2100      	movs	r1, #0
 80022a0:	4828      	ldr	r0, [pc, #160]	; (8002344 <MX_FREERTOS_Init+0x140>)
 80022a2:	f008 fbce 	bl	800aa42 <osThreadNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <MX_FREERTOS_Init+0x144>)
 80022aa:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <MX_FREERTOS_Init+0x148>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	4827      	ldr	r0, [pc, #156]	; (8002350 <MX_FREERTOS_Init+0x14c>)
 80022b2:	f008 fbc6 	bl	800aa42 <osThreadNew>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <MX_FREERTOS_Init+0x150>)
 80022ba:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 80022bc:	4a26      	ldr	r2, [pc, #152]	; (8002358 <MX_FREERTOS_Init+0x154>)
 80022be:	2100      	movs	r1, #0
 80022c0:	4826      	ldr	r0, [pc, #152]	; (800235c <MX_FREERTOS_Init+0x158>)
 80022c2:	f008 fbbe 	bl	800aa42 <osThreadNew>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <MX_FREERTOS_Init+0x15c>)
 80022ca:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <MX_FREERTOS_Init+0x160>)
 80022ce:	2100      	movs	r1, #0
 80022d0:	4825      	ldr	r0, [pc, #148]	; (8002368 <MX_FREERTOS_Init+0x164>)
 80022d2:	f008 fbb6 	bl	800aa42 <osThreadNew>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a24      	ldr	r2, [pc, #144]	; (800236c <MX_FREERTOS_Init+0x168>)
 80022da:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <MX_FREERTOS_Init+0x16c>)
 80022de:	2100      	movs	r1, #0
 80022e0:	4824      	ldr	r0, [pc, #144]	; (8002374 <MX_FREERTOS_Init+0x170>)
 80022e2:	f008 fbae 	bl	800aa42 <osThreadNew>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <MX_FREERTOS_Init+0x174>)
 80022ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	08013c20 	.word	0x08013c20
 80022f4:	20000c8c 	.word	0x20000c8c
 80022f8:	08013c30 	.word	0x08013c30
 80022fc:	20000c90 	.word	0x20000c90
 8002300:	08013c40 	.word	0x08013c40
 8002304:	20000c94 	.word	0x20000c94
 8002308:	08013c50 	.word	0x08013c50
 800230c:	20000c98 	.word	0x20000c98
 8002310:	08013bf0 	.word	0x08013bf0
 8002314:	08003cd9 	.word	0x08003cd9
 8002318:	20000c80 	.word	0x20000c80
 800231c:	08013c00 	.word	0x08013c00
 8002320:	08003d41 	.word	0x08003d41
 8002324:	20000c84 	.word	0x20000c84
 8002328:	08013c10 	.word	0x08013c10
 800232c:	08003d69 	.word	0x08003d69
 8002330:	20000c88 	.word	0x20000c88
 8002334:	08013b18 	.word	0x08013b18
 8002338:	0800237d 	.word	0x0800237d
 800233c:	20000c68 	.word	0x20000c68
 8002340:	08013b3c 	.word	0x08013b3c
 8002344:	080023a9 	.word	0x080023a9
 8002348:	20000c6c 	.word	0x20000c6c
 800234c:	08013b60 	.word	0x08013b60
 8002350:	080032c1 	.word	0x080032c1
 8002354:	20000c70 	.word	0x20000c70
 8002358:	08013b84 	.word	0x08013b84
 800235c:	08003abd 	.word	0x08003abd
 8002360:	20000c74 	.word	0x20000c74
 8002364:	08013ba8 	.word	0x08013ba8
 8002368:	08003b15 	.word	0x08003b15
 800236c:	20000c78 	.word	0x20000c78
 8002370:	08013bcc 	.word	0x08013bcc
 8002374:	08003b3d 	.word	0x08003b3d
 8002378:	20000c7c 	.word	0x20000c7c

0800237c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8002384:	f008 fb48 	bl	800aa18 <osKernelGetTickCount>
 8002388:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002390:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f008 fcf3 	bl	800ad7e <osDelayUntil>


	//printf("uxHighWaterMark: %d\n", uxTaskGetStackHighWaterMark( NULL ));

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8002398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800239c:	4801      	ldr	r0, [pc, #4]	; (80023a4 <StartDefaultTask+0x28>)
 800239e:	f004 fdfc 	bl	8006f9a <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 80023a2:	e7f2      	b.n	800238a <StartDefaultTask+0xe>
 80023a4:	40020800 	.word	0x40020800

080023a8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b090      	sub	sp, #64	; 0x40
 80023ae:	af04      	add	r7, sp, #16
 80023b0:	6178      	str	r0, [r7, #20]
//	int16_t Tar_cmd_v_y = 0;
//	int16_t Tar_cmd_w = 0;



	uint8_t torqueSW = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	77fb      	strb	r3, [r7, #31]
	uint8_t Oncetimer = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	77bb      	strb	r3, [r7, #30]
	uint8_t tempflag = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	777b      	strb	r3, [r7, #29]
	//////////////////////////////
	uint32_t lastTime;



	osDelay(3000);//must delay for nmt from motor driver
 80023be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023c2:	f008 fcc1 	bl	800ad48 <osDelay>
	while(!(STinitdone)){osDelay(100);;}
 80023c6:	e002      	b.n	80023ce <StartTask02+0x26>
 80023c8:	2064      	movs	r0, #100	; 0x64
 80023ca:	f008 fcbd 	bl	800ad48 <osDelay>
 80023ce:	4bb1      	ldr	r3, [pc, #708]	; (8002694 <StartTask02+0x2ec>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f8      	beq.n	80023c8 <StartTask02+0x20>

	CanInit(FILTERID,MASKID,STDID);//must be to use it
 80023d6:	2200      	movs	r2, #0
 80023d8:	f640 4194 	movw	r1, #3220	; 0xc94
 80023dc:	2080      	movs	r0, #128	; 0x80
 80023de:	f7fe fe6f 	bl	80010c0 <CanInit>
	CAN_enableirq();
 80023e2:	f7fe fe65 	bl	80010b0 <CAN_enableirq>


	PDOMapping(1, RxPDO0, vel_RxPDO0, 1);
 80023e6:	4bac      	ldr	r3, [pc, #688]	; (8002698 <StartTask02+0x2f0>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	9203      	str	r2, [sp, #12]
 80023ec:	466c      	mov	r4, sp
 80023ee:	f103 0208 	add.w	r2, r3, #8
 80023f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80023f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023f8:	cb0c      	ldmia	r3, {r2, r3}
 80023fa:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80023fe:	2001      	movs	r0, #1
 8002400:	f7fe ff4c 	bl	800129c <PDOMapping>
	PDOMapping(2, RxPDO0, vel_RxPDO0, 1);
 8002404:	4ba4      	ldr	r3, [pc, #656]	; (8002698 <StartTask02+0x2f0>)
 8002406:	2201      	movs	r2, #1
 8002408:	9203      	str	r2, [sp, #12]
 800240a:	466c      	mov	r4, sp
 800240c:	f103 0208 	add.w	r2, r3, #8
 8002410:	ca07      	ldmia	r2, {r0, r1, r2}
 8002412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002416:	cb0c      	ldmia	r3, {r2, r3}
 8002418:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800241c:	2002      	movs	r0, #2
 800241e:	f7fe ff3d 	bl	800129c <PDOMapping>

	PDOMapping(1, TxPDO0, vel_TxPDO0, 1);//event time mode 100ms
 8002422:	4b9e      	ldr	r3, [pc, #632]	; (800269c <StartTask02+0x2f4>)
 8002424:	2201      	movs	r2, #1
 8002426:	9203      	str	r2, [sp, #12]
 8002428:	466c      	mov	r4, sp
 800242a:	f103 0208 	add.w	r2, r3, #8
 800242e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002434:	cb0c      	ldmia	r3, {r2, r3}
 8002436:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800243a:	2001      	movs	r0, #1
 800243c:	f7fe ff2e 	bl	800129c <PDOMapping>
	PDOMapping(2, TxPDO0, vel_TxPDO0, 1);//event time mode
 8002440:	4b96      	ldr	r3, [pc, #600]	; (800269c <StartTask02+0x2f4>)
 8002442:	2201      	movs	r2, #1
 8002444:	9203      	str	r2, [sp, #12]
 8002446:	466c      	mov	r4, sp
 8002448:	f103 0208 	add.w	r2, r3, #8
 800244c:	ca07      	ldmia	r2, {r0, r1, r2}
 800244e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002452:	cb0c      	ldmia	r3, {r2, r3}
 8002454:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8002458:	2002      	movs	r0, #2
 800245a:	f7fe ff1f 	bl	800129c <PDOMapping>
	PDOMapping(1, TxPDO1, vel_TxPDO1, 1);//inhibit mode 100ms
 800245e:	4b90      	ldr	r3, [pc, #576]	; (80026a0 <StartTask02+0x2f8>)
 8002460:	2201      	movs	r2, #1
 8002462:	9203      	str	r2, [sp, #12]
 8002464:	466c      	mov	r4, sp
 8002466:	f103 0208 	add.w	r2, r3, #8
 800246a:	ca07      	ldmia	r2, {r0, r1, r2}
 800246c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002470:	cb0c      	ldmia	r3, {r2, r3}
 8002472:	f641 2101 	movw	r1, #6657	; 0x1a01
 8002476:	2001      	movs	r0, #1
 8002478:	f7fe ff10 	bl	800129c <PDOMapping>
	PDOMapping(2, TxPDO1, vel_TxPDO1, 1);//inhibit mode
 800247c:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <StartTask02+0x2f8>)
 800247e:	2201      	movs	r2, #1
 8002480:	9203      	str	r2, [sp, #12]
 8002482:	466c      	mov	r4, sp
 8002484:	f103 0208 	add.w	r2, r3, #8
 8002488:	ca07      	ldmia	r2, {r0, r1, r2}
 800248a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800248e:	cb0c      	ldmia	r3, {r2, r3}
 8002490:	f641 2101 	movw	r1, #6657	; 0x1a01
 8002494:	2002      	movs	r0, #2
 8002496:	f7fe ff01 	bl	800129c <PDOMapping>

	for(int i=0;i<2;i++){
 800249a:	2300      	movs	r3, #0
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
 800249e:	e029      	b.n	80024f4 <StartTask02+0x14c>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	2301      	movs	r3, #1
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2301      	movs	r3, #1
 80024ae:	2200      	movs	r2, #0
 80024b0:	f242 0110 	movw	r1, #8208	; 0x2010
 80024b4:	f7fe fe88 	bl	80011c8 <SDOMsg>
		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len//3: Profile velocity mode;
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	b2d8      	uxtb	r0, r3
 80024c0:	2301      	movs	r3, #1
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2303      	movs	r3, #3
 80024c6:	2200      	movs	r2, #0
 80024c8:	f246 0160 	movw	r1, #24672	; 0x6060
 80024cc:	f7fe fe7c 	bl	80011c8 <SDOMsg>
		Tor_OnOff(TORQUEON);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7fe fff5 	bl	80014c0 <Tor_OnOff>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len//1e: Synchronization control
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	b2d8      	uxtb	r0, r3
 80024de:	2302      	movs	r3, #2
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2301      	movs	r3, #1
 80024e4:	2200      	movs	r2, #0
 80024e6:	f242 010f 	movw	r1, #8207	; 0x200f
 80024ea:	f7fe fe6d 	bl	80011c8 <SDOMsg>
	for(int i=0;i<2;i++){
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	3301      	adds	r3, #1
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	ddd2      	ble.n	80024a0 <StartTask02+0xf8>
	}

  /* Infinite loop */
	//printf("%d: format\n", osKernelGetTickCount());
	lastTime = osKernelGetTickCount ();
 80024fa:	f008 fa8d 	bl	800aa18 <osKernelGetTickCount>
 80024fe:	62f8      	str	r0, [r7, #44]	; 0x2c
  for(;;)
  {

	lastTime += PERIOD_CANCOMM;;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	330a      	adds	r3, #10
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(lastTime);
 8002506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002508:	f008 fc39 	bl	800ad7e <osDelayUntil>
	//osDelay(10);
	//printf("%d: t02\n", osKernelGetTickCount());

	if(FLAG_RxCplt>0)	//real time, check stdid, extid
 800250c:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <StartTask02+0x2fc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8147 	beq.w	80027a4 <StartTask02+0x3fc>
	{
		while(FLAG_RxCplt>0){
 8002516:	e140      	b.n	800279a <StartTask02+0x3f2>
			FLAG_RxCplt--;
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <StartTask02+0x2fc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <StartTask02+0x2fc>)
 8002520:	6013      	str	r3, [r2, #0]
			for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[FLAG_RxCplt][i];}
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	e010      	b.n	800254a <StartTask02+0x1a2>
 8002528:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <StartTask02+0x2fc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <StartTask02+0x300>)
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	441a      	add	r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	4413      	add	r3, r2
 8002536:	f993 1000 	ldrsb.w	r1, [r3]
 800253a:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <StartTask02+0x304>)
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	4413      	add	r3, r2
 8002540:	460a      	mov	r2, r1
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3301      	adds	r3, #1
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	2b07      	cmp	r3, #7
 800254e:	ddeb      	ble.n	8002528 <StartTask02+0x180>
		//	printf("canbuf: %d %d %d %d %d %d %d %d\n", canbuf[0], canbuf[1], canbuf[2], canbuf[3], canbuf[4], canbuf[5], canbuf[6], canbuf[7]);
			//printf("%dcanid: %d %d %d\n", osKernelGetTickCount(), g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].Timestamp);
			if(g_tCan_Rx_Header[FLAG_RxCplt].StdId>g_tCan_Rx_Header[FLAG_RxCplt].ExtId){CanId = g_tCan_Rx_Header[FLAG_RxCplt].StdId;}//�?????????????체크
 8002550:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <StartTask02+0x2fc>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4956      	ldr	r1, [pc, #344]	; (80026b0 <StartTask02+0x308>)
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <StartTask02+0x2fc>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4852      	ldr	r0, [pc, #328]	; (80026b0 <StartTask02+0x308>)
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4403      	add	r3, r0
 8002572:	3304      	adds	r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4299      	cmp	r1, r3
 8002578:	d90b      	bls.n	8002592 <StartTask02+0x1ea>
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <StartTask02+0x2fc>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	494c      	ldr	r1, [pc, #304]	; (80026b0 <StartTask02+0x308>)
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <StartTask02+0x30c>)
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e00b      	b.n	80025aa <StartTask02+0x202>
			else {CanId = g_tCan_Rx_Header[FLAG_RxCplt].ExtId;}
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <StartTask02+0x2fc>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4946      	ldr	r1, [pc, #280]	; (80026b0 <StartTask02+0x308>)
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3304      	adds	r3, #4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <StartTask02+0x30c>)
 80025a8:	6013      	str	r3, [r2, #0]

			switch(CanId)//parse
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <StartTask02+0x30c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80025b2:	4293      	cmp	r3, r2
 80025b4:	f000 80ca 	beq.w	800274c <StartTask02+0x3a4>
 80025b8:	f240 72d2 	movw	r2, #2002	; 0x7d2
 80025bc:	4293      	cmp	r3, r2
 80025be:	f200 80c6 	bhi.w	800274e <StartTask02+0x3a6>
 80025c2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00d      	beq.n	80025e6 <StartTask02+0x23e>
 80025ca:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f200 80bd 	bhi.w	800274e <StartTask02+0x3a6>
 80025d4:	f240 1281 	movw	r2, #385	; 0x181
 80025d8:	4293      	cmp	r3, r2
 80025da:	d079      	beq.n	80026d0 <StartTask02+0x328>
 80025dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80025e0:	f000 8095 	beq.w	800270e <StartTask02+0x366>
 80025e4:	e0b3      	b.n	800274e <StartTask02+0x3a6>
			{
				case 0x3E9:
					temp_x = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <StartTask02+0x304>)
 80025e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <StartTask02+0x304>)
 80025f2:	f993 3000 	ldrsb.w	r3, [r3]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b21a      	sxth	r2, r3
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <StartTask02+0x310>)
 8002602:	801a      	strh	r2, [r3, #0]
					temp_y = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <StartTask02+0x304>)
 8002606:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <StartTask02+0x304>)
 8002610:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002614:	b21b      	sxth	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21a      	sxth	r2, r3
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <StartTask02+0x314>)
 8002620:	801a      	strh	r2, [r3, #0]
					temp_w = (((int16_t)canbuf[5])<<8) | ((int16_t)canbuf[4])&0xff;
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <StartTask02+0x304>)
 8002624:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	b21a      	sxth	r2, r3
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <StartTask02+0x304>)
 800262e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002632:	b21b      	sxth	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	b21b      	sxth	r3, r3
 8002638:	4313      	orrs	r3, r2
 800263a:	b21a      	sxth	r2, r3
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <StartTask02+0x318>)
 800263e:	801a      	strh	r2, [r3, #0]
					Tar_cmd_v_x = (double)temp_x;
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <StartTask02+0x310>)
 8002642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff6c 	bl	8000524 <__aeabi_i2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	491c      	ldr	r1, [pc, #112]	; (80026c4 <StartTask02+0x31c>)
 8002652:	e9c1 2300 	strd	r2, r3, [r1]
					Tar_cmd_v_y = (double)temp_y;
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <StartTask02+0x314>)
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff61 	bl	8000524 <__aeabi_i2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4918      	ldr	r1, [pc, #96]	; (80026c8 <StartTask02+0x320>)
 8002668:	e9c1 2300 	strd	r2, r3, [r1]
					Tar_cmd_w = (double)temp_w;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <StartTask02+0x318>)
 800266e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff56 	bl	8000524 <__aeabi_i2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4913      	ldr	r1, [pc, #76]	; (80026cc <StartTask02+0x324>)
 800267e:	e9c1 2300 	strd	r2, r3, [r1]
					torqueSW = canbuf[6];
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <StartTask02+0x304>)
 8002684:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002688:	77fb      	strb	r3, [r7, #31]
					//if(Stop_flag++>255){Stop_flag = 1;}
					Stopflagcheck(Xbot_W, 1);
 800268a:	2101      	movs	r1, #1
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff fcbb 	bl	8002008 <Stopflagcheck>
					//printf("%d: 0x3E9:%d %d\n", osKernelGetTickCount(),Stop_flag,Pre_Stop_flag);
					//printf("%d: Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
					break;
 8002692:	e05c      	b.n	800274e <StartTask02+0x3a6>
 8002694:	20000bd5 	.word	0x20000bd5
 8002698:	20000000 	.word	0x20000000
 800269c:	20000014 	.word	0x20000014
 80026a0:	20000028 	.word	0x20000028
 80026a4:	20000a94 	.word	0x20000a94
 80026a8:	20000a98 	.word	0x20000a98
 80026ac:	20000c50 	.word	0x20000c50
 80026b0:	20000ac8 	.word	0x20000ac8
 80026b4:	20000c60 	.word	0x20000c60
 80026b8:	20000c20 	.word	0x20000c20
 80026bc:	20000c22 	.word	0x20000c22
 80026c0:	20000c24 	.word	0x20000c24
 80026c4:	20000bf8 	.word	0x20000bf8
 80026c8:	20000c10 	.word	0x20000c10
 80026cc:	20000c18 	.word	0x20000c18

				case 0x181:
					Tmp_cmd_FL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 80026d0:	4b9f      	ldr	r3, [pc, #636]	; (8002950 <StartTask02+0x5a8>)
 80026d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21a      	sxth	r2, r3
 80026da:	4b9d      	ldr	r3, [pc, #628]	; (8002950 <StartTask02+0x5a8>)
 80026dc:	f993 3000 	ldrsb.w	r3, [r3]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b9a      	ldr	r3, [pc, #616]	; (8002954 <StartTask02+0x5ac>)
 80026ec:	801a      	strh	r2, [r3, #0]
					Tmp_cmd_FR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 80026ee:	4b98      	ldr	r3, [pc, #608]	; (8002950 <StartTask02+0x5a8>)
 80026f0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	4b95      	ldr	r3, [pc, #596]	; (8002950 <StartTask02+0x5a8>)
 80026fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	b21b      	sxth	r3, r3
 8002704:	4313      	orrs	r3, r2
 8002706:	b21a      	sxth	r2, r3
 8002708:	4b93      	ldr	r3, [pc, #588]	; (8002958 <StartTask02+0x5b0>)
 800270a:	801a      	strh	r2, [r3, #0]
					//printf("0x181 %d\n", Tmp_cmd_FL);
					break;
 800270c:	e01f      	b.n	800274e <StartTask02+0x3a6>

				case 0x182:
					Tmp_cmd_RL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 800270e:	4b90      	ldr	r3, [pc, #576]	; (8002950 <StartTask02+0x5a8>)
 8002710:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	4b8d      	ldr	r3, [pc, #564]	; (8002950 <StartTask02+0x5a8>)
 800271a:	f993 3000 	ldrsb.w	r3, [r3]
 800271e:	b21b      	sxth	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	b21b      	sxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b21a      	sxth	r2, r3
 8002728:	4b8c      	ldr	r3, [pc, #560]	; (800295c <StartTask02+0x5b4>)
 800272a:	801a      	strh	r2, [r3, #0]
					Tmp_cmd_RR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <StartTask02+0x5a8>)
 800272e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b21a      	sxth	r2, r3
 8002736:	4b86      	ldr	r3, [pc, #536]	; (8002950 <StartTask02+0x5a8>)
 8002738:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800273c:	b21b      	sxth	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b86      	ldr	r3, [pc, #536]	; (8002960 <StartTask02+0x5b8>)
 8002748:	801a      	strh	r2, [r3, #0]
					break;
 800274a:	e000      	b.n	800274e <StartTask02+0x3a6>

				case 2002:

					break;
 800274c:	bf00      	nop
			}

			g_tCan_Rx_Header[FLAG_RxCplt].StdId=0;
 800274e:	4b85      	ldr	r3, [pc, #532]	; (8002964 <StartTask02+0x5bc>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4985      	ldr	r1, [pc, #532]	; (8002968 <StartTask02+0x5c0>)
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header[FLAG_RxCplt].ExtId=0;
 8002762:	4b80      	ldr	r3, [pc, #512]	; (8002964 <StartTask02+0x5bc>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4980      	ldr	r1, [pc, #512]	; (8002968 <StartTask02+0x5c0>)
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
			CanId = 0;
 8002778:	4b7c      	ldr	r3, [pc, #496]	; (800296c <StartTask02+0x5c4>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

			for(int i=0;i<8;i++){canbuf[i]=0;}
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	e007      	b.n	8002794 <StartTask02+0x3ec>
 8002784:	4a72      	ldr	r2, [pc, #456]	; (8002950 <StartTask02+0x5a8>)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	4413      	add	r3, r2
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	3301      	adds	r3, #1
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2b07      	cmp	r3, #7
 8002798:	ddf4      	ble.n	8002784 <StartTask02+0x3dc>
		while(FLAG_RxCplt>0){
 800279a:	4b72      	ldr	r3, [pc, #456]	; (8002964 <StartTask02+0x5bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f47f aeba 	bne.w	8002518 <StartTask02+0x170>
		}

	}

	if(temp_w && (temp_x==0) && (temp_y==0)){
 80027a4:	4b72      	ldr	r3, [pc, #456]	; (8002970 <StartTask02+0x5c8>)
 80027a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8095 	beq.w	80028da <StartTask02+0x532>
 80027b0:	4b70      	ldr	r3, [pc, #448]	; (8002974 <StartTask02+0x5cc>)
 80027b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 808f 	bne.w	80028da <StartTask02+0x532>
 80027bc:	4b6e      	ldr	r3, [pc, #440]	; (8002978 <StartTask02+0x5d0>)
 80027be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 8089 	bne.w	80028da <StartTask02+0x532>
	//if(Tar_cmd_w){


		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 80027c8:	4b6c      	ldr	r3, [pc, #432]	; (800297c <StartTask02+0x5d4>)
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <StartTask02+0x5d8>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d103      	bne.n	80027dc <StartTask02+0x434>
 80027d4:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <StartTask02+0x5dc>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d127      	bne.n	800282c <StartTask02+0x484>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <StartTask02+0x5d8>)
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	4b66      	ldr	r3, [pc, #408]	; (800297c <StartTask02+0x5d4>)
 80027e2:	701a      	strb	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <StartTask02+0x5e0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <StartTask02+0x5e0>)
 80027ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027f0:	4b66      	ldr	r3, [pc, #408]	; (800298c <StartTask02+0x5e4>)
 80027f2:	801a      	strh	r2, [r3, #0]
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <StartTask02+0x5e4>)
 80027f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <StartTask02+0x5e8>)
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	4b64      	ldr	r3, [pc, #400]	; (8002990 <StartTask02+0x5e8>)
 8002800:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <StartTask02+0x5ec>)
 8002806:	801a      	strh	r2, [r3, #0]
			if(timerflag){
 8002808:	4b63      	ldr	r3, [pc, #396]	; (8002998 <StartTask02+0x5f0>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d062      	beq.n	80028d6 <StartTask02+0x52e>
				//printf("timerflag: %d\n", timerflag);
				osTimerStart(EndModeDTimerHandle, ENDMODETIME);
 8002810:	4b62      	ldr	r3, [pc, #392]	; (800299c <StartTask02+0x5f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002818:	4618      	mov	r0, r3
 800281a:	f008 fb6f 	bl	800aefc <osTimerStart>
				timerflag = 0;
 800281e:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <StartTask02+0x5f0>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
				EndMode = 0;
 8002824:	4b57      	ldr	r3, [pc, #348]	; (8002984 <StartTask02+0x5dc>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 800282a:	e054      	b.n	80028d6 <StartTask02+0x52e>
			}
		}
		else {
			ModeABCD = 3;
 800282c:	4b54      	ldr	r3, [pc, #336]	; (8002980 <StartTask02+0x5d8>)
 800282e:	2203      	movs	r2, #3
 8002830:	701a      	strb	r2, [r3, #0]
			Tar_cmd_v_x=0;
 8002832:	495b      	ldr	r1, [pc, #364]	; (80029a0 <StartTask02+0x5f8>)
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
			Tar_cmd_v_y=0;
 8002840:	4958      	ldr	r1, [pc, #352]	; (80029a4 <StartTask02+0x5fc>)
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9c1 2300 	strd	r2, r3, [r1]

			Tar_cmd_FL = -1*((Tar_cmd_w*CONSTANT_C_AxC_V)/SIGNIFICANT_FIGURES);
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <StartTask02+0x600>)
 8002850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002854:	a33c      	add	r3, pc, #240	; (adr r3, 8002948 <StartTask02+0x5a0>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fecd 	bl	80005f8 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b50      	ldr	r3, [pc, #320]	; (80029ac <StartTask02+0x604>)
 800286c:	f7fd ffee 	bl	800084c <__aeabi_ddiv>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	60ba      	str	r2, [r7, #8]
 8002876:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002880:	f7fe f96a 	bl	8000b58 <__aeabi_d2iz>
 8002884:	4603      	mov	r3, r0
 8002886:	b21a      	sxth	r2, r3
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <StartTask02+0x5e0>)
 800288a:	801a      	strh	r2, [r3, #0]

			if(Tar_cmd_FL>LIMIT_W){Tar_cmd_FL=LIMIT_W;}
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <StartTask02+0x5e0>)
 800288e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002892:	2b46      	cmp	r3, #70	; 0x46
 8002894:	dd02      	ble.n	800289c <StartTask02+0x4f4>
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <StartTask02+0x5e0>)
 8002898:	2246      	movs	r2, #70	; 0x46
 800289a:	801a      	strh	r2, [r3, #0]
			if(Tar_cmd_FL<-LIMIT_W){Tar_cmd_FL=-LIMIT_W;}
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <StartTask02+0x5e0>)
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80028a6:	da03      	bge.n	80028b0 <StartTask02+0x508>
 80028a8:	4b37      	ldr	r3, [pc, #220]	; (8002988 <StartTask02+0x5e0>)
 80028aa:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80028ae:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL;
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <StartTask02+0x5e0>)
 80028b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028b6:	4b35      	ldr	r3, [pc, #212]	; (800298c <StartTask02+0x5e4>)
 80028b8:	801a      	strh	r2, [r3, #0]
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <StartTask02+0x5e4>)
 80028bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <StartTask02+0x5e8>)
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <StartTask02+0x5e8>)
 80028c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <StartTask02+0x5ec>)
 80028cc:	801a      	strh	r2, [r3, #0]

			Cal_Real_cmd();
 80028ce:	f7fe ff27 	bl	8001720 <Cal_Real_cmd>
		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 80028d2:	f000 bca3 	b.w	800321c <StartTask02+0xe74>
 80028d6:	f000 bca1 	b.w	800321c <StartTask02+0xe74>


	//else if(Tar_cmd_v_x && (Tar_cmd_w!=0)){
		else {

		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <StartTask02+0x5d4>)
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b28      	ldr	r3, [pc, #160]	; (8002980 <StartTask02+0x5d8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d103      	bne.n	80028ee <StartTask02+0x546>
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <StartTask02+0x5dc>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d160      	bne.n	80029b0 <StartTask02+0x608>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <StartTask02+0x5d8>)
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <StartTask02+0x5d4>)
 80028f4:	701a      	strb	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <StartTask02+0x5e0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <StartTask02+0x5e0>)
 80028fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <StartTask02+0x5e4>)
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <StartTask02+0x5e4>)
 8002908:	f9b3 2000 	ldrsh.w	r2, [r3]
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <StartTask02+0x5e8>)
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <StartTask02+0x5e8>)
 8002912:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <StartTask02+0x5ec>)
 8002918:	801a      	strh	r2, [r3, #0]
			if(timerflag){
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <StartTask02+0x5f0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 847a 	beq.w	8003218 <StartTask02+0xe70>
				//printf("timerflag: %d\n", timerflag);
				osTimerStart(EndModeDTimerHandle, ENDMODETIME);
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <StartTask02+0x5f4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800292c:	4618      	mov	r0, r3
 800292e:	f008 fae5 	bl	800aefc <osTimerStart>
				timerflag = 0;
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <StartTask02+0x5f0>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
				EndMode = 0;
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <StartTask02+0x5dc>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 800293e:	f000 bc6b 	b.w	8003218 <StartTask02+0xe70>
 8002942:	bf00      	nop
 8002944:	f3af 8000 	nop.w
 8002948:	8ccd1fe0 	.word	0x8ccd1fe0
 800294c:	40412c3c 	.word	0x40412c3c
 8002950:	20000c50 	.word	0x20000c50
 8002954:	20000c40 	.word	0x20000c40
 8002958:	20000c42 	.word	0x20000c42
 800295c:	20000c44 	.word	0x20000c44
 8002960:	20000c46 	.word	0x20000c46
 8002964:	20000a94 	.word	0x20000a94
 8002968:	20000ac8 	.word	0x20000ac8
 800296c:	20000c60 	.word	0x20000c60
 8002970:	20000c24 	.word	0x20000c24
 8002974:	20000c20 	.word	0x20000c20
 8002978:	20000c22 	.word	0x20000c22
 800297c:	20000bd4 	.word	0x20000bd4
 8002980:	2000005c 	.word	0x2000005c
 8002984:	2000005e 	.word	0x2000005e
 8002988:	20000c48 	.word	0x20000c48
 800298c:	20000c4a 	.word	0x20000c4a
 8002990:	20000c4c 	.word	0x20000c4c
 8002994:	20000c4e 	.word	0x20000c4e
 8002998:	2000005d 	.word	0x2000005d
 800299c:	20000c84 	.word	0x20000c84
 80029a0:	20000bf8 	.word	0x20000bf8
 80029a4:	20000c10 	.word	0x20000c10
 80029a8:	20000c18 	.word	0x20000c18
 80029ac:	408f4000 	.word	0x408f4000
			}
		}
		else{
			//Tar_cmd_FL = CONSTANT_VEL  *  (Tar_cmd_v_x*cos(ANGLE_RAD_B) + Tar_cmd_v_y*sin(ANGLE_RAD_B));

			if(Tar_cmd_v_x>LIMIT_V){Tar_cmd_v_x=LIMIT_V;}
 80029b0:	4bc1      	ldr	r3, [pc, #772]	; (8002cb8 <StartTask02+0x910>)
 80029b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	4bc0      	ldr	r3, [pc, #768]	; (8002cbc <StartTask02+0x914>)
 80029bc:	f7fe f8ac 	bl	8000b18 <__aeabi_dcmpgt>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <StartTask02+0x62a>
 80029c6:	49bc      	ldr	r1, [pc, #752]	; (8002cb8 <StartTask02+0x910>)
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	4bbb      	ldr	r3, [pc, #748]	; (8002cbc <StartTask02+0x914>)
 80029ce:	e9c1 2300 	strd	r2, r3, [r1]
			if(Tar_cmd_v_x<-LIMIT_V){Tar_cmd_v_x=-LIMIT_V;}
 80029d2:	4bb9      	ldr	r3, [pc, #740]	; (8002cb8 <StartTask02+0x910>)
 80029d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029d8:	a3af      	add	r3, pc, #700	; (adr r3, 8002c98 <StartTask02+0x8f0>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fe f87d 	bl	8000adc <__aeabi_dcmplt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <StartTask02+0x64c>
 80029e8:	49b3      	ldr	r1, [pc, #716]	; (8002cb8 <StartTask02+0x910>)
 80029ea:	a3ab      	add	r3, pc, #684	; (adr r3, 8002c98 <StartTask02+0x8f0>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	e9c1 2300 	strd	r2, r3, [r1]

			angle_rad_c = fabs(asin(((230*Tar_cmd_w)/(Tar_cmd_v_x*1000))));
 80029f4:	4bb2      	ldr	r3, [pc, #712]	; (8002cc0 <StartTask02+0x918>)
 80029f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fa:	a3a9      	add	r3, pc, #676	; (adr r3, 8002ca0 <StartTask02+0x8f8>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fdfa 	bl	80005f8 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	4baa      	ldr	r3, [pc, #680]	; (8002cb8 <StartTask02+0x910>)
 8002a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4bab      	ldr	r3, [pc, #684]	; (8002cc4 <StartTask02+0x91c>)
 8002a18:	f7fd fdee 	bl	80005f8 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd ff12 	bl	800084c <__aeabi_ddiv>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	ec43 2b17 	vmov	d7, r2, r3
 8002a30:	eeb0 0a47 	vmov.f32	s0, s14
 8002a34:	eef0 0a67 	vmov.f32	s1, s15
 8002a38:	f00e fef2 	bl	8011820 <asin>
 8002a3c:	ec53 2b10 	vmov	r2, r3, d0
 8002a40:	4690      	mov	r8, r2
 8002a42:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002a46:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <StartTask02+0x920>)
 8002a48:	e9c3 8900 	strd	r8, r9, [r3]
			angle_rad_i = fabs(atan2(230,(230/tan(angle_rad_c))-209.5));
 8002a4c:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <StartTask02+0x920>)
 8002a4e:	ed93 7b00 	vldr	d7, [r3]
 8002a52:	eeb0 0a47 	vmov.f32	s0, s14
 8002a56:	eef0 0a67 	vmov.f32	s1, s15
 8002a5a:	f00e fead 	bl	80117b8 <tan>
 8002a5e:	ec53 2b10 	vmov	r2, r3, d0
 8002a62:	a18f      	add	r1, pc, #572	; (adr r1, 8002ca0 <StartTask02+0x8f8>)
 8002a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a68:	f7fd fef0 	bl	800084c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	a38c      	add	r3, pc, #560	; (adr r3, 8002ca8 <StartTask02+0x900>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fc05 	bl	8000288 <__aeabi_dsub>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	ec43 2b17 	vmov	d7, r2, r3
 8002a86:	eeb0 1a47 	vmov.f32	s2, s14
 8002a8a:	eef0 1a67 	vmov.f32	s3, s15
 8002a8e:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8002ca0 <StartTask02+0x8f8>
 8002a92:	f00e fef9 	bl	8011888 <atan2>
 8002a96:	ec53 2b10 	vmov	r2, r3, d0
 8002a9a:	4692      	mov	sl, r2
 8002a9c:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002aa0:	4b8a      	ldr	r3, [pc, #552]	; (8002ccc <StartTask02+0x924>)
 8002aa2:	e9c3 ab00 	strd	sl, fp, [r3]
			angle_rad_o = fabs(atan2(230,(230/tan(angle_rad_c))+209.5));
 8002aa6:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <StartTask02+0x920>)
 8002aa8:	ed93 7b00 	vldr	d7, [r3]
 8002aac:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab0:	eef0 0a67 	vmov.f32	s1, s15
 8002ab4:	f00e fe80 	bl	80117b8 <tan>
 8002ab8:	ec53 2b10 	vmov	r2, r3, d0
 8002abc:	a178      	add	r1, pc, #480	; (adr r1, 8002ca0 <StartTask02+0x8f8>)
 8002abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ac2:	f7fd fec3 	bl	800084c <__aeabi_ddiv>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	a376      	add	r3, pc, #472	; (adr r3, 8002ca8 <StartTask02+0x900>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fbda 	bl	800028c <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	ec43 2b17 	vmov	d7, r2, r3
 8002ae0:	eeb0 1a47 	vmov.f32	s2, s14
 8002ae4:	eef0 1a67 	vmov.f32	s3, s15
 8002ae8:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8002ca0 <StartTask02+0x8f8>
 8002aec:	f00e fecc 	bl	8011888 <atan2>
 8002af0:	ec53 2b10 	vmov	r2, r3, d0
 8002af4:	603a      	str	r2, [r7, #0]
 8002af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <StartTask02+0x928>)
 8002afe:	ed97 7b00 	vldr	d7, [r7]
 8002b02:	ed83 7b00 	vstr	d7, [r3]

			Tar_cmd_v_i = (Tar_cmd_v_x*sin(angle_rad_c)) / sin(angle_rad_i);
 8002b06:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <StartTask02+0x920>)
 8002b08:	ed93 7b00 	vldr	d7, [r3]
 8002b0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b10:	eef0 0a67 	vmov.f32	s1, s15
 8002b14:	f00e fdf8 	bl	8011708 <sin>
 8002b18:	ec51 0b10 	vmov	r0, r1, d0
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <StartTask02+0x910>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd69 	bl	80005f8 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <StartTask02+0x924>)
 8002b30:	ed93 7b00 	vldr	d7, [r3]
 8002b34:	eeb0 0a47 	vmov.f32	s0, s14
 8002b38:	eef0 0a67 	vmov.f32	s1, s15
 8002b3c:	f00e fde4 	bl	8011708 <sin>
 8002b40:	ec53 2b10 	vmov	r2, r3, d0
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fe80 	bl	800084c <__aeabi_ddiv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4960      	ldr	r1, [pc, #384]	; (8002cd4 <StartTask02+0x92c>)
 8002b52:	e9c1 2300 	strd	r2, r3, [r1]
			Tar_cmd_v_o = (Tar_cmd_v_x*sin(angle_rad_c)) / sin(angle_rad_o);
 8002b56:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <StartTask02+0x920>)
 8002b58:	ed93 7b00 	vldr	d7, [r3]
 8002b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b60:	eef0 0a67 	vmov.f32	s1, s15
 8002b64:	f00e fdd0 	bl	8011708 <sin>
 8002b68:	ec51 0b10 	vmov	r0, r1, d0
 8002b6c:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <StartTask02+0x910>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fd41 	bl	80005f8 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	461d      	mov	r5, r3
 8002b7e:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <StartTask02+0x928>)
 8002b80:	ed93 7b00 	vldr	d7, [r3]
 8002b84:	eeb0 0a47 	vmov.f32	s0, s14
 8002b88:	eef0 0a67 	vmov.f32	s1, s15
 8002b8c:	f00e fdbc 	bl	8011708 <sin>
 8002b90:	ec53 2b10 	vmov	r2, r3, d0
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7fd fe58 	bl	800084c <__aeabi_ddiv>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <StartTask02+0x930>)
 8002ba2:	e9c1 2300 	strd	r2, r3, [r1]

			if(temp_w==0){
 8002ba6:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <StartTask02+0x934>)
 8002ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 80b3 	bne.w	8002d18 <StartTask02+0x970>
				Tar_cmd_v_i=Tar_cmd_v_o=Tar_cmd_v_x;
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <StartTask02+0x910>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	4947      	ldr	r1, [pc, #284]	; (8002cd8 <StartTask02+0x930>)
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
 8002bbe:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <StartTask02+0x930>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	4943      	ldr	r1, [pc, #268]	; (8002cd4 <StartTask02+0x92c>)
 8002bc6:	e9c1 2300 	strd	r2, r3, [r1]
				angle_rad_i=angle_rad_o=angle_rad_c=0;
 8002bca:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <StartTask02+0x920>)
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9c1 2300 	strd	r2, r3, [r1]
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <StartTask02+0x920>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	493c      	ldr	r1, [pc, #240]	; (8002cd0 <StartTask02+0x928>)
 8002be0:	e9c1 2300 	strd	r2, r3, [r1]
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <StartTask02+0x928>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	4938      	ldr	r1, [pc, #224]	; (8002ccc <StartTask02+0x924>)
 8002bec:	e9c1 2300 	strd	r2, r3, [r1]

				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8002bf0:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <StartTask02+0x92c>)
 8002bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf6:	a32e      	add	r3, pc, #184	; (adr r3, 8002cb0 <StartTask02+0x908>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f7fd fcfc 	bl	80005f8 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f7fd ffa6 	bl	8000b58 <__aeabi_d2iz>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <StartTask02+0x938>)
 8002c12:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <StartTask02+0x92c>)
 8002c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c1a:	a325      	add	r3, pc, #148	; (adr r3, 8002cb0 <StartTask02+0x908>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fcea 	bl	80005f8 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ff94 	bl	8000b58 <__aeabi_d2iz>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <StartTask02+0x93c>)
 8002c36:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <StartTask02+0x930>)
 8002c3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c3e:	a31c      	add	r3, pc, #112	; (adr r3, 8002cb0 <StartTask02+0x908>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fcd8 	bl	80005f8 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7fd ff82 	bl	8000b58 <__aeabi_d2iz>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	425b      	negs	r3, r3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	b21a      	sxth	r2, r3
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <StartTask02+0x940>)
 8002c62:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <StartTask02+0x930>)
 8002c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c6a:	a311      	add	r3, pc, #68	; (adr r3, 8002cb0 <StartTask02+0x908>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fcc2 	bl	80005f8 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ff6c 	bl	8000b58 <__aeabi_d2iz>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	425b      	negs	r3, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b21a      	sxth	r2, r3
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <StartTask02+0x944>)
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e02e      	b.n	8002cf0 <StartTask02+0x948>
 8002c92:	bf00      	nop
 8002c94:	f3af 8000 	nop.w
 8002c98:	00000000 	.word	0x00000000
 8002c9c:	c07f4000 	.word	0xc07f4000
 8002ca0:	00000000 	.word	0x00000000
 8002ca4:	406cc000 	.word	0x406cc000
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	406a3000 	.word	0x406a3000
 8002cb0:	cc196908 	.word	0xcc196908
 8002cb4:	3fbc42f1 	.word	0x3fbc42f1
 8002cb8:	20000bf8 	.word	0x20000bf8
 8002cbc:	407f4000 	.word	0x407f4000
 8002cc0:	20000c18 	.word	0x20000c18
 8002cc4:	408f4000 	.word	0x408f4000
 8002cc8:	20000be0 	.word	0x20000be0
 8002ccc:	20000be8 	.word	0x20000be8
 8002cd0:	20000bf0 	.word	0x20000bf0
 8002cd4:	20000c00 	.word	0x20000c00
 8002cd8:	20000c08 	.word	0x20000c08
 8002cdc:	20000c24 	.word	0x20000c24
 8002ce0:	20000c48 	.word	0x20000c48
 8002ce4:	20000c4c 	.word	0x20000c4c
 8002ce8:	20000c4a 	.word	0x20000c4a
 8002cec:	20000c4e 	.word	0x20000c4e

				Deg2Ste(Xbot_W,0, STMotorID1);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7ff f9c7 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,0, STMotorID2);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7ff f9c2 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,0, STMotorID3);
 8002d04:	2202      	movs	r2, #2
 8002d06:	2100      	movs	r1, #0
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff f9bd 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,0, STMotorID4);
 8002d0e:	2203      	movs	r2, #3
 8002d10:	2100      	movs	r1, #0
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7ff f9b8 	bl	8002088 <Deg2Ste>
			}

			if((temp_w>0) && (temp_x>0)){
 8002d18:	4b9b      	ldr	r3, [pc, #620]	; (8002f88 <StartTask02+0xbe0>)
 8002d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f340 8093 	ble.w	8002e4a <StartTask02+0xaa2>
 8002d24:	4b99      	ldr	r3, [pc, #612]	; (8002f8c <StartTask02+0xbe4>)
 8002d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f340 808d 	ble.w	8002e4a <StartTask02+0xaa2>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8002d30:	4b97      	ldr	r3, [pc, #604]	; (8002f90 <StartTask02+0xbe8>)
 8002d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d36:	a392      	add	r3, pc, #584	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fc5c 	bl	80005f8 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd ff06 	bl	8000b58 <__aeabi_d2iz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	4b90      	ldr	r3, [pc, #576]	; (8002f94 <StartTask02+0xbec>)
 8002d52:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8002d54:	4b8e      	ldr	r3, [pc, #568]	; (8002f90 <StartTask02+0xbe8>)
 8002d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d5a:	a389      	add	r3, pc, #548	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fc4a 	bl	80005f8 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd fef4 	bl	8000b58 <__aeabi_d2iz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <StartTask02+0xbf0>)
 8002d76:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002d78:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <StartTask02+0xbf4>)
 8002d7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d7e:	a380      	add	r3, pc, #512	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f7fd fc38 	bl	80005f8 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd fee2 	bl	8000b58 <__aeabi_d2iz>
 8002d94:	4603      	mov	r3, r0
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	425b      	negs	r3, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	4b7f      	ldr	r3, [pc, #508]	; (8002fa0 <StartTask02+0xbf8>)
 8002da2:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002da4:	4b7d      	ldr	r3, [pc, #500]	; (8002f9c <StartTask02+0xbf4>)
 8002da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002daa:	a375      	add	r3, pc, #468	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fc22 	bl	80005f8 <__aeabi_dmul>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7fd fecc 	bl	8000b58 <__aeabi_d2iz>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	425b      	negs	r3, r3
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b21a      	sxth	r2, r3
 8002dcc:	4b75      	ldr	r3, [pc, #468]	; (8002fa4 <StartTask02+0xbfc>)
 8002dce:	801a      	strh	r2, [r3, #0]

				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID1);
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <StartTask02+0xc00>)
 8002dd2:	ed93 7b00 	vldr	d7, [r3]
 8002dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dda:	eef0 0a67 	vmov.f32	s1, s15
 8002dde:	f7ff f99f 	bl	8002120 <rad2deg>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2200      	movs	r2, #0
 8002de6:	4619      	mov	r1, r3
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff f94d 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID2);
 8002dee:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <StartTask02+0xc04>)
 8002df0:	ed93 7b00 	vldr	d7, [r3]
 8002df4:	eeb0 0a47 	vmov.f32	s0, s14
 8002df8:	eef0 0a67 	vmov.f32	s1, s15
 8002dfc:	f7ff f990 	bl	8002120 <rad2deg>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2201      	movs	r2, #1
 8002e04:	4619      	mov	r1, r3
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7ff f93e 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID3);
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <StartTask02+0xc00>)
 8002e0e:	ed93 7b00 	vldr	d7, [r3]
 8002e12:	eeb0 0a47 	vmov.f32	s0, s14
 8002e16:	eef0 0a67 	vmov.f32	s1, s15
 8002e1a:	f7ff f981 	bl	8002120 <rad2deg>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2202      	movs	r2, #2
 8002e22:	4619      	mov	r1, r3
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7ff f92f 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID4);
 8002e2a:	4b60      	ldr	r3, [pc, #384]	; (8002fac <StartTask02+0xc04>)
 8002e2c:	ed93 7b00 	vldr	d7, [r3]
 8002e30:	eeb0 0a47 	vmov.f32	s0, s14
 8002e34:	eef0 0a67 	vmov.f32	s1, s15
 8002e38:	f7ff f972 	bl	8002120 <rad2deg>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2203      	movs	r2, #3
 8002e40:	4619      	mov	r1, r3
 8002e42:	2001      	movs	r0, #1
 8002e44:	f7ff f920 	bl	8002088 <Deg2Ste>
 8002e48:	e1e3      	b.n	8003212 <StartTask02+0xe6a>

			}

			else if((temp_w<0) && (temp_x>0)){
 8002e4a:	4b4f      	ldr	r3, [pc, #316]	; (8002f88 <StartTask02+0xbe0>)
 8002e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f280 80ad 	bge.w	8002fb0 <StartTask02+0xc08>
 8002e56:	4b4d      	ldr	r3, [pc, #308]	; (8002f8c <StartTask02+0xbe4>)
 8002e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f340 80a7 	ble.w	8002fb0 <StartTask02+0xc08>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002e62:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <StartTask02+0xbf4>)
 8002e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e68:	a345      	add	r3, pc, #276	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f7fd fbc3 	bl	80005f8 <__aeabi_dmul>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fe6d 	bl	8000b58 <__aeabi_d2iz>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <StartTask02+0xbec>)
 8002e84:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <StartTask02+0xbf4>)
 8002e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8c:	a33c      	add	r3, pc, #240	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbb1 	bl	80005f8 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fe5b 	bl	8000b58 <__aeabi_d2iz>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <StartTask02+0xbf0>)
 8002ea8:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <StartTask02+0xbe8>)
 8002eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb0:	a333      	add	r3, pc, #204	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fb9f 	bl	80005f8 <__aeabi_dmul>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7fd fe49 	bl	8000b58 <__aeabi_d2iz>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	425b      	negs	r3, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <StartTask02+0xbf8>)
 8002ed4:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <StartTask02+0xbe8>)
 8002ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002edc:	a328      	add	r3, pc, #160	; (adr r3, 8002f80 <StartTask02+0xbd8>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd fb89 	bl	80005f8 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7fd fe33 	bl	8000b58 <__aeabi_d2iz>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b21b      	sxth	r3, r3
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	425b      	negs	r3, r3
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <StartTask02+0xbfc>)
 8002f00:	801a      	strh	r2, [r3, #0]

				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID1);
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <StartTask02+0xc04>)
 8002f04:	ed93 7b00 	vldr	d7, [r3]
 8002f08:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0c:	eef0 0a67 	vmov.f32	s1, s15
 8002f10:	f7ff f906 	bl	8002120 <rad2deg>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7ff f8b4 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID2);
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <StartTask02+0xc00>)
 8002f22:	ed93 7b00 	vldr	d7, [r3]
 8002f26:	eeb0 0a47 	vmov.f32	s0, s14
 8002f2a:	eef0 0a67 	vmov.f32	s1, s15
 8002f2e:	f7ff f8f7 	bl	8002120 <rad2deg>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2201      	movs	r2, #1
 8002f36:	4619      	mov	r1, r3
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7ff f8a5 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID3);
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <StartTask02+0xc04>)
 8002f40:	ed93 7b00 	vldr	d7, [r3]
 8002f44:	eeb0 0a47 	vmov.f32	s0, s14
 8002f48:	eef0 0a67 	vmov.f32	s1, s15
 8002f4c:	f7ff f8e8 	bl	8002120 <rad2deg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2202      	movs	r2, #2
 8002f54:	4619      	mov	r1, r3
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7ff f896 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID4);
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <StartTask02+0xc00>)
 8002f5e:	ed93 7b00 	vldr	d7, [r3]
 8002f62:	eeb0 0a47 	vmov.f32	s0, s14
 8002f66:	eef0 0a67 	vmov.f32	s1, s15
 8002f6a:	f7ff f8d9 	bl	8002120 <rad2deg>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2203      	movs	r2, #3
 8002f72:	4619      	mov	r1, r3
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7ff f887 	bl	8002088 <Deg2Ste>
 8002f7a:	e14a      	b.n	8003212 <StartTask02+0xe6a>
 8002f7c:	f3af 8000 	nop.w
 8002f80:	cc196908 	.word	0xcc196908
 8002f84:	3fbc42f1 	.word	0x3fbc42f1
 8002f88:	20000c24 	.word	0x20000c24
 8002f8c:	20000c20 	.word	0x20000c20
 8002f90:	20000c00 	.word	0x20000c00
 8002f94:	20000c48 	.word	0x20000c48
 8002f98:	20000c4c 	.word	0x20000c4c
 8002f9c:	20000c08 	.word	0x20000c08
 8002fa0:	20000c4a 	.word	0x20000c4a
 8002fa4:	20000c4e 	.word	0x20000c4e
 8002fa8:	20000bf0 	.word	0x20000bf0
 8002fac:	20000be8 	.word	0x20000be8
			}

			else if((temp_w>0) && (temp_x<0)){
 8002fb0:	4bb5      	ldr	r3, [pc, #724]	; (8003288 <StartTask02+0xee0>)
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f340 8093 	ble.w	80030e2 <StartTask02+0xd3a>
 8002fbc:	4bb3      	ldr	r3, [pc, #716]	; (800328c <StartTask02+0xee4>)
 8002fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f280 808d 	bge.w	80030e2 <StartTask02+0xd3a>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002fc8:	4bb1      	ldr	r3, [pc, #708]	; (8003290 <StartTask02+0xee8>)
 8002fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fce:	a3ac      	add	r3, pc, #688	; (adr r3, 8003280 <StartTask02+0xed8>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f7fd fb10 	bl	80005f8 <__aeabi_dmul>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fdba 	bl	8000b58 <__aeabi_d2iz>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	4baa      	ldr	r3, [pc, #680]	; (8003294 <StartTask02+0xeec>)
 8002fea:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8002fec:	4ba8      	ldr	r3, [pc, #672]	; (8003290 <StartTask02+0xee8>)
 8002fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ff2:	a3a3      	add	r3, pc, #652	; (adr r3, 8003280 <StartTask02+0xed8>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fafe 	bl	80005f8 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fda8 	bl	8000b58 <__aeabi_d2iz>
 8003008:	4603      	mov	r3, r0
 800300a:	b21a      	sxth	r2, r3
 800300c:	4ba2      	ldr	r3, [pc, #648]	; (8003298 <StartTask02+0xef0>)
 800300e:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8003010:	4ba2      	ldr	r3, [pc, #648]	; (800329c <StartTask02+0xef4>)
 8003012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003016:	a39a      	add	r3, pc, #616	; (adr r3, 8003280 <StartTask02+0xed8>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd faec 	bl	80005f8 <__aeabi_dmul>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	f7fd fd96 	bl	8000b58 <__aeabi_d2iz>
 800302c:	4603      	mov	r3, r0
 800302e:	b21b      	sxth	r3, r3
 8003030:	b29b      	uxth	r3, r3
 8003032:	425b      	negs	r3, r3
 8003034:	b29b      	uxth	r3, r3
 8003036:	b21a      	sxth	r2, r3
 8003038:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <StartTask02+0xef8>)
 800303a:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 800303c:	4b97      	ldr	r3, [pc, #604]	; (800329c <StartTask02+0xef4>)
 800303e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003042:	a38f      	add	r3, pc, #572	; (adr r3, 8003280 <StartTask02+0xed8>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd fad6 	bl	80005f8 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	f7fd fd80 	bl	8000b58 <__aeabi_d2iz>
 8003058:	4603      	mov	r3, r0
 800305a:	b21b      	sxth	r3, r3
 800305c:	b29b      	uxth	r3, r3
 800305e:	425b      	negs	r3, r3
 8003060:	b29b      	uxth	r3, r3
 8003062:	b21a      	sxth	r2, r3
 8003064:	4b8f      	ldr	r3, [pc, #572]	; (80032a4 <StartTask02+0xefc>)
 8003066:	801a      	strh	r2, [r3, #0]

				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID1);
 8003068:	4b8f      	ldr	r3, [pc, #572]	; (80032a8 <StartTask02+0xf00>)
 800306a:	ed93 7b00 	vldr	d7, [r3]
 800306e:	eeb0 0a47 	vmov.f32	s0, s14
 8003072:	eef0 0a67 	vmov.f32	s1, s15
 8003076:	f7ff f853 	bl	8002120 <rad2deg>
 800307a:	4603      	mov	r3, r0
 800307c:	2200      	movs	r2, #0
 800307e:	4619      	mov	r1, r3
 8003080:	2001      	movs	r0, #1
 8003082:	f7ff f801 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID2);
 8003086:	4b89      	ldr	r3, [pc, #548]	; (80032ac <StartTask02+0xf04>)
 8003088:	ed93 7b00 	vldr	d7, [r3]
 800308c:	eeb0 0a47 	vmov.f32	s0, s14
 8003090:	eef0 0a67 	vmov.f32	s1, s15
 8003094:	f7ff f844 	bl	8002120 <rad2deg>
 8003098:	4603      	mov	r3, r0
 800309a:	2201      	movs	r2, #1
 800309c:	4619      	mov	r1, r3
 800309e:	2001      	movs	r0, #1
 80030a0:	f7fe fff2 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID3);
 80030a4:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <StartTask02+0xf00>)
 80030a6:	ed93 7b00 	vldr	d7, [r3]
 80030aa:	eeb0 0a47 	vmov.f32	s0, s14
 80030ae:	eef0 0a67 	vmov.f32	s1, s15
 80030b2:	f7ff f835 	bl	8002120 <rad2deg>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2202      	movs	r2, #2
 80030ba:	4619      	mov	r1, r3
 80030bc:	2001      	movs	r0, #1
 80030be:	f7fe ffe3 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID4);
 80030c2:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <StartTask02+0xf04>)
 80030c4:	ed93 7b00 	vldr	d7, [r3]
 80030c8:	eeb0 0a47 	vmov.f32	s0, s14
 80030cc:	eef0 0a67 	vmov.f32	s1, s15
 80030d0:	f7ff f826 	bl	8002120 <rad2deg>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2203      	movs	r2, #3
 80030d8:	4619      	mov	r1, r3
 80030da:	2001      	movs	r0, #1
 80030dc:	f7fe ffd4 	bl	8002088 <Deg2Ste>
 80030e0:	e097      	b.n	8003212 <StartTask02+0xe6a>
			}

			else if((temp_w<0) && (temp_x<0)){
 80030e2:	4b69      	ldr	r3, [pc, #420]	; (8003288 <StartTask02+0xee0>)
 80030e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f280 8092 	bge.w	8003212 <StartTask02+0xe6a>
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <StartTask02+0xee4>)
 80030f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f280 808c 	bge.w	8003212 <StartTask02+0xe6a>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <StartTask02+0xef4>)
 80030fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003100:	a35f      	add	r3, pc, #380	; (adr r3, 8003280 <StartTask02+0xed8>)
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f7fd fa77 	bl	80005f8 <__aeabi_dmul>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd fd21 	bl	8000b58 <__aeabi_d2iz>
 8003116:	4603      	mov	r3, r0
 8003118:	b21a      	sxth	r2, r3
 800311a:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <StartTask02+0xeec>)
 800311c:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 800311e:	4b5f      	ldr	r3, [pc, #380]	; (800329c <StartTask02+0xef4>)
 8003120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003124:	a356      	add	r3, pc, #344	; (adr r3, 8003280 <StartTask02+0xed8>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f7fd fa65 	bl	80005f8 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fd0f 	bl	8000b58 <__aeabi_d2iz>
 800313a:	4603      	mov	r3, r0
 800313c:	b21a      	sxth	r2, r3
 800313e:	4b56      	ldr	r3, [pc, #344]	; (8003298 <StartTask02+0xef0>)
 8003140:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003142:	4b53      	ldr	r3, [pc, #332]	; (8003290 <StartTask02+0xee8>)
 8003144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003148:	a34d      	add	r3, pc, #308	; (adr r3, 8003280 <StartTask02+0xed8>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd fa53 	bl	80005f8 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fcfd 	bl	8000b58 <__aeabi_d2iz>
 800315e:	4603      	mov	r3, r0
 8003160:	b21b      	sxth	r3, r3
 8003162:	b29b      	uxth	r3, r3
 8003164:	425b      	negs	r3, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	b21a      	sxth	r2, r3
 800316a:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <StartTask02+0xef8>)
 800316c:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 800316e:	4b48      	ldr	r3, [pc, #288]	; (8003290 <StartTask02+0xee8>)
 8003170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003174:	a342      	add	r3, pc, #264	; (adr r3, 8003280 <StartTask02+0xed8>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd fa3d 	bl	80005f8 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f7fd fce7 	bl	8000b58 <__aeabi_d2iz>
 800318a:	4603      	mov	r3, r0
 800318c:	b21b      	sxth	r3, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	425b      	negs	r3, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	b21a      	sxth	r2, r3
 8003196:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <StartTask02+0xefc>)
 8003198:	801a      	strh	r2, [r3, #0]

				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID1);
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <StartTask02+0xf04>)
 800319c:	ed93 7b00 	vldr	d7, [r3]
 80031a0:	eeb0 0a47 	vmov.f32	s0, s14
 80031a4:	eef0 0a67 	vmov.f32	s1, s15
 80031a8:	f7fe ffba 	bl	8002120 <rad2deg>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2200      	movs	r2, #0
 80031b0:	4619      	mov	r1, r3
 80031b2:	2001      	movs	r0, #1
 80031b4:	f7fe ff68 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID2);
 80031b8:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <StartTask02+0xf00>)
 80031ba:	ed93 7b00 	vldr	d7, [r3]
 80031be:	eeb0 0a47 	vmov.f32	s0, s14
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	f7fe ffab 	bl	8002120 <rad2deg>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2201      	movs	r2, #1
 80031ce:	4619      	mov	r1, r3
 80031d0:	2001      	movs	r0, #1
 80031d2:	f7fe ff59 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID3);
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <StartTask02+0xf04>)
 80031d8:	ed93 7b00 	vldr	d7, [r3]
 80031dc:	eeb0 0a47 	vmov.f32	s0, s14
 80031e0:	eef0 0a67 	vmov.f32	s1, s15
 80031e4:	f7fe ff9c 	bl	8002120 <rad2deg>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2202      	movs	r2, #2
 80031ec:	4619      	mov	r1, r3
 80031ee:	2001      	movs	r0, #1
 80031f0:	f7fe ff4a 	bl	8002088 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID4);
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <StartTask02+0xf00>)
 80031f6:	ed93 7b00 	vldr	d7, [r3]
 80031fa:	eeb0 0a47 	vmov.f32	s0, s14
 80031fe:	eef0 0a67 	vmov.f32	s1, s15
 8003202:	f7fe ff8d 	bl	8002120 <rad2deg>
 8003206:	4603      	mov	r3, r0
 8003208:	2203      	movs	r2, #3
 800320a:	4619      	mov	r1, r3
 800320c:	2001      	movs	r0, #1
 800320e:	f7fe ff3b 	bl	8002088 <Deg2Ste>
			}
			//Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_x);
			ModeABCD = 2;//B mode
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <StartTask02+0xf08>)
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
		}

		//Deg2Ste(Xbot_W,rad2deg(angle_rad_c));
//		printf("%d: SteDeg %d %d %d %d\n", osKernelGetTickCount(), SteDeg[0], SteDeg[1], SteDeg[2], SteDeg[3]);
		Cal_Real_cmd();
 8003218:	f7fe fa82 	bl	8001720 <Cal_Real_cmd>
	}

	if(((temp_x==0) && (temp_y==0) && (temp_w==0))  ||  (Stopflagcheck(Xbot_R, 1)==0))
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <StartTask02+0xee4>)
 800321e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <StartTask02+0xe92>
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <StartTask02+0xf0c>)
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <StartTask02+0xe92>
 8003230:	4b15      	ldr	r3, [pc, #84]	; (8003288 <StartTask02+0xee0>)
 8003232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <StartTask02+0xea0>
 800323a:	2101      	movs	r1, #1
 800323c:	2000      	movs	r0, #0
 800323e:	f7fe fee3 	bl	8002008 <Stopflagcheck>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d113      	bne.n	8003270 <StartTask02+0xec8>
	{
		//ModeABCD = 4;//temp
		//Pre_ModeABCD = 4;//temp
		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <StartTask02+0xeec>)
 800324a:	2200      	movs	r2, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <StartTask02+0xeec>)
 8003250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <StartTask02+0xef8>)
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <StartTask02+0xef8>)
 800325a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <StartTask02+0xef0>)
 8003260:	801a      	strh	r2, [r3, #0]
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <StartTask02+0xef0>)
 8003264:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <StartTask02+0xefc>)
 800326a:	801a      	strh	r2, [r3, #0]

		Cal_Real_cmd();
 800326c:	f7fe fa58 	bl	8001720 <Cal_Real_cmd>
	}


	sendcanbuf[7] = VERSION_MINOR;
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <StartTask02+0xf10>)
 8003272:	2200      	movs	r2, #0
 8003274:	71da      	strb	r2, [r3, #7]
	sendcanbuf[6] = VERSION_MAJOR;
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <StartTask02+0xf10>)
 8003278:	2202      	movs	r2, #2
 800327a:	719a      	strb	r2, [r3, #6]
	lastTime += PERIOD_CANCOMM;;
 800327c:	f7ff b940 	b.w	8002500 <StartTask02+0x158>
 8003280:	cc196908 	.word	0xcc196908
 8003284:	3fbc42f1 	.word	0x3fbc42f1
 8003288:	20000c24 	.word	0x20000c24
 800328c:	20000c20 	.word	0x20000c20
 8003290:	20000c08 	.word	0x20000c08
 8003294:	20000c48 	.word	0x20000c48
 8003298:	20000c4c 	.word	0x20000c4c
 800329c:	20000c00 	.word	0x20000c00
 80032a0:	20000c4a 	.word	0x20000c4a
 80032a4:	20000c4e 	.word	0x20000c4e
 80032a8:	20000be8 	.word	0x20000be8
 80032ac:	20000bf0 	.word	0x20000bf0
 80032b0:	2000005c 	.word	0x2000005c
 80032b4:	20000c22 	.word	0x20000c22
 80032b8:	20000c58 	.word	0x20000c58
 80032bc:	00000000 	.word	0x00000000

080032c0 <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b098      	sub	sp, #96	; 0x60
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime;
	uint8_t Dir_Rot = 0; //direction of rotation
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t FT_flag = 0; //FineTuning_flag
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	int32_t angle = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
	int32_t pre_angle = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
	int32_t speed_angle = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
	int32_t SAngle[4] = {0,};
 80032e0:	f107 0308 	add.w	r3, r7, #8
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
//	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
//					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
//					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
//					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	osDelay(1000);
 80032ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032f2:	f007 fd29 	bl	800ad48 <osDelay>
	GPIO_enableirq();
 80032f6:	f000 fe85 	bl	8004004 <GPIO_enableirq>
	osDelay(100);
 80032fa:	2064      	movs	r0, #100	; 0x64
 80032fc:	f007 fd24 	bl	800ad48 <osDelay>
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8003300:	4b98      	ldr	r3, [pc, #608]	; (8003564 <StartTask03+0x2a4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f007 fc2e 	bl	800ab68 <osThreadFlagsSet>

	for(int i=0;i<4;i++){
 800330c:	2300      	movs	r3, #0
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	e058      	b.n	80033c4 <StartTask03+0x104>
		if(HAL_GPIO_ReadPin(GPIOA, ((1<<i)<<4))){//GPIO_PIN_4                 ((uint16_t)0x0010)  /* Pin 4 selected    */
 8003312:	2201      	movs	r2, #1
 8003314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	b29b      	uxth	r3, r3
 8003320:	4619      	mov	r1, r3
 8003322:	4891      	ldr	r0, [pc, #580]	; (8003568 <StartTask03+0x2a8>)
 8003324:	f003 fe08 	bl	8006f38 <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <StartTask03+0xa0>
			if((i==STMotorID2) || (i==STMotorID3)) 	{Dir_Rot = SERVO_CW;}
 800332e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d002      	beq.n	800333a <StartTask03+0x7a>
 8003334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003336:	2b02      	cmp	r3, #2
 8003338:	d103      	bne.n	8003342 <StartTask03+0x82>
 800333a:	2300      	movs	r3, #0
 800333c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003340:	e026      	b.n	8003390 <StartTask03+0xd0>
			else					{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003348:	2201      	movs	r2, #1
 800334a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	b25a      	sxtb	r2, r3
 8003352:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8003356:	4313      	orrs	r3, r2
 8003358:	b25b      	sxtb	r3, r3
 800335a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800335e:	e017      	b.n	8003390 <StartTask03+0xd0>
		}
		else {
			if((i==STMotorID2) || (i==STMotorID3))	{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 8003360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d002      	beq.n	800336c <StartTask03+0xac>
 8003366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003368:	2b02      	cmp	r3, #2
 800336a:	d10e      	bne.n	800338a <StartTask03+0xca>
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003372:	2201      	movs	r2, #1
 8003374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	b25a      	sxtb	r2, r3
 800337c:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8003380:	4313      	orrs	r3, r2
 8003382:	b25b      	sxtb	r3, r3
 8003384:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8003388:	e002      	b.n	8003390 <StartTask03+0xd0>
			else					{Dir_Rot = SERVO_CW;}
 800338a:	2300      	movs	r3, #0
 800338c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		}
		DataSetSteering(buf, i, Dir_Rot, RPM_1, SERVO_INIT, INIT_SPEED);// i= STMotorIDx, x=1~4
 8003390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003392:	b2d9      	uxtb	r1, r3
 8003394:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003398:	231e      	movs	r3, #30
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2301      	movs	r3, #1
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2314      	movs	r3, #20
 80033a2:	4872      	ldr	r0, [pc, #456]	; (800356c <StartTask03+0x2ac>)
 80033a4:	f001 f838 	bl	8004418 <DataSetSteering>
		printf("PS_SIG1_Pin ccw init. %d %x\n", FT_flag, ((1<<i)<<4));
 80033a8:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80033ac:	2201      	movs	r2, #1
 80033ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	461a      	mov	r2, r3
 80033b8:	486d      	ldr	r0, [pc, #436]	; (8003570 <StartTask03+0x2b0>)
 80033ba:	f00c f947 	bl	800f64c <iprintf>
	for(int i=0;i<4;i++){
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	3301      	adds	r3, #1
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	dda3      	ble.n	8003312 <StartTask03+0x52>
	}

	osDelay(1000);
 80033ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ce:	f007 fcbb 	bl	800ad48 <osDelay>

	for(int i=0;i<40;i++){
 80033d2:	2300      	movs	r3, #0
 80033d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033d6:	e020      	b.n	800341a <StartTask03+0x15a>
		osDelay(200);
 80033d8:	20c8      	movs	r0, #200	; 0xc8
 80033da:	f007 fcb5 	bl	800ad48 <osDelay>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80033de:	4863      	ldr	r0, [pc, #396]	; (800356c <StartTask03+0x2ac>)
 80033e0:	f000 fff4 	bl	80043cc <ServoMotor_writeDMA>
		printf("%d ", i);
 80033e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80033e6:	4863      	ldr	r0, [pc, #396]	; (8003574 <StartTask03+0x2b4>)
 80033e8:	f00c f930 	bl	800f64c <iprintf>
		if(STinitdone){printf("steering origin init done!!!.\n"); break;}
 80033ec:	4b62      	ldr	r3, [pc, #392]	; (8003578 <StartTask03+0x2b8>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <StartTask03+0x13c>
 80033f4:	4861      	ldr	r0, [pc, #388]	; (800357c <StartTask03+0x2bc>)
 80033f6:	f00c f9af 	bl	800f758 <puts>
 80033fa:	e011      	b.n	8003420 <StartTask03+0x160>
		if(i==39){
 80033fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fe:	2b27      	cmp	r3, #39	; 0x27
 8003400:	d108      	bne.n	8003414 <StartTask03+0x154>
			HAL_Delay(100);
 8003402:	2064      	movs	r0, #100	; 0x64
 8003404:	f002 f82a 	bl	800545c <HAL_Delay>
			printf("steering origin init failed reset!!!!.\n");
 8003408:	485d      	ldr	r0, [pc, #372]	; (8003580 <StartTask03+0x2c0>)
 800340a:	f00c f9a5 	bl	800f758 <puts>
			HAL_Delay(100);
 800340e:	2064      	movs	r0, #100	; 0x64
 8003410:	f002 f824 	bl	800545c <HAL_Delay>
	for(int i=0;i<40;i++){
 8003414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003416:	3301      	adds	r3, #1
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341c:	2b27      	cmp	r3, #39	; 0x27
 800341e:	dddb      	ble.n	80033d8 <StartTask03+0x118>
			//NVIC_SystemReset();
		}
	}
	osDelay(500);
 8003420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003424:	f007 fc90 	bl	800ad48 <osDelay>
	STinitdone = 0;
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <StartTask03+0x2b8>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
	//EndInit = 0;
	//GPIO_enableirq();
//	osThreadFlagsSet(IRQ_PSxHandle, 1);
	printf("%d: osTFSet\n", osKernelGetTickCount());
 800342e:	f007 faf3 	bl	800aa18 <osKernelGetTickCount>
 8003432:	4603      	mov	r3, r0
 8003434:	4619      	mov	r1, r3
 8003436:	4853      	ldr	r0, [pc, #332]	; (8003584 <StartTask03+0x2c4>)
 8003438:	f00c f908 	bl	800f64c <iprintf>

	for(int i=0;i<4;i++){
 800343c:	2300      	movs	r3, #0
 800343e:	647b      	str	r3, [r7, #68]	; 0x44
 8003440:	e03e      	b.n	80034c0 <StartTask03+0x200>
		if(FT_flag&(1<<i)){
 8003442:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8003446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003448:	fa42 f303 	asr.w	r3, r2, r3
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <StartTask03+0x1ba>
			DataSetSteering(buf, i, SERVO_CW, STM_FT_ID[i][SERVO_CW], SERVO_POS, INIT_SPEED);
 8003454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003456:	b2d9      	uxtb	r1, r3
 8003458:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <StartTask03+0x2c8>)
 800345a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003460:	b29b      	uxth	r3, r3
 8003462:	221e      	movs	r2, #30
 8003464:	9201      	str	r2, [sp, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	483f      	ldr	r0, [pc, #252]	; (800356c <StartTask03+0x2ac>)
 800346e:	f000 ffd3 	bl	8004418 <DataSetSteering>
			printf("SERVO_cW\n");
 8003472:	4846      	ldr	r0, [pc, #280]	; (800358c <StartTask03+0x2cc>)
 8003474:	f00c f970 	bl	800f758 <puts>
 8003478:	e012      	b.n	80034a0 <StartTask03+0x1e0>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, STM_FT_ID[i][SERVO_CCW], SERVO_POS, INIT_SPEED);
 800347a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347c:	b2d9      	uxtb	r1, r3
 800347e:	4a42      	ldr	r2, [pc, #264]	; (8003588 <StartTask03+0x2c8>)
 8003480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	b29b      	uxth	r3, r3
 800348a:	221e      	movs	r2, #30
 800348c:	9201      	str	r2, [sp, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	9200      	str	r2, [sp, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	4835      	ldr	r0, [pc, #212]	; (800356c <StartTask03+0x2ac>)
 8003496:	f000 ffbf 	bl	8004418 <DataSetSteering>
			printf("SERVO_ccW\n");
 800349a:	483d      	ldr	r0, [pc, #244]	; (8003590 <StartTask03+0x2d0>)
 800349c:	f00c f95c 	bl	800f758 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 80034a0:	2201      	movs	r2, #1
 80034a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <StartTask03+0x2d4>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	4313      	orrs	r3, r2
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <StartTask03+0x2d4>)
 80034b8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 80034ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034bc:	3301      	adds	r3, #1
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
 80034c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	ddbd      	ble.n	8003442 <StartTask03+0x182>
	}

	for(int i=0;i<10;i++){
 80034c6:	2300      	movs	r3, #0
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ca:	e009      	b.n	80034e0 <StartTask03+0x220>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80034cc:	4827      	ldr	r0, [pc, #156]	; (800356c <StartTask03+0x2ac>)
 80034ce:	f000 ff7d 	bl	80043cc <ServoMotor_writeDMA>
		osDelay(500);
 80034d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034d6:	f007 fc37 	bl	800ad48 <osDelay>
	for(int i=0;i<10;i++){
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	3301      	adds	r3, #1
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
 80034e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e2:	2b09      	cmp	r3, #9
 80034e4:	ddf2      	ble.n	80034cc <StartTask03+0x20c>
		}

	for(int i=0;i<4;i++){
 80034e6:	2300      	movs	r3, #0
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ea:	e035      	b.n	8003558 <StartTask03+0x298>
		if(FT_flag&(1<<i)){
 80034ec:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	fa42 f303 	asr.w	r3, r2, r3
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <StartTask03+0x25c>
			DataSetSteering(buf, i, SERVO_CW, 0, SERVO_INIT, INIT_SPEED);
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	b2d9      	uxtb	r1, r3
 8003502:	231e      	movs	r3, #30
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	2301      	movs	r3, #1
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2300      	movs	r3, #0
 800350c:	2200      	movs	r2, #0
 800350e:	4817      	ldr	r0, [pc, #92]	; (800356c <StartTask03+0x2ac>)
 8003510:	f000 ff82 	bl	8004418 <DataSetSteering>
			printf("SERVO_cW\n");
 8003514:	481d      	ldr	r0, [pc, #116]	; (800358c <StartTask03+0x2cc>)
 8003516:	f00c f91f 	bl	800f758 <puts>
 800351a:	e00d      	b.n	8003538 <StartTask03+0x278>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, 0, SERVO_INIT, INIT_SPEED);
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	b2d9      	uxtb	r1, r3
 8003520:	231e      	movs	r3, #30
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2301      	movs	r3, #1
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	2201      	movs	r2, #1
 800352c:	480f      	ldr	r0, [pc, #60]	; (800356c <StartTask03+0x2ac>)
 800352e:	f000 ff73 	bl	8004418 <DataSetSteering>
			printf("SERVO_ccW\n");
 8003532:	4817      	ldr	r0, [pc, #92]	; (8003590 <StartTask03+0x2d0>)
 8003534:	f00c f910 	bl	800f758 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 8003538:	2201      	movs	r2, #1
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	b25a      	sxtb	r2, r3
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <StartTask03+0x2d4>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b25b      	sxtb	r3, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	b25b      	sxtb	r3, r3
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <StartTask03+0x2d4>)
 8003550:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8003552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003554:	3301      	adds	r3, #1
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355a:	2b03      	cmp	r3, #3
 800355c:	ddc6      	ble.n	80034ec <StartTask03+0x22c>
	}

	for(int i=0;i<10;i++){
 800355e:	2300      	movs	r3, #0
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
 8003562:	e023      	b.n	80035ac <StartTask03+0x2ec>
 8003564:	20000c7c 	.word	0x20000c7c
 8003568:	40020000 	.word	0x40020000
 800356c:	20000060 	.word	0x20000060
 8003570:	08013878 	.word	0x08013878
 8003574:	08013898 	.word	0x08013898
 8003578:	20000bd5 	.word	0x20000bd5
 800357c:	0801389c 	.word	0x0801389c
 8003580:	080138bc 	.word	0x080138bc
 8003584:	080138e4 	.word	0x080138e4
 8003588:	2000003c 	.word	0x2000003c
 800358c:	080138f4 	.word	0x080138f4
 8003590:	08013900 	.word	0x08013900
 8003594:	20000bc8 	.word	0x20000bc8
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 8003598:	486d      	ldr	r0, [pc, #436]	; (8003750 <StartTask03+0x490>)
 800359a:	f000 ff17 	bl	80043cc <ServoMotor_writeDMA>
		osDelay(500);
 800359e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035a2:	f007 fbd1 	bl	800ad48 <osDelay>
	for(int i=0;i<10;i++){
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	3301      	adds	r3, #1
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	ddf2      	ble.n	8003598 <StartTask03+0x2d8>
		}

	HAL_UART_Receive_IT(&huart3, tmp_rx , SERVO_RXBUFLEN);
 80035b2:	220c      	movs	r2, #12
 80035b4:	4967      	ldr	r1, [pc, #412]	; (8003754 <StartTask03+0x494>)
 80035b6:	4868      	ldr	r0, [pc, #416]	; (8003758 <StartTask03+0x498>)
 80035b8:	f006 f8b1 	bl	800971e <HAL_UART_Receive_IT>
	Dir_Rot = 0;//init
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	lastTime = osKernelGetTickCount();
 80035c2:	f007 fa29 	bl	800aa18 <osKernelGetTickCount>
 80035c6:	6578      	str	r0, [r7, #84]	; 0x54
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 80035c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	657b      	str	r3, [r7, #84]	; 0x54
	osDelayUntil(lastTime);
 80035ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80035d0:	f007 fbd5 	bl	800ad7e <osDelayUntil>

	printf("%d: t03\n", osKernelGetTickCount());
 80035d4:	f007 fa20 	bl	800aa18 <osKernelGetTickCount>
 80035d8:	4603      	mov	r3, r0
 80035da:	4619      	mov	r1, r3
 80035dc:	485f      	ldr	r0, [pc, #380]	; (800375c <StartTask03+0x49c>)
 80035de:	f00c f835 	bl	800f64c <iprintf>

	if(ModeABCD == 1){
 80035e2:	4b5f      	ldr	r3, [pc, #380]	; (8003760 <StartTask03+0x4a0>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <StartTask03+0x330>
			DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg[1]*100, SERVO_POS,20);
			DataSetSteering(buf, STMotorID3, Dir_Rot, SteDeg[2]*100, SERVO_POS,20);
			DataSetSteering(buf, STMotorID4, Dir_Rot, SteDeg[3]*100, SERVO_POS,20);
		}
#endif
		printf("Mode A\n");
 80035ea:	485e      	ldr	r0, [pc, #376]	; (8003764 <StartTask03+0x4a4>)
 80035ec:	f00c f8b4 	bl	800f758 <puts>
	}

	if(ModeABCD == 2){
 80035f0:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <StartTask03+0x4a0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	f040 814f 	bne.w	8003898 <StartTask03+0x5d8>
		if(Deg2Ste(Xbot_R,0, STMotorID1) == 0){//forward, rear
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fe fd42 	bl	8002088 <Deg2Ste>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d119      	bne.n	800363e <StartTask03+0x37e>
			for(int i=0;i<4;i++){Deg2Ste(Xbot_W, 0, i);}
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e009      	b.n	8003624 <StartTask03+0x364>
 8003610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	2100      	movs	r1, #0
 8003618:	2001      	movs	r0, #1
 800361a:	f7fe fd35 	bl	8002088 <Deg2Ste>
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	3301      	adds	r3, #1
 8003622:	637b      	str	r3, [r7, #52]	; 0x34
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	2b03      	cmp	r3, #3
 8003628:	ddf2      	ble.n	8003610 <StartTask03+0x350>
			printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg[0]);
 800362a:	f007 f9f5 	bl	800aa18 <osKernelGetTickCount>
 800362e:	4603      	mov	r3, r0
 8003630:	4a4d      	ldr	r2, [pc, #308]	; (8003768 <StartTask03+0x4a8>)
 8003632:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003636:	4619      	mov	r1, r3
 8003638:	484c      	ldr	r0, [pc, #304]	; (800376c <StartTask03+0x4ac>)
 800363a:	f00c f807 	bl	800f64c <iprintf>
		}
//		if(Tar_cmd_v_x==0&&Tar_cmd_v_y>0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CCW;}//left
//		else if(Tar_cmd_v_x==0&&Tar_cmd_v_y<0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CW;}//right

		if		((Tar_cmd_v_x>0) && (Tar_cmd_w>0)){/*SteDeg*=1;*/							Dir_Rot=SERVO_CCW; }//the first quadrant
 800363e:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <StartTask03+0x4b0>)
 8003640:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	f7fd fa64 	bl	8000b18 <__aeabi_dcmpgt>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00f      	beq.n	8003676 <StartTask03+0x3b6>
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <StartTask03+0x4b4>)
 8003658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	f7fd fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <StartTask03+0x3b6>
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8003674:	e052      	b.n	800371c <StartTask03+0x45c>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_w<0)){/*Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0)));*/	Dir_Rot=SERVO_CCW; }//the second quadrant
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <StartTask03+0x4b0>)
 8003678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	f7fd fa2a 	bl	8000adc <__aeabi_dcmplt>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00f      	beq.n	80036ae <StartTask03+0x3ee>
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <StartTask03+0x4b4>)
 8003690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	f7fd fa1e 	bl	8000adc <__aeabi_dcmplt>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <StartTask03+0x3ee>
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80036ac:	e036      	b.n	800371c <StartTask03+0x45c>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_w>0)){/*Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0)));*/	Dir_Rot=SERVO_CW; }//the third quadrant
 80036ae:	4b30      	ldr	r3, [pc, #192]	; (8003770 <StartTask03+0x4b0>)
 80036b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	f7fd fa0e 	bl	8000adc <__aeabi_dcmplt>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00f      	beq.n	80036e6 <StartTask03+0x426>
 80036c6:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <StartTask03+0x4b4>)
 80036c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f7fd fa20 	bl	8000b18 <__aeabi_dcmpgt>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <StartTask03+0x426>
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80036e4:	e01a      	b.n	800371c <StartTask03+0x45c>
		else if	((Tar_cmd_v_x>0) && (Tar_cmd_w<0)){/*Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0)));*/	Dir_Rot=SERVO_CW; }//the fourth quadrant
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <StartTask03+0x4b0>)
 80036e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	f7fd fa10 	bl	8000b18 <__aeabi_dcmpgt>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00e      	beq.n	800371c <StartTask03+0x45c>
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <StartTask03+0x4b4>)
 8003700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	f7fd f9e6 	bl	8000adc <__aeabi_dcmplt>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <StartTask03+0x45c>
 8003716:	2300      	movs	r3, #0
 8003718:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		for(int i=0;i<4;i++){
 800371c:	2300      	movs	r3, #0
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	e00f      	b.n	8003742 <StartTask03+0x482>
			if(SteDeg[i]>90){Deg2Ste(Xbot_W, 90, i);}//prevent over angle
 8003722:	4a11      	ldr	r2, [pc, #68]	; (8003768 <StartTask03+0x4a8>)
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800372a:	2b5a      	cmp	r3, #90	; 0x5a
 800372c:	dd06      	ble.n	800373c <StartTask03+0x47c>
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	215a      	movs	r1, #90	; 0x5a
 8003736:	2001      	movs	r0, #1
 8003738:	f7fe fca6 	bl	8002088 <Deg2Ste>
		for(int i=0;i<4;i++){
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	3301      	adds	r3, #1
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2b03      	cmp	r3, #3
 8003746:	ddec      	ble.n	8003722 <StartTask03+0x462>
		}
//		SteDeg=rad2deg(ANGLE_VEL);
		//Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL));
//		printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg);
		for(int i=0;i<4;i++){
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	e029      	b.n	80037a2 <StartTask03+0x4e2>
 800374e:	bf00      	nop
 8003750:	20000060 	.word	0x20000060
 8003754:	20000cf8 	.word	0x20000cf8
 8003758:	20000ff0 	.word	0x20000ff0
 800375c:	0801390c 	.word	0x0801390c
 8003760:	2000005c 	.word	0x2000005c
 8003764:	08013918 	.word	0x08013918
 8003768:	20000bcc 	.word	0x20000bcc
 800376c:	08013920 	.word	0x08013920
 8003770:	20000bf8 	.word	0x20000bf8
 8003774:	20000c18 	.word	0x20000c18
			SAngle[i] = (SteDeg[i]/10)+1;
 8003778:	4a89      	ldr	r2, [pc, #548]	; (80039a0 <StartTask03+0x6e0>)
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003780:	4a88      	ldr	r2, [pc, #544]	; (80039a4 <StartTask03+0x6e4>)
 8003782:	fb82 1203 	smull	r1, r2, r2, r3
 8003786:	1092      	asrs	r2, r2, #2
 8003788:	17db      	asrs	r3, r3, #31
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	b21b      	sxth	r3, r3
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3358      	adds	r3, #88	; 0x58
 8003796:	443b      	add	r3, r7
 8003798:	f843 2c50 	str.w	r2, [r3, #-80]
		for(int i=0;i<4;i++){
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	3301      	adds	r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	dde7      	ble.n	8003778 <StartTask03+0x4b8>

//		DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg[0]*100, SERVO_POS, 20);
//		DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg[1]*100, SERVO_POS, 20);
//		DataSetSteering(buf, STMotorID3, Dir_Rot^1, SteDeg[2]*100, SERVO_POS, 20);
//		DataSetSteering(buf, STMotorID4, Dir_Rot^1, SteDeg[3]*100, SERVO_POS, 20);
		DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg[0]*100, SERVO_POS, SAngle[0]);
 80037a8:	4b7d      	ldr	r3, [pc, #500]	; (80039a0 <StartTask03+0x6e0>)
 80037aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	0092      	lsls	r2, r2, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	461a      	mov	r2, r3
 80037b8:	0091      	lsls	r1, r2, #2
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	b299      	uxth	r1, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	460b      	mov	r3, r1
 80037d4:	2100      	movs	r1, #0
 80037d6:	4874      	ldr	r0, [pc, #464]	; (80039a8 <StartTask03+0x6e8>)
 80037d8:	f000 fe1e 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg[1]*100, SERVO_POS, SAngle[1]);
 80037dc:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <StartTask03+0x6e0>)
 80037de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	0092      	lsls	r2, r2, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	461a      	mov	r2, r3
 80037ec:	0091      	lsls	r1, r2, #2
 80037ee:	461a      	mov	r2, r3
 80037f0:	460b      	mov	r3, r1
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	b299      	uxth	r1, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	460b      	mov	r3, r1
 8003808:	2101      	movs	r1, #1
 800380a:	4867      	ldr	r0, [pc, #412]	; (80039a8 <StartTask03+0x6e8>)
 800380c:	f000 fe04 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, Dir_Rot^1, SteDeg[2]*100, SERVO_POS, SAngle[2]);
 8003810:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003814:	f083 0301 	eor.w	r3, r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <StartTask03+0x6e0>)
 800381c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003820:	b29b      	uxth	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	0089      	lsls	r1, r1, #2
 8003826:	440b      	add	r3, r1
 8003828:	4619      	mov	r1, r3
 800382a:	0088      	lsls	r0, r1, #2
 800382c:	4619      	mov	r1, r3
 800382e:	4603      	mov	r3, r0
 8003830:	440b      	add	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	b299      	uxth	r1, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	460b      	mov	r3, r1
 8003842:	2102      	movs	r1, #2
 8003844:	4858      	ldr	r0, [pc, #352]	; (80039a8 <StartTask03+0x6e8>)
 8003846:	f000 fde7 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, Dir_Rot^1, SteDeg[3]*100, SERVO_POS, SAngle[3]);
 800384a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800384e:	f083 0301 	eor.w	r3, r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b52      	ldr	r3, [pc, #328]	; (80039a0 <StartTask03+0x6e0>)
 8003856:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800385a:	b29b      	uxth	r3, r3
 800385c:	4619      	mov	r1, r3
 800385e:	0089      	lsls	r1, r1, #2
 8003860:	440b      	add	r3, r1
 8003862:	4619      	mov	r1, r3
 8003864:	0088      	lsls	r0, r1, #2
 8003866:	4619      	mov	r1, r3
 8003868:	4603      	mov	r3, r0
 800386a:	440b      	add	r3, r1
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	b299      	uxth	r1, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	460b      	mov	r3, r1
 800387c:	2103      	movs	r1, #3
 800387e:	484a      	ldr	r0, [pc, #296]	; (80039a8 <StartTask03+0x6e8>)
 8003880:	f000 fdca 	bl	8004418 <DataSetSteering>
		printf("%d: MM %d\n", osKernelGetTickCount(), SteDeg[0]);
 8003884:	f007 f8c8 	bl	800aa18 <osKernelGetTickCount>
 8003888:	4603      	mov	r3, r0
 800388a:	4a45      	ldr	r2, [pc, #276]	; (80039a0 <StartTask03+0x6e0>)
 800388c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003890:	4619      	mov	r1, r3
 8003892:	4846      	ldr	r0, [pc, #280]	; (80039ac <StartTask03+0x6ec>)
 8003894:	f00b feda 	bl	800f64c <iprintf>
	}

	if(ModeABCD == 3){
 8003898:	4b45      	ldr	r3, [pc, #276]	; (80039b0 <StartTask03+0x6f0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d173      	bne.n	8003988 <StartTask03+0x6c8>
//		SteDeg=rad2deg(ANGLE_VEL);
		for(int i=0;i<4;i++){Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL), i);}
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a4:	e00e      	b.n	80038c4 <StartTask03+0x604>
 80038a6:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8003998 <StartTask03+0x6d8>
 80038aa:	f7fe fc39 	bl	8002120 <rad2deg>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4619      	mov	r1, r3
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	2001      	movs	r0, #1
 80038ba:	f7fe fbe5 	bl	8002088 <Deg2Ste>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	3301      	adds	r3, #1
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	dded      	ble.n	80038a6 <StartTask03+0x5e6>
		//printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg);
		DataSetSteering(buf, STMotorID1, SERVO_CCW, SteDeg[0]*100, SERVO_POS, 20);
 80038ca:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <StartTask03+0x6e0>)
 80038cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	0092      	lsls	r2, r2, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	0091      	lsls	r1, r2, #2
 80038dc:	461a      	mov	r2, r3
 80038de:	460b      	mov	r3, r1
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2214      	movs	r2, #20
 80038e8:	9201      	str	r2, [sp, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	9200      	str	r2, [sp, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	2100      	movs	r1, #0
 80038f2:	482d      	ldr	r0, [pc, #180]	; (80039a8 <StartTask03+0x6e8>)
 80038f4:	f000 fd90 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CW, SteDeg[1]*100, SERVO_POS, 20);
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <StartTask03+0x6e0>)
 80038fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4413      	add	r3, r2
 8003906:	461a      	mov	r2, r3
 8003908:	0091      	lsls	r1, r2, #2
 800390a:	461a      	mov	r2, r3
 800390c:	460b      	mov	r3, r1
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	b29b      	uxth	r3, r3
 8003914:	2214      	movs	r2, #20
 8003916:	9201      	str	r2, [sp, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	9200      	str	r2, [sp, #0]
 800391c:	2200      	movs	r2, #0
 800391e:	2101      	movs	r1, #1
 8003920:	4821      	ldr	r0, [pc, #132]	; (80039a8 <StartTask03+0x6e8>)
 8003922:	f000 fd79 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CW, SteDeg[2]*100, SERVO_POS, 20);
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <StartTask03+0x6e0>)
 8003928:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4413      	add	r3, r2
 8003934:	461a      	mov	r2, r3
 8003936:	0091      	lsls	r1, r2, #2
 8003938:	461a      	mov	r2, r3
 800393a:	460b      	mov	r3, r1
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	b29b      	uxth	r3, r3
 8003942:	2214      	movs	r2, #20
 8003944:	9201      	str	r2, [sp, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	2102      	movs	r1, #2
 800394e:	4816      	ldr	r0, [pc, #88]	; (80039a8 <StartTask03+0x6e8>)
 8003950:	f000 fd62 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CCW, SteDeg[3]*100, SERVO_POS, 20);
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <StartTask03+0x6e0>)
 8003956:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4413      	add	r3, r2
 8003962:	461a      	mov	r2, r3
 8003964:	0091      	lsls	r1, r2, #2
 8003966:	461a      	mov	r2, r3
 8003968:	460b      	mov	r3, r1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2214      	movs	r2, #20
 8003972:	9201      	str	r2, [sp, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	9200      	str	r2, [sp, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	2103      	movs	r1, #3
 800397c:	480a      	ldr	r0, [pc, #40]	; (80039a8 <StartTask03+0x6e8>)
 800397e:	f000 fd4b 	bl	8004418 <DataSetSteering>
		printf("Mode c\n");
 8003982:	480c      	ldr	r0, [pc, #48]	; (80039b4 <StartTask03+0x6f4>)
 8003984:	f00b fee8 	bl	800f758 <puts>
	}

	if(ModeABCD == 4){
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <StartTask03+0x6f0>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b04      	cmp	r3, #4
 800398e:	f040 8084 	bne.w	8003a9a <StartTask03+0x7da>
//		SteDeg=rad2deg(ANGLE_VEL);
		for(int i=0;i<4;i++){Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL), i);}
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	e01e      	b.n	80039d6 <StartTask03+0x716>
 8003998:	ccefcd31 	.word	0xccefcd31
 800399c:	3fe7a426 	.word	0x3fe7a426
 80039a0:	20000bcc 	.word	0x20000bcc
 80039a4:	66666667 	.word	0x66666667
 80039a8:	20000060 	.word	0x20000060
 80039ac:	0801392c 	.word	0x0801392c
 80039b0:	2000005c 	.word	0x2000005c
 80039b4:	08013938 	.word	0x08013938
 80039b8:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8003aa8 <StartTask03+0x7e8>
 80039bc:	f7fe fbb0 	bl	8002120 <rad2deg>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4619      	mov	r1, r3
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fe fb5c 	bl	8002088 <Deg2Ste>
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	3301      	adds	r3, #1
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	2b03      	cmp	r3, #3
 80039da:	dded      	ble.n	80039b8 <StartTask03+0x6f8>
		//DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, SERVO_POS, 20);
		//DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, 2, 250); pre_angle = -1*SteDeg;
		DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg[0]*100, SERVO_POS,20);
 80039dc:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <StartTask03+0x7f0>)
 80039de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	461a      	mov	r2, r3
 80039ec:	0091      	lsls	r1, r2, #2
 80039ee:	461a      	mov	r2, r3
 80039f0:	460b      	mov	r3, r1
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2214      	movs	r2, #20
 80039fa:	9201      	str	r2, [sp, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	9200      	str	r2, [sp, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2100      	movs	r1, #0
 8003a04:	482b      	ldr	r0, [pc, #172]	; (8003ab4 <StartTask03+0x7f4>)
 8003a06:	f000 fd07 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CCW, SteDeg[1]*100, SERVO_POS, 20);
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <StartTask03+0x7f0>)
 8003a0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	0091      	lsls	r1, r2, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2214      	movs	r2, #20
 8003a28:	9201      	str	r2, [sp, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	9200      	str	r2, [sp, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2101      	movs	r1, #1
 8003a32:	4820      	ldr	r0, [pc, #128]	; (8003ab4 <StartTask03+0x7f4>)
 8003a34:	f000 fcf0 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CCW, SteDeg[2]*100, SERVO_POS, 20);
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <StartTask03+0x7f0>)
 8003a3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	461a      	mov	r2, r3
 8003a48:	0091      	lsls	r1, r2, #2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2214      	movs	r2, #20
 8003a56:	9201      	str	r2, [sp, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	9200      	str	r2, [sp, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4814      	ldr	r0, [pc, #80]	; (8003ab4 <StartTask03+0x7f4>)
 8003a62:	f000 fcd9 	bl	8004418 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CW, SteDeg[3]*100, SERVO_POS, 20);
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <StartTask03+0x7f0>)
 8003a68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	0091      	lsls	r1, r2, #2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2214      	movs	r2, #20
 8003a84:	9201      	str	r2, [sp, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	9200      	str	r2, [sp, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2103      	movs	r1, #3
 8003a8e:	4809      	ldr	r0, [pc, #36]	; (8003ab4 <StartTask03+0x7f4>)
 8003a90:	f000 fcc2 	bl	8004418 <DataSetSteering>
//		EndModeD = 0;
		//osDelay(10);
		printf("Mode D\n");
 8003a94:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <StartTask03+0x7f8>)
 8003a96:	f00b fe5f 	bl	800f758 <puts>
	}
	//osDelay(10);
	//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
	DataReadSteering(STMotorID1, 0xA1);
 8003a9a:	21a1      	movs	r1, #161	; 0xa1
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f000 fd3d 	bl	800451c <DataReadSteering>
  {
 8003aa2:	e591      	b.n	80035c8 <StartTask03+0x308>
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	ccefcd31 	.word	0xccefcd31
 8003aac:	3fe7a426 	.word	0x3fe7a426
 8003ab0:	20000bcc 	.word	0x20000bcc
 8003ab4:	20000060 	.word	0x20000060
 8003ab8:	08013940 	.word	0x08013940

08003abc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8003ac4:	f006 ffa8 	bl	800aa18 <osKernelGetTickCount>
 8003ac8:	60f8      	str	r0, [r7, #12]

	static int temp = 0;
	////////////////////////////////

	ws2812AllColor(70,70,70);//r, g, b
 8003aca:	2246      	movs	r2, #70	; 0x46
 8003acc:	2146      	movs	r1, #70	; 0x46
 8003ace:	2046      	movs	r0, #70	; 0x46
 8003ad0:	f7fd fa14 	bl	8000efc <ws2812AllColor>
	ws2812NumOn(NUM_NPLED);
 8003ad4:	201d      	movs	r0, #29
 8003ad6:	f7fd f9e9 	bl	8000eac <ws2812NumOn>

  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003ae0:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f007 f94b 	bl	800ad7e <osDelayUntil>

		temp++;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <StartTask04+0x54>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <StartTask04+0x54>)
 8003af0:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <StartTask04+0x54>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d005      	beq.n	8003b06 <StartTask04+0x4a>
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	dced      	bgt.n	8003ada <StartTask04+0x1e>
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d003      	beq.n	8003b0a <StartTask04+0x4e>
 8003b02:	2b02      	cmp	r3, #2
				break;

			case 2:
				//printf("case2\n");
				//ws2812SetColor(7,0,0,1);//index, r, g, b
				break;
 8003b04:	e002      	b.n	8003b0c <StartTask04+0x50>

			case 3:
				//printf("case3\n");
				//ws2812SetColor(6,0,0,1);//index, r, g, b
				break;
 8003b06:	bf00      	nop
 8003b08:	e7e7      	b.n	8003ada <StartTask04+0x1e>
				break;
 8003b0a:	bf00      	nop
		lastTime += PERIOD_NP_LED;
 8003b0c:	e7e5      	b.n	8003ada <StartTask04+0x1e>
 8003b0e:	bf00      	nop
 8003b10:	20000c9c 	.word	0x20000c9c

08003b14 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8003b1c:	f006 ff7c 	bl	800aa18 <osKernelGetTickCount>
 8003b20:	60f8      	str	r0, [r7, #12]

	fanInit();
 8003b22:	f7fd fdbd 	bl	80016a0 <fanInit>


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003b2c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f007 f925 	bl	800ad7e <osDelayUntil>
	fanOn(100);
 8003b34:	2064      	movs	r0, #100	; 0x64
 8003b36:	f7fd fdbd 	bl	80016b4 <fanOn>
	lastTime += PERIOD_FAN;
 8003b3a:	e7f4      	b.n	8003b26 <StartTask05+0x12>

08003b3c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
//	uint8_t EndInit = 0;
	//uint32_t lastTime = osKernelGetTickCount();
	//osDelay(10);//for printf();
	printf("StartTask06 %d: \n", PS_SIGx_Pin);
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <StartTask06+0x170>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4859      	ldr	r0, [pc, #356]	; (8003cb0 <StartTask06+0x174>)
 8003b4c:	f00b fd7e 	bl	800f64c <iprintf>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8003b50:	200a      	movs	r0, #10
 8003b52:	f007 f8f9 	bl	800ad48 <osDelay>
	//  printf("%d: t06\n", osKernelGetTickCount());
	if(PS_SIGx_Pin&1){//1ch init
 8003b56:	4b55      	ldr	r3, [pc, #340]	; (8003cac <StartTask06+0x170>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01a      	beq.n	8003b98 <StartTask06+0x5c>
		PS_SIGx_Pin &= ~(1); printf(" PS_SIG1_stop.\n");
 8003b62:	4b52      	ldr	r3, [pc, #328]	; (8003cac <StartTask06+0x170>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <StartTask06+0x170>)
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	4850      	ldr	r0, [pc, #320]	; (8003cb4 <StartTask06+0x178>)
 8003b72:	f00b fdf1 	bl	800f758 <puts>
		EndInit |= 1;
 8003b76:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <StartTask06+0x17c>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b4d      	ldr	r3, [pc, #308]	; (8003cb8 <StartTask06+0x17c>)
 8003b82:	701a      	strb	r2, [r3, #0]
		DataSetSteering(buf, 0, SERVO_CCW, 0, 0, 30);
 8003b84:	231e      	movs	r3, #30
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2100      	movs	r1, #0
 8003b92:	484a      	ldr	r0, [pc, #296]	; (8003cbc <StartTask06+0x180>)
 8003b94:	f000 fc40 	bl	8004418 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}

	if(PS_SIGx_Pin&2){//2ch init
 8003b98:	4b44      	ldr	r3, [pc, #272]	; (8003cac <StartTask06+0x170>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01a      	beq.n	8003bda <StartTask06+0x9e>
		PS_SIGx_Pin &= ~(2); printf(" PS_SIG2_stop.\n");
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <StartTask06+0x170>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f023 0302 	bic.w	r3, r3, #2
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <StartTask06+0x170>)
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	4843      	ldr	r0, [pc, #268]	; (8003cc0 <StartTask06+0x184>)
 8003bb4:	f00b fdd0 	bl	800f758 <puts>
		DataSetSteering(buf, 1, SERVO_CCW, 0, 0, 30);
 8003bb8:	231e      	movs	r3, #30
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	483d      	ldr	r0, [pc, #244]	; (8003cbc <StartTask06+0x180>)
 8003bc8:	f000 fc26 	bl	8004418 <DataSetSteering>
		EndInit |= 2;
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <StartTask06+0x17c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <StartTask06+0x17c>)
 8003bd8:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}
	if(PS_SIGx_Pin&4){//3ch init
 8003bda:	4b34      	ldr	r3, [pc, #208]	; (8003cac <StartTask06+0x170>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01a      	beq.n	8003c1c <StartTask06+0xe0>
		PS_SIGx_Pin &= ~(4); printf(" PS_SIG3_stop.\n");
 8003be6:	4b31      	ldr	r3, [pc, #196]	; (8003cac <StartTask06+0x170>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <StartTask06+0x170>)
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	4833      	ldr	r0, [pc, #204]	; (8003cc4 <StartTask06+0x188>)
 8003bf6:	f00b fdaf 	bl	800f758 <puts>
		DataSetSteering(buf, 2, SERVO_CCW, 0, 0, 30);
 8003bfa:	231e      	movs	r3, #30
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	2201      	movs	r2, #1
 8003c06:	2102      	movs	r1, #2
 8003c08:	482c      	ldr	r0, [pc, #176]	; (8003cbc <StartTask06+0x180>)
 8003c0a:	f000 fc05 	bl	8004418 <DataSetSteering>
		EndInit |= 4;
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <StartTask06+0x17c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <StartTask06+0x17c>)
 8003c1a:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}	if(PS_SIGx_Pin&8){//4ch init
 8003c1c:	4b23      	ldr	r3, [pc, #140]	; (8003cac <StartTask06+0x170>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <StartTask06+0x12e>
		PS_SIGx_Pin &= ~(8); printf(" PS_SIG4_stop.\n");
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <StartTask06+0x170>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f023 0308 	bic.w	r3, r3, #8
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <StartTask06+0x170>)
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	4824      	ldr	r0, [pc, #144]	; (8003cc8 <StartTask06+0x18c>)
 8003c38:	f00b fd8e 	bl	800f758 <puts>
		DataSetSteering(buf, 3, SERVO_CCW, 0, 0, 30);
 8003c3c:	231e      	movs	r3, #30
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	2201      	movs	r2, #1
 8003c48:	2103      	movs	r1, #3
 8003c4a:	481c      	ldr	r0, [pc, #112]	; (8003cbc <StartTask06+0x180>)
 8003c4c:	f000 fbe4 	bl	8004418 <DataSetSteering>
		EndInit |= 8;
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <StartTask06+0x17c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <StartTask06+0x17c>)
 8003c5c:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
		printf("EndInit %d\n", EndInit);
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <StartTask06+0x17c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	4619      	mov	r1, r3
 8003c64:	4819      	ldr	r0, [pc, #100]	; (8003ccc <StartTask06+0x190>)
 8003c66:	f00b fcf1 	bl	800f64c <iprintf>
	}
	if(EndInit == 15) {
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <StartTask06+0x17c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	f47f af6e 	bne.w	8003b50 <StartTask06+0x14>

		GPIO_disableirq();
 8003c74:	f000 f9bc 	bl	8003ff0 <GPIO_disableirq>
		STinitdone++;
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <StartTask06+0x194>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <StartTask06+0x194>)
 8003c82:	701a      	strb	r2, [r3, #0]
		printf("%d: EndInit == 15. %d, %d\n", osKernelGetTickCount(), osThreadFlagsWait(1, 0, osWaitForever), osThreadFlagsGet());
 8003c84:	f006 fec8 	bl	800aa18 <osKernelGetTickCount>
 8003c88:	4604      	mov	r4, r0
 8003c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8e:	2100      	movs	r1, #0
 8003c90:	2001      	movs	r0, #1
 8003c92:	f006 ffd8 	bl	800ac46 <osThreadFlagsWait>
 8003c96:	4605      	mov	r5, r0
 8003c98:	f006 ffb4 	bl	800ac04 <osThreadFlagsGet>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	480c      	ldr	r0, [pc, #48]	; (8003cd4 <StartTask06+0x198>)
 8003ca4:	f00b fcd2 	bl	800f64c <iprintf>
	  osDelay(10);
 8003ca8:	e752      	b.n	8003b50 <StartTask06+0x14>
 8003caa:	bf00      	nop
 8003cac:	20000bc8 	.word	0x20000bc8
 8003cb0:	08013948 	.word	0x08013948
 8003cb4:	0801395c 	.word	0x0801395c
 8003cb8:	20000c64 	.word	0x20000c64
 8003cbc:	20000060 	.word	0x20000060
 8003cc0:	0801396c 	.word	0x0801396c
 8003cc4:	0801397c 	.word	0x0801397c
 8003cc8:	0801398c 	.word	0x0801398c
 8003ccc:	0801399c 	.word	0x0801399c
 8003cd0:	20000bd5 	.word	0x20000bd5
 8003cd4:	080139a8 	.word	0x080139a8

08003cd8 <VelStopTimerCallback>:
  /* USER CODE END StartTask06 */
}

/* VelStopTimerCallback function */
void VelStopTimerCallback(void *argument)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VelStopTimerCallback */

	//must be check this function
	int32_t TmpFlag = Stopflagcheck(Xbot_R, 1);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fe f990 	bl	8002008 <Stopflagcheck>
 8003ce8:	60f8      	str	r0, [r7, #12]

	printf("%d: VelStopTimer:%d %d\n", osKernelGetTickCount(),TmpFlag,Pre_Stop_flag);
 8003cea:	f006 fe95 	bl	800aa18 <osKernelGetTickCount>
 8003cee:	4601      	mov	r1, r0
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <VelStopTimerCallback+0x58>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	480f      	ldr	r0, [pc, #60]	; (8003d34 <VelStopTimerCallback+0x5c>)
 8003cf8:	f00b fca8 	bl	800f64c <iprintf>
	if(Pre_Stop_flag != TmpFlag){
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <VelStopTimerCallback+0x58>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d003      	beq.n	8003d0e <VelStopTimerCallback+0x36>
		Pre_Stop_flag = TmpFlag;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <VelStopTimerCallback+0x58>)
 8003d0a:	6013      	str	r3, [r2, #0]
	}
	else {Stopflagcheck(Xbot_W, 0);
	printf("%d: VelStop2Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
	}
  /* USER CODE END VelStopTimerCallback */
}
 8003d0c:	e00c      	b.n	8003d28 <VelStopTimerCallback+0x50>
	else {Stopflagcheck(Xbot_W, 0);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	2001      	movs	r0, #1
 8003d12:	f7fe f979 	bl	8002008 <Stopflagcheck>
	printf("%d: VelStop2Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
 8003d16:	f006 fe7f 	bl	800aa18 <osKernelGetTickCount>
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <VelStopTimerCallback+0x60>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4806      	ldr	r0, [pc, #24]	; (8003d3c <VelStopTimerCallback+0x64>)
 8003d24:	f00b fc92 	bl	800f64c <iprintf>
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000bdc 	.word	0x20000bdc
 8003d34:	080139c4 	.word	0x080139c4
 8003d38:	20000bd8 	.word	0x20000bd8
 8003d3c:	080139dc 	.word	0x080139dc

08003d40 <EndModeDTimerCallback>:

/* EndModeDTimerCallback function */
void EndModeDTimerCallback(void *argument)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EndModeDTimerCallback */
	//EndModeD = 1;
	timerflag = 1;
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <EndModeDTimerCallback+0x20>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
	EndMode = 1;
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <EndModeDTimerCallback+0x24>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EndModeDTimerCallback */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	2000005d 	.word	0x2000005d
 8003d64:	2000005e 	.word	0x2000005e

08003d68 <SendCanTimerCallback>:

/* SendCanTimerCallback function */
void SendCanTimerCallback(void *argument)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendCanTimerCallback */
	//send can message by 10hz
	Vel_PDOMsg(1, TxPDO0, Tar_cmd_FL, Tar_cmd_FR);
 8003d70:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <SendCanTimerCallback+0xc0>)
 8003d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <SendCanTimerCallback+0xc4>)
 8003d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d7e:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7fd fb72 	bl	800146c <Vel_PDOMsg>
	Vel_PDOMsg(2, TxPDO0, Tar_cmd_RL, Tar_cmd_RR);
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <SendCanTimerCallback+0xc8>)
 8003d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <SendCanTimerCallback+0xcc>)
 8003d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d96:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	f7fd fb66 	bl	800146c <Vel_PDOMsg>


	debugcansend(candbg);
 8003da0:	4825      	ldr	r0, [pc, #148]	; (8003e38 <SendCanTimerCallback+0xd0>)
 8003da2:	f7fd fca5 	bl	80016f0 <debugcansend>
	for(int i=0;i<8;i++){candbg[i]=0;}
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e007      	b.n	8003dbc <SendCanTimerCallback+0x54>
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <SendCanTimerCallback+0xd0>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3301      	adds	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b07      	cmp	r3, #7
 8003dc0:	ddf4      	ble.n	8003dac <SendCanTimerCallback+0x44>
	//printf("%d: angle_rad_c %d %d %d %f %f %d\n", osKernelGetTickCount(), rad2deg(angle_rad_c), rad2deg(angle_rad_i), rad2deg(angle_rad_o), angle_rad_i, angle_rad_o, Tar_cmd_FL);
	printf("%d: SteDeg %d %d %d %d\n", osKernelGetTickCount(), SteDeg[0], SteDeg[1], SteDeg[2], SteDeg[3]);
 8003dc2:	f006 fe29 	bl	800aa18 <osKernelGetTickCount>
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <SendCanTimerCallback+0xd4>)
 8003dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <SendCanTimerCallback+0xd4>)
 8003dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003dd6:	461c      	mov	r4, r3
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <SendCanTimerCallback+0xd4>)
 8003dda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <SendCanTimerCallback+0xd4>)
 8003de2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	9200      	str	r2, [sp, #0]
 8003dea:	4623      	mov	r3, r4
 8003dec:	4602      	mov	r2, r0
 8003dee:	4814      	ldr	r0, [pc, #80]	; (8003e40 <SendCanTimerCallback+0xd8>)
 8003df0:	f00b fc2c 	bl	800f64c <iprintf>
	sendCan(0x7D1, sendcanbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
 8003df4:	2300      	movs	r3, #0
 8003df6:	2208      	movs	r2, #8
 8003df8:	4912      	ldr	r1, [pc, #72]	; (8003e44 <SendCanTimerCallback+0xdc>)
 8003dfa:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8003dfe:	f7fd f9a7 	bl	8001150 <sendCan>
	for(int i=0;i<8;i++){canbuf[i]=0;}
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	e007      	b.n	8003e18 <SendCanTimerCallback+0xb0>
 8003e08:	4a0f      	ldr	r2, [pc, #60]	; (8003e48 <SendCanTimerCallback+0xe0>)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b07      	cmp	r3, #7
 8003e1c:	ddf4      	ble.n	8003e08 <SendCanTimerCallback+0xa0>
  /* USER CODE END SendCanTimerCallback */
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}
 8003e28:	20000c48 	.word	0x20000c48
 8003e2c:	20000c4a 	.word	0x20000c4a
 8003e30:	20000c4c 	.word	0x20000c4c
 8003e34:	20000c4e 	.word	0x20000c4e
 8003e38:	20000bc0 	.word	0x20000bc0
 8003e3c:	20000bcc 	.word	0x20000bcc
 8003e40:	080139f8 	.word	0x080139f8
 8003e44:	20000c58 	.word	0x20000c58
 8003e48:	20000c50 	.word	0x20000c50

08003e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e52:	f107 0314 	add.w	r3, r7, #20
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a5c      	ldr	r2, [pc, #368]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a55      	ldr	r2, [pc, #340]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	4a4e      	ldr	r2, [pc, #312]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	4b48      	ldr	r3, [pc, #288]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a47      	ldr	r2, [pc, #284]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec6:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <MX_GPIO_Init+0x190>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8003ef4:	483a      	ldr	r0, [pc, #232]	; (8003fe0 <MX_GPIO_Init+0x194>)
 8003ef6:	f003 f837 	bl	8006f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8003efa:	2200      	movs	r2, #0
 8003efc:	f244 0110 	movw	r1, #16400	; 0x4010
 8003f00:	4838      	ldr	r0, [pc, #224]	; (8003fe4 <MX_GPIO_Init+0x198>)
 8003f02:	f003 f831 	bl	8006f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2104      	movs	r1, #4
 8003f0a:	4837      	ldr	r0, [pc, #220]	; (8003fe8 <MX_GPIO_Init+0x19c>)
 8003f0c:	f003 f82c 	bl	8006f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8003f10:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8003f14:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	4619      	mov	r1, r3
 8003f28:	482d      	ldr	r0, [pc, #180]	; (8003fe0 <MX_GPIO_Init+0x194>)
 8003f2a:	f002 fe69 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f32:	2303      	movs	r3, #3
 8003f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4827      	ldr	r0, [pc, #156]	; (8003fe0 <MX_GPIO_Init+0x194>)
 8003f42:	f002 fe5d 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin;
 8003f46:	2370      	movs	r3, #112	; 0x70
 8003f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f4a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4824      	ldr	r0, [pc, #144]	; (8003fec <MX_GPIO_Init+0x1a0>)
 8003f5c:	f002 fe50 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS_SIG4_Pin;
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f64:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS_SIG4_GPIO_Port, &GPIO_InitStruct);
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	4619      	mov	r1, r3
 8003f74:	481d      	ldr	r0, [pc, #116]	; (8003fec <MX_GPIO_Init+0x1a0>)
 8003f76:	f002 fe43 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8003f7a:	f244 0310 	movw	r3, #16400	; 0x4010
 8003f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f80:	2301      	movs	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4619      	mov	r1, r3
 8003f92:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <MX_GPIO_Init+0x198>)
 8003f94:	f002 fe34 	bl	8006c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f98:	2304      	movs	r3, #4
 8003f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4619      	mov	r1, r3
 8003fae:	480e      	ldr	r0, [pc, #56]	; (8003fe8 <MX_GPIO_Init+0x19c>)
 8003fb0:	f002 fe26 	bl	8006c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2105      	movs	r1, #5
 8003fb8:	200a      	movs	r0, #10
 8003fba:	f002 f9e7 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003fbe:	200a      	movs	r0, #10
 8003fc0:	f002 fa00 	bl	80063c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2105      	movs	r1, #5
 8003fc8:	2017      	movs	r0, #23
 8003fca:	f002 f9df 	bl	800638c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003fce:	2017      	movs	r0, #23
 8003fd0:	f002 f9f8 	bl	80063c4 <HAL_NVIC_EnableIRQ>

}
 8003fd4:	bf00      	nop
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40020800 	.word	0x40020800
 8003fe4:	40020400 	.word	0x40020400
 8003fe8:	40020c00 	.word	0x40020c00
 8003fec:	40020000 	.word	0x40020000

08003ff0 <GPIO_disableirq>:

/* USER CODE BEGIN 2 */
void GPIO_disableirq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8003ff4:	200a      	movs	r0, #10
 8003ff6:	f002 f9f3 	bl	80063e0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8003ffa:	2017      	movs	r0, #23
 8003ffc:	f002 f9f0 	bl	80063e0 <HAL_NVIC_DisableIRQ>
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}

08004004 <GPIO_enableirq>:

void GPIO_enableirq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8004008:	2200      	movs	r2, #0
 800400a:	2105      	movs	r1, #5
 800400c:	200a      	movs	r0, #10
 800400e:	f002 f9bd 	bl	800638c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004012:	200a      	movs	r0, #10
 8004014:	f002 f9d6 	bl	80063c4 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004018:	2200      	movs	r2, #0
 800401a:	2105      	movs	r1, #5
 800401c:	2017      	movs	r0, #23
 800401e:	f002 f9b5 	bl	800638c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004022:	2017      	movs	r0, #23
 8004024:	f002 f9ce 	bl	80063c4 <HAL_NVIC_EnableIRQ>
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}

0800402c <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8004030:	4b18      	ldr	r3, [pc, #96]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <MX_I2C1_SMBUS_Init+0x6c>)
 8004034:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <MX_I2C1_SMBUS_Init+0x70>)
 800403a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004044:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004048:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004058:	2200      	movs	r2, #0
 800405a:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004064:	2200      	movs	r2, #0
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 800406a:	2202      	movs	r2, #2
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800406e:	4809      	ldr	r0, [pc, #36]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004070:	f003 fc50 	bl	8007914 <HAL_SMBUS_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 800407a:	f000 f93f 	bl	80042fc <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <MX_I2C1_SMBUS_Init+0x68>)
 8004080:	f003 fcfe 	bl	8007a80 <HAL_SMBUS_EnableAlert_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800408a:	f000 f937 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000ca0 	.word	0x20000ca0
 8004098:	40005400 	.word	0x40005400
 800409c:	000186a0 	.word	0x000186a0

080040a0 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_SMBUS_MspInit+0x84>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d12b      	bne.n	800411a <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_SMBUS_MspInit+0x88>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_SMBUS_MspInit+0x88>)
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	6313      	str	r3, [r2, #48]	; 0x30
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_SMBUS_MspInit+0x88>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040de:	23e0      	movs	r3, #224	; 0xe0
 80040e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e2:	2312      	movs	r3, #18
 80040e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ea:	2303      	movs	r3, #3
 80040ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040ee:	2304      	movs	r3, #4
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	4619      	mov	r1, r3
 80040f8:	480c      	ldr	r0, [pc, #48]	; (800412c <HAL_SMBUS_MspInit+0x8c>)
 80040fa:	f002 fd81 	bl	8006c00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_SMBUS_MspInit+0x88>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <HAL_SMBUS_MspInit+0x88>)
 8004108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_SMBUS_MspInit+0x88>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800411a:	bf00      	nop
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40005400 	.word	0x40005400
 8004128:	40023800 	.word	0x40023800
 800412c:	40020400 	.word	0x40020400

08004130 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004138:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800413c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004148:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800414c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004150:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004158:	e000      	b.n	800415c <ITM_SendChar+0x2c>
    {
      __NOP();
 800415a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800415c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f9      	beq.n	800415a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004166:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t *)ptr, (uint16_t)len);
//	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
//	return (len);
//
	for(int i = 0; i < len; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e009      	b.n	80041a4 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	60ba      	str	r2, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ffc9 	bl	8004130 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dbf1      	blt.n	8004190 <_write+0x12>
	}
	return len;
 80041ac:	687b      	ldr	r3, [r7, #4]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041ba:	f001 f90d 	bl	80053d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);//must be for stabilization of EXTI
 80041be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041c2:	f001 f94b 	bl	800545c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041c6:	f000 f81d 	bl	8004204 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041ca:	f7ff fe3f 	bl	8003e4c <MX_GPIO_Init>
  GPIO_disableirq();
 80041ce:	f7ff ff0f 	bl	8003ff0 <GPIO_disableirq>
  MX_CAN1_Init();
 80041d2:	f7fc fedd 	bl	8000f90 <MX_CAN1_Init>
  CAN_disableirq();
 80041d6:	f7fc ff61 	bl	800109c <CAN_disableirq>
  MX_TIM1_Init();
 80041da:	f000 fbb5 	bl	8004948 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 80041de:	f7ff ff25 	bl	800402c <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 80041e2:	f7fd fa07 	bl	80015f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80041e6:	f000 ffb1 	bl	800514c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80041ea:	f000 ff85 	bl	80050f8 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80041ee:	f000 fcd9 	bl	8004ba4 <MX_TIM8_Init>
  MX_TIM3_Init();
 80041f2:	f000 fc5b 	bl	8004aac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80041f6:	f006 fbc5 	bl	800a984 <osKernelInitialize>
  MX_FREERTOS_Init();
 80041fa:	f7fe f803 	bl	8002204 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80041fe:	f006 fbe5 	bl	800a9cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004202:	e7fe      	b.n	8004202 <main+0x4c>

08004204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b094      	sub	sp, #80	; 0x50
 8004208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800420a:	f107 0320 	add.w	r3, r7, #32
 800420e:	2230      	movs	r2, #48	; 0x30
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f00a fd13 	bl	800ec3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004218:	f107 030c 	add.w	r3, r7, #12
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <SystemClock_Config+0xcc>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <SystemClock_Config+0xcc>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	6413      	str	r3, [r2, #64]	; 0x40
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <SystemClock_Config+0xcc>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004244:	2300      	movs	r3, #0
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <SystemClock_Config+0xd0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <SystemClock_Config+0xd0>)
 800424e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <SystemClock_Config+0xd0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004260:	2301      	movs	r3, #1
 8004262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800426a:	2302      	movs	r3, #2
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800426e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004274:	2306      	movs	r3, #6
 8004276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004278:	23a8      	movs	r3, #168	; 0xa8
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800427c:	2302      	movs	r3, #2
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004280:	2304      	movs	r3, #4
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004284:	f107 0320 	add.w	r3, r7, #32
 8004288:	4618      	mov	r0, r3
 800428a:	f002 feb9 	bl	8007000 <HAL_RCC_OscConfig>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004294:	f000 f832 	bl	80042fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004298:	230f      	movs	r3, #15
 800429a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800429c:	2302      	movs	r3, #2
 800429e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	2105      	movs	r1, #5
 80042b6:	4618      	mov	r0, r3
 80042b8:	f003 f91a 	bl	80074f0 <HAL_RCC_ClockConfig>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80042c2:	f000 f81b 	bl	80042fc <Error_Handler>
  }
}
 80042c6:	bf00      	nop
 80042c8:	3750      	adds	r7, #80	; 0x50
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000

080042d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042ea:	f001 f897 	bl	800541c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40001000 	.word	0x40001000

080042fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004300:	b672      	cpsid	i
}
 8004302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004304:	e7fe      	b.n	8004304 <Error_Handler+0x8>
	...

08004308 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <HAL_UART_RxCpltCallback+0x3c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d109      	bne.n	800432e <HAL_UART_RxCpltCallback+0x26>
		printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 800431a:	220c      	movs	r2, #12
 800431c:	490a      	ldr	r1, [pc, #40]	; (8004348 <HAL_UART_RxCpltCallback+0x40>)
 800431e:	480b      	ldr	r0, [pc, #44]	; (800434c <HAL_UART_RxCpltCallback+0x44>)
 8004320:	f005 f9fd 	bl	800971e <HAL_UART_Receive_IT>
 8004324:	4603      	mov	r3, r0
 8004326:	4619      	mov	r1, r3
 8004328:	4809      	ldr	r0, [pc, #36]	; (8004350 <HAL_UART_RxCpltCallback+0x48>)
 800432a:	f00b f98f 	bl	800f64c <iprintf>

	}//SET INTERRUPT
	flag_rx = 1;
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_UART_RxCpltCallback+0x4c>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8004334:	4808      	ldr	r0, [pc, #32]	; (8004358 <HAL_UART_RxCpltCallback+0x50>)
 8004336:	f00b fa0f 	bl	800f758 <puts>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40004800 	.word	0x40004800
 8004348:	20000cf8 	.word	0x20000cf8
 800434c:	20000ff0 	.word	0x20000ff0
 8004350:	08013a10 	.word	0x08013a10
 8004354:	20000cf4 	.word	0x20000cf4
 8004358:	08013a24 	.word	0x08013a24

0800435c <ServoMotor_write>:

void ServoMotor_write(const uint8_t* str)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8004364:	2201      	movs	r2, #1
 8004366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800436a:	4815      	ldr	r0, [pc, #84]	; (80043c0 <ServoMotor_write+0x64>)
 800436c:	f002 fdfc 	bl	8006f68 <HAL_GPIO_WritePin>
    if(Read_flag == 1){
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <ServoMotor_write+0x68>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d10c      	bne.n	8004392 <ServoMotor_write+0x36>
    	HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
 8004378:	2027      	movs	r0, #39	; 0x27
 800437a:	f002 f831 	bl	80063e0 <HAL_NVIC_DisableIRQ>
    	HAL_UART_Transmit(&huart3, str, 6, 100);
 800437e:	2364      	movs	r3, #100	; 0x64
 8004380:	2206      	movs	r2, #6
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4810      	ldr	r0, [pc, #64]	; (80043c8 <ServoMotor_write+0x6c>)
 8004386:	f005 f938 	bl	80095fa <HAL_UART_Transmit>
    	HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
 800438a:	2027      	movs	r0, #39	; 0x27
 800438c:	f002 f81a 	bl	80063c4 <HAL_NVIC_EnableIRQ>
 8004390:	e00b      	b.n	80043aa <ServoMotor_write+0x4e>
    }
    else {
    	HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
 8004392:	2027      	movs	r0, #39	; 0x27
 8004394:	f002 f824 	bl	80063e0 <HAL_NVIC_DisableIRQ>
    	HAL_UART_Transmit(&huart3, str, SERVO_BUFLEN, 100);
 8004398:	2364      	movs	r3, #100	; 0x64
 800439a:	220b      	movs	r2, #11
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	480a      	ldr	r0, [pc, #40]	; (80043c8 <ServoMotor_write+0x6c>)
 80043a0:	f005 f92b 	bl	80095fa <HAL_UART_Transmit>
    	HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
 80043a4:	2027      	movs	r0, #39	; 0x27
 80043a6:	f002 f80d 	bl	80063c4 <HAL_NVIC_EnableIRQ>
    }

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80043aa:	2200      	movs	r2, #0
 80043ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043b0:	4803      	ldr	r0, [pc, #12]	; (80043c0 <ServoMotor_write+0x64>)
 80043b2:	f002 fdd9 	bl	8006f68 <HAL_GPIO_WritePin>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40020400 	.word	0x40020400
 80043c4:	20000d04 	.word	0x20000d04
 80043c8:	20000ff0 	.word	0x20000ff0

080043cc <ServoMotor_writeDMA>:

void ServoMotor_writeDMA(const uint8_t* str)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 80043d4:	2201      	movs	r2, #1
 80043d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043da:	480d      	ldr	r0, [pc, #52]	; (8004410 <ServoMotor_writeDMA+0x44>)
 80043dc:	f002 fdc4 	bl	8006f68 <HAL_GPIO_WritePin>
    //osDelay(6);//because transmit_DMA
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 80043e0:	2230      	movs	r2, #48	; 0x30
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <ServoMotor_writeDMA+0x48>)
 80043e6:	f005 f9cb 	bl	8009780 <HAL_UART_Transmit_DMA>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <ServoMotor_writeDMA+0x28>
 80043f0:	f7ff ff84 	bl	80042fc <Error_Handler>
    osDelay(6);//because transmit_DMA
 80043f4:	2006      	movs	r0, #6
 80043f6:	f006 fca7 	bl	800ad48 <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80043fa:	2200      	movs	r2, #0
 80043fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004400:	4803      	ldr	r0, [pc, #12]	; (8004410 <ServoMotor_writeDMA+0x44>)
 8004402:	f002 fdb1 	bl	8006f68 <HAL_GPIO_WritePin>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40020400 	.word	0x40020400
 8004414:	20000ff0 	.word	0x20000ff0

08004418 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const uint8_t* str, uint8_t id, uint8_t direction, unsigned short position, uint8_t init, uint8_t speed)
{
 8004418:	b490      	push	{r4, r7}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4603      	mov	r3, r0
 8004428:	70fb      	strb	r3, [r7, #3]
 800442a:	460b      	mov	r3, r1
 800442c:	70bb      	strb	r3, [r7, #2]
 800442e:	4613      	mov	r3, r2
 8004430:	803b      	strh	r3, [r7, #0]
	uint8_t buf[12];

    buf[0]=0xFF;//header
 8004432:	23ff      	movs	r3, #255	; 0xff
 8004434:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8004436:	23fe      	movs	r3, #254	; 0xfe
 8004438:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 800443e:	2306      	movs	r3, #6
 8004440:	72fb      	strb	r3, [r7, #11]
    if(init == 2){buf[3]=0x07;}
 8004442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d101      	bne.n	800444e <DataSetSteering+0x36>
 800444a:	2307      	movs	r3, #7
 800444c:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 800444e:	2300      	movs	r3, #0
 8004450:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8004452:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004456:	3302      	adds	r3, #2
 8004458:	b2db      	uxtb	r3, r3
 800445a:	737b      	strb	r3, [r7, #13]
    if(init == 2){buf[5]=0x01;}
 800445c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d101      	bne.n	8004468 <DataSetSteering+0x50>
 8004464:	2301      	movs	r3, #1
 8004466:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 8004468:	78bb      	ldrb	r3, [r7, #2]
 800446a:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 800446c:	883b      	ldrh	r3, [r7, #0]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b29b      	uxth	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 8004476:	883b      	ldrh	r3, [r7, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	743b      	strb	r3, [r7, #16]
    //printf("%d: speed0 %d\n", osKernelGetTickCount(), init);
    if(init == 1){buf[9]=STOP_SPEED;buf[10]=0x00; }//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 800447c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d104      	bne.n	800448e <DataSetSteering+0x76>
 8004484:	2303      	movs	r3, #3
 8004486:	747b      	strb	r3, [r7, #17]
 8004488:	2300      	movs	r3, #0
 800448a:	74bb      	strb	r3, [r7, #18]
 800448c:	e012      	b.n	80044b4 <DataSetSteering+0x9c>
    else if(init == 0) {buf[9]=speed;buf[10]=0x00; }//speed, position second = 3s
 800448e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <DataSetSteering+0x8a>
 8004496:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800449a:	747b      	strb	r3, [r7, #17]
 800449c:	2300      	movs	r3, #0
 800449e:	74bb      	strb	r3, [r7, #18]
 80044a0:	e008      	b.n	80044b4 <DataSetSteering+0x9c>
    else if(init == 2) {buf[9]=0;buf[10]=speed; }//speed, position second = 3s
 80044a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d104      	bne.n	80044b4 <DataSetSteering+0x9c>
 80044aa:	2300      	movs	r3, #0
 80044ac:	747b      	strb	r3, [r7, #17]
 80044ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044b2:	74bb      	strb	r3, [r7, #18]
    //buf[10]=0x00;//reservation
    buf[11]=0x00;//reservation
 80044b4:	2300      	movs	r3, #0
 80044b6:	74fb      	strb	r3, [r7, #19]
    //printf("%d: DSS %d %d %d\n", osKernelGetTickCount(), speed, buf[9], buf[10]);
    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 80044b8:	2302      	movs	r3, #2
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e00d      	b.n	80044da <DataSetSteering+0xc2>
 80044be:	f107 0208 	add.w	r2, r7, #8
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <DataSetSteering+0x100>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <DataSetSteering+0x100>)
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3301      	adds	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b0a      	cmp	r3, #10
 80044de:	ddee      	ble.n	80044be <DataSetSteering+0xa6>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <DataSetSteering+0x100>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <DataSetSteering+0x100>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4413      	add	r3, r2
 8004500:	461c      	mov	r4, r3
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004508:	6020      	str	r0, [r4, #0]
 800450a:	6061      	str	r1, [r4, #4]
 800450c:	60a2      	str	r2, [r4, #8]

}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bc90      	pop	{r4, r7}
 8004516:	4770      	bx	lr
 8004518:	20000cf0 	.word	0x20000cf0

0800451c <DataReadSteering>:

void DataReadSteering(uint8_t id, uint8_t mode)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	460a      	mov	r2, r1
 8004526:	71fb      	strb	r3, [r7, #7]
 8004528:	4613      	mov	r3, r2
 800452a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[6];

	buf[0]=0xFF;//header
 800452c:	23ff      	movs	r3, #255	; 0xff
 800452e:	733b      	strb	r3, [r7, #12]
	buf[1]=0xFE;//header
 8004530:	23fe      	movs	r3, #254	; 0xfe
 8004532:	737b      	strb	r3, [r7, #13]
	buf[2]=id;//id fixed
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	73bb      	strb	r3, [r7, #14]
	buf[3]=0x02;//length
 8004538:	2302      	movs	r3, #2
 800453a:	73fb      	strb	r3, [r7, #15]
	buf[4]=0x00;//checksum
 800453c:	2300      	movs	r3, #0
 800453e:	743b      	strb	r3, [r7, #16]
	buf[5]=mode;
 8004540:	79bb      	ldrb	r3, [r7, #6]
 8004542:	747b      	strb	r3, [r7, #17]
	for(int i=2;i<6;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8004544:	2302      	movs	r3, #2
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e00d      	b.n	8004566 <DataReadSteering+0x4a>
 800454a:	f107 020c 	add.w	r2, r7, #12
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4413      	add	r3, r2
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <DataReadSteering+0x80>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4413      	add	r3, r2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <DataReadSteering+0x80>)
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	3301      	adds	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b05      	cmp	r3, #5
 800456a:	ddee      	ble.n	800454a <DataReadSteering+0x2e>
	buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <DataReadSteering+0x80>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	43db      	mvns	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	743b      	strb	r3, [r7, #16]
	checksum_val=0x00;//checksum
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <DataReadSteering+0x80>)
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
	Read_flag = 1;//it must be fixed
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <DataReadSteering+0x84>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
	ServoMotor_write(buf);
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fee8 	bl	800435c <ServoMotor_write>
	Read_flag = 0;//it must be fixed
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <DataReadSteering+0x84>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000cf0 	.word	0x20000cf0
 80045a0:	20000d04 	.word	0x20000d04

080045a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_MspInit+0x54>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <HAL_MspInit+0x54>)
 80045b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_MspInit+0x54>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_MspInit+0x54>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <HAL_MspInit+0x54>)
 80045d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6413      	str	r3, [r2, #64]	; 0x40
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_MspInit+0x54>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	210f      	movs	r1, #15
 80045e6:	f06f 0001 	mvn.w	r0, #1
 80045ea:	f001 fecf 	bl	800638c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800

080045fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08c      	sub	sp, #48	; 0x30
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800460c:	2200      	movs	r2, #0
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	2036      	movs	r0, #54	; 0x36
 8004612:	f001 febb 	bl	800638c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004616:	2036      	movs	r0, #54	; 0x36
 8004618:	f001 fed4 	bl	80063c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <HAL_InitTick+0xa4>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <HAL_InitTick+0xa4>)
 8004626:	f043 0310 	orr.w	r3, r3, #16
 800462a:	6413      	str	r3, [r2, #64]	; 0x40
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <HAL_InitTick+0xa4>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004638:	f107 0210 	add.w	r2, r7, #16
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f003 f934 	bl	80078b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004648:	f003 f90a 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 800464c:	4603      	mov	r3, r0
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <HAL_InitTick+0xa8>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0c9b      	lsrs	r3, r3, #18
 800465c:	3b01      	subs	r3, #1
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_InitTick+0xac>)
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <HAL_InitTick+0xb0>)
 8004664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <HAL_InitTick+0xac>)
 8004668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800466c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_InitTick+0xac>)
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_InitTick+0xac>)
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_InitTick+0xac>)
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004680:	4809      	ldr	r0, [pc, #36]	; (80046a8 <HAL_InitTick+0xac>)
 8004682:	f003 fa1d 	bl	8007ac0 <HAL_TIM_Base_Init>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800468c:	4806      	ldr	r0, [pc, #24]	; (80046a8 <HAL_InitTick+0xac>)
 800468e:	f003 fa67 	bl	8007b60 <HAL_TIM_Base_Start_IT>
 8004692:	4603      	mov	r3, r0
 8004694:	e000      	b.n	8004698 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
}
 8004698:	4618      	mov	r0, r3
 800469a:	3730      	adds	r7, #48	; 0x30
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	431bde83 	.word	0x431bde83
 80046a8:	20000d08 	.word	0x20000d08
 80046ac:	40001000 	.word	0x40001000

080046b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046b4:	e7fe      	b.n	80046b4 <NMI_Handler+0x4>

080046b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ba:	e7fe      	b.n	80046ba <HardFault_Handler+0x4>

080046bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046c0:	e7fe      	b.n	80046c0 <MemManage_Handler+0x4>

080046c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046c6:	e7fe      	b.n	80046c6 <BusFault_Handler+0x4>

080046c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046cc:	e7fe      	b.n	80046cc <UsageFault_Handler+0x4>

080046ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 80046e0:	2010      	movs	r0, #16
 80046e2:	f002 fc75 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <DMA1_Stream3_IRQHandler+0x10>)
 80046f2:	f002 f81b 	bl	800672c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20001094 	.word	0x20001094

08004700 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004704:	4802      	ldr	r0, [pc, #8]	; (8004710 <DMA1_Stream6_IRQHandler+0x10>)
 8004706:	f002 f811 	bl	800672c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20001034 	.word	0x20001034

08004714 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <CAN1_RX0_IRQHandler+0x10>)
 800471a:	f001 fb2b 	bl	8005d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000b98 	.word	0x20000b98

08004728 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 800472c:	2020      	movs	r0, #32
 800472e:	f002 fc4f 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 8004732:	2040      	movs	r0, #64	; 0x40
 8004734:	f002 fc4c 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8004738:	2080      	movs	r0, #128	; 0x80
 800473a:	f002 fc49 	bl	8006fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <USART2_IRQHandler+0x10>)
 800474a:	f005 f897 	bl	800987c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000fac 	.word	0x20000fac

08004758 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800475c:	4802      	ldr	r0, [pc, #8]	; (8004768 <USART3_IRQHandler+0x10>)
 800475e:	f005 f88d 	bl	800987c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000ff0 	.word	0x20000ff0

0800476c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004770:	4802      	ldr	r0, [pc, #8]	; (800477c <TIM6_DAC_IRQHandler+0x10>)
 8004772:	f003 fd9e 	bl	80082b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000d08 	.word	0x20000d08

08004780 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8004784:	4802      	ldr	r0, [pc, #8]	; (8004790 <DMA2_Stream2_IRQHandler+0x10>)
 8004786:	f001 ffd1 	bl	800672c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800478a:	bf00      	nop
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000e2c 	.word	0x20000e2c

08004794 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8004798:	4802      	ldr	r0, [pc, #8]	; (80047a4 <DMA2_Stream3_IRQHandler+0x10>)
 800479a:	f001 ffc7 	bl	800672c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000e8c 	.word	0x20000e8c

080047a8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 80047ac:	4802      	ldr	r0, [pc, #8]	; (80047b8 <DMA2_Stream4_IRQHandler+0x10>)
 80047ae:	f001 ffbd 	bl	800672c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000eec 	.word	0x20000eec

080047bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 80047c0:	4802      	ldr	r0, [pc, #8]	; (80047cc <DMA2_Stream7_IRQHandler+0x10>)
 80047c2:	f001 ffb3 	bl	800672c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000f4c 	.word	0x20000f4c

080047d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
	return 1;
 80047d4:	2301      	movs	r3, #1
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <_kill>:

int _kill(int pid, int sig)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047ea:	f00a f8f7 	bl	800e9dc <__errno>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2216      	movs	r2, #22
 80047f2:	601a      	str	r2, [r3, #0]
	return -1;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <_exit>:

void _exit (int status)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004808:	f04f 31ff 	mov.w	r1, #4294967295
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ffe7 	bl	80047e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004812:	e7fe      	b.n	8004812 <_exit+0x12>

08004814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e00a      	b.n	800483c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004826:	f3af 8000 	nop.w
 800482a:	4601      	mov	r1, r0
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	60ba      	str	r2, [r7, #8]
 8004832:	b2ca      	uxtb	r2, r1
 8004834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	dbf0      	blt.n	8004826 <_read+0x12>
	}

return len;
 8004844:	687b      	ldr	r3, [r7, #4]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_close>:
	}
	return len;
}

int _close(int file)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
	return -1;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004876:	605a      	str	r2, [r3, #4]
	return 0;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <_isatty>:

int _isatty(int file)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
	return 1;
 800488e:	2301      	movs	r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
	return 0;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <_sbrk+0x5c>)
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <_sbrk+0x60>)
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <_sbrk+0x64>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <_sbrk+0x64>)
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <_sbrk+0x68>)
 80048d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <_sbrk+0x64>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d207      	bcs.n	80048f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048e8:	f00a f878 	bl	800e9dc <__errno>
 80048ec:	4603      	mov	r3, r0
 80048ee:	220c      	movs	r2, #12
 80048f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	e009      	b.n	800490c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048f8:	4b08      	ldr	r3, [pc, #32]	; (800491c <_sbrk+0x64>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <_sbrk+0x64>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	4a05      	ldr	r2, [pc, #20]	; (800491c <_sbrk+0x64>)
 8004908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20020000 	.word	0x20020000
 8004918:	00000400 	.word	0x00000400
 800491c:	20000d50 	.word	0x20000d50
 8004920:	20005b18 	.word	0x20005b18

08004924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <SystemInit+0x20>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	4a05      	ldr	r2, [pc, #20]	; (8004944 <SystemInit+0x20>)
 8004930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim8_ch3;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b096      	sub	sp, #88	; 0x58
 800494c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800494e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
 8004968:	615a      	str	r2, [r3, #20]
 800496a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800496c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	2220      	movs	r2, #32
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f00a f95c 	bl	800ec3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004988:	4a47      	ldr	r2, [pc, #284]	; (8004aa8 <MX_TIM1_Init+0x160>)
 800498a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 800498c:	4b45      	ldr	r3, [pc, #276]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 800498e:	f240 628f 	movw	r2, #1679	; 0x68f
 8004992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004994:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800499a:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 800499c:	2263      	movs	r2, #99	; 0x63
 800499e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a0:	4b40      	ldr	r3, [pc, #256]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049a6:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ac:	4b3d      	ldr	r3, [pc, #244]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049b2:	483c      	ldr	r0, [pc, #240]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 80049b4:	f003 f944 	bl	8007c40 <HAL_TIM_PWM_Init>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80049be:	f7ff fc9d 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80049c2:	4838      	ldr	r0, [pc, #224]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 80049c4:	f003 fc1c 	bl	8008200 <HAL_TIM_IC_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80049ce:	f7ff fc95 	bl	80042fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80049de:	4619      	mov	r1, r3
 80049e0:	4830      	ldr	r0, [pc, #192]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 80049e2:	f004 fcdb 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80049ec:	f7ff fc86 	bl	80042fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049f0:	2360      	movs	r3, #96	; 0x60
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049fc:	2300      	movs	r3, #0
 80049fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a04:	2300      	movs	r3, #0
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a10:	2200      	movs	r2, #0
 8004a12:	4619      	mov	r1, r3
 8004a14:	4823      	ldr	r0, [pc, #140]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004a16:	f003 fdf1 	bl	80085fc <HAL_TIM_PWM_ConfigChannel>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8004a20:	f7ff fc6c 	bl	80042fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004a24:	2300      	movs	r3, #0
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a38:	2204      	movs	r2, #4
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4819      	ldr	r0, [pc, #100]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004a3e:	f003 fd40 	bl	80084c2 <HAL_TIM_IC_ConfigChannel>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8004a48:	f7ff fc58 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a50:	2208      	movs	r2, #8
 8004a52:	4619      	mov	r1, r3
 8004a54:	4813      	ldr	r0, [pc, #76]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004a56:	f003 fd34 	bl	80084c2 <HAL_TIM_IC_ConfigChannel>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8004a60:	f7ff fc4c 	bl	80042fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a82:	1d3b      	adds	r3, r7, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4807      	ldr	r0, [pc, #28]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004a88:	f004 fd04 	bl	8009494 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8004a92:	f7ff fc33 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <MX_TIM1_Init+0x15c>)
 8004a98:	f000 faca 	bl	8005030 <HAL_TIM_MspPostInit>

}
 8004a9c:	bf00      	nop
 8004a9e:	3758      	adds	r7, #88	; 0x58
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000d54 	.word	0x20000d54
 8004aa8:	40010000 	.word	0x40010000

08004aac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ab2:	f107 0318 	add.w	r3, r7, #24
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	609a      	str	r2, [r3, #8]
 8004abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004aca:	463b      	mov	r3, r7
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ad6:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004ad8:	4a31      	ldr	r2, [pc, #196]	; (8004ba0 <MX_TIM3_Init+0xf4>)
 8004ada:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004adc:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae2:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ae8:	4b2c      	ldr	r3, [pc, #176]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004af0:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004af6:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004afc:	4827      	ldr	r0, [pc, #156]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004afe:	f002 ffdf 	bl	8007ac0 <HAL_TIM_Base_Init>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8004b08:	f7ff fbf8 	bl	80042fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b10:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b12:	f107 0318 	add.w	r3, r7, #24
 8004b16:	4619      	mov	r1, r3
 8004b18:	4820      	ldr	r0, [pc, #128]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004b1a:	f003 fe31 	bl	8008780 <HAL_TIM_ConfigClockSource>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004b24:	f7ff fbea 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004b28:	481c      	ldr	r0, [pc, #112]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004b2a:	f003 fb69 	bl	8008200 <HAL_TIM_IC_Init>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004b34:	f7ff fbe2 	bl	80042fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b40:	f107 0310 	add.w	r3, r7, #16
 8004b44:	4619      	mov	r1, r3
 8004b46:	4815      	ldr	r0, [pc, #84]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004b48:	f004 fc28 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8004b52:	f7ff fbd3 	bl	80042fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004b56:	2300      	movs	r3, #0
 8004b58:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004b66:	463b      	mov	r3, r7
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	480b      	ldr	r0, [pc, #44]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004b6e:	f003 fca8 	bl	80084c2 <HAL_TIM_IC_ConfigChannel>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8004b78:	f7ff fbc0 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004b7c:	463b      	mov	r3, r7
 8004b7e:	220c      	movs	r2, #12
 8004b80:	4619      	mov	r1, r3
 8004b82:	4806      	ldr	r0, [pc, #24]	; (8004b9c <MX_TIM3_Init+0xf0>)
 8004b84:	f003 fc9d 	bl	80084c2 <HAL_TIM_IC_ConfigChannel>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8004b8e:	f7ff fbb5 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b92:	bf00      	nop
 8004b94:	3728      	adds	r7, #40	; 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000d9c 	.word	0x20000d9c
 8004ba0:	40000400 	.word	0x40000400

08004ba4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b096      	sub	sp, #88	; 0x58
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	609a      	str	r2, [r3, #8]
 8004bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	605a      	str	r2, [r3, #4]
 8004bcc:	609a      	str	r2, [r3, #8]
 8004bce:	60da      	str	r2, [r3, #12]
 8004bd0:	611a      	str	r2, [r3, #16]
 8004bd2:	615a      	str	r2, [r3, #20]
 8004bd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	2220      	movs	r2, #32
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f00a f82e 	bl	800ec3e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004be2:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004be4:	4a50      	ldr	r2, [pc, #320]	; (8004d28 <MX_TIM8_Init+0x184>)
 8004be6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8004be8:	4b4e      	ldr	r3, [pc, #312]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	4b4d      	ldr	r3, [pc, #308]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004bf6:	2268      	movs	r2, #104	; 0x68
 8004bf8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004c00:	4b48      	ldr	r3, [pc, #288]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004c0c:	4845      	ldr	r0, [pc, #276]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c0e:	f002 ff57 	bl	8007ac0 <HAL_TIM_Base_Init>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8004c18:	f7ff fb70 	bl	80042fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c26:	4619      	mov	r1, r3
 8004c28:	483e      	ldr	r0, [pc, #248]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c2a:	f003 fda9 	bl	8008780 <HAL_TIM_ConfigClockSource>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8004c34:	f7ff fb62 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004c38:	483a      	ldr	r0, [pc, #232]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c3a:	f003 f801 	bl	8007c40 <HAL_TIM_PWM_Init>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8004c44:	f7ff fb5a 	bl	80042fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c54:	4619      	mov	r1, r3
 8004c56:	4833      	ldr	r0, [pc, #204]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c58:	f004 fba0 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8004c62:	f7ff fb4b 	bl	80042fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c66:	2360      	movs	r3, #96	; 0x60
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c72:	2300      	movs	r3, #0
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4826      	ldr	r0, [pc, #152]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004c8c:	f003 fcb6 	bl	80085fc <HAL_TIM_PWM_ConfigChannel>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8004c96:	f7ff fb31 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4820      	ldr	r0, [pc, #128]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004ca4:	f003 fcaa 	bl	80085fc <HAL_TIM_PWM_ConfigChannel>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8004cae:	f7ff fb25 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	4619      	mov	r1, r3
 8004cba:	481a      	ldr	r0, [pc, #104]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004cbc:	f003 fc9e 	bl	80085fc <HAL_TIM_PWM_ConfigChannel>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8004cc6:	f7ff fb19 	bl	80042fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cce:	220c      	movs	r2, #12
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4814      	ldr	r0, [pc, #80]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004cd4:	f003 fc92 	bl	80085fc <HAL_TIM_PWM_ConfigChannel>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8004cde:	f7ff fb0d 	bl	80042fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004d00:	1d3b      	adds	r3, r7, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4807      	ldr	r0, [pc, #28]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004d06:	f004 fbc5 	bl	8009494 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8004d10:	f7ff faf4 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004d14:	4803      	ldr	r0, [pc, #12]	; (8004d24 <MX_TIM8_Init+0x180>)
 8004d16:	f000 f98b 	bl	8005030 <HAL_TIM_MspPostInit>

}
 8004d1a:	bf00      	nop
 8004d1c:	3758      	adds	r7, #88	; 0x58
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000de4 	.word	0x20000de4
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <HAL_TIM_PWM_MspInit+0x84>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d12c      	bne.n	8004da8 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_TIM_PWM_MspInit+0x88>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_TIM_PWM_MspInit+0x88>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <HAL_TIM_PWM_MspInit+0x88>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_TIM_PWM_MspInit+0x88>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <HAL_TIM_PWM_MspInit+0x88>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <HAL_TIM_PWM_MspInit+0x88>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d94:	2300      	movs	r3, #0
 8004d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	4619      	mov	r1, r3
 8004da2:	4805      	ldr	r0, [pc, #20]	; (8004db8 <HAL_TIM_PWM_MspInit+0x8c>)
 8004da4:	f001 ff2c 	bl	8006c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004da8:	bf00      	nop
 8004daa:	3728      	adds	r7, #40	; 0x28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40020000 	.word	0x40020000

08004dbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a89      	ldr	r2, [pc, #548]	; (8005000 <HAL_TIM_Base_MspInit+0x244>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d12c      	bne.n	8004e38 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	4b88      	ldr	r3, [pc, #544]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a87      	ldr	r2, [pc, #540]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
 8004dee:	4b85      	ldr	r3, [pc, #532]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4a80      	ldr	r2, [pc, #512]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0a:	4b7e      	ldr	r3, [pc, #504]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e16:	2303      	movs	r3, #3
 8004e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e22:	2300      	movs	r3, #0
 8004e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e26:	2302      	movs	r3, #2
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4875      	ldr	r0, [pc, #468]	; (8005008 <HAL_TIM_Base_MspInit+0x24c>)
 8004e32:	f001 fee5 	bl	8006c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004e36:	e0df      	b.n	8004ff8 <HAL_TIM_Base_MspInit+0x23c>
  else if(tim_baseHandle->Instance==TIM8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a73      	ldr	r2, [pc, #460]	; (800500c <HAL_TIM_Base_MspInit+0x250>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	f040 80da 	bne.w	8004ff8 <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e44:	2300      	movs	r3, #0
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	4b6e      	ldr	r3, [pc, #440]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	4a6d      	ldr	r2, [pc, #436]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004e4e:	f043 0302 	orr.w	r3, r3, #2
 8004e52:	6453      	str	r3, [r2, #68]	; 0x44
 8004e54:	4b6b      	ldr	r3, [pc, #428]	; (8005004 <HAL_TIM_Base_MspInit+0x248>)
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8004e60:	4b6b      	ldr	r3, [pc, #428]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e62:	4a6c      	ldr	r2, [pc, #432]	; (8005014 <HAL_TIM_Base_MspInit+0x258>)
 8004e64:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8004e66:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e68:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004e6c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e6e:	4b68      	ldr	r3, [pc, #416]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e70:	2240      	movs	r2, #64	; 0x40
 8004e72:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e74:	4b66      	ldr	r3, [pc, #408]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004e7a:	4b65      	ldr	r3, [pc, #404]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e80:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e82:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e88:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e8a:	4b61      	ldr	r3, [pc, #388]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e90:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8004e92:	4b5f      	ldr	r3, [pc, #380]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004e98:	4b5d      	ldr	r3, [pc, #372]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e9e:	4b5c      	ldr	r3, [pc, #368]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8004ea4:	485a      	ldr	r0, [pc, #360]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004ea6:	f001 faa9 	bl	80063fc <HAL_DMA_Init>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 8004eb0:	f7ff fa24 	bl	80042fc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a56      	ldr	r2, [pc, #344]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eba:	4a55      	ldr	r2, [pc, #340]	; (8005010 <HAL_TIM_Base_MspInit+0x254>)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8004ec0:	4b55      	ldr	r3, [pc, #340]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004ec2:	4a56      	ldr	r2, [pc, #344]	; (800501c <HAL_TIM_Base_MspInit+0x260>)
 8004ec4:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8004ec6:	4b54      	ldr	r3, [pc, #336]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004ec8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004ecc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ece:	4b52      	ldr	r3, [pc, #328]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004ed0:	2240      	movs	r2, #64	; 0x40
 8004ed2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ed4:	4b50      	ldr	r3, [pc, #320]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004eda:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ee0:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ee2:	4b4d      	ldr	r3, [pc, #308]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee8:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef0:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8004ef2:	4b49      	ldr	r3, [pc, #292]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004ef8:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004efe:	4b46      	ldr	r3, [pc, #280]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8004f04:	4844      	ldr	r0, [pc, #272]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004f06:	f001 fa79 	bl	80063fc <HAL_DMA_Init>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_MspInit+0x158>
      Error_Handler();
 8004f10:	f7ff f9f4 	bl	80042fc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a40      	ldr	r2, [pc, #256]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004f18:	629a      	str	r2, [r3, #40]	; 0x28
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <HAL_TIM_Base_MspInit+0x25c>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 8004f20:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f22:	4a40      	ldr	r2, [pc, #256]	; (8005024 <HAL_TIM_Base_MspInit+0x268>)
 8004f24:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f28:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004f2c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f34:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004f3a:	4b39      	ldr	r3, [pc, #228]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f40:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f48:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f4a:	4b35      	ldr	r3, [pc, #212]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f50:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 8004f52:	4b33      	ldr	r3, [pc, #204]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004f58:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f5e:	4b30      	ldr	r3, [pc, #192]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8004f64:	482e      	ldr	r0, [pc, #184]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f66:	f001 fa49 	bl	80063fc <HAL_DMA_Init>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_TIM_Base_MspInit+0x1b8>
      Error_Handler();
 8004f70:	f7ff f9c4 	bl	80042fc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f7a:	4a29      	ldr	r2, [pc, #164]	; (8005020 <HAL_TIM_Base_MspInit+0x264>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 8004f80:	4b29      	ldr	r3, [pc, #164]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004f82:	4a2a      	ldr	r2, [pc, #168]	; (800502c <HAL_TIM_Base_MspInit+0x270>)
 8004f84:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 8004f86:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004f88:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004f8c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004f90:	2240      	movs	r2, #64	; 0x40
 8004f92:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8004f9a:	4b23      	ldr	r3, [pc, #140]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa0:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fa2:	4b21      	ldr	r3, [pc, #132]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa8:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004faa:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fb0:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fbe:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8004fc4:	4818      	ldr	r0, [pc, #96]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fc6:	f001 fa19 	bl	80063fc <HAL_DMA_Init>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_MspInit+0x218>
      Error_Handler();
 8004fd0:	f7ff f994 	bl	80042fc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8004fda:	4a13      	ldr	r2, [pc, #76]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a11      	ldr	r2, [pc, #68]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8004fe6:	4a10      	ldr	r2, [pc, #64]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0e      	ldr	r2, [pc, #56]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ff2:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <HAL_TIM_Base_MspInit+0x26c>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004ff8:	bf00      	nop
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40000400 	.word	0x40000400
 8005004:	40023800 	.word	0x40023800
 8005008:	40020400 	.word	0x40020400
 800500c:	40010400 	.word	0x40010400
 8005010:	20000e2c 	.word	0x20000e2c
 8005014:	40026440 	.word	0x40026440
 8005018:	20000e8c 	.word	0x20000e8c
 800501c:	40026458 	.word	0x40026458
 8005020:	20000eec 	.word	0x20000eec
 8005024:	40026470 	.word	0x40026470
 8005028:	20000f4c 	.word	0x20000f4c
 800502c:	400264b8 	.word	0x400264b8

08005030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <HAL_TIM_MspPostInit+0xb4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d11f      	bne.n	8005092 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_TIM_MspPostInit+0xb8>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <HAL_TIM_MspPostInit+0xb8>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6313      	str	r3, [r2, #48]	; 0x30
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <HAL_TIM_MspPostInit+0xb8>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800506e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005074:	2302      	movs	r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507c:	2300      	movs	r3, #0
 800507e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005080:	2301      	movs	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	4619      	mov	r1, r3
 800508a:	4818      	ldr	r0, [pc, #96]	; (80050ec <HAL_TIM_MspPostInit+0xbc>)
 800508c:	f001 fdb8 	bl	8006c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005090:	e023      	b.n	80050da <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <HAL_TIM_MspPostInit+0xc0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d11e      	bne.n	80050da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <HAL_TIM_MspPostInit+0xb8>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <HAL_TIM_MspPostInit+0xb8>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	6313      	str	r3, [r2, #48]	; 0x30
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <HAL_TIM_MspPostInit+0xb8>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80050b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80050bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050be:	2302      	movs	r3, #2
 80050c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80050ca:	2303      	movs	r3, #3
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	4619      	mov	r1, r3
 80050d4:	4807      	ldr	r0, [pc, #28]	; (80050f4 <HAL_TIM_MspPostInit+0xc4>)
 80050d6:	f001 fd93 	bl	8006c00 <HAL_GPIO_Init>
}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40020000 	.word	0x40020000
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40020800 	.word	0x40020800

080050f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 80050fe:	4a12      	ldr	r2, [pc, #72]	; (8005148 <MX_USART2_UART_Init+0x50>)
 8005100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 8005104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 8005112:	2200      	movs	r2, #0
 8005114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 8005118:	2200      	movs	r2, #0
 800511a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 800511e:	220c      	movs	r2, #12
 8005120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800512e:	4805      	ldr	r0, [pc, #20]	; (8005144 <MX_USART2_UART_Init+0x4c>)
 8005130:	f004 fa16 	bl	8009560 <HAL_UART_Init>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800513a:	f7ff f8df 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000fac 	.word	0x20000fac
 8005148:	40004400 	.word	0x40004400

0800514c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <MX_USART3_UART_Init+0x50>)
 8005154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800515c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 800516c:	2200      	movs	r2, #0
 800516e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005172:	220c      	movs	r2, #12
 8005174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005178:	2200      	movs	r2, #0
 800517a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 800517e:	2200      	movs	r2, #0
 8005180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <MX_USART3_UART_Init+0x4c>)
 8005184:	f004 f9ec 	bl	8009560 <HAL_UART_Init>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800518e:	f7ff f8b5 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000ff0 	.word	0x20000ff0
 800519c:	40004800 	.word	0x40004800

080051a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08c      	sub	sp, #48	; 0x30
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a8:	f107 031c 	add.w	r3, r7, #28
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a68      	ldr	r2, [pc, #416]	; (8005360 <HAL_UART_MspInit+0x1c0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d162      	bne.n	8005288 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	4b67      	ldr	r3, [pc, #412]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4a66      	ldr	r2, [pc, #408]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80051cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d0:	6413      	str	r3, [r2, #64]	; 0x40
 80051d2:	4b64      	ldr	r3, [pc, #400]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	4b60      	ldr	r3, [pc, #384]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a5f      	ldr	r2, [pc, #380]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051fa:	230c      	movs	r3, #12
 80051fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005206:	2303      	movs	r3, #3
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800520a:	2307      	movs	r3, #7
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520e:	f107 031c 	add.w	r3, r7, #28
 8005212:	4619      	mov	r1, r3
 8005214:	4854      	ldr	r0, [pc, #336]	; (8005368 <HAL_UART_MspInit+0x1c8>)
 8005216:	f001 fcf3 	bl	8006c00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800521a:	4b54      	ldr	r3, [pc, #336]	; (800536c <HAL_UART_MspInit+0x1cc>)
 800521c:	4a54      	ldr	r2, [pc, #336]	; (8005370 <HAL_UART_MspInit+0x1d0>)
 800521e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005220:	4b52      	ldr	r3, [pc, #328]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005226:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005228:	4b50      	ldr	r3, [pc, #320]	; (800536c <HAL_UART_MspInit+0x1cc>)
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800522e:	4b4f      	ldr	r3, [pc, #316]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005230:	2200      	movs	r2, #0
 8005232:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005234:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800523a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_UART_MspInit+0x1cc>)
 800523e:	2200      	movs	r2, #0
 8005240:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005244:	2200      	movs	r2, #0
 8005246:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005248:	4b48      	ldr	r3, [pc, #288]	; (800536c <HAL_UART_MspInit+0x1cc>)
 800524a:	2200      	movs	r2, #0
 800524c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005250:	2200      	movs	r2, #0
 8005252:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005254:	4b45      	ldr	r3, [pc, #276]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005256:	2200      	movs	r2, #0
 8005258:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800525a:	4844      	ldr	r0, [pc, #272]	; (800536c <HAL_UART_MspInit+0x1cc>)
 800525c:	f001 f8ce 	bl	80063fc <HAL_DMA_Init>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8005266:	f7ff f849 	bl	80042fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a3f      	ldr	r2, [pc, #252]	; (800536c <HAL_UART_MspInit+0x1cc>)
 800526e:	635a      	str	r2, [r3, #52]	; 0x34
 8005270:	4a3e      	ldr	r2, [pc, #248]	; (800536c <HAL_UART_MspInit+0x1cc>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005276:	2200      	movs	r2, #0
 8005278:	2105      	movs	r1, #5
 800527a:	2026      	movs	r0, #38	; 0x26
 800527c:	f001 f886 	bl	800638c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005280:	2026      	movs	r0, #38	; 0x26
 8005282:	f001 f89f 	bl	80063c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005286:	e067      	b.n	8005358 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART3)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a39      	ldr	r2, [pc, #228]	; (8005374 <HAL_UART_MspInit+0x1d4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d162      	bne.n	8005358 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	4b33      	ldr	r3, [pc, #204]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a32      	ldr	r2, [pc, #200]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80052b8:	f043 0302 	orr.w	r3, r3, #2
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b29      	ldr	r3, [pc, #164]	; (8005364 <HAL_UART_MspInit+0x1c4>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d0:	2302      	movs	r3, #2
 80052d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052dc:	2307      	movs	r3, #7
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e0:	f107 031c 	add.w	r3, r7, #28
 80052e4:	4619      	mov	r1, r3
 80052e6:	4824      	ldr	r0, [pc, #144]	; (8005378 <HAL_UART_MspInit+0x1d8>)
 80052e8:	f001 fc8a 	bl	8006c00 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <HAL_UART_MspInit+0x1dc>)
 80052ee:	4a24      	ldr	r2, [pc, #144]	; (8005380 <HAL_UART_MspInit+0x1e0>)
 80052f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <HAL_UART_MspInit+0x1dc>)
 80052f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_UART_MspInit+0x1dc>)
 80052fc:	2240      	movs	r2, #64	; 0x40
 80052fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800530c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800530e:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005310:	2200      	movs	r2, #0
 8005312:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <HAL_UART_MspInit+0x1dc>)
 800531c:	2200      	movs	r2, #0
 800531e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005322:	2200      	movs	r2, #0
 8005324:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005328:	2200      	movs	r2, #0
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800532c:	4813      	ldr	r0, [pc, #76]	; (800537c <HAL_UART_MspInit+0x1dc>)
 800532e:	f001 f865 	bl	80063fc <HAL_DMA_Init>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8005338:	f7fe ffe0 	bl	80042fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a0f      	ldr	r2, [pc, #60]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005340:	635a      	str	r2, [r3, #52]	; 0x34
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_UART_MspInit+0x1dc>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005348:	2200      	movs	r2, #0
 800534a:	2105      	movs	r1, #5
 800534c:	2027      	movs	r0, #39	; 0x27
 800534e:	f001 f81d 	bl	800638c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005352:	2027      	movs	r0, #39	; 0x27
 8005354:	f001 f836 	bl	80063c4 <HAL_NVIC_EnableIRQ>
}
 8005358:	bf00      	nop
 800535a:	3730      	adds	r7, #48	; 0x30
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40004400 	.word	0x40004400
 8005364:	40023800 	.word	0x40023800
 8005368:	40020000 	.word	0x40020000
 800536c:	20001034 	.word	0x20001034
 8005370:	400260a0 	.word	0x400260a0
 8005374:	40004800 	.word	0x40004800
 8005378:	40020400 	.word	0x40020400
 800537c:	20001094 	.word	0x20001094
 8005380:	40026058 	.word	0x40026058

08005384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005388:	480d      	ldr	r0, [pc, #52]	; (80053c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800538a:	490e      	ldr	r1, [pc, #56]	; (80053c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800538c:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800538e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005390:	e002      	b.n	8005398 <LoopCopyDataInit>

08005392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005396:	3304      	adds	r3, #4

08005398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800539a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800539c:	d3f9      	bcc.n	8005392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800539e:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053a0:	4c0b      	ldr	r4, [pc, #44]	; (80053d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80053a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053a4:	e001      	b.n	80053aa <LoopFillZerobss>

080053a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053a8:	3204      	adds	r2, #4

080053aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053ac:	d3fb      	bcc.n	80053a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053ae:	f7ff fab9 	bl	8004924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053b2:	f009 fc0f 	bl	800ebd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053b6:	f7fe fefe 	bl	80041b6 <main>
  bx  lr    
 80053ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053c4:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80053c8:	080142b8 	.word	0x080142b8
  ldr r2, =_sbss
 80053cc:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80053d0:	20005b18 	.word	0x20005b18

080053d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053d4:	e7fe      	b.n	80053d4 <ADC_IRQHandler>
	...

080053d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <HAL_Init+0x40>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <HAL_Init+0x40>)
 80053e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_Init+0x40>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <HAL_Init+0x40>)
 80053ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053f4:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_Init+0x40>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_Init+0x40>)
 80053fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005400:	2003      	movs	r0, #3
 8005402:	f000 ffb8 	bl	8006376 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005406:	200f      	movs	r0, #15
 8005408:	f7ff f8f8 	bl	80045fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800540c:	f7ff f8ca 	bl	80045a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023c00 	.word	0x40023c00

0800541c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_IncTick+0x20>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_IncTick+0x24>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4413      	add	r3, r2
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <HAL_IncTick+0x24>)
 800542e:	6013      	str	r3, [r2, #0]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000098 	.word	0x20000098
 8005440:	200010f4 	.word	0x200010f4

08005444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return uwTick;
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_GetTick+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	200010f4 	.word	0x200010f4

0800545c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005464:	f7ff ffee 	bl	8005444 <HAL_GetTick>
 8005468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d005      	beq.n	8005482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_Delay+0x44>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005482:	bf00      	nop
 8005484:	f7ff ffde 	bl	8005444 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	429a      	cmp	r2, r3
 8005492:	d8f7      	bhi.n	8005484 <HAL_Delay+0x28>
  {
  }
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000098 	.word	0x20000098

080054a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0ed      	b.n	8005692 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fd9a 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d8:	f7ff ffb4 	bl	8005444 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80054de:	e012      	b.n	8005506 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054e0:	f7ff ffb0 	bl	8005444 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b0a      	cmp	r3, #10
 80054ec:	d90b      	bls.n	8005506 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2205      	movs	r2, #5
 80054fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e0c5      	b.n	8005692 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0e5      	beq.n	80054e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0202 	bic.w	r2, r2, #2
 8005522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005524:	f7ff ff8e 	bl	8005444 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800552a:	e012      	b.n	8005552 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800552c:	f7ff ff8a 	bl	8005444 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b0a      	cmp	r3, #10
 8005538:	d90b      	bls.n	8005552 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2205      	movs	r2, #5
 800554a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e09f      	b.n	8005692 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	7e1b      	ldrb	r3, [r3, #24]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d108      	bne.n	800557a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e007      	b.n	800558a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7e5b      	ldrb	r3, [r3, #25]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d108      	bne.n	80055a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e007      	b.n	80055b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	7e9b      	ldrb	r3, [r3, #26]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d108      	bne.n	80055ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0220 	orr.w	r2, r2, #32
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e007      	b.n	80055de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0220 	bic.w	r2, r2, #32
 80055dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7edb      	ldrb	r3, [r3, #27]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d108      	bne.n	80055f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0210 	bic.w	r2, r2, #16
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e007      	b.n	8005608 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0210 	orr.w	r2, r2, #16
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	7f1b      	ldrb	r3, [r3, #28]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d108      	bne.n	8005622 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e007      	b.n	8005632 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0208 	bic.w	r2, r2, #8
 8005630:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	7f5b      	ldrb	r3, [r3, #29]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d108      	bne.n	800564c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0204 	orr.w	r2, r2, #4
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e007      	b.n	800565c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	ea42 0103 	orr.w	r1, r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d003      	beq.n	80056c2 <HAL_CAN_ConfigFilter+0x26>
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f040 80be 	bne.w	800583e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80056c2:	4b65      	ldr	r3, [pc, #404]	; (8005858 <HAL_CAN_ConfigFilter+0x1bc>)
 80056c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	431a      	orrs	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	2201      	movs	r2, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	43db      	mvns	r3, r3
 8005714:	401a      	ands	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d123      	bne.n	800576c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43db      	mvns	r3, r3
 800572e:	401a      	ands	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005746:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	3248      	adds	r2, #72	; 0x48
 800574c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005760:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	3348      	adds	r3, #72	; 0x48
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	440b      	add	r3, r1
 800576a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d122      	bne.n	80057ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	431a      	orrs	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005794:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3248      	adds	r2, #72	; 0x48
 800579a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80057ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80057b0:	6979      	ldr	r1, [r7, #20]
 80057b2:	3348      	adds	r3, #72	; 0x48
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	440b      	add	r3, r1
 80057b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	401a      	ands	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80057d4:	e007      	b.n	80057e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	431a      	orrs	r2, r3
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	43db      	mvns	r3, r3
 80057f8:	401a      	ands	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005800:	e007      	b.n	8005812 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	431a      	orrs	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	431a      	orrs	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005830:	f023 0201 	bic.w	r2, r3, #1
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e006      	b.n	800584c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
  }
}
 800584c:	4618      	mov	r0, r3
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40006400 	.word	0x40006400

0800585c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d12e      	bne.n	80058ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005888:	f7ff fddc 	bl	8005444 <HAL_GetTick>
 800588c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800588e:	e012      	b.n	80058b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005890:	f7ff fdd8 	bl	8005444 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b0a      	cmp	r3, #10
 800589c:	d90b      	bls.n	80058b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2205      	movs	r2, #5
 80058ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e012      	b.n	80058dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e006      	b.n	80058dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	; 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005902:	7ffb      	ldrb	r3, [r7, #31]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d003      	beq.n	8005910 <HAL_CAN_AddTxMessage+0x2c>
 8005908:	7ffb      	ldrb	r3, [r7, #31]
 800590a:	2b02      	cmp	r3, #2
 800590c:	f040 80b8 	bne.w	8005a80 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80a0 	beq.w	8005a70 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	0e1b      	lsrs	r3, r3, #24
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d907      	bls.n	8005950 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e09e      	b.n	8005a8e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005950:	2201      	movs	r2, #1
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	409a      	lsls	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	6809      	ldr	r1, [r1, #0]
 8005970:	431a      	orrs	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3318      	adds	r3, #24
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	440b      	add	r3, r1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e00f      	b.n	800599e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005988:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005992:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3318      	adds	r3, #24
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	440b      	add	r3, r1
 800599c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6819      	ldr	r1, [r3, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3318      	adds	r3, #24
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	440b      	add	r3, r1
 80059ae:	3304      	adds	r3, #4
 80059b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	7d1b      	ldrb	r3, [r3, #20]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d111      	bne.n	80059de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3318      	adds	r3, #24
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3318      	adds	r3, #24
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	440b      	add	r3, r1
 80059da:	3304      	adds	r3, #4
 80059dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3307      	adds	r3, #7
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	061a      	lsls	r2, r3, #24
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3306      	adds	r3, #6
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3305      	adds	r3, #5
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	4313      	orrs	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	3204      	adds	r2, #4
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	4610      	mov	r0, r2
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	6811      	ldr	r1, [r2, #0]
 8005a06:	ea43 0200 	orr.w	r2, r3, r0
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005a14:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3303      	adds	r3, #3
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	061a      	lsls	r2, r3, #24
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3302      	adds	r3, #2
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	4313      	orrs	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	4610      	mov	r0, r2
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	6811      	ldr	r1, [r2, #0]
 8005a3c:	ea43 0200 	orr.w	r2, r3, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005a4a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	3318      	adds	r3, #24
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	4413      	add	r3, r2
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	6811      	ldr	r1, [r2, #0]
 8005a5e:	f043 0201 	orr.w	r2, r3, #1
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3318      	adds	r3, #24
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	440b      	add	r3, r1
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e00e      	b.n	8005a8e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e006      	b.n	8005a8e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aac:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d002      	beq.n	8005aba <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d11d      	bne.n	8005af6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d003      	beq.n	8005b28 <HAL_CAN_GetRxMessage+0x24>
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	f040 80f3 	bne.w	8005d0e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10e      	bne.n	8005b4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d116      	bne.n	8005b6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0e7      	b.n	8005d1c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0d8      	b.n	8005d1c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	331b      	adds	r3, #27
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	4413      	add	r3, r2
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0204 	and.w	r2, r3, #4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10c      	bne.n	8005ba2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	331b      	adds	r3, #27
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	4413      	add	r3, r2
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	0d5b      	lsrs	r3, r3, #21
 8005b98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e00b      	b.n	8005bba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	331b      	adds	r3, #27
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	4413      	add	r3, r2
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	331b      	adds	r3, #27
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	4413      	add	r3, r2
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0202 	and.w	r2, r3, #2
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	331b      	adds	r3, #27
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	4413      	add	r3, r2
 8005bdc:	3304      	adds	r3, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	331b      	adds	r3, #27
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	0a1b      	lsrs	r3, r3, #8
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	331b      	adds	r3, #27
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	0a1a      	lsrs	r2, r3, #8
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	3301      	adds	r3, #1
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0c1a      	lsrs	r2, r3, #16
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	0e1a      	lsrs	r2, r3, #24
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	3303      	adds	r3, #3
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	0a1a      	lsrs	r2, r3, #8
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	3305      	adds	r3, #5
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	0c1a      	lsrs	r2, r3, #16
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	3306      	adds	r3, #6
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0e1a      	lsrs	r2, r3, #24
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	3307      	adds	r3, #7
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d108      	bne.n	8005cfa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0220 	orr.w	r2, r2, #32
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	e007      	b.n	8005d0a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0220 	orr.w	r2, r2, #32
 8005d08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e006      	b.n	8005d1c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d002      	beq.n	8005d46 <HAL_CAN_ActivateNotification+0x1e>
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d109      	bne.n	8005d5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6959      	ldr	r1, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e006      	b.n	8005d68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d07c      	beq.n	8005eb4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d023      	beq.n	8005e0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f983 	bl	80060e2 <HAL_CAN_TxMailbox0CompleteCallback>
 8005ddc:	e016      	b.n	8005e0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
 8005df0:	e00c      	b.n	8005e0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	e002      	b.n	8005e0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f989 	bl	800611e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d024      	beq.n	8005e60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f963 	bl	80060f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8005e30:	e016      	b.n	8005e60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
 8005e44:	e00c      	b.n	8005e60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
 8005e58:	e002      	b.n	8005e60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f969 	bl	8006132 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d024      	beq.n	8005eb4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f943 	bl	800610a <HAL_CAN_TxMailbox2CompleteCallback>
 8005e84:	e016      	b.n	8005eb4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	e00c      	b.n	8005eb4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	e002      	b.n	8005eb4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f949 	bl	8006146 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f930 	bl	800615a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fb fb30 	bl	8001578 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00c      	beq.n	8005f3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d006      	beq.n	8005f5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2208      	movs	r2, #8
 8005f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f912 	bl	8006182 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8f9 	bl	800616e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d006      	beq.n	8005f9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2210      	movs	r2, #16
 8005f96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f8fc 	bl	8006196 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d006      	beq.n	8005fc0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f8f5 	bl	80061aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d07b      	beq.n	80060c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d072      	beq.n	80060ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	f043 0302 	orr.w	r3, r3, #2
 800600a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	f043 0304 	orr.w	r3, r3, #4
 8006026:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	2b00      	cmp	r3, #0
 8006030:	d043      	beq.n	80060ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03e      	beq.n	80060ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006042:	2b60      	cmp	r3, #96	; 0x60
 8006044:	d02b      	beq.n	800609e <HAL_CAN_IRQHandler+0x32a>
 8006046:	2b60      	cmp	r3, #96	; 0x60
 8006048:	d82e      	bhi.n	80060a8 <HAL_CAN_IRQHandler+0x334>
 800604a:	2b50      	cmp	r3, #80	; 0x50
 800604c:	d022      	beq.n	8006094 <HAL_CAN_IRQHandler+0x320>
 800604e:	2b50      	cmp	r3, #80	; 0x50
 8006050:	d82a      	bhi.n	80060a8 <HAL_CAN_IRQHandler+0x334>
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d019      	beq.n	800608a <HAL_CAN_IRQHandler+0x316>
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d826      	bhi.n	80060a8 <HAL_CAN_IRQHandler+0x334>
 800605a:	2b30      	cmp	r3, #48	; 0x30
 800605c:	d010      	beq.n	8006080 <HAL_CAN_IRQHandler+0x30c>
 800605e:	2b30      	cmp	r3, #48	; 0x30
 8006060:	d822      	bhi.n	80060a8 <HAL_CAN_IRQHandler+0x334>
 8006062:	2b10      	cmp	r3, #16
 8006064:	d002      	beq.n	800606c <HAL_CAN_IRQHandler+0x2f8>
 8006066:	2b20      	cmp	r3, #32
 8006068:	d005      	beq.n	8006076 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800606a:	e01d      	b.n	80060a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	f043 0308 	orr.w	r3, r3, #8
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006074:	e019      	b.n	80060aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	f043 0310 	orr.w	r3, r3, #16
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800607e:	e014      	b.n	80060aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	f043 0320 	orr.w	r3, r3, #32
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006088:	e00f      	b.n	80060aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006092:	e00a      	b.n	80060aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800609c:	e005      	b.n	80060aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80060a6:	e000      	b.n	80060aa <HAL_CAN_IRQHandler+0x336>
            break;
 80060a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80060b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2204      	movs	r2, #4
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f872 	bl	80061be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80060da:	bf00      	nop
 80060dc:	3728      	adds	r7, #40	; 0x28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <__NVIC_SetPriorityGrouping>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <__NVIC_SetPriorityGrouping+0x44>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061f0:	4013      	ands	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006206:	4a04      	ldr	r2, [pc, #16]	; (8006218 <__NVIC_SetPriorityGrouping+0x44>)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	60d3      	str	r3, [r2, #12]
}
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	e000ed00 	.word	0xe000ed00

0800621c <__NVIC_GetPriorityGrouping>:
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006220:	4b04      	ldr	r3, [pc, #16]	; (8006234 <__NVIC_GetPriorityGrouping+0x18>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f003 0307 	and.w	r3, r3, #7
}
 800622a:	4618      	mov	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	e000ed00 	.word	0xe000ed00

08006238 <__NVIC_EnableIRQ>:
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	db0b      	blt.n	8006262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	f003 021f 	and.w	r2, r3, #31
 8006250:	4907      	ldr	r1, [pc, #28]	; (8006270 <__NVIC_EnableIRQ+0x38>)
 8006252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	2001      	movs	r0, #1
 800625a:	fa00 f202 	lsl.w	r2, r0, r2
 800625e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	e000e100 	.word	0xe000e100

08006274 <__NVIC_DisableIRQ>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800627e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006282:	2b00      	cmp	r3, #0
 8006284:	db12      	blt.n	80062ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	f003 021f 	and.w	r2, r3, #31
 800628c:	490a      	ldr	r1, [pc, #40]	; (80062b8 <__NVIC_DisableIRQ+0x44>)
 800628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	2001      	movs	r0, #1
 8006296:	fa00 f202 	lsl.w	r2, r0, r2
 800629a:	3320      	adds	r3, #32
 800629c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80062a0:	f3bf 8f4f 	dsb	sy
}
 80062a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80062a6:	f3bf 8f6f 	isb	sy
}
 80062aa:	bf00      	nop
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	e000e100 	.word	0xe000e100

080062bc <__NVIC_SetPriority>:
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	6039      	str	r1, [r7, #0]
 80062c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	db0a      	blt.n	80062e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	490c      	ldr	r1, [pc, #48]	; (8006308 <__NVIC_SetPriority+0x4c>)
 80062d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062da:	0112      	lsls	r2, r2, #4
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	440b      	add	r3, r1
 80062e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062e4:	e00a      	b.n	80062fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	4908      	ldr	r1, [pc, #32]	; (800630c <__NVIC_SetPriority+0x50>)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	3b04      	subs	r3, #4
 80062f4:	0112      	lsls	r2, r2, #4
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	440b      	add	r3, r1
 80062fa:	761a      	strb	r2, [r3, #24]
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000e100 	.word	0xe000e100
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <NVIC_EncodePriority>:
{
 8006310:	b480      	push	{r7}
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f1c3 0307 	rsb	r3, r3, #7
 800632a:	2b04      	cmp	r3, #4
 800632c:	bf28      	it	cs
 800632e:	2304      	movcs	r3, #4
 8006330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3304      	adds	r3, #4
 8006336:	2b06      	cmp	r3, #6
 8006338:	d902      	bls.n	8006340 <NVIC_EncodePriority+0x30>
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	3b03      	subs	r3, #3
 800633e:	e000      	b.n	8006342 <NVIC_EncodePriority+0x32>
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43da      	mvns	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	401a      	ands	r2, r3
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006358:	f04f 31ff 	mov.w	r1, #4294967295
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	fa01 f303 	lsl.w	r3, r1, r3
 8006362:	43d9      	mvns	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006368:	4313      	orrs	r3, r2
}
 800636a:	4618      	mov	r0, r3
 800636c:	3724      	adds	r7, #36	; 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff ff28 	bl	80061d4 <__NVIC_SetPriorityGrouping>
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800639e:	f7ff ff3d 	bl	800621c <__NVIC_GetPriorityGrouping>
 80063a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	6978      	ldr	r0, [r7, #20]
 80063aa:	f7ff ffb1 	bl	8006310 <NVIC_EncodePriority>
 80063ae:	4602      	mov	r2, r0
 80063b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b4:	4611      	mov	r1, r2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff ff80 	bl	80062bc <__NVIC_SetPriority>
}
 80063bc:	bf00      	nop
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ff30 	bl	8006238 <__NVIC_EnableIRQ>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80063ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff ff40 	bl	8006274 <__NVIC_DisableIRQ>
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7ff f81c 	bl	8005444 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e099      	b.n	800654c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006438:	e00f      	b.n	800645a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800643a:	f7ff f803 	bl	8005444 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b05      	cmp	r3, #5
 8006446:	d908      	bls.n	800645a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2203      	movs	r2, #3
 8006452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e078      	b.n	800654c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e8      	bne.n	800643a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_DMA_Init+0x158>)
 8006474:	4013      	ands	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d107      	bne.n	80064c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	4313      	orrs	r3, r2
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d117      	bne.n	800651e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb01 	bl	8006b08 <DMA_CheckFifoParam>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800651a:	2301      	movs	r3, #1
 800651c:	e016      	b.n	800654c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fab8 	bl	8006a9c <DMA_CalcBaseAndBitshift>
 800652c:	4603      	mov	r3, r0
 800652e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	223f      	movs	r2, #63	; 0x3f
 8006536:	409a      	lsls	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	f010803f 	.word	0xf010803f

08006558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_DMA_Start_IT+0x26>
 800657a:	2302      	movs	r3, #2
 800657c:	e040      	b.n	8006600 <HAL_DMA_Start_IT+0xa8>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d12f      	bne.n	80065f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fa4a 	bl	8006a40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	223f      	movs	r2, #63	; 0x3f
 80065b2:	409a      	lsls	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0216 	orr.w	r2, r2, #22
 80065c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0208 	orr.w	r2, r2, #8
 80065de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e005      	b.n	80065fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
 80065fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006616:	f7fe ff15 	bl	8005444 <HAL_GetTick>
 800661a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d008      	beq.n	800663a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e052      	b.n	80066e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0216 	bic.w	r2, r2, #22
 8006648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <HAL_DMA_Abort+0x62>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0208 	bic.w	r2, r2, #8
 8006678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800668a:	e013      	b.n	80066b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800668c:	f7fe feda 	bl	8005444 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b05      	cmp	r3, #5
 8006698:	d90c      	bls.n	80066b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2203      	movs	r2, #3
 80066a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e015      	b.n	80066e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e4      	bne.n	800668c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c6:	223f      	movs	r2, #63	; 0x3f
 80066c8:	409a      	lsls	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d004      	beq.n	8006706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2280      	movs	r2, #128	; 0x80
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e00c      	b.n	8006720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2205      	movs	r2, #5
 800670a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0201 	bic.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006738:	4b8e      	ldr	r3, [pc, #568]	; (8006974 <HAL_DMA_IRQHandler+0x248>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a8e      	ldr	r2, [pc, #568]	; (8006978 <HAL_DMA_IRQHandler+0x24c>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	0a9b      	lsrs	r3, r3, #10
 8006744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	2208      	movs	r2, #8
 8006758:	409a      	lsls	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01a      	beq.n	8006798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0204 	bic.w	r2, r2, #4
 800677e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	2208      	movs	r2, #8
 8006786:	409a      	lsls	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	f043 0201 	orr.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	2201      	movs	r2, #1
 800679e:	409a      	lsls	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d012      	beq.n	80067ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ba:	2201      	movs	r2, #1
 80067bc:	409a      	lsls	r2, r3
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	f043 0202 	orr.w	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	2204      	movs	r2, #4
 80067d4:	409a      	lsls	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d012      	beq.n	8006804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f0:	2204      	movs	r2, #4
 80067f2:	409a      	lsls	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f043 0204 	orr.w	r2, r3, #4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006808:	2210      	movs	r2, #16
 800680a:	409a      	lsls	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d043      	beq.n	800689c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d03c      	beq.n	800689c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006826:	2210      	movs	r2, #16
 8006828:	409a      	lsls	r2, r3
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d018      	beq.n	800686e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d024      	beq.n	800689c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
 800685a:	e01f      	b.n	800689c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01b      	beq.n	800689c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	e016      	b.n	800689c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0208 	bic.w	r2, r2, #8
 800688a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a0:	2220      	movs	r2, #32
 80068a2:	409a      	lsls	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 808f 	beq.w	80069cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8087 	beq.w	80069cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c2:	2220      	movs	r2, #32
 80068c4:	409a      	lsls	r2, r3
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d136      	bne.n	8006944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0216 	bic.w	r2, r2, #22
 80068e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <HAL_DMA_IRQHandler+0x1da>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0208 	bic.w	r2, r2, #8
 8006914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	223f      	movs	r2, #63	; 0x3f
 800691c:	409a      	lsls	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006936:	2b00      	cmp	r3, #0
 8006938:	d07e      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
        }
        return;
 8006942:	e079      	b.n	8006a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01d      	beq.n	800698e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10d      	bne.n	800697c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006964:	2b00      	cmp	r3, #0
 8006966:	d031      	beq.n	80069cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
 8006970:	e02c      	b.n	80069cc <HAL_DMA_IRQHandler+0x2a0>
 8006972:	bf00      	nop
 8006974:	20000090 	.word	0x20000090
 8006978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d023      	beq.n	80069cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
 800698c:	e01e      	b.n	80069cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10f      	bne.n	80069bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0210 	bic.w	r2, r2, #16
 80069aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d032      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d022      	beq.n	8006a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2205      	movs	r2, #5
 80069e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60bb      	str	r3, [r7, #8]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d307      	bcc.n	8006a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f2      	bne.n	80069f8 <HAL_DMA_IRQHandler+0x2cc>
 8006a12:	e000      	b.n	8006a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	4798      	blx	r3
 8006a36:	e000      	b.n	8006a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a38:	bf00      	nop
    }
  }
}
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d108      	bne.n	8006a80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a7e:	e007      	b.n	8006a90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	60da      	str	r2, [r3, #12]
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	3b10      	subs	r3, #16
 8006aac:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <DMA_CalcBaseAndBitshift+0x64>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	091b      	lsrs	r3, r3, #4
 8006ab4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ab6:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <DMA_CalcBaseAndBitshift+0x68>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d909      	bls.n	8006ade <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	1d1a      	adds	r2, r3, #4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	659a      	str	r2, [r3, #88]	; 0x58
 8006adc:	e007      	b.n	8006aee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	aaaaaaab 	.word	0xaaaaaaab
 8006b04:	08013c78 	.word	0x08013c78

08006b08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11f      	bne.n	8006b62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d856      	bhi.n	8006bd6 <DMA_CheckFifoParam+0xce>
 8006b28:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <DMA_CheckFifoParam+0x28>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006b53 	.word	0x08006b53
 8006b38:	08006b41 	.word	0x08006b41
 8006b3c:	08006bd7 	.word	0x08006bd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d046      	beq.n	8006bda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b50:	e043      	b.n	8006bda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b5a:	d140      	bne.n	8006bde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b60:	e03d      	b.n	8006bde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6a:	d121      	bne.n	8006bb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d837      	bhi.n	8006be2 <DMA_CheckFifoParam+0xda>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <DMA_CheckFifoParam+0x70>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006b8f 	.word	0x08006b8f
 8006b80:	08006b89 	.word	0x08006b89
 8006b84:	08006ba1 	.word	0x08006ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b8c:	e030      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d025      	beq.n	8006be6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b9e:	e022      	b.n	8006be6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ba8:	d11f      	bne.n	8006bea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006bae:	e01c      	b.n	8006bea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d903      	bls.n	8006bbe <DMA_CheckFifoParam+0xb6>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d003      	beq.n	8006bc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006bbc:	e018      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc2:	e015      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00e      	beq.n	8006bee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e00b      	b.n	8006bee <DMA_CheckFifoParam+0xe6>
      break;
 8006bd6:	bf00      	nop
 8006bd8:	e00a      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e008      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bde:	bf00      	nop
 8006be0:	e006      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8006be2:	bf00      	nop
 8006be4:	e004      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8006be6:	bf00      	nop
 8006be8:	e002      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006bea:	bf00      	nop
 8006bec:	e000      	b.n	8006bf0 <DMA_CheckFifoParam+0xe8>
      break;
 8006bee:	bf00      	nop
    }
  } 
  
  return status; 
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop

08006c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	; 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e16b      	b.n	8006ef4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	f040 815a 	bne.w	8006eee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d005      	beq.n	8006c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d130      	bne.n	8006cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	2203      	movs	r2, #3
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c88:	2201      	movs	r2, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	43db      	mvns	r3, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4013      	ands	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 0201 	and.w	r2, r3, #1
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d017      	beq.n	8006cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	2203      	movs	r2, #3
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d123      	bne.n	8006d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	08da      	lsrs	r2, r3, #3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3208      	adds	r2, #8
 8006d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	220f      	movs	r2, #15
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	08da      	lsrs	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3208      	adds	r2, #8
 8006d3e:	69b9      	ldr	r1, [r7, #24]
 8006d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	2203      	movs	r2, #3
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	43db      	mvns	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 0203 	and.w	r2, r3, #3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80b4 	beq.w	8006eee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	4b60      	ldr	r3, [pc, #384]	; (8006f0c <HAL_GPIO_Init+0x30c>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	4a5f      	ldr	r2, [pc, #380]	; (8006f0c <HAL_GPIO_Init+0x30c>)
 8006d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d94:	6453      	str	r3, [r2, #68]	; 0x44
 8006d96:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <HAL_GPIO_Init+0x30c>)
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006da2:	4a5b      	ldr	r2, [pc, #364]	; (8006f10 <HAL_GPIO_Init+0x310>)
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	3302      	adds	r3, #2
 8006daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	220f      	movs	r2, #15
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a52      	ldr	r2, [pc, #328]	; (8006f14 <HAL_GPIO_Init+0x314>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d02b      	beq.n	8006e26 <HAL_GPIO_Init+0x226>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a51      	ldr	r2, [pc, #324]	; (8006f18 <HAL_GPIO_Init+0x318>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d025      	beq.n	8006e22 <HAL_GPIO_Init+0x222>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a50      	ldr	r2, [pc, #320]	; (8006f1c <HAL_GPIO_Init+0x31c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01f      	beq.n	8006e1e <HAL_GPIO_Init+0x21e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a4f      	ldr	r2, [pc, #316]	; (8006f20 <HAL_GPIO_Init+0x320>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d019      	beq.n	8006e1a <HAL_GPIO_Init+0x21a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a4e      	ldr	r2, [pc, #312]	; (8006f24 <HAL_GPIO_Init+0x324>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <HAL_GPIO_Init+0x216>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a4d      	ldr	r2, [pc, #308]	; (8006f28 <HAL_GPIO_Init+0x328>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00d      	beq.n	8006e12 <HAL_GPIO_Init+0x212>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a4c      	ldr	r2, [pc, #304]	; (8006f2c <HAL_GPIO_Init+0x32c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <HAL_GPIO_Init+0x20e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a4b      	ldr	r2, [pc, #300]	; (8006f30 <HAL_GPIO_Init+0x330>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d101      	bne.n	8006e0a <HAL_GPIO_Init+0x20a>
 8006e06:	2307      	movs	r3, #7
 8006e08:	e00e      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	e00c      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e0e:	2306      	movs	r3, #6
 8006e10:	e00a      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e12:	2305      	movs	r3, #5
 8006e14:	e008      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e16:	2304      	movs	r3, #4
 8006e18:	e006      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e004      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e002      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_GPIO_Init+0x228>
 8006e26:	2300      	movs	r3, #0
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	f002 0203 	and.w	r2, r2, #3
 8006e2e:	0092      	lsls	r2, r2, #2
 8006e30:	4093      	lsls	r3, r2
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e38:	4935      	ldr	r1, [pc, #212]	; (8006f10 <HAL_GPIO_Init+0x310>)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	089b      	lsrs	r3, r3, #2
 8006e3e:	3302      	adds	r3, #2
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e46:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4013      	ands	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e6a:	4a32      	ldr	r2, [pc, #200]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e70:	4b30      	ldr	r3, [pc, #192]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e94:	4a27      	ldr	r2, [pc, #156]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ec4:	4b1b      	ldr	r3, [pc, #108]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ee8:	4a12      	ldr	r2, [pc, #72]	; (8006f34 <HAL_GPIO_Init+0x334>)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b0f      	cmp	r3, #15
 8006ef8:	f67f ae90 	bls.w	8006c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	3724      	adds	r7, #36	; 0x24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40013800 	.word	0x40013800
 8006f14:	40020000 	.word	0x40020000
 8006f18:	40020400 	.word	0x40020400
 8006f1c:	40020800 	.word	0x40020800
 8006f20:	40020c00 	.word	0x40020c00
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40021400 	.word	0x40021400
 8006f2c:	40021800 	.word	0x40021800
 8006f30:	40021c00 	.word	0x40021c00
 8006f34:	40013c00 	.word	0x40013c00

08006f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	887b      	ldrh	r3, [r7, #2]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
 8006f54:	e001      	b.n	8006f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	807b      	strh	r3, [r7, #2]
 8006f74:	4613      	mov	r3, r2
 8006f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f78:	787b      	ldrb	r3, [r7, #1]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f7e:	887a      	ldrh	r2, [r7, #2]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f84:	e003      	b.n	8006f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f86:	887b      	ldrh	r3, [r7, #2]
 8006f88:	041a      	lsls	r2, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	619a      	str	r2, [r3, #24]
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fac:	887a      	ldrh	r2, [r7, #2]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	041a      	lsls	r2, r3, #16
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	43d9      	mvns	r1, r3
 8006fb8:	887b      	ldrh	r3, [r7, #2]
 8006fba:	400b      	ands	r3, r1
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	619a      	str	r2, [r3, #24]
}
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fdc:	695a      	ldr	r2, [r3, #20]
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fe6:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fb f8c0 	bl	8002174 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40013c00 	.word	0x40013c00

08007000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e267      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d075      	beq.n	800710a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800701e:	4b88      	ldr	r3, [pc, #544]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	2b04      	cmp	r3, #4
 8007028:	d00c      	beq.n	8007044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702a:	4b85      	ldr	r3, [pc, #532]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007032:	2b08      	cmp	r3, #8
 8007034:	d112      	bne.n	800705c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007036:	4b82      	ldr	r3, [pc, #520]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007042:	d10b      	bne.n	800705c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007044:	4b7e      	ldr	r3, [pc, #504]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05b      	beq.n	8007108 <HAL_RCC_OscConfig+0x108>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d157      	bne.n	8007108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e242      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007064:	d106      	bne.n	8007074 <HAL_RCC_OscConfig+0x74>
 8007066:	4b76      	ldr	r3, [pc, #472]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a75      	ldr	r2, [pc, #468]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800706c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e01d      	b.n	80070b0 <HAL_RCC_OscConfig+0xb0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800707c:	d10c      	bne.n	8007098 <HAL_RCC_OscConfig+0x98>
 800707e:	4b70      	ldr	r3, [pc, #448]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a6f      	ldr	r2, [pc, #444]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	4b6d      	ldr	r3, [pc, #436]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a6c      	ldr	r2, [pc, #432]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	e00b      	b.n	80070b0 <HAL_RCC_OscConfig+0xb0>
 8007098:	4b69      	ldr	r3, [pc, #420]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a68      	ldr	r2, [pc, #416]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800709e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4b66      	ldr	r3, [pc, #408]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a65      	ldr	r2, [pc, #404]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 80070aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d013      	beq.n	80070e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b8:	f7fe f9c4 	bl	8005444 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c0:	f7fe f9c0 	bl	8005444 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	; 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e207      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d2:	4b5b      	ldr	r3, [pc, #364]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0xc0>
 80070de:	e014      	b.n	800710a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e0:	f7fe f9b0 	bl	8005444 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070e8:	f7fe f9ac 	bl	8005444 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b64      	cmp	r3, #100	; 0x64
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e1f3      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070fa:	4b51      	ldr	r3, [pc, #324]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0xe8>
 8007106:	e000      	b.n	800710a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d063      	beq.n	80071de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007116:	4b4a      	ldr	r3, [pc, #296]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 030c 	and.w	r3, r3, #12
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007122:	4b47      	ldr	r3, [pc, #284]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800712a:	2b08      	cmp	r3, #8
 800712c:	d11c      	bne.n	8007168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800712e:	4b44      	ldr	r3, [pc, #272]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d116      	bne.n	8007168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713a:	4b41      	ldr	r3, [pc, #260]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_RCC_OscConfig+0x152>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d001      	beq.n	8007152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e1c7      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007152:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4937      	ldr	r1, [pc, #220]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007162:	4313      	orrs	r3, r2
 8007164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007166:	e03a      	b.n	80071de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007170:	4b34      	ldr	r3, [pc, #208]	; (8007244 <HAL_RCC_OscConfig+0x244>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007176:	f7fe f965 	bl	8005444 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800717e:	f7fe f961 	bl	8005444 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e1a8      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007190:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719c:	4b28      	ldr	r3, [pc, #160]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4925      	ldr	r1, [pc, #148]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]
 80071b0:	e015      	b.n	80071de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b2:	4b24      	ldr	r3, [pc, #144]	; (8007244 <HAL_RCC_OscConfig+0x244>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fe f944 	bl	8005444 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071c0:	f7fe f940 	bl	8005444 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e187      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071d2:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d036      	beq.n	8007258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d016      	beq.n	8007220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <HAL_RCC_OscConfig+0x248>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f8:	f7fe f924 	bl	8005444 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007200:	f7fe f920 	bl	8005444 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e167      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007212:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <HAL_RCC_OscConfig+0x240>)
 8007214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0x200>
 800721e:	e01b      	b.n	8007258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007220:	4b09      	ldr	r3, [pc, #36]	; (8007248 <HAL_RCC_OscConfig+0x248>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007226:	f7fe f90d 	bl	8005444 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722c:	e00e      	b.n	800724c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800722e:	f7fe f909 	bl	8005444 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d907      	bls.n	800724c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e150      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
 8007240:	40023800 	.word	0x40023800
 8007244:	42470000 	.word	0x42470000
 8007248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800724c:	4b88      	ldr	r3, [pc, #544]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800724e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1ea      	bne.n	800722e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8097 	beq.w	8007394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800726a:	4b81      	ldr	r3, [pc, #516]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10f      	bne.n	8007296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	4b7d      	ldr	r3, [pc, #500]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a7c      	ldr	r2, [pc, #496]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
 8007286:	4b7a      	ldr	r3, [pc, #488]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728e:	60bb      	str	r3, [r7, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007296:	4b77      	ldr	r3, [pc, #476]	; (8007474 <HAL_RCC_OscConfig+0x474>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d118      	bne.n	80072d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072a2:	4b74      	ldr	r3, [pc, #464]	; (8007474 <HAL_RCC_OscConfig+0x474>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a73      	ldr	r2, [pc, #460]	; (8007474 <HAL_RCC_OscConfig+0x474>)
 80072a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ae:	f7fe f8c9 	bl	8005444 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b6:	f7fe f8c5 	bl	8005444 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e10c      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c8:	4b6a      	ldr	r3, [pc, #424]	; (8007474 <HAL_RCC_OscConfig+0x474>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f0      	beq.n	80072b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d106      	bne.n	80072ea <HAL_RCC_OscConfig+0x2ea>
 80072dc:	4b64      	ldr	r3, [pc, #400]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	4a63      	ldr	r2, [pc, #396]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	6713      	str	r3, [r2, #112]	; 0x70
 80072e8:	e01c      	b.n	8007324 <HAL_RCC_OscConfig+0x324>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	d10c      	bne.n	800730c <HAL_RCC_OscConfig+0x30c>
 80072f2:	4b5f      	ldr	r3, [pc, #380]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	4a5e      	ldr	r2, [pc, #376]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 80072f8:	f043 0304 	orr.w	r3, r3, #4
 80072fc:	6713      	str	r3, [r2, #112]	; 0x70
 80072fe:	4b5c      	ldr	r3, [pc, #368]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	4a5b      	ldr	r2, [pc, #364]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6713      	str	r3, [r2, #112]	; 0x70
 800730a:	e00b      	b.n	8007324 <HAL_RCC_OscConfig+0x324>
 800730c:	4b58      	ldr	r3, [pc, #352]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	4a57      	ldr	r2, [pc, #348]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	6713      	str	r3, [r2, #112]	; 0x70
 8007318:	4b55      	ldr	r3, [pc, #340]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731c:	4a54      	ldr	r2, [pc, #336]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800731e:	f023 0304 	bic.w	r3, r3, #4
 8007322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d015      	beq.n	8007358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fe f88a 	bl	8005444 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fe f886 	bl	8005444 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e0cb      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734a:	4b49      	ldr	r3, [pc, #292]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0ee      	beq.n	8007334 <HAL_RCC_OscConfig+0x334>
 8007356:	e014      	b.n	8007382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007358:	f7fe f874 	bl	8005444 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800735e:	e00a      	b.n	8007376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007360:	f7fe f870 	bl	8005444 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e0b5      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007376:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1ee      	bne.n	8007360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d105      	bne.n	8007394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007388:	4b39      	ldr	r3, [pc, #228]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	4a38      	ldr	r2, [pc, #224]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800738e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80a1 	beq.w	80074e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800739e:	4b34      	ldr	r3, [pc, #208]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 030c 	and.w	r3, r3, #12
 80073a6:	2b08      	cmp	r3, #8
 80073a8:	d05c      	beq.n	8007464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d141      	bne.n	8007436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b2:	4b31      	ldr	r3, [pc, #196]	; (8007478 <HAL_RCC_OscConfig+0x478>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b8:	f7fe f844 	bl	8005444 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c0:	f7fe f840 	bl	8005444 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e087      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d2:	4b27      	ldr	r3, [pc, #156]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69da      	ldr	r2, [r3, #28]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	019b      	lsls	r3, r3, #6
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	3b01      	subs	r3, #1
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	491b      	ldr	r1, [pc, #108]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <HAL_RCC_OscConfig+0x478>)
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740e:	f7fe f819 	bl	8005444 <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007414:	e008      	b.n	8007428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007416:	f7fe f815 	bl	8005444 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e05c      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0f0      	beq.n	8007416 <HAL_RCC_OscConfig+0x416>
 8007434:	e054      	b.n	80074e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_RCC_OscConfig+0x478>)
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743c:	f7fe f802 	bl	8005444 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007444:	f7fd fffe 	bl	8005444 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e045      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <HAL_RCC_OscConfig+0x470>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x444>
 8007462:	e03d      	b.n	80074e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d107      	bne.n	800747c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e038      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
 8007470:	40023800 	.word	0x40023800
 8007474:	40007000 	.word	0x40007000
 8007478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800747c:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <HAL_RCC_OscConfig+0x4ec>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d028      	beq.n	80074dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007494:	429a      	cmp	r2, r3
 8007496:	d121      	bne.n	80074dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d11a      	bne.n	80074dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074ac:	4013      	ands	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d111      	bne.n	80074dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	3b01      	subs	r3, #1
 80074c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d8:	429a      	cmp	r2, r3
 80074da:	d001      	beq.n	80074e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0cc      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007504:	4b68      	ldr	r3, [pc, #416]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d90c      	bls.n	800752c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007512:	4b65      	ldr	r3, [pc, #404]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751a:	4b63      	ldr	r3, [pc, #396]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d001      	beq.n	800752c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e0b8      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d020      	beq.n	800757a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007544:	4b59      	ldr	r3, [pc, #356]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a58      	ldr	r2, [pc, #352]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800754e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800755c:	4b53      	ldr	r3, [pc, #332]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4a52      	ldr	r2, [pc, #328]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007568:	4b50      	ldr	r3, [pc, #320]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	494d      	ldr	r1, [pc, #308]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d044      	beq.n	8007610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d107      	bne.n	800759e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800758e:	4b47      	ldr	r3, [pc, #284]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d119      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e07f      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d003      	beq.n	80075ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d107      	bne.n	80075be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ae:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e06f      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075be:	4b3b      	ldr	r3, [pc, #236]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e067      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ce:	4b37      	ldr	r3, [pc, #220]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f023 0203 	bic.w	r2, r3, #3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4934      	ldr	r1, [pc, #208]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075e0:	f7fd ff30 	bl	8005444 <HAL_GetTick>
 80075e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e6:	e00a      	b.n	80075fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e8:	f7fd ff2c 	bl	8005444 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e04f      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fe:	4b2b      	ldr	r3, [pc, #172]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 020c 	and.w	r2, r3, #12
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	429a      	cmp	r2, r3
 800760e:	d1eb      	bne.n	80075e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d20c      	bcs.n	8007638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e032      	b.n	800769e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4916      	ldr	r1, [pc, #88]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	4313      	orrs	r3, r2
 8007654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007662:	4b12      	ldr	r3, [pc, #72]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	490e      	ldr	r1, [pc, #56]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007676:	f000 f821 	bl	80076bc <HAL_RCC_GetSysClockFreq>
 800767a:	4602      	mov	r2, r0
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	091b      	lsrs	r3, r3, #4
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	490a      	ldr	r1, [pc, #40]	; (80076b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007688:	5ccb      	ldrb	r3, [r1, r3]
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fc ffb0 	bl	80045fc <HAL_InitTick>

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40023c00 	.word	0x40023c00
 80076ac:	40023800 	.word	0x40023800
 80076b0:	08013c60 	.word	0x08013c60
 80076b4:	20000090 	.word	0x20000090
 80076b8:	20000094 	.word	0x20000094

080076bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076c0:	b090      	sub	sp, #64	; 0x40
 80076c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	2300      	movs	r3, #0
 80076ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076cc:	2300      	movs	r3, #0
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d4:	4b59      	ldr	r3, [pc, #356]	; (800783c <HAL_RCC_GetSysClockFreq+0x180>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d00d      	beq.n	80076fc <HAL_RCC_GetSysClockFreq+0x40>
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	f200 80a1 	bhi.w	8007828 <HAL_RCC_GetSysClockFreq+0x16c>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x34>
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d003      	beq.n	80076f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ee:	e09b      	b.n	8007828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076f0:	4b53      	ldr	r3, [pc, #332]	; (8007840 <HAL_RCC_GetSysClockFreq+0x184>)
 80076f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80076f4:	e09b      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076f6:	4b53      	ldr	r3, [pc, #332]	; (8007844 <HAL_RCC_GetSysClockFreq+0x188>)
 80076f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076fa:	e098      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076fc:	4b4f      	ldr	r3, [pc, #316]	; (800783c <HAL_RCC_GetSysClockFreq+0x180>)
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007706:	4b4d      	ldr	r3, [pc, #308]	; (800783c <HAL_RCC_GetSysClockFreq+0x180>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d028      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007712:	4b4a      	ldr	r3, [pc, #296]	; (800783c <HAL_RCC_GetSysClockFreq+0x180>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	2200      	movs	r2, #0
 800771a:	623b      	str	r3, [r7, #32]
 800771c:	627a      	str	r2, [r7, #36]	; 0x24
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007724:	2100      	movs	r1, #0
 8007726:	4b47      	ldr	r3, [pc, #284]	; (8007844 <HAL_RCC_GetSysClockFreq+0x188>)
 8007728:	fb03 f201 	mul.w	r2, r3, r1
 800772c:	2300      	movs	r3, #0
 800772e:	fb00 f303 	mul.w	r3, r0, r3
 8007732:	4413      	add	r3, r2
 8007734:	4a43      	ldr	r2, [pc, #268]	; (8007844 <HAL_RCC_GetSysClockFreq+0x188>)
 8007736:	fba0 1202 	umull	r1, r2, r0, r2
 800773a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800773c:	460a      	mov	r2, r1
 800773e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007742:	4413      	add	r3, r2
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	2200      	movs	r2, #0
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	61fa      	str	r2, [r7, #28]
 800774e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007756:	f7f9 fa27 	bl	8000ba8 <__aeabi_uldivmod>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4613      	mov	r3, r2
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007762:	e053      	b.n	800780c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007764:	4b35      	ldr	r3, [pc, #212]	; (800783c <HAL_RCC_GetSysClockFreq+0x180>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	099b      	lsrs	r3, r3, #6
 800776a:	2200      	movs	r2, #0
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	617a      	str	r2, [r7, #20]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007776:	f04f 0b00 	mov.w	fp, #0
 800777a:	4652      	mov	r2, sl
 800777c:	465b      	mov	r3, fp
 800777e:	f04f 0000 	mov.w	r0, #0
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	0159      	lsls	r1, r3, #5
 8007788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800778c:	0150      	lsls	r0, r2, #5
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	ebb2 080a 	subs.w	r8, r2, sl
 8007796:	eb63 090b 	sbc.w	r9, r3, fp
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80077a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80077aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80077ae:	ebb2 0408 	subs.w	r4, r2, r8
 80077b2:	eb63 0509 	sbc.w	r5, r3, r9
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	00eb      	lsls	r3, r5, #3
 80077c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077c4:	00e2      	lsls	r2, r4, #3
 80077c6:	4614      	mov	r4, r2
 80077c8:	461d      	mov	r5, r3
 80077ca:	eb14 030a 	adds.w	r3, r4, sl
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	eb45 030b 	adc.w	r3, r5, fp
 80077d4:	607b      	str	r3, [r7, #4]
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077e2:	4629      	mov	r1, r5
 80077e4:	028b      	lsls	r3, r1, #10
 80077e6:	4621      	mov	r1, r4
 80077e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077ec:	4621      	mov	r1, r4
 80077ee:	028a      	lsls	r2, r1, #10
 80077f0:	4610      	mov	r0, r2
 80077f2:	4619      	mov	r1, r3
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	2200      	movs	r2, #0
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	60fa      	str	r2, [r7, #12]
 80077fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007800:	f7f9 f9d2 	bl	8000ba8 <__aeabi_uldivmod>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4613      	mov	r3, r2
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800780c:	4b0b      	ldr	r3, [pc, #44]	; (800783c <HAL_RCC_GetSysClockFreq+0x180>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	3301      	adds	r3, #1
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800781c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007826:	e002      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <HAL_RCC_GetSysClockFreq+0x184>)
 800782a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800782c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007830:	4618      	mov	r0, r3
 8007832:	3740      	adds	r7, #64	; 0x40
 8007834:	46bd      	mov	sp, r7
 8007836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800783a:	bf00      	nop
 800783c:	40023800 	.word	0x40023800
 8007840:	00f42400 	.word	0x00f42400
 8007844:	00b71b00 	.word	0x00b71b00

08007848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800784c:	4b03      	ldr	r3, [pc, #12]	; (800785c <HAL_RCC_GetHCLKFreq+0x14>)
 800784e:	681b      	ldr	r3, [r3, #0]
}
 8007850:	4618      	mov	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000090 	.word	0x20000090

08007860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007864:	f7ff fff0 	bl	8007848 <HAL_RCC_GetHCLKFreq>
 8007868:	4602      	mov	r2, r0
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	0a9b      	lsrs	r3, r3, #10
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	4903      	ldr	r1, [pc, #12]	; (8007884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007876:	5ccb      	ldrb	r3, [r1, r3]
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40023800 	.word	0x40023800
 8007884:	08013c70 	.word	0x08013c70

08007888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800788c:	f7ff ffdc 	bl	8007848 <HAL_RCC_GetHCLKFreq>
 8007890:	4602      	mov	r2, r0
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	0b5b      	lsrs	r3, r3, #13
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	4903      	ldr	r1, [pc, #12]	; (80078ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800789e:	5ccb      	ldrb	r3, [r1, r3]
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40023800 	.word	0x40023800
 80078ac:	08013c70 	.word	0x08013c70

080078b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	220f      	movs	r2, #15
 80078be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 0203 	and.w	r2, r3, #3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	08db      	lsrs	r3, r3, #3
 80078ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078f2:	4b07      	ldr	r3, [pc, #28]	; (8007910 <HAL_RCC_GetClockConfig+0x60>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0207 	and.w	r2, r3, #7
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	601a      	str	r2, [r3, #0]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40023800 	.word	0x40023800
 8007910:	40023c00 	.word	0x40023c00

08007914 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e0a1      	b.n	8007a72 <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fc fbac 	bl	80040a0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2224      	movs	r2, #36	; 0x24
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0201 	bic.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007960:	f7ff ff7e 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 8007964:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4a44      	ldr	r2, [pc, #272]	; (8007a7c <HAL_SMBUS_Init+0x168>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0c9b      	lsrs	r3, r3, #18
 8007970:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80079a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6852      	ldr	r2, [r2, #4]
 80079ae:	0052      	lsls	r2, r2, #1
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80079b6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80079ba:	400a      	ands	r2, r1
 80079bc:	2a00      	cmp	r2, #0
 80079be:	d006      	beq.n	80079ce <HAL_SMBUS_Init+0xba>
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6852      	ldr	r2, [r2, #4]
 80079c4:	0052      	lsls	r2, r2, #1
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80079cc:	e000      	b.n	80079d0 <HAL_SMBUS_Init+0xbc>
 80079ce:	2204      	movs	r2, #4
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	6809      	ldr	r1, [r1, #0]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1a      	ldr	r2, [r3, #32]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6911      	ldr	r1, [r2, #16]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68d2      	ldr	r2, [r2, #12]
 8007a16:	4311      	orrs	r1, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	431bde83 	.word	0x431bde83

08007a80 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a96:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8007aa0:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e041      	b.n	8007b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fd f968 	bl	8004dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f001 f812 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d001      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e04e      	b.n	8007c16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a23      	ldr	r2, [pc, #140]	; (8007c24 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d022      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba2:	d01d      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <HAL_TIM_Base_Start_IT+0xc8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1e      	ldr	r2, [pc, #120]	; (8007c2c <HAL_TIM_Base_Start_IT+0xcc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00e      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x80>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <HAL_TIM_Base_Start_IT+0xdc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d111      	bne.n	8007c04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	d010      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c02:	e007      	b.n	8007c14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000800 	.word	0x40000800
 8007c30:	40000c00 	.word	0x40000c00
 8007c34:	40010400 	.word	0x40010400
 8007c38:	40014000 	.word	0x40014000
 8007c3c:	40001800 	.word	0x40001800

08007c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e041      	b.n	8007cd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fd f860 	bl	8004d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f000 ff52 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <HAL_TIM_PWM_Start+0x24>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	bf14      	ite	ne
 8007cfc:	2301      	movne	r3, #1
 8007cfe:	2300      	moveq	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	e022      	b.n	8007d4a <HAL_TIM_PWM_Start+0x6a>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d109      	bne.n	8007d1e <HAL_TIM_PWM_Start+0x3e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	bf14      	ite	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	e015      	b.n	8007d4a <HAL_TIM_PWM_Start+0x6a>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d109      	bne.n	8007d38 <HAL_TIM_PWM_Start+0x58>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	bf14      	ite	ne
 8007d30:	2301      	movne	r3, #1
 8007d32:	2300      	moveq	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	e008      	b.n	8007d4a <HAL_TIM_PWM_Start+0x6a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e07c      	b.n	8007e4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_TIM_PWM_Start+0x82>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d60:	e013      	b.n	8007d8a <HAL_TIM_PWM_Start+0xaa>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d104      	bne.n	8007d72 <HAL_TIM_PWM_Start+0x92>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d70:	e00b      	b.n	8007d8a <HAL_TIM_PWM_Start+0xaa>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_PWM_Start+0xa2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d80:	e003      	b.n	8007d8a <HAL_TIM_PWM_Start+0xaa>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fadc 	bl	8009350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a2d      	ldr	r2, [pc, #180]	; (8007e54 <HAL_TIM_PWM_Start+0x174>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_TIM_PWM_Start+0xcc>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2c      	ldr	r2, [pc, #176]	; (8007e58 <HAL_TIM_PWM_Start+0x178>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_PWM_Start+0xd0>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <HAL_TIM_PWM_Start+0xd2>
 8007db0:	2300      	movs	r3, #0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a22      	ldr	r2, [pc, #136]	; (8007e54 <HAL_TIM_PWM_Start+0x174>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d022      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd8:	d01d      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1f      	ldr	r2, [pc, #124]	; (8007e5c <HAL_TIM_PWM_Start+0x17c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d018      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_TIM_PWM_Start+0x180>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d013      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <HAL_TIM_PWM_Start+0x184>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00e      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <HAL_TIM_PWM_Start+0x178>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d009      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <HAL_TIM_PWM_Start+0x188>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d004      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x136>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a16      	ldr	r2, [pc, #88]	; (8007e6c <HAL_TIM_PWM_Start+0x18c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d111      	bne.n	8007e3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b06      	cmp	r3, #6
 8007e26:	d010      	beq.n	8007e4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e38:	e007      	b.n	8007e4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0201 	orr.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40010000 	.word	0x40010000
 8007e58:	40010400 	.word	0x40010400
 8007e5c:	40000400 	.word	0x40000400
 8007e60:	40000800 	.word	0x40000800
 8007e64:	40000c00 	.word	0x40000c00
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	40001800 	.word	0x40001800

08007e70 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d109      	bne.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	e022      	b.n	8007ee2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d109      	bne.n	8007eb6 <HAL_TIM_PWM_Start_DMA+0x46>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	bf0c      	ite	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	e015      	b.n	8007ee2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d109      	bne.n	8007ed0 <HAL_TIM_PWM_Start_DMA+0x60>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	e008      	b.n	8007ee2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	bf0c      	ite	eq
 8007edc:	2301      	moveq	r3, #1
 8007ede:	2300      	movne	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e171      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <HAL_TIM_PWM_Start_DMA+0x94>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	e022      	b.n	8007f4a <HAL_TIM_PWM_Start_DMA+0xda>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d109      	bne.n	8007f1e <HAL_TIM_PWM_Start_DMA+0xae>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	bf0c      	ite	eq
 8007f16:	2301      	moveq	r3, #1
 8007f18:	2300      	movne	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e015      	b.n	8007f4a <HAL_TIM_PWM_Start_DMA+0xda>
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d109      	bne.n	8007f38 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	bf0c      	ite	eq
 8007f30:	2301      	moveq	r3, #1
 8007f32:	2300      	movne	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	e008      	b.n	8007f4a <HAL_TIM_PWM_Start_DMA+0xda>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d024      	beq.n	8007f98 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Start_DMA+0xee>
 8007f54:	887b      	ldrh	r3, [r7, #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e137      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <HAL_TIM_PWM_Start_DMA+0xfe>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f6c:	e016      	b.n	8007f9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d104      	bne.n	8007f7e <HAL_TIM_PWM_Start_DMA+0x10e>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f7c:	e00e      	b.n	8007f9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d104      	bne.n	8007f8e <HAL_TIM_PWM_Start_DMA+0x11e>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f8c:	e006      	b.n	8007f9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f96:	e001      	b.n	8007f9c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e118      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b0c      	cmp	r3, #12
 8007fa0:	f200 80ae 	bhi.w	8008100 <HAL_TIM_PWM_Start_DMA+0x290>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fe1 	.word	0x08007fe1
 8007fb0:	08008101 	.word	0x08008101
 8007fb4:	08008101 	.word	0x08008101
 8007fb8:	08008101 	.word	0x08008101
 8007fbc:	08008029 	.word	0x08008029
 8007fc0:	08008101 	.word	0x08008101
 8007fc4:	08008101 	.word	0x08008101
 8007fc8:	08008101 	.word	0x08008101
 8007fcc:	08008071 	.word	0x08008071
 8007fd0:	08008101 	.word	0x08008101
 8007fd4:	08008101 	.word	0x08008101
 8007fd8:	08008101 	.word	0x08008101
 8007fdc:	080080b9 	.word	0x080080b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	4a7c      	ldr	r2, [pc, #496]	; (80081d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007fe6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	4a7b      	ldr	r2, [pc, #492]	; (80081dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	4a7a      	ldr	r2, [pc, #488]	; (80081e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007ff6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3334      	adds	r3, #52	; 0x34
 8008004:	461a      	mov	r2, r3
 8008006:	887b      	ldrh	r3, [r7, #2]
 8008008:	f7fe faa6 	bl	8006558 <HAL_DMA_Start_IT>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e0db      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008024:	60da      	str	r2, [r3, #12]
      break;
 8008026:	e06e      	b.n	8008106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	4a6a      	ldr	r2, [pc, #424]	; (80081d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800802e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008034:	4a69      	ldr	r2, [pc, #420]	; (80081dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	4a68      	ldr	r2, [pc, #416]	; (80081e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 800803e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3338      	adds	r3, #56	; 0x38
 800804c:	461a      	mov	r2, r3
 800804e:	887b      	ldrh	r3, [r7, #2]
 8008050:	f7fe fa82 	bl	8006558 <HAL_DMA_Start_IT>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e0b7      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800806c:	60da      	str	r2, [r3, #12]
      break;
 800806e:	e04a      	b.n	8008106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	4a58      	ldr	r2, [pc, #352]	; (80081d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008076:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a57      	ldr	r2, [pc, #348]	; (80081dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800807e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	4a56      	ldr	r2, [pc, #344]	; (80081e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008086:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	333c      	adds	r3, #60	; 0x3c
 8008094:	461a      	mov	r2, r3
 8008096:	887b      	ldrh	r3, [r7, #2]
 8008098:	f7fe fa5e 	bl	8006558 <HAL_DMA_Start_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e093      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080b4:	60da      	str	r2, [r3, #12]
      break;
 80080b6:	e026      	b.n	8008106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	4a46      	ldr	r2, [pc, #280]	; (80081d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80080be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	4a45      	ldr	r2, [pc, #276]	; (80081dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80080c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	4a44      	ldr	r2, [pc, #272]	; (80081e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80080ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3340      	adds	r3, #64	; 0x40
 80080dc:	461a      	mov	r2, r3
 80080de:	887b      	ldrh	r3, [r7, #2]
 80080e0:	f7fe fa3a 	bl	8006558 <HAL_DMA_Start_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e06f      	b.n	80081ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080fc:	60da      	str	r2, [r3, #12]
      break;
 80080fe:	e002      	b.n	8008106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	75fb      	strb	r3, [r7, #23]
      break;
 8008104:	bf00      	nop
  }

  if (status == HAL_OK)
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d15f      	bne.n	80081cc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2201      	movs	r2, #1
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f91b 	bl	8009350 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a31      	ldr	r2, [pc, #196]	; (80081e4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_TIM_PWM_Start_DMA+0x2be>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2f      	ldr	r2, [pc, #188]	; (80081e8 <HAL_TIM_PWM_Start_DMA+0x378>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008146:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <HAL_TIM_PWM_Start_DMA+0x374>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d022      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815a:	d01d      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a22      	ldr	r2, [pc, #136]	; (80081ec <HAL_TIM_PWM_Start_DMA+0x37c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d018      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a21      	ldr	r2, [pc, #132]	; (80081f0 <HAL_TIM_PWM_Start_DMA+0x380>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d013      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00e      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1a      	ldr	r2, [pc, #104]	; (80081e8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d009      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <HAL_TIM_PWM_Start_DMA+0x388>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <HAL_TIM_PWM_Start_DMA+0x328>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1a      	ldr	r2, [pc, #104]	; (80081fc <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d111      	bne.n	80081bc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b06      	cmp	r3, #6
 80081a8:	d010      	beq.n	80081cc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f042 0201 	orr.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ba:	e007      	b.n	80081cc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	08008a19 	.word	0x08008a19
 80081dc:	08008ac1 	.word	0x08008ac1
 80081e0:	08008987 	.word	0x08008987
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400
 80081ec:	40000400 	.word	0x40000400
 80081f0:	40000800 	.word	0x40000800
 80081f4:	40000c00 	.word	0x40000c00
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40001800 	.word	0x40001800

08008200 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e041      	b.n	8008296 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f839 	bl	800829e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f000 fc72 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d122      	bne.n	800830e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d11b      	bne.n	800830e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0202 	mvn.w	r2, #2
 80082de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f003 0303 	and.w	r3, r3, #3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb14 	bl	8008922 <HAL_TIM_IC_CaptureCallback>
 80082fa:	e005      	b.n	8008308 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fb06 	bl	800890e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fb17 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b04      	cmp	r3, #4
 800831a:	d122      	bne.n	8008362 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	2b04      	cmp	r3, #4
 8008328:	d11b      	bne.n	8008362 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f06f 0204 	mvn.w	r2, #4
 8008332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 faea 	bl	8008922 <HAL_TIM_IC_CaptureCallback>
 800834e:	e005      	b.n	800835c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fadc 	bl	800890e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 faed 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d122      	bne.n	80083b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b08      	cmp	r3, #8
 800837c:	d11b      	bne.n	80083b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f06f 0208 	mvn.w	r2, #8
 8008386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2204      	movs	r2, #4
 800838c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fac0 	bl	8008922 <HAL_TIM_IC_CaptureCallback>
 80083a2:	e005      	b.n	80083b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fab2 	bl	800890e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fac3 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d122      	bne.n	800840a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d11b      	bne.n	800840a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f06f 0210 	mvn.w	r2, #16
 80083da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2208      	movs	r2, #8
 80083e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa96 	bl	8008922 <HAL_TIM_IC_CaptureCallback>
 80083f6:	e005      	b.n	8008404 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa88 	bl	800890e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa99 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10e      	bne.n	8008436 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b01      	cmp	r3, #1
 8008424:	d107      	bne.n	8008436 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f06f 0201 	mvn.w	r2, #1
 800842e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fb ff51 	bl	80042d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d10e      	bne.n	8008462 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844e:	2b80      	cmp	r3, #128	; 0x80
 8008450:	d107      	bne.n	8008462 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800845a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f875 	bl	800954c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	d10e      	bne.n	800848e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b40      	cmp	r3, #64	; 0x40
 800847c:	d107      	bne.n	800848e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fa68 	bl	800895e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b20      	cmp	r3, #32
 800849a:	d10e      	bne.n	80084ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	d107      	bne.n	80084ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f06f 0220 	mvn.w	r2, #32
 80084b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f83f 	bl	8009538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80084dc:	2302      	movs	r3, #2
 80084de:	e088      	b.n	80085f2 <HAL_TIM_IC_ConfigChannel+0x130>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11b      	bne.n	8008526 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6819      	ldr	r1, [r3, #0]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f000 fd63 	bl	8008fc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 020c 	bic.w	r2, r2, #12
 8008510:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6999      	ldr	r1, [r3, #24]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	619a      	str	r2, [r3, #24]
 8008524:	e060      	b.n	80085e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b04      	cmp	r3, #4
 800852a:	d11c      	bne.n	8008566 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6819      	ldr	r1, [r3, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f000 fde7 	bl	800910e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800854e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6999      	ldr	r1, [r3, #24]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	021a      	lsls	r2, r3, #8
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	619a      	str	r2, [r3, #24]
 8008564:	e040      	b.n	80085e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b08      	cmp	r3, #8
 800856a:	d11b      	bne.n	80085a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f000 fe34 	bl	80091e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69da      	ldr	r2, [r3, #28]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 020c 	bic.w	r2, r2, #12
 800858e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69d9      	ldr	r1, [r3, #28]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	61da      	str	r2, [r3, #28]
 80085a2:	e021      	b.n	80085e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b0c      	cmp	r3, #12
 80085a8:	d11c      	bne.n	80085e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6819      	ldr	r1, [r3, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f000 fe51 	bl	8009260 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69da      	ldr	r2, [r3, #28]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69d9      	ldr	r1, [r3, #28]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	021a      	lsls	r2, r3, #8
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	61da      	str	r2, [r3, #28]
 80085e2:	e001      	b.n	80085e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008616:	2302      	movs	r3, #2
 8008618:	e0ae      	b.n	8008778 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b0c      	cmp	r3, #12
 8008626:	f200 809f 	bhi.w	8008768 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008665 	.word	0x08008665
 8008634:	08008769 	.word	0x08008769
 8008638:	08008769 	.word	0x08008769
 800863c:	08008769 	.word	0x08008769
 8008640:	080086a5 	.word	0x080086a5
 8008644:	08008769 	.word	0x08008769
 8008648:	08008769 	.word	0x08008769
 800864c:	08008769 	.word	0x08008769
 8008650:	080086e7 	.word	0x080086e7
 8008654:	08008769 	.word	0x08008769
 8008658:	08008769 	.word	0x08008769
 800865c:	08008769 	.word	0x08008769
 8008660:	08008727 	.word	0x08008727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fafc 	bl	8008c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699a      	ldr	r2, [r3, #24]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0208 	orr.w	r2, r2, #8
 800867e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0204 	bic.w	r2, r2, #4
 800868e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6999      	ldr	r1, [r3, #24]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	619a      	str	r2, [r3, #24]
      break;
 80086a2:	e064      	b.n	800876e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fb4c 	bl	8008d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6999      	ldr	r1, [r3, #24]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	021a      	lsls	r2, r3, #8
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	619a      	str	r2, [r3, #24]
      break;
 80086e4:	e043      	b.n	800876e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fba1 	bl	8008e34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69da      	ldr	r2, [r3, #28]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0208 	orr.w	r2, r2, #8
 8008700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69da      	ldr	r2, [r3, #28]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0204 	bic.w	r2, r2, #4
 8008710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69d9      	ldr	r1, [r3, #28]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	61da      	str	r2, [r3, #28]
      break;
 8008724:	e023      	b.n	800876e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fbf5 	bl	8008f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69d9      	ldr	r1, [r3, #28]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	021a      	lsls	r2, r3, #8
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	61da      	str	r2, [r3, #28]
      break;
 8008766:	e002      	b.n	800876e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	75fb      	strb	r3, [r7, #23]
      break;
 800876c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_TIM_ConfigClockSource+0x1c>
 8008798:	2302      	movs	r3, #2
 800879a:	e0b4      	b.n	8008906 <HAL_TIM_ConfigClockSource+0x186>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d4:	d03e      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0xd4>
 80087d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087da:	f200 8087 	bhi.w	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e2:	f000 8086 	beq.w	80088f2 <HAL_TIM_ConfigClockSource+0x172>
 80087e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ea:	d87f      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087ec:	2b70      	cmp	r3, #112	; 0x70
 80087ee:	d01a      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0xa6>
 80087f0:	2b70      	cmp	r3, #112	; 0x70
 80087f2:	d87b      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087f4:	2b60      	cmp	r3, #96	; 0x60
 80087f6:	d050      	beq.n	800889a <HAL_TIM_ConfigClockSource+0x11a>
 80087f8:	2b60      	cmp	r3, #96	; 0x60
 80087fa:	d877      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 80087fc:	2b50      	cmp	r3, #80	; 0x50
 80087fe:	d03c      	beq.n	800887a <HAL_TIM_ConfigClockSource+0xfa>
 8008800:	2b50      	cmp	r3, #80	; 0x50
 8008802:	d873      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d058      	beq.n	80088ba <HAL_TIM_ConfigClockSource+0x13a>
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d86f      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 800880c:	2b30      	cmp	r3, #48	; 0x30
 800880e:	d064      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008810:	2b30      	cmp	r3, #48	; 0x30
 8008812:	d86b      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 8008814:	2b20      	cmp	r3, #32
 8008816:	d060      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008818:	2b20      	cmp	r3, #32
 800881a:	d867      	bhi.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d05c      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008820:	2b10      	cmp	r3, #16
 8008822:	d05a      	beq.n	80088da <HAL_TIM_ConfigClockSource+0x15a>
 8008824:	e062      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6899      	ldr	r1, [r3, #8]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f000 fd6b 	bl	8009310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	609a      	str	r2, [r3, #8]
      break;
 8008852:	e04f      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6899      	ldr	r1, [r3, #8]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f000 fd54 	bl	8009310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008876:	609a      	str	r2, [r3, #8]
      break;
 8008878:	e03c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6859      	ldr	r1, [r3, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	461a      	mov	r2, r3
 8008888:	f000 fc12 	bl	80090b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2150      	movs	r1, #80	; 0x50
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fd21 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008898:	e02c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	6859      	ldr	r1, [r3, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 fc6e 	bl	8009188 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2160      	movs	r1, #96	; 0x60
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fd11 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 80088b8:	e01c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6859      	ldr	r1, [r3, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f000 fbf2 	bl	80090b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2140      	movs	r1, #64	; 0x40
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fd01 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 80088d8:	e00c      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f000 fcf8 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 80088ea:	e003      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	e000      	b.n	80088f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d107      	bne.n	80089ae <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ac:	e02a      	b.n	8008a04 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d107      	bne.n	80089c8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2202      	movs	r2, #2
 80089bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089c6:	e01d      	b.n	8008a04 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d107      	bne.n	80089e2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2204      	movs	r2, #4
 80089d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089e0:	e010      	b.n	8008a04 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d107      	bne.n	80089fc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2208      	movs	r2, #8
 80089f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089fa:	e003      	b.n	8008a04 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff ffb4 	bl	8008972 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	771a      	strb	r2, [r3, #28]
}
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d10b      	bne.n	8008a48 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d136      	bne.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a46:	e031      	b.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d10b      	bne.n	8008a6a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2202      	movs	r2, #2
 8008a56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d125      	bne.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a68:	e020      	b.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d10b      	bne.n	8008a8c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2204      	movs	r2, #4
 8008a78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d114      	bne.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a8a:	e00f      	b.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d10a      	bne.n	8008aac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2208      	movs	r2, #8
 8008a9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d103      	bne.n	8008aac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff ff42 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	771a      	strb	r2, [r3, #28]
}
 8008ab8:	bf00      	nop
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d103      	bne.n	8008ae0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	771a      	strb	r2, [r3, #28]
 8008ade:	e019      	b.n	8008b14 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d103      	bne.n	8008af2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2202      	movs	r2, #2
 8008aee:	771a      	strb	r2, [r3, #28]
 8008af0:	e010      	b.n	8008b14 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d103      	bne.n	8008b04 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2204      	movs	r2, #4
 8008b00:	771a      	strb	r2, [r3, #28]
 8008b02:	e007      	b.n	8008b14 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d102      	bne.n	8008b14 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2208      	movs	r2, #8
 8008b12:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff ff18 	bl	800894a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	771a      	strb	r2, [r3, #28]
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a40      	ldr	r2, [pc, #256]	; (8008c3c <TIM_Base_SetConfig+0x114>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b46:	d00f      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a3d      	ldr	r2, [pc, #244]	; (8008c40 <TIM_Base_SetConfig+0x118>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a3c      	ldr	r2, [pc, #240]	; (8008c44 <TIM_Base_SetConfig+0x11c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a3b      	ldr	r2, [pc, #236]	; (8008c48 <TIM_Base_SetConfig+0x120>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a3a      	ldr	r2, [pc, #232]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d108      	bne.n	8008b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2f      	ldr	r2, [pc, #188]	; (8008c3c <TIM_Base_SetConfig+0x114>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d02b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d027      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a2c      	ldr	r2, [pc, #176]	; (8008c40 <TIM_Base_SetConfig+0x118>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d023      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a2b      	ldr	r2, [pc, #172]	; (8008c44 <TIM_Base_SetConfig+0x11c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d01f      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a2a      	ldr	r2, [pc, #168]	; (8008c48 <TIM_Base_SetConfig+0x120>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d01b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a29      	ldr	r2, [pc, #164]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d017      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a28      	ldr	r2, [pc, #160]	; (8008c50 <TIM_Base_SetConfig+0x128>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a27      	ldr	r2, [pc, #156]	; (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00f      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a26      	ldr	r2, [pc, #152]	; (8008c58 <TIM_Base_SetConfig+0x130>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00b      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a25      	ldr	r2, [pc, #148]	; (8008c5c <TIM_Base_SetConfig+0x134>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a24      	ldr	r2, [pc, #144]	; (8008c60 <TIM_Base_SetConfig+0x138>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d003      	beq.n	8008bda <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a23      	ldr	r2, [pc, #140]	; (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d108      	bne.n	8008bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a0a      	ldr	r2, [pc, #40]	; (8008c3c <TIM_Base_SetConfig+0x114>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0xf8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a0c      	ldr	r2, [pc, #48]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d103      	bne.n	8008c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	615a      	str	r2, [r3, #20]
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40010000 	.word	0x40010000
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40010400 	.word	0x40010400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40014400 	.word	0x40014400
 8008c58:	40014800 	.word	0x40014800
 8008c5c:	40001800 	.word	0x40001800
 8008c60:	40001c00 	.word	0x40001c00
 8008c64:	40002000 	.word	0x40002000

08008c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f023 0302 	bic.w	r3, r3, #2
 8008cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a20      	ldr	r2, [pc, #128]	; (8008d40 <TIM_OC1_SetConfig+0xd8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_OC1_SetConfig+0x64>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a1f      	ldr	r2, [pc, #124]	; (8008d44 <TIM_OC1_SetConfig+0xdc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d10c      	bne.n	8008ce6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f023 0308 	bic.w	r3, r3, #8
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f023 0304 	bic.w	r3, r3, #4
 8008ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a15      	ldr	r2, [pc, #84]	; (8008d40 <TIM_OC1_SetConfig+0xd8>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d003      	beq.n	8008cf6 <TIM_OC1_SetConfig+0x8e>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a14      	ldr	r2, [pc, #80]	; (8008d44 <TIM_OC1_SetConfig+0xdc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d111      	bne.n	8008d1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	621a      	str	r2, [r3, #32]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400

08008d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	f023 0210 	bic.w	r2, r3, #16
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f023 0320 	bic.w	r3, r3, #32
 8008d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a22      	ldr	r2, [pc, #136]	; (8008e2c <TIM_OC2_SetConfig+0xe4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_OC2_SetConfig+0x68>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <TIM_OC2_SetConfig+0xe8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d10d      	bne.n	8008dcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <TIM_OC2_SetConfig+0xe4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d003      	beq.n	8008ddc <TIM_OC2_SetConfig+0x94>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <TIM_OC2_SetConfig+0xe8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d113      	bne.n	8008e04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	621a      	str	r2, [r3, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40010400 	.word	0x40010400

08008e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0303 	bic.w	r3, r3, #3
 8008e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a21      	ldr	r2, [pc, #132]	; (8008f14 <TIM_OC3_SetConfig+0xe0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC3_SetConfig+0x66>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <TIM_OC3_SetConfig+0xe4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d10d      	bne.n	8008eb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <TIM_OC3_SetConfig+0xe0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d003      	beq.n	8008ec6 <TIM_OC3_SetConfig+0x92>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <TIM_OC3_SetConfig+0xe4>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d113      	bne.n	8008eee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	621a      	str	r2, [r3, #32]
}
 8008f08:	bf00      	nop
 8008f0a:	371c      	adds	r7, #28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400

08008f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	031b      	lsls	r3, r3, #12
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a12      	ldr	r2, [pc, #72]	; (8008fc0 <TIM_OC4_SetConfig+0xa4>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d003      	beq.n	8008f84 <TIM_OC4_SetConfig+0x68>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a11      	ldr	r2, [pc, #68]	; (8008fc4 <TIM_OC4_SetConfig+0xa8>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d109      	bne.n	8008f98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40010400 	.word	0x40010400

08008fc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f023 0201 	bic.w	r2, r3, #1
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a28      	ldr	r2, [pc, #160]	; (8009094 <TIM_TI1_SetConfig+0xcc>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d01b      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffc:	d017      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4a25      	ldr	r2, [pc, #148]	; (8009098 <TIM_TI1_SetConfig+0xd0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d013      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a24      	ldr	r2, [pc, #144]	; (800909c <TIM_TI1_SetConfig+0xd4>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d00f      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a23      	ldr	r2, [pc, #140]	; (80090a0 <TIM_TI1_SetConfig+0xd8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d00b      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4a22      	ldr	r2, [pc, #136]	; (80090a4 <TIM_TI1_SetConfig+0xdc>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d007      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4a21      	ldr	r2, [pc, #132]	; (80090a8 <TIM_TI1_SetConfig+0xe0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d003      	beq.n	800902e <TIM_TI1_SetConfig+0x66>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4a20      	ldr	r2, [pc, #128]	; (80090ac <TIM_TI1_SetConfig+0xe4>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d101      	bne.n	8009032 <TIM_TI1_SetConfig+0x6a>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <TIM_TI1_SetConfig+0x6c>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d008      	beq.n	800904a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	e003      	b.n	8009052 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f043 0301 	orr.w	r3, r3, #1
 8009050:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	b2db      	uxtb	r3, r3
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	4313      	orrs	r3, r2
 8009064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f023 030a 	bic.w	r3, r3, #10
 800906c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f003 030a 	and.w	r3, r3, #10
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	621a      	str	r2, [r3, #32]
}
 8009086:	bf00      	nop
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40010000 	.word	0x40010000
 8009098:	40000400 	.word	0x40000400
 800909c:	40000800 	.word	0x40000800
 80090a0:	40000c00 	.word	0x40000c00
 80090a4:	40010400 	.word	0x40010400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40001800 	.word	0x40001800

080090b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 0201 	bic.w	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f023 030a 	bic.w	r3, r3, #10
 80090ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800910e:	b480      	push	{r7}
 8009110:	b087      	sub	sp, #28
 8009112:	af00      	add	r7, sp, #0
 8009114:	60f8      	str	r0, [r7, #12]
 8009116:	60b9      	str	r1, [r7, #8]
 8009118:	607a      	str	r2, [r7, #4]
 800911a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	f023 0210 	bic.w	r2, r3, #16
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800914c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	031b      	lsls	r3, r3, #12
 8009152:	b29b      	uxth	r3, r3
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009160:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	621a      	str	r2, [r3, #32]
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f023 0210 	bic.w	r2, r3, #16
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	031b      	lsls	r3, r3, #12
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	621a      	str	r2, [r3, #32]
}
 80091dc:	bf00      	nop
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009224:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	b2db      	uxtb	r3, r3
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009238:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	021b      	lsls	r3, r3, #8
 800923e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	4313      	orrs	r3, r2
 8009246:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	621a      	str	r2, [r3, #32]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800928c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800929e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	031b      	lsls	r3, r3, #12
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80092b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	031b      	lsls	r3, r3, #12
 80092b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092da:	b480      	push	{r7}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f043 0307 	orr.w	r3, r3, #7
 80092fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	609a      	str	r2, [r3, #8]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800932a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	021a      	lsls	r2, r3, #8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	431a      	orrs	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4313      	orrs	r3, r2
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	4313      	orrs	r3, r2
 800933c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	2201      	movs	r2, #1
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1a      	ldr	r2, [r3, #32]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	43db      	mvns	r3, r3
 8009372:	401a      	ands	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a1a      	ldr	r2, [r3, #32]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	fa01 f303 	lsl.w	r3, r1, r3
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e05a      	b.n	800946a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a21      	ldr	r2, [pc, #132]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d022      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009400:	d01d      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a1d      	ldr	r2, [pc, #116]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d018      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a1b      	ldr	r2, [pc, #108]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d013      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a1a      	ldr	r2, [pc, #104]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00e      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a18      	ldr	r2, [pc, #96]	; (8009488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d009      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a17      	ldr	r2, [pc, #92]	; (800948c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d004      	beq.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a15      	ldr	r2, [pc, #84]	; (8009490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d10c      	bne.n	8009458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4313      	orrs	r3, r2
 800944e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	40010000 	.word	0x40010000
 800947c:	40000400 	.word	0x40000400
 8009480:	40000800 	.word	0x40000800
 8009484:	40000c00 	.word	0x40000c00
 8009488:	40010400 	.word	0x40010400
 800948c:	40014000 	.word	0x40014000
 8009490:	40001800 	.word	0x40001800

08009494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e03d      	b.n	800952c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	4313      	orrs	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e03f      	b.n	80095f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fb fe0a 	bl	80051a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2224      	movs	r2, #36	; 0x24
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 ff35 	bl	800a414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	695a      	ldr	r2, [r3, #20]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b08a      	sub	sp, #40	; 0x28
 80095fe:	af02      	add	r7, sp, #8
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	4613      	mov	r3, r2
 8009608:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b20      	cmp	r3, #32
 8009618:	d17c      	bne.n	8009714 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <HAL_UART_Transmit+0x2c>
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e075      	b.n	8009716 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_UART_Transmit+0x3e>
 8009634:	2302      	movs	r3, #2
 8009636:	e06e      	b.n	8009716 <HAL_UART_Transmit+0x11c>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2221      	movs	r2, #33	; 0x21
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800964e:	f7fb fef9 	bl	8005444 <HAL_GetTick>
 8009652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	88fa      	ldrh	r2, [r7, #6]
 800965e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009668:	d108      	bne.n	800967c <HAL_UART_Transmit+0x82>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d104      	bne.n	800967c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	61bb      	str	r3, [r7, #24]
 800967a:	e003      	b.n	8009684 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009680:	2300      	movs	r3, #0
 8009682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800968c:	e02a      	b.n	80096e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	2180      	movs	r1, #128	; 0x80
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fc4c 	bl	8009f36 <UART_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e036      	b.n	8009716 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10b      	bne.n	80096c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	3302      	adds	r3, #2
 80096c2:	61bb      	str	r3, [r7, #24]
 80096c4:	e007      	b.n	80096d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	781a      	ldrb	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	3301      	adds	r3, #1
 80096d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096da:	b29b      	uxth	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1cf      	bne.n	800968e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2200      	movs	r2, #0
 80096f6:	2140      	movs	r1, #64	; 0x40
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fc1c 	bl	8009f36 <UART_WaitOnFlagUntilTimeout>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e006      	b.n	8009716 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2220      	movs	r2, #32
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	e000      	b.n	8009716 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009714:	2302      	movs	r3, #2
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	3720      	adds	r7, #32
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	4613      	mov	r3, r2
 800972a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b20      	cmp	r3, #32
 8009736:	d11d      	bne.n	8009774 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_UART_Receive_IT+0x26>
 800973e:	88fb      	ldrh	r3, [r7, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e016      	b.n	8009776 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_UART_Receive_IT+0x38>
 8009752:	2302      	movs	r3, #2
 8009754:	e00f      	b.n	8009776 <HAL_UART_Receive_IT+0x58>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009764:	88fb      	ldrh	r3, [r7, #6]
 8009766:	461a      	mov	r2, r3
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fc51 	bl	800a012 <UART_Start_Receive_IT>
 8009770:	4603      	mov	r3, r0
 8009772:	e000      	b.n	8009776 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009774:	2302      	movs	r3, #2
  }
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08c      	sub	sp, #48	; 0x30
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b20      	cmp	r3, #32
 8009798:	d165      	bne.n	8009866 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_UART_Transmit_DMA+0x26>
 80097a0:	88fb      	ldrh	r3, [r7, #6]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e05e      	b.n	8009868 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d101      	bne.n	80097b8 <HAL_UART_Transmit_DMA+0x38>
 80097b4:	2302      	movs	r3, #2
 80097b6:	e057      	b.n	8009868 <HAL_UART_Transmit_DMA+0xe8>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	88fa      	ldrh	r2, [r7, #6]
 80097ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	88fa      	ldrh	r2, [r7, #6]
 80097d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2221      	movs	r2, #33	; 0x21
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e4:	4a22      	ldr	r2, [pc, #136]	; (8009870 <HAL_UART_Transmit_DMA+0xf0>)
 80097e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ec:	4a21      	ldr	r2, [pc, #132]	; (8009874 <HAL_UART_Transmit_DMA+0xf4>)
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f4:	4a20      	ldr	r2, [pc, #128]	; (8009878 <HAL_UART_Transmit_DMA+0xf8>)
 80097f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fc:	2200      	movs	r2, #0
 80097fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009800:	f107 0308 	add.w	r3, r7, #8
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	6819      	ldr	r1, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3304      	adds	r3, #4
 8009814:	461a      	mov	r2, r3
 8009816:	88fb      	ldrh	r3, [r7, #6]
 8009818:	f7fc fe9e 	bl	8006558 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009824:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3314      	adds	r3, #20
 8009834:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	617b      	str	r3, [r7, #20]
   return(result);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009844:	62bb      	str	r3, [r7, #40]	; 0x28
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3314      	adds	r3, #20
 800984c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800984e:	627a      	str	r2, [r7, #36]	; 0x24
 8009850:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	6a39      	ldr	r1, [r7, #32]
 8009854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	61fb      	str	r3, [r7, #28]
   return(result);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e5      	bne.n	800982e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e000      	b.n	8009868 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009866:	2302      	movs	r3, #2
  }
}
 8009868:	4618      	mov	r0, r3
 800986a:	3730      	adds	r7, #48	; 0x30
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	08009ded 	.word	0x08009ded
 8009874:	08009e87 	.word	0x08009e87
 8009878:	08009ea3 	.word	0x08009ea3

0800987c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b0ba      	sub	sp, #232	; 0xe8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b2:	f003 030f 	and.w	r3, r3, #15
 80098b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80098ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10f      	bne.n	80098e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098c6:	f003 0320 	and.w	r3, r3, #32
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <HAL_UART_IRQHandler+0x66>
 80098ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fcde 	bl	800a29c <UART_Receive_IT>
      return;
 80098e0:	e256      	b.n	8009d90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80de 	beq.w	8009aa8 <HAL_UART_IRQHandler+0x22c>
 80098ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d106      	bne.n	8009906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 80d1 	beq.w	8009aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <HAL_UART_IRQHandler+0xae>
 8009912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	f043 0201 	orr.w	r2, r3, #1
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800992a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <HAL_UART_IRQHandler+0xd2>
 8009936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	f043 0202 	orr.w	r2, r3, #2
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800994e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <HAL_UART_IRQHandler+0xf6>
 800995a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d005      	beq.n	8009972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996a:	f043 0204 	orr.w	r2, r3, #4
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009976:	f003 0308 	and.w	r3, r3, #8
 800997a:	2b00      	cmp	r3, #0
 800997c:	d011      	beq.n	80099a2 <HAL_UART_IRQHandler+0x126>
 800997e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009982:	f003 0320 	and.w	r3, r3, #32
 8009986:	2b00      	cmp	r3, #0
 8009988:	d105      	bne.n	8009996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800998a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f043 0208 	orr.w	r2, r3, #8
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 81ed 	beq.w	8009d86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d008      	beq.n	80099ca <HAL_UART_IRQHandler+0x14e>
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099bc:	f003 0320 	and.w	r3, r3, #32
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fc69 	bl	800a29c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d4:	2b40      	cmp	r3, #64	; 0x40
 80099d6:	bf0c      	ite	eq
 80099d8:	2301      	moveq	r3, #1
 80099da:	2300      	movne	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <HAL_UART_IRQHandler+0x17a>
 80099ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d04f      	beq.n	8009a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fb71 	bl	800a0de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d141      	bne.n	8009a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3314      	adds	r3, #20
 8009a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3314      	adds	r3, #20
 8009a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1d9      	bne.n	8009a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d013      	beq.n	8009a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	4a7d      	ldr	r2, [pc, #500]	; (8009c58 <HAL_UART_IRQHandler+0x3dc>)
 8009a64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fc fe3c 	bl	80066e8 <HAL_DMA_Abort_IT>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d016      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a80:	4610      	mov	r0, r2
 8009a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a84:	e00e      	b.n	8009aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f99a 	bl	8009dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a8c:	e00a      	b.n	8009aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f996 	bl	8009dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a94:	e006      	b.n	8009aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f992 	bl	8009dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009aa2:	e170      	b.n	8009d86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa4:	bf00      	nop
    return;
 8009aa6:	e16e      	b.n	8009d86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	f040 814a 	bne.w	8009d46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 8143 	beq.w	8009d46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac4:	f003 0310 	and.w	r3, r3, #16
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 813c 	beq.w	8009d46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60bb      	str	r3, [r7, #8]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60bb      	str	r3, [r7, #8]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	60bb      	str	r3, [r7, #8]
 8009ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	f040 80b4 	bne.w	8009c5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8140 	beq.w	8009d8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b12:	429a      	cmp	r2, r3
 8009b14:	f080 8139 	bcs.w	8009d8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b2a:	f000 8088 	beq.w	8009c3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	330c      	adds	r3, #12
 8009b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	330c      	adds	r3, #12
 8009b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1d9      	bne.n	8009b2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3314      	adds	r3, #20
 8009b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3314      	adds	r3, #20
 8009b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e1      	bne.n	8009b7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3314      	adds	r3, #20
 8009bbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3314      	adds	r3, #20
 8009bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e3      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	330c      	adds	r3, #12
 8009c02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0e:	f023 0310 	bic.w	r3, r3, #16
 8009c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c20:	65ba      	str	r2, [r7, #88]	; 0x58
 8009c22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e3      	bne.n	8009bfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fc fce5 	bl	8006608 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8c0 	bl	8009dd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c54:	e099      	b.n	8009d8a <HAL_UART_IRQHandler+0x50e>
 8009c56:	bf00      	nop
 8009c58:	0800a1a5 	.word	0x0800a1a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 808b 	beq.w	8009d8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 8086 	beq.w	8009d8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	330c      	adds	r3, #12
 8009c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	330c      	adds	r3, #12
 8009ca2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ca6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ca8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e3      	bne.n	8009c82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3314      	adds	r3, #20
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3314      	adds	r3, #20
 8009cda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009cde:	633a      	str	r2, [r7, #48]	; 0x30
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e3      	bne.n	8009cba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	330c      	adds	r3, #12
 8009d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0310 	bic.w	r3, r3, #16
 8009d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009d24:	61fa      	str	r2, [r7, #28]
 8009d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d28:	69b9      	ldr	r1, [r7, #24]
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	e841 2300 	strex	r3, r2, [r1]
 8009d30:	617b      	str	r3, [r7, #20]
   return(result);
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e3      	bne.n	8009d00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f848 	bl	8009dd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d44:	e023      	b.n	8009d8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d009      	beq.n	8009d66 <HAL_UART_IRQHandler+0x4ea>
 8009d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa34 	bl	800a1cc <UART_Transmit_IT>
    return;
 8009d64:	e014      	b.n	8009d90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00e      	beq.n	8009d90 <HAL_UART_IRQHandler+0x514>
 8009d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa74 	bl	800a26c <UART_EndTransmit_IT>
    return;
 8009d84:	e004      	b.n	8009d90 <HAL_UART_IRQHandler+0x514>
    return;
 8009d86:	bf00      	nop
 8009d88:	e002      	b.n	8009d90 <HAL_UART_IRQHandler+0x514>
      return;
 8009d8a:	bf00      	nop
 8009d8c:	e000      	b.n	8009d90 <HAL_UART_IRQHandler+0x514>
      return;
 8009d8e:	bf00      	nop
  }
}
 8009d90:	37e8      	adds	r7, #232	; 0xe8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop

08009d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b090      	sub	sp, #64	; 0x40
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d137      	bne.n	8009e78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3314      	adds	r3, #20
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	e853 3f00 	ldrex	r3, [r3]
 8009e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3314      	adds	r3, #20
 8009e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8009e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e5      	bne.n	8009e0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	330c      	adds	r3, #12
 8009e48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	330c      	adds	r3, #12
 8009e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e62:	61fa      	str	r2, [r7, #28]
 8009e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	69b9      	ldr	r1, [r7, #24]
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e5      	bne.n	8009e42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e76:	e002      	b.n	8009e7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009e7a:	f7ff ff8d 	bl	8009d98 <HAL_UART_TxCpltCallback>
}
 8009e7e:	bf00      	nop
 8009e80:	3740      	adds	r7, #64	; 0x40
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7ff ff89 	bl	8009dac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ebe:	2b80      	cmp	r3, #128	; 0x80
 8009ec0:	bf0c      	ite	eq
 8009ec2:	2301      	moveq	r3, #1
 8009ec4:	2300      	movne	r3, #0
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b21      	cmp	r3, #33	; 0x21
 8009ed4:	d108      	bne.n	8009ee8 <UART_DMAError+0x46>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d005      	beq.n	8009ee8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ee2:	68b8      	ldr	r0, [r7, #8]
 8009ee4:	f000 f8d3 	bl	800a08e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	bf0c      	ite	eq
 8009ef6:	2301      	moveq	r3, #1
 8009ef8:	2300      	movne	r3, #0
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b22      	cmp	r3, #34	; 0x22
 8009f08:	d108      	bne.n	8009f1c <UART_DMAError+0x7a>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d005      	beq.n	8009f1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2200      	movs	r2, #0
 8009f14:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f16:	68b8      	ldr	r0, [r7, #8]
 8009f18:	f000 f8e1 	bl	800a0de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f20:	f043 0210 	orr.w	r2, r3, #16
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f28:	68b8      	ldr	r0, [r7, #8]
 8009f2a:	f7ff ff49 	bl	8009dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b090      	sub	sp, #64	; 0x40
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	603b      	str	r3, [r7, #0]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f46:	e050      	b.n	8009fea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d04c      	beq.n	8009fea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f56:	f7fb fa75 	bl	8005444 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d241      	bcs.n	8009fea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	330c      	adds	r3, #12
 8009f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	330c      	adds	r3, #12
 8009f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f86:	637a      	str	r2, [r7, #52]	; 0x34
 8009f88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e5      	bne.n	8009f66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3314      	adds	r3, #20
 8009fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f023 0301 	bic.w	r3, r3, #1
 8009fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fba:	623a      	str	r2, [r7, #32]
 8009fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	69f9      	ldr	r1, [r7, #28]
 8009fc0:	6a3a      	ldr	r2, [r7, #32]
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e5      	bne.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e00f      	b.n	800a00a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	bf0c      	ite	eq
 8009ffa:	2301      	moveq	r3, #1
 8009ffc:	2300      	movne	r3, #0
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	461a      	mov	r2, r3
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	429a      	cmp	r2, r3
 800a006:	d09f      	beq.n	8009f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3740      	adds	r7, #64	; 0x40
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	4613      	mov	r3, r2
 800a01e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	88fa      	ldrh	r2, [r7, #6]
 800a02a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	88fa      	ldrh	r2, [r7, #6]
 800a030:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2222      	movs	r2, #34	; 0x22
 800a03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d007      	beq.n	800a060 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a05e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	695a      	ldr	r2, [r3, #20]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f042 0201 	orr.w	r2, r2, #1
 800a06e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0220 	orr.w	r2, r2, #32
 800a07e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a08e:	b480      	push	{r7}
 800a090:	b089      	sub	sp, #36	; 0x24
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	330c      	adds	r3, #12
 800a09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a0ac:	61fb      	str	r3, [r7, #28]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	330c      	adds	r3, #12
 800a0b4:	69fa      	ldr	r2, [r7, #28]
 800a0b6:	61ba      	str	r2, [r7, #24]
 800a0b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6979      	ldr	r1, [r7, #20]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e5      	bne.n	800a096 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a0d2:	bf00      	nop
 800a0d4:	3724      	adds	r7, #36	; 0x24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b095      	sub	sp, #84	; 0x54
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	330c      	adds	r3, #12
 800a0ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	330c      	adds	r3, #12
 800a104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a106:	643a      	str	r2, [r7, #64]	; 0x40
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a10c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e5      	bne.n	800a0e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3314      	adds	r3, #20
 800a120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	61fb      	str	r3, [r7, #28]
   return(result);
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	64bb      	str	r3, [r7, #72]	; 0x48
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3314      	adds	r3, #20
 800a138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a13a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e5      	bne.n	800a11a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	2b01      	cmp	r3, #1
 800a154:	d119      	bne.n	800a18a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	330c      	adds	r3, #12
 800a15c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	60bb      	str	r3, [r7, #8]
   return(result);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f023 0310 	bic.w	r3, r3, #16
 800a16c:	647b      	str	r3, [r7, #68]	; 0x44
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	330c      	adds	r3, #12
 800a174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a176:	61ba      	str	r2, [r7, #24]
 800a178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6979      	ldr	r1, [r7, #20]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	613b      	str	r3, [r7, #16]
   return(result);
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e5      	bne.n	800a156 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a198:	bf00      	nop
 800a19a:	3754      	adds	r7, #84	; 0x54
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff fdfe 	bl	8009dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1c4:	bf00      	nop
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b21      	cmp	r3, #33	; 0x21
 800a1de:	d13e      	bne.n	800a25e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e8:	d114      	bne.n	800a214 <UART_Transmit_IT+0x48>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d110      	bne.n	800a214 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a206:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	1c9a      	adds	r2, r3, #2
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	621a      	str	r2, [r3, #32]
 800a212:	e008      	b.n	800a226 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	1c59      	adds	r1, r3, #1
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	6211      	str	r1, [r2, #32]
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	3b01      	subs	r3, #1
 800a22e:	b29b      	uxth	r3, r3
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	4619      	mov	r1, r3
 800a234:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10f      	bne.n	800a25a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a248:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a258:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e000      	b.n	800a260 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a25e:	2302      	movs	r3, #2
  }
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a282:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff fd83 	bl	8009d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08c      	sub	sp, #48	; 0x30
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b22      	cmp	r3, #34	; 0x22
 800a2ae:	f040 80ab 	bne.w	800a408 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ba:	d117      	bne.n	800a2ec <UART_Receive_IT+0x50>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d113      	bne.n	800a2ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	1c9a      	adds	r2, r3, #2
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	629a      	str	r2, [r3, #40]	; 0x28
 800a2ea:	e026      	b.n	800a33a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fe:	d007      	beq.n	800a310 <UART_Receive_IT+0x74>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <UART_Receive_IT+0x82>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	b2da      	uxtb	r2, r3
 800a318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e008      	b.n	800a330 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3b01      	subs	r3, #1
 800a342:	b29b      	uxth	r3, r3
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	4619      	mov	r1, r3
 800a348:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d15a      	bne.n	800a404 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0220 	bic.w	r2, r2, #32
 800a35c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a36c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0201 	bic.w	r2, r2, #1
 800a37c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d135      	bne.n	800a3fa <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	330c      	adds	r3, #12
 800a39a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 0310 	bic.w	r3, r3, #16
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	330c      	adds	r3, #12
 800a3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b4:	623a      	str	r2, [r7, #32]
 800a3b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	69f9      	ldr	r1, [r7, #28]
 800a3ba:	6a3a      	ldr	r2, [r7, #32]
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e5      	bne.n	800a394 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0310 	and.w	r3, r3, #16
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d10a      	bne.n	800a3ec <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fcee 	bl	8009dd4 <HAL_UARTEx_RxEventCallback>
 800a3f8:	e002      	b.n	800a400 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7f9 ff84 	bl	8004308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e002      	b.n	800a40a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	e000      	b.n	800a40a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a408:	2302      	movs	r3, #2
  }
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3730      	adds	r7, #48	; 0x30
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a418:	b0c0      	sub	sp, #256	; 0x100
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a430:	68d9      	ldr	r1, [r3, #12]
 800a432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	ea40 0301 	orr.w	r3, r0, r1
 800a43c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	431a      	orrs	r2, r3
 800a454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a46c:	f021 010c 	bic.w	r1, r1, #12
 800a470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a47a:	430b      	orrs	r3, r1
 800a47c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48e:	6999      	ldr	r1, [r3, #24]
 800a490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	ea40 0301 	orr.w	r3, r0, r1
 800a49a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b8f      	ldr	r3, [pc, #572]	; (800a6e0 <UART_SetConfig+0x2cc>)
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d005      	beq.n	800a4b4 <UART_SetConfig+0xa0>
 800a4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4b8d      	ldr	r3, [pc, #564]	; (800a6e4 <UART_SetConfig+0x2d0>)
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d104      	bne.n	800a4be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4b4:	f7fd f9e8 	bl	8007888 <HAL_RCC_GetPCLK2Freq>
 800a4b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a4bc:	e003      	b.n	800a4c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4be:	f7fd f9cf 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 800a4c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d0:	f040 810c 	bne.w	800a6ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a4de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a4e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	1891      	adds	r1, r2, r2
 800a4ec:	65b9      	str	r1, [r7, #88]	; 0x58
 800a4ee:	415b      	adcs	r3, r3
 800a4f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	eb12 0801 	adds.w	r8, r2, r1
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	eb43 0901 	adc.w	r9, r3, r1
 800a502:	f04f 0200 	mov.w	r2, #0
 800a506:	f04f 0300 	mov.w	r3, #0
 800a50a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a50e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a516:	4690      	mov	r8, r2
 800a518:	4699      	mov	r9, r3
 800a51a:	4623      	mov	r3, r4
 800a51c:	eb18 0303 	adds.w	r3, r8, r3
 800a520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a524:	462b      	mov	r3, r5
 800a526:	eb49 0303 	adc.w	r3, r9, r3
 800a52a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a53a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a53e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a542:	460b      	mov	r3, r1
 800a544:	18db      	adds	r3, r3, r3
 800a546:	653b      	str	r3, [r7, #80]	; 0x50
 800a548:	4613      	mov	r3, r2
 800a54a:	eb42 0303 	adc.w	r3, r2, r3
 800a54e:	657b      	str	r3, [r7, #84]	; 0x54
 800a550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a558:	f7f6 fb26 	bl	8000ba8 <__aeabi_uldivmod>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4b61      	ldr	r3, [pc, #388]	; (800a6e8 <UART_SetConfig+0x2d4>)
 800a562:	fba3 2302 	umull	r2, r3, r3, r2
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	011c      	lsls	r4, r3, #4
 800a56a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	1891      	adds	r1, r2, r2
 800a582:	64b9      	str	r1, [r7, #72]	; 0x48
 800a584:	415b      	adcs	r3, r3
 800a586:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a58c:	4641      	mov	r1, r8
 800a58e:	eb12 0a01 	adds.w	sl, r2, r1
 800a592:	4649      	mov	r1, r9
 800a594:	eb43 0b01 	adc.w	fp, r3, r1
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5ac:	4692      	mov	sl, r2
 800a5ae:	469b      	mov	fp, r3
 800a5b0:	4643      	mov	r3, r8
 800a5b2:	eb1a 0303 	adds.w	r3, sl, r3
 800a5b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5ba:	464b      	mov	r3, r9
 800a5bc:	eb4b 0303 	adc.w	r3, fp, r3
 800a5c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a5d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	18db      	adds	r3, r3, r3
 800a5dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a5de:	4613      	mov	r3, r2
 800a5e0:	eb42 0303 	adc.w	r3, r2, r3
 800a5e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a5ee:	f7f6 fadb 	bl	8000ba8 <__aeabi_uldivmod>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4b3b      	ldr	r3, [pc, #236]	; (800a6e8 <UART_SetConfig+0x2d4>)
 800a5fa:	fba3 2301 	umull	r2, r3, r3, r1
 800a5fe:	095b      	lsrs	r3, r3, #5
 800a600:	2264      	movs	r2, #100	; 0x64
 800a602:	fb02 f303 	mul.w	r3, r2, r3
 800a606:	1acb      	subs	r3, r1, r3
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a60e:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <UART_SetConfig+0x2d4>)
 800a610:	fba3 2302 	umull	r2, r3, r3, r2
 800a614:	095b      	lsrs	r3, r3, #5
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a61c:	441c      	add	r4, r3
 800a61e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a622:	2200      	movs	r2, #0
 800a624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a62c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	1891      	adds	r1, r2, r2
 800a636:	63b9      	str	r1, [r7, #56]	; 0x38
 800a638:	415b      	adcs	r3, r3
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a640:	4641      	mov	r1, r8
 800a642:	1851      	adds	r1, r2, r1
 800a644:	6339      	str	r1, [r7, #48]	; 0x30
 800a646:	4649      	mov	r1, r9
 800a648:	414b      	adcs	r3, r1
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a658:	4659      	mov	r1, fp
 800a65a:	00cb      	lsls	r3, r1, #3
 800a65c:	4651      	mov	r1, sl
 800a65e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a662:	4651      	mov	r1, sl
 800a664:	00ca      	lsls	r2, r1, #3
 800a666:	4610      	mov	r0, r2
 800a668:	4619      	mov	r1, r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	4642      	mov	r2, r8
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a674:	464b      	mov	r3, r9
 800a676:	460a      	mov	r2, r1
 800a678:	eb42 0303 	adc.w	r3, r2, r3
 800a67c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a68c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a694:	460b      	mov	r3, r1
 800a696:	18db      	adds	r3, r3, r3
 800a698:	62bb      	str	r3, [r7, #40]	; 0x28
 800a69a:	4613      	mov	r3, r2
 800a69c:	eb42 0303 	adc.w	r3, r2, r3
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a6a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a6aa:	f7f6 fa7d 	bl	8000ba8 <__aeabi_uldivmod>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <UART_SetConfig+0x2d4>)
 800a6b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b8:	095b      	lsrs	r3, r3, #5
 800a6ba:	2164      	movs	r1, #100	; 0x64
 800a6bc:	fb01 f303 	mul.w	r3, r1, r3
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	3332      	adds	r3, #50	; 0x32
 800a6c6:	4a08      	ldr	r2, [pc, #32]	; (800a6e8 <UART_SetConfig+0x2d4>)
 800a6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6cc:	095b      	lsrs	r3, r3, #5
 800a6ce:	f003 0207 	and.w	r2, r3, #7
 800a6d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4422      	add	r2, r4
 800a6da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6dc:	e105      	b.n	800a8ea <UART_SetConfig+0x4d6>
 800a6de:	bf00      	nop
 800a6e0:	40011000 	.word	0x40011000
 800a6e4:	40011400 	.word	0x40011400
 800a6e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a6fe:	4642      	mov	r2, r8
 800a700:	464b      	mov	r3, r9
 800a702:	1891      	adds	r1, r2, r2
 800a704:	6239      	str	r1, [r7, #32]
 800a706:	415b      	adcs	r3, r3
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
 800a70a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a70e:	4641      	mov	r1, r8
 800a710:	1854      	adds	r4, r2, r1
 800a712:	4649      	mov	r1, r9
 800a714:	eb43 0501 	adc.w	r5, r3, r1
 800a718:	f04f 0200 	mov.w	r2, #0
 800a71c:	f04f 0300 	mov.w	r3, #0
 800a720:	00eb      	lsls	r3, r5, #3
 800a722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a726:	00e2      	lsls	r2, r4, #3
 800a728:	4614      	mov	r4, r2
 800a72a:	461d      	mov	r5, r3
 800a72c:	4643      	mov	r3, r8
 800a72e:	18e3      	adds	r3, r4, r3
 800a730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a734:	464b      	mov	r3, r9
 800a736:	eb45 0303 	adc.w	r3, r5, r3
 800a73a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a74a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a74e:	f04f 0200 	mov.w	r2, #0
 800a752:	f04f 0300 	mov.w	r3, #0
 800a756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a75a:	4629      	mov	r1, r5
 800a75c:	008b      	lsls	r3, r1, #2
 800a75e:	4621      	mov	r1, r4
 800a760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a764:	4621      	mov	r1, r4
 800a766:	008a      	lsls	r2, r1, #2
 800a768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a76c:	f7f6 fa1c 	bl	8000ba8 <__aeabi_uldivmod>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4b60      	ldr	r3, [pc, #384]	; (800a8f8 <UART_SetConfig+0x4e4>)
 800a776:	fba3 2302 	umull	r2, r3, r3, r2
 800a77a:	095b      	lsrs	r3, r3, #5
 800a77c:	011c      	lsls	r4, r3, #4
 800a77e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a782:	2200      	movs	r2, #0
 800a784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a78c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a790:	4642      	mov	r2, r8
 800a792:	464b      	mov	r3, r9
 800a794:	1891      	adds	r1, r2, r2
 800a796:	61b9      	str	r1, [r7, #24]
 800a798:	415b      	adcs	r3, r3
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7a0:	4641      	mov	r1, r8
 800a7a2:	1851      	adds	r1, r2, r1
 800a7a4:	6139      	str	r1, [r7, #16]
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	414b      	adcs	r3, r1
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	f04f 0200 	mov.w	r2, #0
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7b8:	4659      	mov	r1, fp
 800a7ba:	00cb      	lsls	r3, r1, #3
 800a7bc:	4651      	mov	r1, sl
 800a7be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7c2:	4651      	mov	r1, sl
 800a7c4:	00ca      	lsls	r2, r1, #3
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	189b      	adds	r3, r3, r2
 800a7d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	460a      	mov	r2, r1
 800a7d8:	eb42 0303 	adc.w	r3, r2, r3
 800a7dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a7ec:	f04f 0200 	mov.w	r2, #0
 800a7f0:	f04f 0300 	mov.w	r3, #0
 800a7f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	008b      	lsls	r3, r1, #2
 800a7fc:	4641      	mov	r1, r8
 800a7fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a802:	4641      	mov	r1, r8
 800a804:	008a      	lsls	r2, r1, #2
 800a806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a80a:	f7f6 f9cd 	bl	8000ba8 <__aeabi_uldivmod>
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <UART_SetConfig+0x4e4>)
 800a814:	fba3 1302 	umull	r1, r3, r3, r2
 800a818:	095b      	lsrs	r3, r3, #5
 800a81a:	2164      	movs	r1, #100	; 0x64
 800a81c:	fb01 f303 	mul.w	r3, r1, r3
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	011b      	lsls	r3, r3, #4
 800a824:	3332      	adds	r3, #50	; 0x32
 800a826:	4a34      	ldr	r2, [pc, #208]	; (800a8f8 <UART_SetConfig+0x4e4>)
 800a828:	fba2 2303 	umull	r2, r3, r2, r3
 800a82c:	095b      	lsrs	r3, r3, #5
 800a82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a832:	441c      	add	r4, r3
 800a834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a838:	2200      	movs	r2, #0
 800a83a:	673b      	str	r3, [r7, #112]	; 0x70
 800a83c:	677a      	str	r2, [r7, #116]	; 0x74
 800a83e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a842:	4642      	mov	r2, r8
 800a844:	464b      	mov	r3, r9
 800a846:	1891      	adds	r1, r2, r2
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	415b      	adcs	r3, r3
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a852:	4641      	mov	r1, r8
 800a854:	1851      	adds	r1, r2, r1
 800a856:	6039      	str	r1, [r7, #0]
 800a858:	4649      	mov	r1, r9
 800a85a:	414b      	adcs	r3, r1
 800a85c:	607b      	str	r3, [r7, #4]
 800a85e:	f04f 0200 	mov.w	r2, #0
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a86a:	4659      	mov	r1, fp
 800a86c:	00cb      	lsls	r3, r1, #3
 800a86e:	4651      	mov	r1, sl
 800a870:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a874:	4651      	mov	r1, sl
 800a876:	00ca      	lsls	r2, r1, #3
 800a878:	4610      	mov	r0, r2
 800a87a:	4619      	mov	r1, r3
 800a87c:	4603      	mov	r3, r0
 800a87e:	4642      	mov	r2, r8
 800a880:	189b      	adds	r3, r3, r2
 800a882:	66bb      	str	r3, [r7, #104]	; 0x68
 800a884:	464b      	mov	r3, r9
 800a886:	460a      	mov	r2, r1
 800a888:	eb42 0303 	adc.w	r3, r2, r3
 800a88c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	663b      	str	r3, [r7, #96]	; 0x60
 800a898:	667a      	str	r2, [r7, #100]	; 0x64
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	f04f 0300 	mov.w	r3, #0
 800a8a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	008b      	lsls	r3, r1, #2
 800a8aa:	4641      	mov	r1, r8
 800a8ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	008a      	lsls	r2, r1, #2
 800a8b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8b8:	f7f6 f976 	bl	8000ba8 <__aeabi_uldivmod>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4b0d      	ldr	r3, [pc, #52]	; (800a8f8 <UART_SetConfig+0x4e4>)
 800a8c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c6:	095b      	lsrs	r3, r3, #5
 800a8c8:	2164      	movs	r1, #100	; 0x64
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	3332      	adds	r3, #50	; 0x32
 800a8d4:	4a08      	ldr	r2, [pc, #32]	; (800a8f8 <UART_SetConfig+0x4e4>)
 800a8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	f003 020f 	and.w	r2, r3, #15
 800a8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4422      	add	r2, r4
 800a8e8:	609a      	str	r2, [r3, #8]
}
 800a8ea:	bf00      	nop
 800a8ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8f6:	bf00      	nop
 800a8f8:	51eb851f 	.word	0x51eb851f

0800a8fc <__NVIC_SetPriority>:
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	4603      	mov	r3, r0
 800a904:	6039      	str	r1, [r7, #0]
 800a906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	db0a      	blt.n	800a926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	b2da      	uxtb	r2, r3
 800a914:	490c      	ldr	r1, [pc, #48]	; (800a948 <__NVIC_SetPriority+0x4c>)
 800a916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a91a:	0112      	lsls	r2, r2, #4
 800a91c:	b2d2      	uxtb	r2, r2
 800a91e:	440b      	add	r3, r1
 800a920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a924:	e00a      	b.n	800a93c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	4908      	ldr	r1, [pc, #32]	; (800a94c <__NVIC_SetPriority+0x50>)
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	f003 030f 	and.w	r3, r3, #15
 800a932:	3b04      	subs	r3, #4
 800a934:	0112      	lsls	r2, r2, #4
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	440b      	add	r3, r1
 800a93a:	761a      	strb	r2, [r3, #24]
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	e000e100 	.word	0xe000e100
 800a94c:	e000ed00 	.word	0xe000ed00

0800a950 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <SysTick_Handler+0x1c>)
 800a956:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a958:	f002 fc1e 	bl	800d198 <xTaskGetSchedulerState>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d001      	beq.n	800a966 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a962:	f003 fdc1 	bl	800e4e8 <xPortSysTickHandler>
  }
}
 800a966:	bf00      	nop
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	e000e010 	.word	0xe000e010

0800a970 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a974:	2100      	movs	r1, #0
 800a976:	f06f 0004 	mvn.w	r0, #4
 800a97a:	f7ff ffbf 	bl	800a8fc <__NVIC_SetPriority>
#endif
}
 800a97e:	bf00      	nop
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a98a:	f3ef 8305 	mrs	r3, IPSR
 800a98e:	603b      	str	r3, [r7, #0]
  return(result);
 800a990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a996:	f06f 0305 	mvn.w	r3, #5
 800a99a:	607b      	str	r3, [r7, #4]
 800a99c:	e00c      	b.n	800a9b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a99e:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <osKernelInitialize+0x44>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d105      	bne.n	800a9b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <osKernelInitialize+0x44>)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	607b      	str	r3, [r7, #4]
 800a9b0:	e002      	b.n	800a9b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9b8:	687b      	ldr	r3, [r7, #4]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	200010f8 	.word	0x200010f8

0800a9cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9d2:	f3ef 8305 	mrs	r3, IPSR
 800a9d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a9d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a9de:	f06f 0305 	mvn.w	r3, #5
 800a9e2:	607b      	str	r3, [r7, #4]
 800a9e4:	e010      	b.n	800aa08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a9e6:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <osKernelStart+0x48>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d109      	bne.n	800aa02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9ee:	f7ff ffbf 	bl	800a970 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a9f2:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <osKernelStart+0x48>)
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a9f8:	f001 ff50 	bl	800c89c <vTaskStartScheduler>
      stat = osOK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	607b      	str	r3, [r7, #4]
 800aa00:	e002      	b.n	800aa08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295
 800aa06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa08:	687b      	ldr	r3, [r7, #4]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	200010f8 	.word	0x200010f8

0800aa18 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa1e:	f3ef 8305 	mrs	r3, IPSR
 800aa22:	603b      	str	r3, [r7, #0]
  return(result);
 800aa24:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800aa2a:	f002 f863 	bl	800caf4 <xTaskGetTickCountFromISR>
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	e002      	b.n	800aa38 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800aa32:	f002 f84f 	bl	800cad4 <xTaskGetTickCount>
 800aa36:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800aa38:	687b      	ldr	r3, [r7, #4]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b08e      	sub	sp, #56	; 0x38
 800aa46:	af04      	add	r7, sp, #16
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa52:	f3ef 8305 	mrs	r3, IPSR
 800aa56:	617b      	str	r3, [r7, #20]
  return(result);
 800aa58:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d17e      	bne.n	800ab5c <osThreadNew+0x11a>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d07b      	beq.n	800ab5c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa64:	2380      	movs	r3, #128	; 0x80
 800aa66:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa68:	2318      	movs	r3, #24
 800aa6a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295
 800aa74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d045      	beq.n	800ab08 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <osThreadNew+0x48>
        name = attr->name;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d008      	beq.n	800aab0 <osThreadNew+0x6e>
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	2b38      	cmp	r3, #56	; 0x38
 800aaa2:	d805      	bhi.n	800aab0 <osThreadNew+0x6e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <osThreadNew+0x72>
        return (NULL);
 800aab0:	2300      	movs	r3, #0
 800aab2:	e054      	b.n	800ab5e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	695b      	ldr	r3, [r3, #20]
 800aac0:	089b      	lsrs	r3, r3, #2
 800aac2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00e      	beq.n	800aaea <osThreadNew+0xa8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	2bbb      	cmp	r3, #187	; 0xbb
 800aad2:	d90a      	bls.n	800aaea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d006      	beq.n	800aaea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <osThreadNew+0xa8>
        mem = 1;
 800aae4:	2301      	movs	r3, #1
 800aae6:	61bb      	str	r3, [r7, #24]
 800aae8:	e010      	b.n	800ab0c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10c      	bne.n	800ab0c <osThreadNew+0xca>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d108      	bne.n	800ab0c <osThreadNew+0xca>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d104      	bne.n	800ab0c <osThreadNew+0xca>
          mem = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	e001      	b.n	800ab0c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d110      	bne.n	800ab34 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab1a:	9202      	str	r2, [sp, #8]
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6a3a      	ldr	r2, [r7, #32]
 800ab26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f001 fc4d 	bl	800c3c8 <xTaskCreateStatic>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	e013      	b.n	800ab5c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d110      	bne.n	800ab5c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	f107 0310 	add.w	r3, r7, #16
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f001 fc98 	bl	800c482 <xTaskCreate>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d001      	beq.n	800ab5c <osThreadNew+0x11a>
            hTask = NULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab5c:	693b      	ldr	r3, [r7, #16]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3728      	adds	r7, #40	; 0x28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af02      	add	r7, sp, #8
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <osThreadFlagsSet+0x1a>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	da03      	bge.n	800ab8a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ab82:	f06f 0303 	mvn.w	r3, #3
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	e035      	b.n	800abf6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ab8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab90:	f3ef 8305 	mrs	r3, IPSR
 800ab94:	613b      	str	r3, [r7, #16]
  return(result);
 800ab96:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01f      	beq.n	800abdc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800aba0:	f107 0308 	add.w	r3, r7, #8
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	2201      	movs	r2, #1
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6978      	ldr	r0, [r7, #20]
 800abae:	f002 fd9b 	bl	800d6e8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800abb2:	f107 030c 	add.w	r3, r7, #12
 800abb6:	2200      	movs	r2, #0
 800abb8:	9200      	str	r2, [sp, #0]
 800abba:	2200      	movs	r2, #0
 800abbc:	2100      	movs	r1, #0
 800abbe:	6978      	ldr	r0, [r7, #20]
 800abc0:	f002 fd92 	bl	800d6e8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d015      	beq.n	800abf6 <osThreadFlagsSet+0x8e>
 800abca:	4b0d      	ldr	r3, [pc, #52]	; (800ac00 <osThreadFlagsSet+0x98>)
 800abcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	e00c      	b.n	800abf6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800abdc:	2300      	movs	r3, #0
 800abde:	2201      	movs	r2, #1
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	f002 fcc2 	bl	800d56c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800abe8:	f107 030c 	add.w	r3, r7, #12
 800abec:	2200      	movs	r2, #0
 800abee:	2100      	movs	r1, #0
 800abf0:	6978      	ldr	r0, [r7, #20]
 800abf2:	f002 fcbb 	bl	800d56c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800abf6:	68fb      	ldr	r3, [r7, #12]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac0a:	f3ef 8305 	mrs	r3, IPSR
 800ac0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac10:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800ac16:	f06f 0305 	mvn.w	r3, #5
 800ac1a:	607b      	str	r3, [r7, #4]
 800ac1c:	e00e      	b.n	800ac3c <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800ac1e:	f002 faab 	bl	800d178 <xTaskGetCurrentTaskHandle>
 800ac22:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800ac24:	1d3b      	adds	r3, r7, #4
 800ac26:	2200      	movs	r2, #0
 800ac28:	2100      	movs	r1, #0
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f002 fc9e 	bl	800d56c <xTaskGenericNotify>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d002      	beq.n	800ac3c <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800ac36:	f04f 33ff 	mov.w	r3, #4294967295
 800ac3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800ac3c:	687b      	ldr	r3, [r7, #4]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b08c      	sub	sp, #48	; 0x30
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac52:	f3ef 8305 	mrs	r3, IPSR
 800ac56:	617b      	str	r3, [r7, #20]
  return(result);
 800ac58:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ac5e:	f06f 0305 	mvn.w	r3, #5
 800ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac64:	e06b      	b.n	800ad3e <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	da03      	bge.n	800ac74 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ac6c:	f06f 0303 	mvn.w	r3, #3
 800ac70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac72:	e064      	b.n	800ad3e <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac82:	e001      	b.n	800ac88 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800ac90:	f001 ff20 	bl	800cad4 <xTaskGetTickCount>
 800ac94:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ac96:	f107 0210 	add.w	r2, r7, #16
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac9e:	2000      	movs	r0, #0
 800aca0:	f002 fc04 	bl	800d4ac <xTaskNotifyWait>
 800aca4:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d137      	bne.n	800ad1c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800acac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4013      	ands	r3, r2
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb8:	4313      	orrs	r3, r2
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00c      	beq.n	800ace0 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	4013      	ands	r3, r2
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d032      	beq.n	800ad38 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10f      	bne.n	800acf8 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800acd8:	f06f 0302 	mvn.w	r3, #2
 800acdc:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800acde:	e02e      	b.n	800ad3e <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	4013      	ands	r3, r2
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d128      	bne.n	800ad3c <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800acf0:	f06f 0302 	mvn.w	r3, #2
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800acf6:	e022      	b.n	800ad3e <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800acf8:	f001 feec 	bl	800cad4 <xTaskGetTickCount>
 800acfc:	4602      	mov	r2, r0
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d902      	bls.n	800ad12 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad10:	e00e      	b.n	800ad30 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ad12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1a:	e009      	b.n	800ad30 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d103      	bne.n	800ad2a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ad22:	f06f 0302 	mvn.w	r3, #2
 800ad26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad28:	e002      	b.n	800ad30 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ad2a:	f06f 0301 	mvn.w	r3, #1
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1af      	bne.n	800ac96 <osThreadFlagsWait+0x50>
 800ad36:	e002      	b.n	800ad3e <osThreadFlagsWait+0xf8>
            break;
 800ad38:	bf00      	nop
 800ad3a:	e000      	b.n	800ad3e <osThreadFlagsWait+0xf8>
            break;
 800ad3c:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3730      	adds	r7, #48	; 0x30
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad50:	f3ef 8305 	mrs	r3, IPSR
 800ad54:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d003      	beq.n	800ad64 <osDelay+0x1c>
    stat = osErrorISR;
 800ad5c:	f06f 0305 	mvn.w	r3, #5
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	e007      	b.n	800ad74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 fd60 	bl	800c834 <vTaskDelay>
    }
  }

  return (stat);
 800ad74:	68fb      	ldr	r3, [r7, #12]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b086      	sub	sp, #24
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad86:	f3ef 8305 	mrs	r3, IPSR
 800ad8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ad92:	f06f 0305 	mvn.w	r3, #5
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	e019      	b.n	800adce <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ad9e:	f001 fe99 	bl	800cad4 <xTaskGetTickCount>
 800ada2:	4603      	mov	r3, r0
 800ada4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d009      	beq.n	800adc8 <osDelayUntil+0x4a>
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	db06      	blt.n	800adc8 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800adba:	f107 0308 	add.w	r3, r7, #8
 800adbe:	6939      	ldr	r1, [r7, #16]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fcb9 	bl	800c738 <vTaskDelayUntil>
 800adc6:	e002      	b.n	800adce <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800adc8:	f06f 0303 	mvn.w	r3, #3
 800adcc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800adce:	697b      	ldr	r3, [r7, #20]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f003 f9a1 	bl	800e128 <pvTimerGetTimerID>
 800ade6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <TimerCallback+0x22>
    callb->func (callb->arg);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	6852      	ldr	r2, [r2, #4]
 800adf6:	4610      	mov	r0, r2
 800adf8:	4798      	blx	r3
  }
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08c      	sub	sp, #48	; 0x30
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	607a      	str	r2, [r7, #4]
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	460b      	mov	r3, r1
 800ae12:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae18:	f3ef 8305 	mrs	r3, IPSR
 800ae1c:	613b      	str	r3, [r7, #16]
  return(result);
 800ae1e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d163      	bne.n	800aeec <osTimerNew+0xe8>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d060      	beq.n	800aeec <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ae2a:	2008      	movs	r0, #8
 800ae2c:	f003 fbec 	bl	800e608 <pvPortMalloc>
 800ae30:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d059      	beq.n	800aeec <osTimerNew+0xe8>
      callb->func = func;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ae44:	7afb      	ldrb	r3, [r7, #11]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d102      	bne.n	800ae50 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61fb      	str	r3, [r7, #28]
 800ae4e:	e001      	b.n	800ae54 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ae50:	2301      	movs	r3, #1
 800ae52:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01c      	beq.n	800ae9e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d002      	beq.n	800ae72 <osTimerNew+0x6e>
          name = attr->name;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d006      	beq.n	800ae88 <osTimerNew+0x84>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	2b2b      	cmp	r3, #43	; 0x2b
 800ae80:	d902      	bls.n	800ae88 <osTimerNew+0x84>
          mem = 1;
 800ae82:	2301      	movs	r3, #1
 800ae84:	61bb      	str	r3, [r7, #24]
 800ae86:	e00c      	b.n	800aea2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d108      	bne.n	800aea2 <osTimerNew+0x9e>
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <osTimerNew+0x9e>
            mem = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61bb      	str	r3, [r7, #24]
 800ae9c:	e001      	b.n	800aea2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d10c      	bne.n	800aec2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	4b12      	ldr	r3, [pc, #72]	; (800aef8 <osTimerNew+0xf4>)
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	69fa      	ldr	r2, [r7, #28]
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aeba:	f002 fdb6 	bl	800da2a <xTimerCreateStatic>
 800aebe:	6238      	str	r0, [r7, #32]
 800aec0:	e00b      	b.n	800aeda <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d108      	bne.n	800aeda <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800aec8:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <osTimerNew+0xf4>)
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	69fa      	ldr	r2, [r7, #28]
 800aed0:	2101      	movs	r1, #1
 800aed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aed4:	f002 fd88 	bl	800d9e8 <xTimerCreate>
 800aed8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d105      	bne.n	800aeec <osTimerNew+0xe8>
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <osTimerNew+0xe8>
        vPortFree (callb);
 800aee6:	6978      	ldr	r0, [r7, #20]
 800aee8:	f003 fc5a 	bl	800e7a0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800aeec:	6a3b      	ldr	r3, [r7, #32]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3728      	adds	r7, #40	; 0x28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	0800add9 	.word	0x0800add9

0800aefc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af02      	add	r7, sp, #8
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af0a:	f3ef 8305 	mrs	r3, IPSR
 800af0e:	60fb      	str	r3, [r7, #12]
  return(result);
 800af10:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <osTimerStart+0x22>
    stat = osErrorISR;
 800af16:	f06f 0305 	mvn.w	r3, #5
 800af1a:	617b      	str	r3, [r7, #20]
 800af1c:	e017      	b.n	800af4e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d103      	bne.n	800af2c <osTimerStart+0x30>
    stat = osErrorParameter;
 800af24:	f06f 0303 	mvn.w	r3, #3
 800af28:	617b      	str	r3, [r7, #20]
 800af2a:	e010      	b.n	800af4e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800af2c:	2300      	movs	r3, #0
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	2300      	movs	r3, #0
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	2104      	movs	r1, #4
 800af36:	6938      	ldr	r0, [r7, #16]
 800af38:	f002 fdf0 	bl	800db1c <xTimerGenericCommand>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d102      	bne.n	800af48 <osTimerStart+0x4c>
      stat = osOK;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e002      	b.n	800af4e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800af48:	f06f 0302 	mvn.w	r3, #2
 800af4c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800af4e:	697b      	ldr	r3, [r7, #20]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800af60:	2300      	movs	r3, #0
 800af62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af64:	f3ef 8305 	mrs	r3, IPSR
 800af68:	60bb      	str	r3, [r7, #8]
  return(result);
 800af6a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d174      	bne.n	800b05a <osMutexNew+0x102>
    if (attr != NULL) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d003      	beq.n	800af7e <osMutexNew+0x26>
      type = attr->attr_bits;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	e001      	b.n	800af82 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <osMutexNew+0x3a>
      rmtx = 1U;
 800af8c:	2301      	movs	r3, #1
 800af8e:	617b      	str	r3, [r7, #20]
 800af90:	e001      	b.n	800af96 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	f003 0308 	and.w	r3, r3, #8
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d15c      	bne.n	800b05a <osMutexNew+0x102>
      mem = -1;
 800afa0:	f04f 33ff 	mov.w	r3, #4294967295
 800afa4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d015      	beq.n	800afd8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d006      	beq.n	800afc2 <osMutexNew+0x6a>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	2b4f      	cmp	r3, #79	; 0x4f
 800afba:	d902      	bls.n	800afc2 <osMutexNew+0x6a>
          mem = 1;
 800afbc:	2301      	movs	r3, #1
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	e00c      	b.n	800afdc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d108      	bne.n	800afdc <osMutexNew+0x84>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d104      	bne.n	800afdc <osMutexNew+0x84>
            mem = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	613b      	str	r3, [r7, #16]
 800afd6:	e001      	b.n	800afdc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d112      	bne.n	800b008 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	4619      	mov	r1, r3
 800afee:	2004      	movs	r0, #4
 800aff0:	f000 fba1 	bl	800b736 <xQueueCreateMutexStatic>
 800aff4:	61f8      	str	r0, [r7, #28]
 800aff6:	e016      	b.n	800b026 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	4619      	mov	r1, r3
 800affe:	2001      	movs	r0, #1
 800b000:	f000 fb99 	bl	800b736 <xQueueCreateMutexStatic>
 800b004:	61f8      	str	r0, [r7, #28]
 800b006:	e00e      	b.n	800b026 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10b      	bne.n	800b026 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b014:	2004      	movs	r0, #4
 800b016:	f000 fb76 	bl	800b706 <xQueueCreateMutex>
 800b01a:	61f8      	str	r0, [r7, #28]
 800b01c:	e003      	b.n	800b026 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b01e:	2001      	movs	r0, #1
 800b020:	f000 fb71 	bl	800b706 <xQueueCreateMutex>
 800b024:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00c      	beq.n	800b046 <osMutexNew+0xee>
        if (attr != NULL) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <osMutexNew+0xe2>
          name = attr->name;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	e001      	b.n	800b03e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	69f8      	ldr	r0, [r7, #28]
 800b042:	f001 f939 	bl	800c2b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d006      	beq.n	800b05a <osMutexNew+0x102>
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b05a:	69fb      	ldr	r3, [r7, #28]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3720      	adds	r7, #32
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f023 0301 	bic.w	r3, r3, #1
 800b074:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b082:	f3ef 8305 	mrs	r3, IPSR
 800b086:	60bb      	str	r3, [r7, #8]
  return(result);
 800b088:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b08e:	f06f 0305 	mvn.w	r3, #5
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e02c      	b.n	800b0f0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d103      	bne.n	800b0a4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b09c:	f06f 0303 	mvn.w	r3, #3
 800b0a0:	617b      	str	r3, [r7, #20]
 800b0a2:	e025      	b.n	800b0f0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d011      	beq.n	800b0ce <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6938      	ldr	r0, [r7, #16]
 800b0ae:	f000 fb91 	bl	800b7d4 <xQueueTakeMutexRecursive>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d01b      	beq.n	800b0f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b0be:	f06f 0301 	mvn.w	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
 800b0c4:	e014      	b.n	800b0f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b0c6:	f06f 0302 	mvn.w	r3, #2
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	e010      	b.n	800b0f0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6938      	ldr	r0, [r7, #16]
 800b0d2:	f000 fe99 	bl	800be08 <xQueueSemaphoreTake>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d009      	beq.n	800b0f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b0e2:	f06f 0301 	mvn.w	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e002      	b.n	800b0f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b0ea:	f06f 0302 	mvn.w	r3, #2
 800b0ee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b0f0:	697b      	ldr	r3, [r7, #20]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b086      	sub	sp, #24
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f023 0301 	bic.w	r3, r3, #1
 800b108:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b116:	f3ef 8305 	mrs	r3, IPSR
 800b11a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b11c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <osMutexRelease+0x30>
    stat = osErrorISR;
 800b122:	f06f 0305 	mvn.w	r3, #5
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	e01f      	b.n	800b16a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d103      	bne.n	800b138 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b130:	f06f 0303 	mvn.w	r3, #3
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	e018      	b.n	800b16a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d009      	beq.n	800b152 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b13e:	6938      	ldr	r0, [r7, #16]
 800b140:	f000 fb14 	bl	800b76c <xQueueGiveMutexRecursive>
 800b144:	4603      	mov	r3, r0
 800b146:	2b01      	cmp	r3, #1
 800b148:	d00f      	beq.n	800b16a <osMutexRelease+0x70>
        stat = osErrorResource;
 800b14a:	f06f 0302 	mvn.w	r3, #2
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e00b      	b.n	800b16a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b152:	2300      	movs	r3, #0
 800b154:	2200      	movs	r2, #0
 800b156:	2100      	movs	r1, #0
 800b158:	6938      	ldr	r0, [r7, #16]
 800b15a:	f000 fbdb 	bl	800b914 <xQueueGenericSend>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d002      	beq.n	800b16a <osMutexRelease+0x70>
        stat = osErrorResource;
 800b164:	f06f 0302 	mvn.w	r3, #2
 800b168:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b16a:	697b      	ldr	r3, [r7, #20]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af02      	add	r7, sp, #8
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b180:	2300      	movs	r3, #0
 800b182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b184:	f3ef 8305 	mrs	r3, IPSR
 800b188:	613b      	str	r3, [r7, #16]
  return(result);
 800b18a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d175      	bne.n	800b27c <osSemaphoreNew+0x108>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d072      	beq.n	800b27c <osSemaphoreNew+0x108>
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d86e      	bhi.n	800b27c <osSemaphoreNew+0x108>
    mem = -1;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d015      	beq.n	800b1d6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d006      	beq.n	800b1c0 <osSemaphoreNew+0x4c>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	2b4f      	cmp	r3, #79	; 0x4f
 800b1b8:	d902      	bls.n	800b1c0 <osSemaphoreNew+0x4c>
        mem = 1;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	61bb      	str	r3, [r7, #24]
 800b1be:	e00c      	b.n	800b1da <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d108      	bne.n	800b1da <osSemaphoreNew+0x66>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d104      	bne.n	800b1da <osSemaphoreNew+0x66>
          mem = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61bb      	str	r3, [r7, #24]
 800b1d4:	e001      	b.n	800b1da <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e0:	d04c      	beq.n	800b27c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d128      	bne.n	800b23a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d10a      	bne.n	800b204 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	2203      	movs	r2, #3
 800b1f4:	9200      	str	r2, [sp, #0]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	f000 f994 	bl	800b528 <xQueueGenericCreateStatic>
 800b200:	61f8      	str	r0, [r7, #28]
 800b202:	e005      	b.n	800b210 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b204:	2203      	movs	r2, #3
 800b206:	2100      	movs	r1, #0
 800b208:	2001      	movs	r0, #1
 800b20a:	f000 fa05 	bl	800b618 <xQueueGenericCreate>
 800b20e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d022      	beq.n	800b25c <osSemaphoreNew+0xe8>
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d01f      	beq.n	800b25c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b21c:	2300      	movs	r3, #0
 800b21e:	2200      	movs	r2, #0
 800b220:	2100      	movs	r1, #0
 800b222:	69f8      	ldr	r0, [r7, #28]
 800b224:	f000 fb76 	bl	800b914 <xQueueGenericSend>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d016      	beq.n	800b25c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b22e:	69f8      	ldr	r0, [r7, #28]
 800b230:	f000 fef6 	bl	800c020 <vQueueDelete>
            hSemaphore = NULL;
 800b234:	2300      	movs	r3, #0
 800b236:	61fb      	str	r3, [r7, #28]
 800b238:	e010      	b.n	800b25c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d108      	bne.n	800b252 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	461a      	mov	r2, r3
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 faf9 	bl	800b840 <xQueueCreateCountingSemaphoreStatic>
 800b24e:	61f8      	str	r0, [r7, #28]
 800b250:	e004      	b.n	800b25c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 fb2a 	bl	800b8ae <xQueueCreateCountingSemaphore>
 800b25a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d003      	beq.n	800b270 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e001      	b.n	800b274 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	69f8      	ldr	r0, [r7, #28]
 800b278:	f001 f81e 	bl	800c2b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b27c:	69fb      	ldr	r3, [r7, #28]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3720      	adds	r7, #32
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
	...

0800b288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4a07      	ldr	r2, [pc, #28]	; (800b2b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	4a06      	ldr	r2, [pc, #24]	; (800b2b8 <vApplicationGetIdleTaskMemory+0x30>)
 800b29e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2280      	movs	r2, #128	; 0x80
 800b2a4:	601a      	str	r2, [r3, #0]
}
 800b2a6:	bf00      	nop
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	200010fc 	.word	0x200010fc
 800b2b8:	200011b8 	.word	0x200011b8

0800b2bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4a07      	ldr	r2, [pc, #28]	; (800b2e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4a06      	ldr	r2, [pc, #24]	; (800b2ec <vApplicationGetTimerTaskMemory+0x30>)
 800b2d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2da:	601a      	str	r2, [r3, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	200013b8 	.word	0x200013b8
 800b2ec:	20001474 	.word	0x20001474

0800b2f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f103 0208 	add.w	r2, r3, #8
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f04f 32ff 	mov.w	r2, #4294967295
 800b308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f103 0208 	add.w	r2, r3, #8
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f103 0208 	add.w	r2, r3, #8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	601a      	str	r2, [r3, #0]
}
 800b386:	bf00      	nop
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b392:	b480      	push	{r7}
 800b394:	b085      	sub	sp, #20
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d103      	bne.n	800b3b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e00c      	b.n	800b3cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	e002      	b.n	800b3c0 <vListInsert+0x2e>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d2f6      	bcs.n	800b3ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	601a      	str	r2, [r3, #0]
}
 800b3f8:	bf00      	nop
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	6892      	ldr	r2, [r2, #8]
 800b41a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	6852      	ldr	r2, [r2, #4]
 800b424:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d103      	bne.n	800b438 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1e5a      	subs	r2, r3, #1
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b482:	f002 ff9f 	bl	800e3c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48e:	68f9      	ldr	r1, [r7, #12]
 800b490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b492:	fb01 f303 	mul.w	r3, r1, r3
 800b496:	441a      	add	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	68f9      	ldr	r1, [r7, #12]
 800b4b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4b8:	fb01 f303 	mul.w	r3, r1, r3
 800b4bc:	441a      	add	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	22ff      	movs	r2, #255	; 0xff
 800b4c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d114      	bne.n	800b502 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01a      	beq.n	800b516 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3310      	adds	r3, #16
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fc85 	bl	800cdf4 <xTaskRemoveFromEventList>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d012      	beq.n	800b516 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4f0:	4b0c      	ldr	r3, [pc, #48]	; (800b524 <xQueueGenericReset+0xcc>)
 800b4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	e009      	b.n	800b516 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3310      	adds	r3, #16
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fef2 	bl	800b2f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3324      	adds	r3, #36	; 0x24
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff feed 	bl	800b2f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b516:	f002 ff85 	bl	800e424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b51a:	2301      	movs	r3, #1
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	e000ed04 	.word	0xe000ed04

0800b528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08e      	sub	sp, #56	; 0x38
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
 800b534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10a      	bne.n	800b552 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b54e:	bf00      	nop
 800b550:	e7fe      	b.n	800b550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <xQueueGenericCreateStatic+0x52>
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <xQueueGenericCreateStatic+0x56>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e000      	b.n	800b580 <xQueueGenericCreateStatic+0x58>
 800b57e:	2300      	movs	r3, #0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10a      	bne.n	800b59a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	623b      	str	r3, [r7, #32]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <xQueueGenericCreateStatic+0x7e>
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <xQueueGenericCreateStatic+0x82>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e000      	b.n	800b5ac <xQueueGenericCreateStatic+0x84>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	61fb      	str	r3, [r7, #28]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5c6:	2350      	movs	r3, #80	; 0x50
 800b5c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b50      	cmp	r3, #80	; 0x50
 800b5ce:	d00a      	beq.n	800b5e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	61bb      	str	r3, [r7, #24]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00d      	beq.n	800b60e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4613      	mov	r3, r2
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 f83f 	bl	800b68c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b610:	4618      	mov	r0, r3
 800b612:	3730      	adds	r7, #48	; 0x30
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	4613      	mov	r3, r2
 800b624:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	613b      	str	r3, [r7, #16]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	fb02 f303 	mul.w	r3, r2, r3
 800b64a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	3350      	adds	r3, #80	; 0x50
 800b650:	4618      	mov	r0, r3
 800b652:	f002 ffd9 	bl	800e608 <pvPortMalloc>
 800b656:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d011      	beq.n	800b682 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	3350      	adds	r3, #80	; 0x50
 800b666:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b670:	79fa      	ldrb	r2, [r7, #7]
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	4613      	mov	r3, r2
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f805 	bl	800b68c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b682:	69bb      	ldr	r3, [r7, #24]
	}
 800b684:	4618      	mov	r0, r3
 800b686:	3720      	adds	r7, #32
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d103      	bne.n	800b6a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	69ba      	ldr	r2, [r7, #24]
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	e002      	b.n	800b6ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	69b8      	ldr	r0, [r7, #24]
 800b6be:	f7ff fecb 	bl	800b458 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	78fa      	ldrb	r2, [r7, #3]
 800b6c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6ca:	bf00      	nop
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00e      	beq.n	800b6fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f90b 	bl	800b914 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b706:	b580      	push	{r7, lr}
 800b708:	b086      	sub	sp, #24
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	4603      	mov	r3, r0
 800b70e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b710:	2301      	movs	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	2300      	movs	r3, #0
 800b716:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	461a      	mov	r2, r3
 800b71c:	6939      	ldr	r1, [r7, #16]
 800b71e:	6978      	ldr	r0, [r7, #20]
 800b720:	f7ff ff7a 	bl	800b618 <xQueueGenericCreate>
 800b724:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff ffd3 	bl	800b6d2 <prvInitialiseMutex>

		return xNewQueue;
 800b72c:	68fb      	ldr	r3, [r7, #12]
	}
 800b72e:	4618      	mov	r0, r3
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af02      	add	r7, sp, #8
 800b73c:	4603      	mov	r3, r0
 800b73e:	6039      	str	r1, [r7, #0]
 800b740:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b742:	2301      	movs	r3, #1
 800b744:	617b      	str	r3, [r7, #20]
 800b746:	2300      	movs	r3, #0
 800b748:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b74a:	79fb      	ldrb	r3, [r7, #7]
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2200      	movs	r2, #0
 800b752:	6939      	ldr	r1, [r7, #16]
 800b754:	6978      	ldr	r0, [r7, #20]
 800b756:	f7ff fee7 	bl	800b528 <xQueueGenericCreateStatic>
 800b75a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f7ff ffb8 	bl	800b6d2 <prvInitialiseMutex>

		return xNewQueue;
 800b762:	68fb      	ldr	r3, [r7, #12]
	}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b76c:	b590      	push	{r4, r7, lr}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	60fb      	str	r3, [r7, #12]
}
 800b790:	bf00      	nop
 800b792:	e7fe      	b.n	800b792 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	689c      	ldr	r4, [r3, #8]
 800b798:	f001 fcee 	bl	800d178 <xTaskGetCurrentTaskHandle>
 800b79c:	4603      	mov	r3, r0
 800b79e:	429c      	cmp	r4, r3
 800b7a0:	d111      	bne.n	800b7c6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	1e5a      	subs	r2, r3, #1
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d105      	bne.n	800b7c0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	6938      	ldr	r0, [r7, #16]
 800b7bc:	f000 f8aa 	bl	800b914 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e001      	b.n	800b7ca <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b7ca:	697b      	ldr	r3, [r7, #20]
	}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	371c      	adds	r7, #28
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd90      	pop	{r4, r7, pc}

0800b7d4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	60fb      	str	r3, [r7, #12]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	689c      	ldr	r4, [r3, #8]
 800b802:	f001 fcb9 	bl	800d178 <xTaskGetCurrentTaskHandle>
 800b806:	4603      	mov	r3, r0
 800b808:	429c      	cmp	r4, r3
 800b80a:	d107      	bne.n	800b81c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b816:	2301      	movs	r3, #1
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	e00c      	b.n	800b836 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6938      	ldr	r0, [r7, #16]
 800b820:	f000 faf2 	bl	800be08 <xQueueSemaphoreTake>
 800b824:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b836:	697b      	ldr	r3, [r7, #20]
	}
 800b838:	4618      	mov	r0, r3
 800b83a:	371c      	adds	r7, #28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd90      	pop	{r4, r7, pc}

0800b840 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08a      	sub	sp, #40	; 0x28
 800b844:	af02      	add	r7, sp, #8
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	61bb      	str	r3, [r7, #24]
}
 800b864:	bf00      	nop
 800b866:	e7fe      	b.n	800b866 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d90a      	bls.n	800b886 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	617b      	str	r3, [r7, #20]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b886:	2302      	movs	r3, #2
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	2100      	movs	r1, #0
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff fe49 	bl	800b528 <xQueueGenericCreateStatic>
 800b896:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
	}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3720      	adds	r7, #32
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	613b      	str	r3, [r7, #16]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d90a      	bls.n	800b8f2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	60fb      	str	r3, [r7, #12]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7ff fe8e 	bl	800b618 <xQueueGenericCreate>
 800b8fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b90a:	697b      	ldr	r3, [r7, #20]
	}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08e      	sub	sp, #56	; 0x38
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b922:	2300      	movs	r3, #0
 800b924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <xQueueGenericSend+0x32>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d103      	bne.n	800b954 <xQueueGenericSend+0x40>
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <xQueueGenericSend+0x44>
 800b954:	2301      	movs	r3, #1
 800b956:	e000      	b.n	800b95a <xQueueGenericSend+0x46>
 800b958:	2300      	movs	r3, #0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <xQueueGenericSend+0x60>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b02      	cmp	r3, #2
 800b978:	d103      	bne.n	800b982 <xQueueGenericSend+0x6e>
 800b97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d101      	bne.n	800b986 <xQueueGenericSend+0x72>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <xQueueGenericSend+0x74>
 800b986:	2300      	movs	r3, #0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	623b      	str	r3, [r7, #32]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9a2:	f001 fbf9 	bl	800d198 <xTaskGetSchedulerState>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <xQueueGenericSend+0x9e>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <xQueueGenericSend+0xa2>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <xQueueGenericSend+0xa4>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61fb      	str	r3, [r7, #28]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9d2:	f002 fcf7 	bl	800e3c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d302      	bcc.n	800b9e8 <xQueueGenericSend+0xd4>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d129      	bne.n	800ba3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	68b9      	ldr	r1, [r7, #8]
 800b9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ee:	f000 fb52 	bl	800c096 <prvCopyDataToQueue>
 800b9f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d010      	beq.n	800ba1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	3324      	adds	r3, #36	; 0x24
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 f9f7 	bl	800cdf4 <xTaskRemoveFromEventList>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d013      	beq.n	800ba34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba0c:	4b3f      	ldr	r3, [pc, #252]	; (800bb0c <xQueueGenericSend+0x1f8>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	e00a      	b.n	800ba34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba24:	4b39      	ldr	r3, [pc, #228]	; (800bb0c <xQueueGenericSend+0x1f8>)
 800ba26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba34:	f002 fcf6 	bl	800e424 <vPortExitCritical>
				return pdPASS;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e063      	b.n	800bb04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d103      	bne.n	800ba4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba42:	f002 fcef 	bl	800e424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e05c      	b.n	800bb04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d106      	bne.n	800ba5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba50:	f107 0314 	add.w	r3, r7, #20
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 fa31 	bl	800cebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba5e:	f002 fce1 	bl	800e424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba62:	f000 ff8b 	bl	800c97c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba66:	f002 fcad 	bl	800e3c4 <vPortEnterCritical>
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba70:	b25b      	sxtb	r3, r3
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba76:	d103      	bne.n	800ba80 <xQueueGenericSend+0x16c>
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba86:	b25b      	sxtb	r3, r3
 800ba88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8c:	d103      	bne.n	800ba96 <xQueueGenericSend+0x182>
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba96:	f002 fcc5 	bl	800e424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba9a:	1d3a      	adds	r2, r7, #4
 800ba9c:	f107 0314 	add.w	r3, r7, #20
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 fa20 	bl	800cee8 <xTaskCheckForTimeOut>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d124      	bne.n	800baf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800baae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bab0:	f000 fbe9 	bl	800c286 <prvIsQueueFull>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d018      	beq.n	800baec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	3310      	adds	r3, #16
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	4611      	mov	r1, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f001 f946 	bl	800cd54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baca:	f000 fb74 	bl	800c1b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bace:	f000 ff63 	bl	800c998 <xTaskResumeAll>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f47f af7c 	bne.w	800b9d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bada:	4b0c      	ldr	r3, [pc, #48]	; (800bb0c <xQueueGenericSend+0x1f8>)
 800badc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae0:	601a      	str	r2, [r3, #0]
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	e772      	b.n	800b9d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800baec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baee:	f000 fb62 	bl	800c1b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baf2:	f000 ff51 	bl	800c998 <xTaskResumeAll>
 800baf6:	e76c      	b.n	800b9d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800baf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bafa:	f000 fb5c 	bl	800c1b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bafe:	f000 ff4b 	bl	800c998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3738      	adds	r7, #56	; 0x38
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	e000ed04 	.word	0xe000ed04

0800bb10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b090      	sub	sp, #64	; 0x40
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <xQueueGenericSendFromISR+0x3c>
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <xQueueGenericSendFromISR+0x40>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <xQueueGenericSendFromISR+0x42>
 800bb50:	2300      	movs	r3, #0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10a      	bne.n	800bb6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb68:	bf00      	nop
 800bb6a:	e7fe      	b.n	800bb6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d103      	bne.n	800bb7a <xQueueGenericSendFromISR+0x6a>
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d101      	bne.n	800bb7e <xQueueGenericSendFromISR+0x6e>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e000      	b.n	800bb80 <xQueueGenericSendFromISR+0x70>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10a      	bne.n	800bb9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	623b      	str	r3, [r7, #32]
}
 800bb96:	bf00      	nop
 800bb98:	e7fe      	b.n	800bb98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb9a:	f002 fcf5 	bl	800e588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb9e:	f3ef 8211 	mrs	r2, BASEPRI
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	61fa      	str	r2, [r7, #28]
 800bbb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d302      	bcc.n	800bbcc <xQueueGenericSendFromISR+0xbc>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d12f      	bne.n	800bc2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbe2:	f000 fa58 	bl	800c096 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbe6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d112      	bne.n	800bc16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d016      	beq.n	800bc26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfa:	3324      	adds	r3, #36	; 0x24
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 f8f9 	bl	800cdf4 <xTaskRemoveFromEventList>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00e      	beq.n	800bc26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	e007      	b.n	800bc26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	b25a      	sxtb	r2, r3
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc26:	2301      	movs	r3, #1
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc2a:	e001      	b.n	800bc30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3740      	adds	r7, #64	; 0x40
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08c      	sub	sp, #48	; 0x30
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc54:	2300      	movs	r3, #0
 800bc56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <xQueueReceive+0x30>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	623b      	str	r3, [r7, #32]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d103      	bne.n	800bc86 <xQueueReceive+0x3e>
 800bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <xQueueReceive+0x42>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e000      	b.n	800bc8c <xQueueReceive+0x44>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <xQueueReceive+0x5e>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	61fb      	str	r3, [r7, #28]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bca6:	f001 fa77 	bl	800d198 <xTaskGetSchedulerState>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d102      	bne.n	800bcb6 <xQueueReceive+0x6e>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <xQueueReceive+0x72>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <xQueueReceive+0x74>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <xQueueReceive+0x8e>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	61bb      	str	r3, [r7, #24]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcd6:	f002 fb75 	bl	800e3c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d01f      	beq.n	800bd26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bce6:	68b9      	ldr	r1, [r7, #8]
 800bce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcea:	f000 fa3e 	bl	800c16a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00f      	beq.n	800bd1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	3310      	adds	r3, #16
 800bd02:	4618      	mov	r0, r3
 800bd04:	f001 f876 	bl	800cdf4 <xTaskRemoveFromEventList>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d007      	beq.n	800bd1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd0e:	4b3d      	ldr	r3, [pc, #244]	; (800be04 <xQueueReceive+0x1bc>)
 800bd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd1e:	f002 fb81 	bl	800e424 <vPortExitCritical>
				return pdPASS;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e069      	b.n	800bdfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd2c:	f002 fb7a 	bl	800e424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e062      	b.n	800bdfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd3a:	f107 0310 	add.w	r3, r7, #16
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 f8bc 	bl	800cebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd44:	2301      	movs	r3, #1
 800bd46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd48:	f002 fb6c 	bl	800e424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd4c:	f000 fe16 	bl	800c97c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd50:	f002 fb38 	bl	800e3c4 <vPortEnterCritical>
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd5a:	b25b      	sxtb	r3, r3
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd60:	d103      	bne.n	800bd6a <xQueueReceive+0x122>
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd76:	d103      	bne.n	800bd80 <xQueueReceive+0x138>
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd80:	f002 fb50 	bl	800e424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd84:	1d3a      	adds	r2, r7, #4
 800bd86:	f107 0310 	add.w	r3, r7, #16
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f001 f8ab 	bl	800cee8 <xTaskCheckForTimeOut>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d123      	bne.n	800bde0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9a:	f000 fa5e 	bl	800c25a <prvIsQueueEmpty>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d017      	beq.n	800bdd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	3324      	adds	r3, #36	; 0x24
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4611      	mov	r1, r2
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 ffd1 	bl	800cd54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb4:	f000 f9ff 	bl	800c1b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdb8:	f000 fdee 	bl	800c998 <xTaskResumeAll>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d189      	bne.n	800bcd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bdc2:	4b10      	ldr	r3, [pc, #64]	; (800be04 <xQueueReceive+0x1bc>)
 800bdc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	e780      	b.n	800bcd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd6:	f000 f9ee 	bl	800c1b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdda:	f000 fddd 	bl	800c998 <xTaskResumeAll>
 800bdde:	e77a      	b.n	800bcd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde2:	f000 f9e8 	bl	800c1b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bde6:	f000 fdd7 	bl	800c998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdec:	f000 fa35 	bl	800c25a <prvIsQueueEmpty>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f43f af6f 	beq.w	800bcd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3730      	adds	r7, #48	; 0x30
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08e      	sub	sp, #56	; 0x38
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	623b      	str	r3, [r7, #32]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	61fb      	str	r3, [r7, #28]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be58:	f001 f99e 	bl	800d198 <xTaskGetSchedulerState>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <xQueueSemaphoreTake+0x60>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <xQueueSemaphoreTake+0x64>
 800be68:	2301      	movs	r3, #1
 800be6a:	e000      	b.n	800be6e <xQueueSemaphoreTake+0x66>
 800be6c:	2300      	movs	r3, #0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	61bb      	str	r3, [r7, #24]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be88:	f002 fa9c 	bl	800e3c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	2b00      	cmp	r3, #0
 800be96:	d024      	beq.n	800bee2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	1e5a      	subs	r2, r3, #1
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bea8:	f001 faec 	bl	800d484 <pvTaskIncrementMutexHeldCount>
 800beac:	4602      	mov	r2, r0
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00f      	beq.n	800beda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	3310      	adds	r3, #16
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 ff98 	bl	800cdf4 <xTaskRemoveFromEventList>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d007      	beq.n	800beda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800beca:	4b54      	ldr	r3, [pc, #336]	; (800c01c <xQueueSemaphoreTake+0x214>)
 800becc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed0:	601a      	str	r2, [r3, #0]
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beda:	f002 faa3 	bl	800e424 <vPortExitCritical>
				return pdPASS;
 800bede:	2301      	movs	r3, #1
 800bee0:	e097      	b.n	800c012 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d111      	bne.n	800bf0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00a      	beq.n	800bf04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	617b      	str	r3, [r7, #20]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf04:	f002 fa8e 	bl	800e424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e082      	b.n	800c012 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf12:	f107 030c 	add.w	r3, r7, #12
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 ffd0 	bl	800cebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf20:	f002 fa80 	bl	800e424 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf24:	f000 fd2a 	bl	800c97c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf28:	f002 fa4c 	bl	800e3c4 <vPortEnterCritical>
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf32:	b25b      	sxtb	r3, r3
 800bf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf38:	d103      	bne.n	800bf42 <xQueueSemaphoreTake+0x13a>
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d103      	bne.n	800bf58 <xQueueSemaphoreTake+0x150>
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf58:	f002 fa64 	bl	800e424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf5c:	463a      	mov	r2, r7
 800bf5e:	f107 030c 	add.w	r3, r7, #12
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 ffbf 	bl	800cee8 <xTaskCheckForTimeOut>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d132      	bne.n	800bfd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf72:	f000 f972 	bl	800c25a <prvIsQueueEmpty>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d026      	beq.n	800bfca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d109      	bne.n	800bf98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bf84:	f002 fa1e 	bl	800e3c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f921 	bl	800d1d4 <xTaskPriorityInherit>
 800bf92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf94:	f002 fa46 	bl	800e424 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	3324      	adds	r3, #36	; 0x24
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 fed7 	bl	800cd54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa8:	f000 f905 	bl	800c1b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfac:	f000 fcf4 	bl	800c998 <xTaskResumeAll>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f47f af68 	bne.w	800be88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bfb8:	4b18      	ldr	r3, [pc, #96]	; (800c01c <xQueueSemaphoreTake+0x214>)
 800bfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	e75e      	b.n	800be88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfcc:	f000 f8f3 	bl	800c1b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfd0:	f000 fce2 	bl	800c998 <xTaskResumeAll>
 800bfd4:	e758      	b.n	800be88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd8:	f000 f8ed 	bl	800c1b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfdc:	f000 fcdc 	bl	800c998 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe2:	f000 f93a 	bl	800c25a <prvIsQueueEmpty>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f43f af4d 	beq.w	800be88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00d      	beq.n	800c010 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bff4:	f002 f9e6 	bl	800e3c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffa:	f000 f834 	bl	800c066 <prvGetDisinheritPriorityAfterTimeout>
 800bffe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c006:	4618      	mov	r0, r3
 800c008:	f001 f9ba 	bl	800d380 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c00c:	f002 fa0a 	bl	800e424 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c012:	4618      	mov	r0, r3
 800c014:	3738      	adds	r7, #56	; 0x38
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <vQueueDelete+0x28>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60bb      	str	r3, [r7, #8]
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 f95f 	bl	800c30c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c054:	2b00      	cmp	r3, #0
 800c056:	d102      	bne.n	800c05e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f002 fba1 	bl	800e7a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c05e:	bf00      	nop
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c066:	b480      	push	{r7}
 800c068:	b085      	sub	sp, #20
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c072:	2b00      	cmp	r3, #0
 800c074:	d006      	beq.n	800c084 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	e001      	b.n	800c088 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c088:	68fb      	ldr	r3, [r7, #12]
	}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3714      	adds	r7, #20
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b086      	sub	sp, #24
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10d      	bne.n	800c0d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d14d      	bne.n	800c158 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f001 f8ef 	bl	800d2a4 <xTaskPriorityDisinherit>
 800c0c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	609a      	str	r2, [r3, #8]
 800c0ce:	e043      	b.n	800c158 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d119      	bne.n	800c10a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6858      	ldr	r0, [r3, #4]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0de:	461a      	mov	r2, r3
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	f002 fd9e 	bl	800ec22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	441a      	add	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	685a      	ldr	r2, [r3, #4]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d32b      	bcc.n	800c158 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	605a      	str	r2, [r3, #4]
 800c108:	e026      	b.n	800c158 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68d8      	ldr	r0, [r3, #12]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c112:	461a      	mov	r2, r3
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	f002 fd84 	bl	800ec22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	425b      	negs	r3, r3
 800c124:	441a      	add	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	68da      	ldr	r2, [r3, #12]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d207      	bcs.n	800c146 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	689a      	ldr	r2, [r3, #8]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13e:	425b      	negs	r3, r3
 800c140:	441a      	add	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d105      	bne.n	800c158 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	3b01      	subs	r3, #1
 800c156:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c160:	697b      	ldr	r3, [r7, #20]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b082      	sub	sp, #8
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d018      	beq.n	800c1ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68da      	ldr	r2, [r3, #12]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c184:	441a      	add	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	429a      	cmp	r2, r3
 800c194:	d303      	bcc.n	800c19e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	68d9      	ldr	r1, [r3, #12]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	6838      	ldr	r0, [r7, #0]
 800c1aa:	f002 fd3a 	bl	800ec22 <memcpy>
	}
}
 800c1ae:	bf00      	nop
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c1be:	f002 f901 	bl	800e3c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1ca:	e011      	b.n	800c1f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d012      	beq.n	800c1fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3324      	adds	r3, #36	; 0x24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fe0b 	bl	800cdf4 <xTaskRemoveFromEventList>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d001      	beq.n	800c1e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c1e4:	f000 fee2 	bl	800cfac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	dce9      	bgt.n	800c1cc <prvUnlockQueue+0x16>
 800c1f8:	e000      	b.n	800c1fc <prvUnlockQueue+0x46>
					break;
 800c1fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	22ff      	movs	r2, #255	; 0xff
 800c200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c204:	f002 f90e 	bl	800e424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c208:	f002 f8dc 	bl	800e3c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c212:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c214:	e011      	b.n	800c23a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d012      	beq.n	800c244 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3310      	adds	r3, #16
 800c222:	4618      	mov	r0, r3
 800c224:	f000 fde6 	bl	800cdf4 <xTaskRemoveFromEventList>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c22e:	f000 febd 	bl	800cfac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	3b01      	subs	r3, #1
 800c236:	b2db      	uxtb	r3, r3
 800c238:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dce9      	bgt.n	800c216 <prvUnlockQueue+0x60>
 800c242:	e000      	b.n	800c246 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c244:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	22ff      	movs	r2, #255	; 0xff
 800c24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c24e:	f002 f8e9 	bl	800e424 <vPortExitCritical>
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b084      	sub	sp, #16
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c262:	f002 f8af 	bl	800e3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d102      	bne.n	800c274 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c26e:	2301      	movs	r3, #1
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e001      	b.n	800c278 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c278:	f002 f8d4 	bl	800e424 <vPortExitCritical>

	return xReturn;
 800c27c:	68fb      	ldr	r3, [r7, #12]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b084      	sub	sp, #16
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c28e:	f002 f899 	bl	800e3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d102      	bne.n	800c2a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	e001      	b.n	800c2a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2a8:	f002 f8bc 	bl	800e424 <vPortExitCritical>

	return xReturn;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	e014      	b.n	800c2f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c2c8:	4a0f      	ldr	r2, [pc, #60]	; (800c308 <vQueueAddToRegistry+0x50>)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10b      	bne.n	800c2ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c2d4:	490c      	ldr	r1, [pc, #48]	; (800c308 <vQueueAddToRegistry+0x50>)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c2de:	4a0a      	ldr	r2, [pc, #40]	; (800c308 <vQueueAddToRegistry+0x50>)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	4413      	add	r3, r2
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c2ea:	e006      	b.n	800c2fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b07      	cmp	r3, #7
 800c2f6:	d9e7      	bls.n	800c2c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	20001874 	.word	0x20001874

0800c30c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c314:	2300      	movs	r3, #0
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e016      	b.n	800c348 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c31a:	4a10      	ldr	r2, [pc, #64]	; (800c35c <vQueueUnregisterQueue+0x50>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	4413      	add	r3, r2
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d10b      	bne.n	800c342 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c32a:	4a0c      	ldr	r2, [pc, #48]	; (800c35c <vQueueUnregisterQueue+0x50>)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2100      	movs	r1, #0
 800c330:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c334:	4a09      	ldr	r2, [pc, #36]	; (800c35c <vQueueUnregisterQueue+0x50>)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	4413      	add	r3, r2
 800c33c:	2200      	movs	r2, #0
 800c33e:	605a      	str	r2, [r3, #4]
				break;
 800c340:	e006      	b.n	800c350 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3301      	adds	r3, #1
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b07      	cmp	r3, #7
 800c34c:	d9e5      	bls.n	800c31a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	20001874 	.word	0x20001874

0800c360 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c370:	f002 f828 	bl	800e3c4 <vPortEnterCritical>
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c37a:	b25b      	sxtb	r3, r3
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c380:	d103      	bne.n	800c38a <vQueueWaitForMessageRestricted+0x2a>
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c390:	b25b      	sxtb	r3, r3
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d103      	bne.n	800c3a0 <vQueueWaitForMessageRestricted+0x40>
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a0:	f002 f840 	bl	800e424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	3324      	adds	r3, #36	; 0x24
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fcf1 	bl	800cd9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c3ba:	6978      	ldr	r0, [r7, #20]
 800c3bc:	f7ff fefb 	bl	800c1b6 <prvUnlockQueue>
	}
 800c3c0:	bf00      	nop
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08e      	sub	sp, #56	; 0x38
 800c3cc:	af04      	add	r7, sp, #16
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	623b      	str	r3, [r7, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <xTaskCreateStatic+0x46>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	61fb      	str	r3, [r7, #28]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c40e:	23bc      	movs	r3, #188	; 0xbc
 800c410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	2bbc      	cmp	r3, #188	; 0xbc
 800c416:	d00a      	beq.n	800c42e <xTaskCreateStatic+0x66>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	61bb      	str	r3, [r7, #24]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c42e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	2b00      	cmp	r3, #0
 800c434:	d01e      	beq.n	800c474 <xTaskCreateStatic+0xac>
 800c436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01b      	beq.n	800c474 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c444:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	2202      	movs	r2, #2
 800c44a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c44e:	2300      	movs	r3, #0
 800c450:	9303      	str	r3, [sp, #12]
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	f107 0314 	add.w	r3, r7, #20
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	68b9      	ldr	r1, [r7, #8]
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f000 f850 	bl	800c50c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c46c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c46e:	f000 f8f3 	bl	800c658 <prvAddNewTaskToReadyList>
 800c472:	e001      	b.n	800c478 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c478:	697b      	ldr	r3, [r7, #20]
	}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3728      	adds	r7, #40	; 0x28
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c482:	b580      	push	{r7, lr}
 800c484:	b08c      	sub	sp, #48	; 0x30
 800c486:	af04      	add	r7, sp, #16
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	60b9      	str	r1, [r7, #8]
 800c48c:	603b      	str	r3, [r7, #0]
 800c48e:	4613      	mov	r3, r2
 800c490:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c492:	88fb      	ldrh	r3, [r7, #6]
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4618      	mov	r0, r3
 800c498:	f002 f8b6 	bl	800e608 <pvPortMalloc>
 800c49c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00e      	beq.n	800c4c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4a4:	20bc      	movs	r0, #188	; 0xbc
 800c4a6:	f002 f8af 	bl	800e608 <pvPortMalloc>
 800c4aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	631a      	str	r2, [r3, #48]	; 0x30
 800c4b8:	e005      	b.n	800c4c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4ba:	6978      	ldr	r0, [r7, #20]
 800c4bc:	f002 f970 	bl	800e7a0 <vPortFree>
 800c4c0:	e001      	b.n	800c4c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d017      	beq.n	800c4fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4d4:	88fa      	ldrh	r2, [r7, #6]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9303      	str	r3, [sp, #12]
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	9302      	str	r3, [sp, #8]
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	68b9      	ldr	r1, [r7, #8]
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f000 f80e 	bl	800c50c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4f0:	69f8      	ldr	r0, [r7, #28]
 800c4f2:	f000 f8b1 	bl	800c658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	61bb      	str	r3, [r7, #24]
 800c4fa:	e002      	b.n	800c502 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c500:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c502:	69bb      	ldr	r3, [r7, #24]
	}
 800c504:	4618      	mov	r0, r3
 800c506:	3720      	adds	r7, #32
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b088      	sub	sp, #32
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	461a      	mov	r2, r3
 800c524:	21a5      	movs	r1, #165	; 0xa5
 800c526:	f002 fb8a 	bl	800ec3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c534:	3b01      	subs	r3, #1
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	f023 0307 	bic.w	r3, r3, #7
 800c542:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	f003 0307 	and.w	r3, r3, #7
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	617b      	str	r3, [r7, #20]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d01f      	beq.n	800c5aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c56a:	2300      	movs	r3, #0
 800c56c:	61fb      	str	r3, [r7, #28]
 800c56e:	e012      	b.n	800c596 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	4413      	add	r3, r2
 800c576:	7819      	ldrb	r1, [r3, #0]
 800c578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	4413      	add	r3, r2
 800c57e:	3334      	adds	r3, #52	; 0x34
 800c580:	460a      	mov	r2, r1
 800c582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	4413      	add	r3, r2
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	3301      	adds	r3, #1
 800c594:	61fb      	str	r3, [r7, #28]
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	2b0f      	cmp	r3, #15
 800c59a:	d9e9      	bls.n	800c570 <prvInitialiseNewTask+0x64>
 800c59c:	e000      	b.n	800c5a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800c59e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5a8:	e003      	b.n	800c5b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	2b37      	cmp	r3, #55	; 0x37
 800c5b6:	d901      	bls.n	800c5bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5b8:	2337      	movs	r3, #55	; 0x37
 800c5ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe feac 	bl	800b330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5da:	3318      	adds	r3, #24
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fea7 	bl	800b330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	2200      	movs	r2, #0
 800c604:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	3354      	adds	r3, #84	; 0x54
 800c60c:	2260      	movs	r2, #96	; 0x60
 800c60e:	2100      	movs	r1, #0
 800c610:	4618      	mov	r0, r3
 800c612:	f002 fb14 	bl	800ec3e <memset>
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	4a0c      	ldr	r2, [pc, #48]	; (800c64c <prvInitialiseNewTask+0x140>)
 800c61a:	659a      	str	r2, [r3, #88]	; 0x58
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	4a0c      	ldr	r2, [pc, #48]	; (800c650 <prvInitialiseNewTask+0x144>)
 800c620:	65da      	str	r2, [r3, #92]	; 0x5c
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	4a0b      	ldr	r2, [pc, #44]	; (800c654 <prvInitialiseNewTask+0x148>)
 800c626:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	68f9      	ldr	r1, [r7, #12]
 800c62c:	69b8      	ldr	r0, [r7, #24]
 800c62e:	f001 fd9b 	bl	800e168 <pxPortInitialiseStack>
 800c632:	4602      	mov	r2, r0
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c642:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c644:	bf00      	nop
 800c646:	3720      	adds	r7, #32
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	08013ca0 	.word	0x08013ca0
 800c650:	08013cc0 	.word	0x08013cc0
 800c654:	08013c80 	.word	0x08013c80

0800c658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c660:	f001 feb0 	bl	800e3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c664:	4b2d      	ldr	r3, [pc, #180]	; (800c71c <prvAddNewTaskToReadyList+0xc4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3301      	adds	r3, #1
 800c66a:	4a2c      	ldr	r2, [pc, #176]	; (800c71c <prvAddNewTaskToReadyList+0xc4>)
 800c66c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c66e:	4b2c      	ldr	r3, [pc, #176]	; (800c720 <prvAddNewTaskToReadyList+0xc8>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d109      	bne.n	800c68a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c676:	4a2a      	ldr	r2, [pc, #168]	; (800c720 <prvAddNewTaskToReadyList+0xc8>)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c67c:	4b27      	ldr	r3, [pc, #156]	; (800c71c <prvAddNewTaskToReadyList+0xc4>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d110      	bne.n	800c6a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c684:	f000 fcb6 	bl	800cff4 <prvInitialiseTaskLists>
 800c688:	e00d      	b.n	800c6a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c68a:	4b26      	ldr	r3, [pc, #152]	; (800c724 <prvAddNewTaskToReadyList+0xcc>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d109      	bne.n	800c6a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c692:	4b23      	ldr	r3, [pc, #140]	; (800c720 <prvAddNewTaskToReadyList+0xc8>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d802      	bhi.n	800c6a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6a0:	4a1f      	ldr	r2, [pc, #124]	; (800c720 <prvAddNewTaskToReadyList+0xc8>)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6a6:	4b20      	ldr	r3, [pc, #128]	; (800c728 <prvAddNewTaskToReadyList+0xd0>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	4a1e      	ldr	r2, [pc, #120]	; (800c728 <prvAddNewTaskToReadyList+0xd0>)
 800c6ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6b0:	4b1d      	ldr	r3, [pc, #116]	; (800c728 <prvAddNewTaskToReadyList+0xd0>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6bc:	4b1b      	ldr	r3, [pc, #108]	; (800c72c <prvAddNewTaskToReadyList+0xd4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d903      	bls.n	800c6cc <prvAddNewTaskToReadyList+0x74>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	4a18      	ldr	r2, [pc, #96]	; (800c72c <prvAddNewTaskToReadyList+0xd4>)
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4a15      	ldr	r2, [pc, #84]	; (800c730 <prvAddNewTaskToReadyList+0xd8>)
 800c6da:	441a      	add	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3304      	adds	r3, #4
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	f7fe fe31 	bl	800b34a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6e8:	f001 fe9c 	bl	800e424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6ec:	4b0d      	ldr	r3, [pc, #52]	; (800c724 <prvAddNewTaskToReadyList+0xcc>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00e      	beq.n	800c712 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6f4:	4b0a      	ldr	r3, [pc, #40]	; (800c720 <prvAddNewTaskToReadyList+0xc8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d207      	bcs.n	800c712 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c702:	4b0c      	ldr	r3, [pc, #48]	; (800c734 <prvAddNewTaskToReadyList+0xdc>)
 800c704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20001d88 	.word	0x20001d88
 800c720:	200018b4 	.word	0x200018b4
 800c724:	20001d94 	.word	0x20001d94
 800c728:	20001da4 	.word	0x20001da4
 800c72c:	20001d90 	.word	0x20001d90
 800c730:	200018b8 	.word	0x200018b8
 800c734:	e000ed04 	.word	0xe000ed04

0800c738 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08a      	sub	sp, #40	; 0x28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c742:	2300      	movs	r3, #0
 800c744:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	617b      	str	r3, [r7, #20]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10a      	bne.n	800c77e <vTaskDelayUntil+0x46>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	613b      	str	r3, [r7, #16]
}
 800c77a:	bf00      	nop
 800c77c:	e7fe      	b.n	800c77c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c77e:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <vTaskDelayUntil+0xf0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <vTaskDelayUntil+0x64>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	60fb      	str	r3, [r7, #12]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c79c:	f000 f8ee 	bl	800c97c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c7a0:	4b22      	ldr	r3, [pc, #136]	; (800c82c <vTaskDelayUntil+0xf4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6a3a      	ldr	r2, [r7, #32]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d20b      	bcs.n	800c7d2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	69fa      	ldr	r2, [r7, #28]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d211      	bcs.n	800c7e8 <vTaskDelayUntil+0xb0>
 800c7c4:	69fa      	ldr	r2, [r7, #28]
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d90d      	bls.n	800c7e8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d0:	e00a      	b.n	800c7e8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d303      	bcc.n	800c7e4 <vTaskDelayUntil+0xac>
 800c7dc:	69fa      	ldr	r2, [r7, #28]
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d901      	bls.n	800c7e8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d006      	beq.n	800c802 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c7f4:	69fa      	ldr	r2, [r7, #28]
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f001 f857 	bl	800d8b0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c802:	f000 f8c9 	bl	800c998 <xTaskResumeAll>
 800c806:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d107      	bne.n	800c81e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c80e:	4b08      	ldr	r3, [pc, #32]	; (800c830 <vTaskDelayUntil+0xf8>)
 800c810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c814:	601a      	str	r2, [r3, #0]
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c81e:	bf00      	nop
 800c820:	3728      	adds	r7, #40	; 0x28
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20001db0 	.word	0x20001db0
 800c82c:	20001d8c 	.word	0x20001d8c
 800c830:	e000ed04 	.word	0xe000ed04

0800c834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c83c:	2300      	movs	r3, #0
 800c83e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d017      	beq.n	800c876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c846:	4b13      	ldr	r3, [pc, #76]	; (800c894 <vTaskDelay+0x60>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00a      	beq.n	800c864 <vTaskDelay+0x30>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	60bb      	str	r3, [r7, #8]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c864:	f000 f88a 	bl	800c97c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c868:	2100      	movs	r1, #0
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f001 f820 	bl	800d8b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c870:	f000 f892 	bl	800c998 <xTaskResumeAll>
 800c874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d107      	bne.n	800c88c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c87c:	4b06      	ldr	r3, [pc, #24]	; (800c898 <vTaskDelay+0x64>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c88c:	bf00      	nop
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20001db0 	.word	0x20001db0
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08a      	sub	sp, #40	; 0x28
 800c8a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c8aa:	463a      	mov	r2, r7
 800c8ac:	1d39      	adds	r1, r7, #4
 800c8ae:	f107 0308 	add.w	r3, r7, #8
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fe fce8 	bl	800b288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	9202      	str	r2, [sp, #8]
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	460a      	mov	r2, r1
 800c8ca:	4924      	ldr	r1, [pc, #144]	; (800c95c <vTaskStartScheduler+0xc0>)
 800c8cc:	4824      	ldr	r0, [pc, #144]	; (800c960 <vTaskStartScheduler+0xc4>)
 800c8ce:	f7ff fd7b 	bl	800c3c8 <xTaskCreateStatic>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	4a23      	ldr	r2, [pc, #140]	; (800c964 <vTaskStartScheduler+0xc8>)
 800c8d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8d8:	4b22      	ldr	r3, [pc, #136]	; (800c964 <vTaskStartScheduler+0xc8>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	617b      	str	r3, [r7, #20]
 800c8e4:	e001      	b.n	800c8ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d102      	bne.n	800c8f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8f0:	f001 f832 	bl	800d958 <xTimerCreateTimerTask>
 800c8f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d11b      	bne.n	800c934 <vTaskStartScheduler+0x98>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	613b      	str	r3, [r7, #16]
}
 800c90e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c910:	4b15      	ldr	r3, [pc, #84]	; (800c968 <vTaskStartScheduler+0xcc>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3354      	adds	r3, #84	; 0x54
 800c916:	4a15      	ldr	r2, [pc, #84]	; (800c96c <vTaskStartScheduler+0xd0>)
 800c918:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c91a:	4b15      	ldr	r3, [pc, #84]	; (800c970 <vTaskStartScheduler+0xd4>)
 800c91c:	f04f 32ff 	mov.w	r2, #4294967295
 800c920:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c922:	4b14      	ldr	r3, [pc, #80]	; (800c974 <vTaskStartScheduler+0xd8>)
 800c924:	2201      	movs	r2, #1
 800c926:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c928:	4b13      	ldr	r3, [pc, #76]	; (800c978 <vTaskStartScheduler+0xdc>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c92e:	f001 fca7 	bl	800e280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c932:	e00e      	b.n	800c952 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93a:	d10a      	bne.n	800c952 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	60fb      	str	r3, [r7, #12]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <vTaskStartScheduler+0xb4>
}
 800c952:	bf00      	nop
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	08013b00 	.word	0x08013b00
 800c960:	0800cfc5 	.word	0x0800cfc5
 800c964:	20001dac 	.word	0x20001dac
 800c968:	200018b4 	.word	0x200018b4
 800c96c:	200000a0 	.word	0x200000a0
 800c970:	20001da8 	.word	0x20001da8
 800c974:	20001d94 	.word	0x20001d94
 800c978:	20001d8c 	.word	0x20001d8c

0800c97c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c97c:	b480      	push	{r7}
 800c97e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c980:	4b04      	ldr	r3, [pc, #16]	; (800c994 <vTaskSuspendAll+0x18>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	4a03      	ldr	r2, [pc, #12]	; (800c994 <vTaskSuspendAll+0x18>)
 800c988:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c98a:	bf00      	nop
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	20001db0 	.word	0x20001db0

0800c998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9a6:	4b42      	ldr	r3, [pc, #264]	; (800cab0 <xTaskResumeAll+0x118>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	603b      	str	r3, [r7, #0]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9c4:	f001 fcfe 	bl	800e3c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9c8:	4b39      	ldr	r3, [pc, #228]	; (800cab0 <xTaskResumeAll+0x118>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	4a38      	ldr	r2, [pc, #224]	; (800cab0 <xTaskResumeAll+0x118>)
 800c9d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9d2:	4b37      	ldr	r3, [pc, #220]	; (800cab0 <xTaskResumeAll+0x118>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d162      	bne.n	800caa0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9da:	4b36      	ldr	r3, [pc, #216]	; (800cab4 <xTaskResumeAll+0x11c>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d05e      	beq.n	800caa0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9e2:	e02f      	b.n	800ca44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e4:	4b34      	ldr	r3, [pc, #208]	; (800cab8 <xTaskResumeAll+0x120>)
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3318      	adds	r3, #24
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fe fd07 	bl	800b404 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fe fd02 	bl	800b404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca04:	4b2d      	ldr	r3, [pc, #180]	; (800cabc <xTaskResumeAll+0x124>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d903      	bls.n	800ca14 <xTaskResumeAll+0x7c>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca10:	4a2a      	ldr	r2, [pc, #168]	; (800cabc <xTaskResumeAll+0x124>)
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca18:	4613      	mov	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4a27      	ldr	r2, [pc, #156]	; (800cac0 <xTaskResumeAll+0x128>)
 800ca22:	441a      	add	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	3304      	adds	r3, #4
 800ca28:	4619      	mov	r1, r3
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	f7fe fc8d 	bl	800b34a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca34:	4b23      	ldr	r3, [pc, #140]	; (800cac4 <xTaskResumeAll+0x12c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d302      	bcc.n	800ca44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca3e:	4b22      	ldr	r3, [pc, #136]	; (800cac8 <xTaskResumeAll+0x130>)
 800ca40:	2201      	movs	r2, #1
 800ca42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca44:	4b1c      	ldr	r3, [pc, #112]	; (800cab8 <xTaskResumeAll+0x120>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1cb      	bne.n	800c9e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca52:	f000 fb71 	bl	800d138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca56:	4b1d      	ldr	r3, [pc, #116]	; (800cacc <xTaskResumeAll+0x134>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d010      	beq.n	800ca84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca62:	f000 f859 	bl	800cb18 <xTaskIncrementTick>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca6c:	4b16      	ldr	r3, [pc, #88]	; (800cac8 <xTaskResumeAll+0x130>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1f1      	bne.n	800ca62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <xTaskResumeAll+0x134>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca84:	4b10      	ldr	r3, [pc, #64]	; (800cac8 <xTaskResumeAll+0x130>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d009      	beq.n	800caa0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca90:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <xTaskResumeAll+0x138>)
 800ca92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca96:	601a      	str	r2, [r3, #0]
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800caa0:	f001 fcc0 	bl	800e424 <vPortExitCritical>

	return xAlreadyYielded;
 800caa4:	68bb      	ldr	r3, [r7, #8]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20001db0 	.word	0x20001db0
 800cab4:	20001d88 	.word	0x20001d88
 800cab8:	20001d48 	.word	0x20001d48
 800cabc:	20001d90 	.word	0x20001d90
 800cac0:	200018b8 	.word	0x200018b8
 800cac4:	200018b4 	.word	0x200018b4
 800cac8:	20001d9c 	.word	0x20001d9c
 800cacc:	20001d98 	.word	0x20001d98
 800cad0:	e000ed04 	.word	0xe000ed04

0800cad4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cada:	4b05      	ldr	r3, [pc, #20]	; (800caf0 <xTaskGetTickCount+0x1c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cae0:	687b      	ldr	r3, [r7, #4]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	20001d8c 	.word	0x20001d8c

0800caf4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cafa:	f001 fd45 	bl	800e588 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cafe:	2300      	movs	r3, #0
 800cb00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <xTaskGetTickCountFromISR+0x20>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb08:	683b      	ldr	r3, [r7, #0]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20001d8c 	.word	0x20001d8c

0800cb18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb22:	4b4f      	ldr	r3, [pc, #316]	; (800cc60 <xTaskIncrementTick+0x148>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f040 808f 	bne.w	800cc4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb2c:	4b4d      	ldr	r3, [pc, #308]	; (800cc64 <xTaskIncrementTick+0x14c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3301      	adds	r3, #1
 800cb32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb34:	4a4b      	ldr	r2, [pc, #300]	; (800cc64 <xTaskIncrementTick+0x14c>)
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d120      	bne.n	800cb82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb40:	4b49      	ldr	r3, [pc, #292]	; (800cc68 <xTaskIncrementTick+0x150>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	603b      	str	r3, [r7, #0]
}
 800cb5c:	bf00      	nop
 800cb5e:	e7fe      	b.n	800cb5e <xTaskIncrementTick+0x46>
 800cb60:	4b41      	ldr	r3, [pc, #260]	; (800cc68 <xTaskIncrementTick+0x150>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	4b41      	ldr	r3, [pc, #260]	; (800cc6c <xTaskIncrementTick+0x154>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a3f      	ldr	r2, [pc, #252]	; (800cc68 <xTaskIncrementTick+0x150>)
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	4a3f      	ldr	r2, [pc, #252]	; (800cc6c <xTaskIncrementTick+0x154>)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	4b3e      	ldr	r3, [pc, #248]	; (800cc70 <xTaskIncrementTick+0x158>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	4a3d      	ldr	r2, [pc, #244]	; (800cc70 <xTaskIncrementTick+0x158>)
 800cb7c:	6013      	str	r3, [r2, #0]
 800cb7e:	f000 fadb 	bl	800d138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb82:	4b3c      	ldr	r3, [pc, #240]	; (800cc74 <xTaskIncrementTick+0x15c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d349      	bcc.n	800cc20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb8c:	4b36      	ldr	r3, [pc, #216]	; (800cc68 <xTaskIncrementTick+0x150>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d104      	bne.n	800cba0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb96:	4b37      	ldr	r3, [pc, #220]	; (800cc74 <xTaskIncrementTick+0x15c>)
 800cb98:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9c:	601a      	str	r2, [r3, #0]
					break;
 800cb9e:	e03f      	b.n	800cc20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba0:	4b31      	ldr	r3, [pc, #196]	; (800cc68 <xTaskIncrementTick+0x150>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d203      	bcs.n	800cbc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbb8:	4a2e      	ldr	r2, [pc, #184]	; (800cc74 <xTaskIncrementTick+0x15c>)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbbe:	e02f      	b.n	800cc20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fc1d 	bl	800b404 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	3318      	adds	r3, #24
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fe fc14 	bl	800b404 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4b25      	ldr	r3, [pc, #148]	; (800cc78 <xTaskIncrementTick+0x160>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d903      	bls.n	800cbf0 <xTaskIncrementTick+0xd8>
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	4a22      	ldr	r2, [pc, #136]	; (800cc78 <xTaskIncrementTick+0x160>)
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4a1f      	ldr	r2, [pc, #124]	; (800cc7c <xTaskIncrementTick+0x164>)
 800cbfe:	441a      	add	r2, r3
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	3304      	adds	r3, #4
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	f7fe fb9f 	bl	800b34a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc10:	4b1b      	ldr	r3, [pc, #108]	; (800cc80 <xTaskIncrementTick+0x168>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d3b8      	bcc.n	800cb8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc1e:	e7b5      	b.n	800cb8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc20:	4b17      	ldr	r3, [pc, #92]	; (800cc80 <xTaskIncrementTick+0x168>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc26:	4915      	ldr	r1, [pc, #84]	; (800cc7c <xTaskIncrementTick+0x164>)
 800cc28:	4613      	mov	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	440b      	add	r3, r1
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d901      	bls.n	800cc3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc3c:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <xTaskIncrementTick+0x16c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	617b      	str	r3, [r7, #20]
 800cc48:	e004      	b.n	800cc54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	; (800cc88 <xTaskIncrementTick+0x170>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	4a0d      	ldr	r2, [pc, #52]	; (800cc88 <xTaskIncrementTick+0x170>)
 800cc52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc54:	697b      	ldr	r3, [r7, #20]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20001db0 	.word	0x20001db0
 800cc64:	20001d8c 	.word	0x20001d8c
 800cc68:	20001d40 	.word	0x20001d40
 800cc6c:	20001d44 	.word	0x20001d44
 800cc70:	20001da0 	.word	0x20001da0
 800cc74:	20001da8 	.word	0x20001da8
 800cc78:	20001d90 	.word	0x20001d90
 800cc7c:	200018b8 	.word	0x200018b8
 800cc80:	200018b4 	.word	0x200018b4
 800cc84:	20001d9c 	.word	0x20001d9c
 800cc88:	20001d98 	.word	0x20001d98

0800cc8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc92:	4b2a      	ldr	r3, [pc, #168]	; (800cd3c <vTaskSwitchContext+0xb0>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc9a:	4b29      	ldr	r3, [pc, #164]	; (800cd40 <vTaskSwitchContext+0xb4>)
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cca0:	e046      	b.n	800cd30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cca2:	4b27      	ldr	r3, [pc, #156]	; (800cd40 <vTaskSwitchContext+0xb4>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca8:	4b26      	ldr	r3, [pc, #152]	; (800cd44 <vTaskSwitchContext+0xb8>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	e010      	b.n	800ccd2 <vTaskSwitchContext+0x46>
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10a      	bne.n	800cccc <vTaskSwitchContext+0x40>
	__asm volatile
 800ccb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	607b      	str	r3, [r7, #4]
}
 800ccc8:	bf00      	nop
 800ccca:	e7fe      	b.n	800ccca <vTaskSwitchContext+0x3e>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	60fb      	str	r3, [r7, #12]
 800ccd2:	491d      	ldr	r1, [pc, #116]	; (800cd48 <vTaskSwitchContext+0xbc>)
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	440b      	add	r3, r1
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d0e4      	beq.n	800ccb0 <vTaskSwitchContext+0x24>
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4a15      	ldr	r2, [pc, #84]	; (800cd48 <vTaskSwitchContext+0xbc>)
 800ccf2:	4413      	add	r3, r2
 800ccf4:	60bb      	str	r3, [r7, #8]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	605a      	str	r2, [r3, #4]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	3308      	adds	r3, #8
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d104      	bne.n	800cd16 <vTaskSwitchContext+0x8a>
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	605a      	str	r2, [r3, #4]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	4a0b      	ldr	r2, [pc, #44]	; (800cd4c <vTaskSwitchContext+0xc0>)
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	4a08      	ldr	r2, [pc, #32]	; (800cd44 <vTaskSwitchContext+0xb8>)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <vTaskSwitchContext+0xc0>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3354      	adds	r3, #84	; 0x54
 800cd2c:	4a08      	ldr	r2, [pc, #32]	; (800cd50 <vTaskSwitchContext+0xc4>)
 800cd2e:	6013      	str	r3, [r2, #0]
}
 800cd30:	bf00      	nop
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	20001db0 	.word	0x20001db0
 800cd40:	20001d9c 	.word	0x20001d9c
 800cd44:	20001d90 	.word	0x20001d90
 800cd48:	200018b8 	.word	0x200018b8
 800cd4c:	200018b4 	.word	0x200018b4
 800cd50:	200000a0 	.word	0x200000a0

0800cd54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10a      	bne.n	800cd7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	60fb      	str	r3, [r7, #12]
}
 800cd76:	bf00      	nop
 800cd78:	e7fe      	b.n	800cd78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd7a:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <vTaskPlaceOnEventList+0x44>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3318      	adds	r3, #24
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7fe fb05 	bl	800b392 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd88:	2101      	movs	r1, #1
 800cd8a:	6838      	ldr	r0, [r7, #0]
 800cd8c:	f000 fd90 	bl	800d8b0 <prvAddCurrentTaskToDelayedList>
}
 800cd90:	bf00      	nop
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	200018b4 	.word	0x200018b4

0800cd9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10a      	bne.n	800cdc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	617b      	str	r3, [r7, #20]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdc4:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3318      	adds	r3, #24
 800cdca:	4619      	mov	r1, r3
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7fe fabc 	bl	800b34a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cddc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdde:	6879      	ldr	r1, [r7, #4]
 800cde0:	68b8      	ldr	r0, [r7, #8]
 800cde2:	f000 fd65 	bl	800d8b0 <prvAddCurrentTaskToDelayedList>
	}
 800cde6:	bf00      	nop
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	200018b4 	.word	0x200018b4

0800cdf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10a      	bne.n	800ce20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	60fb      	str	r3, [r7, #12]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	3318      	adds	r3, #24
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe faed 	bl	800b404 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce2a:	4b1e      	ldr	r3, [pc, #120]	; (800cea4 <xTaskRemoveFromEventList+0xb0>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d11d      	bne.n	800ce6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	3304      	adds	r3, #4
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fe fae4 	bl	800b404 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce40:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <xTaskRemoveFromEventList+0xb4>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d903      	bls.n	800ce50 <xTaskRemoveFromEventList+0x5c>
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4c:	4a16      	ldr	r2, [pc, #88]	; (800cea8 <xTaskRemoveFromEventList+0xb4>)
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce54:	4613      	mov	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4a13      	ldr	r2, [pc, #76]	; (800ceac <xTaskRemoveFromEventList+0xb8>)
 800ce5e:	441a      	add	r2, r3
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	3304      	adds	r3, #4
 800ce64:	4619      	mov	r1, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	f7fe fa6f 	bl	800b34a <vListInsertEnd>
 800ce6c:	e005      	b.n	800ce7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	3318      	adds	r3, #24
 800ce72:	4619      	mov	r1, r3
 800ce74:	480e      	ldr	r0, [pc, #56]	; (800ceb0 <xTaskRemoveFromEventList+0xbc>)
 800ce76:	f7fe fa68 	bl	800b34a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <xTaskRemoveFromEventList+0xc0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d905      	bls.n	800ce94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <xTaskRemoveFromEventList+0xc4>)
 800ce8e:	2201      	movs	r2, #1
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	e001      	b.n	800ce98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce98:	697b      	ldr	r3, [r7, #20]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3718      	adds	r7, #24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20001db0 	.word	0x20001db0
 800cea8:	20001d90 	.word	0x20001d90
 800ceac:	200018b8 	.word	0x200018b8
 800ceb0:	20001d48 	.word	0x20001d48
 800ceb4:	200018b4 	.word	0x200018b4
 800ceb8:	20001d9c 	.word	0x20001d9c

0800cebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cec4:	4b06      	ldr	r3, [pc, #24]	; (800cee0 <vTaskInternalSetTimeOutState+0x24>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cecc:	4b05      	ldr	r3, [pc, #20]	; (800cee4 <vTaskInternalSetTimeOutState+0x28>)
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	605a      	str	r2, [r3, #4]
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20001da0 	.word	0x20001da0
 800cee4:	20001d8c 	.word	0x20001d8c

0800cee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10a      	bne.n	800cf0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	613b      	str	r3, [r7, #16]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10a      	bne.n	800cf2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	60fb      	str	r3, [r7, #12]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf2a:	f001 fa4b 	bl	800e3c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf2e:	4b1d      	ldr	r3, [pc, #116]	; (800cfa4 <xTaskCheckForTimeOut+0xbc>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	69ba      	ldr	r2, [r7, #24]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf46:	d102      	bne.n	800cf4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	e023      	b.n	800cf96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <xTaskCheckForTimeOut+0xc0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d007      	beq.n	800cf6a <xTaskCheckForTimeOut+0x82>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d302      	bcc.n	800cf6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf64:	2301      	movs	r3, #1
 800cf66:	61fb      	str	r3, [r7, #28]
 800cf68:	e015      	b.n	800cf96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d20b      	bcs.n	800cf8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	1ad2      	subs	r2, r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff ff9b 	bl	800cebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61fb      	str	r3, [r7, #28]
 800cf8a:	e004      	b.n	800cf96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf92:	2301      	movs	r3, #1
 800cf94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf96:	f001 fa45 	bl	800e424 <vPortExitCritical>

	return xReturn;
 800cf9a:	69fb      	ldr	r3, [r7, #28]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3720      	adds	r7, #32
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20001d8c 	.word	0x20001d8c
 800cfa8:	20001da0 	.word	0x20001da0

0800cfac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cfac:	b480      	push	{r7}
 800cfae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cfb0:	4b03      	ldr	r3, [pc, #12]	; (800cfc0 <vTaskMissedYield+0x14>)
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]
}
 800cfb6:	bf00      	nop
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr
 800cfc0:	20001d9c 	.word	0x20001d9c

0800cfc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfcc:	f000 f852 	bl	800d074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfd0:	4b06      	ldr	r3, [pc, #24]	; (800cfec <prvIdleTask+0x28>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d9f9      	bls.n	800cfcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfd8:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <prvIdleTask+0x2c>)
 800cfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfe8:	e7f0      	b.n	800cfcc <prvIdleTask+0x8>
 800cfea:	bf00      	nop
 800cfec:	200018b8 	.word	0x200018b8
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cffa:	2300      	movs	r3, #0
 800cffc:	607b      	str	r3, [r7, #4]
 800cffe:	e00c      	b.n	800d01a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	4613      	mov	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4a12      	ldr	r2, [pc, #72]	; (800d054 <prvInitialiseTaskLists+0x60>)
 800d00c:	4413      	add	r3, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe f96e 	bl	800b2f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3301      	adds	r3, #1
 800d018:	607b      	str	r3, [r7, #4]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b37      	cmp	r3, #55	; 0x37
 800d01e:	d9ef      	bls.n	800d000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d020:	480d      	ldr	r0, [pc, #52]	; (800d058 <prvInitialiseTaskLists+0x64>)
 800d022:	f7fe f965 	bl	800b2f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d026:	480d      	ldr	r0, [pc, #52]	; (800d05c <prvInitialiseTaskLists+0x68>)
 800d028:	f7fe f962 	bl	800b2f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d02c:	480c      	ldr	r0, [pc, #48]	; (800d060 <prvInitialiseTaskLists+0x6c>)
 800d02e:	f7fe f95f 	bl	800b2f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d032:	480c      	ldr	r0, [pc, #48]	; (800d064 <prvInitialiseTaskLists+0x70>)
 800d034:	f7fe f95c 	bl	800b2f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d038:	480b      	ldr	r0, [pc, #44]	; (800d068 <prvInitialiseTaskLists+0x74>)
 800d03a:	f7fe f959 	bl	800b2f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d03e:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <prvInitialiseTaskLists+0x78>)
 800d040:	4a05      	ldr	r2, [pc, #20]	; (800d058 <prvInitialiseTaskLists+0x64>)
 800d042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d044:	4b0a      	ldr	r3, [pc, #40]	; (800d070 <prvInitialiseTaskLists+0x7c>)
 800d046:	4a05      	ldr	r2, [pc, #20]	; (800d05c <prvInitialiseTaskLists+0x68>)
 800d048:	601a      	str	r2, [r3, #0]
}
 800d04a:	bf00      	nop
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	200018b8 	.word	0x200018b8
 800d058:	20001d18 	.word	0x20001d18
 800d05c:	20001d2c 	.word	0x20001d2c
 800d060:	20001d48 	.word	0x20001d48
 800d064:	20001d5c 	.word	0x20001d5c
 800d068:	20001d74 	.word	0x20001d74
 800d06c:	20001d40 	.word	0x20001d40
 800d070:	20001d44 	.word	0x20001d44

0800d074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d07a:	e019      	b.n	800d0b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d07c:	f001 f9a2 	bl	800e3c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d080:	4b10      	ldr	r3, [pc, #64]	; (800d0c4 <prvCheckTasksWaitingTermination+0x50>)
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	3304      	adds	r3, #4
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe f9b9 	bl	800b404 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d092:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <prvCheckTasksWaitingTermination+0x54>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3b01      	subs	r3, #1
 800d098:	4a0b      	ldr	r2, [pc, #44]	; (800d0c8 <prvCheckTasksWaitingTermination+0x54>)
 800d09a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d09c:	4b0b      	ldr	r3, [pc, #44]	; (800d0cc <prvCheckTasksWaitingTermination+0x58>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	4a0a      	ldr	r2, [pc, #40]	; (800d0cc <prvCheckTasksWaitingTermination+0x58>)
 800d0a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0a6:	f001 f9bd 	bl	800e424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f810 	bl	800d0d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0b0:	4b06      	ldr	r3, [pc, #24]	; (800d0cc <prvCheckTasksWaitingTermination+0x58>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e1      	bne.n	800d07c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d0b8:	bf00      	nop
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20001d5c 	.word	0x20001d5c
 800d0c8:	20001d88 	.word	0x20001d88
 800d0cc:	20001d70 	.word	0x20001d70

0800d0d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	3354      	adds	r3, #84	; 0x54
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f002 fb51 	bl	800f784 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d108      	bne.n	800d0fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f001 fb55 	bl	800e7a0 <vPortFree>
				vPortFree( pxTCB );
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f001 fb52 	bl	800e7a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0fc:	e018      	b.n	800d130 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d104:	2b01      	cmp	r3, #1
 800d106:	d103      	bne.n	800d110 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 fb49 	bl	800e7a0 <vPortFree>
	}
 800d10e:	e00f      	b.n	800d130 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d116:	2b02      	cmp	r3, #2
 800d118:	d00a      	beq.n	800d130 <prvDeleteTCB+0x60>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	60fb      	str	r3, [r7, #12]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <prvDeleteTCB+0x5e>
	}
 800d130:	bf00      	nop
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d13e:	4b0c      	ldr	r3, [pc, #48]	; (800d170 <prvResetNextTaskUnblockTime+0x38>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d104      	bne.n	800d152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d148:	4b0a      	ldr	r3, [pc, #40]	; (800d174 <prvResetNextTaskUnblockTime+0x3c>)
 800d14a:	f04f 32ff 	mov.w	r2, #4294967295
 800d14e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d150:	e008      	b.n	800d164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d152:	4b07      	ldr	r3, [pc, #28]	; (800d170 <prvResetNextTaskUnblockTime+0x38>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	4a04      	ldr	r2, [pc, #16]	; (800d174 <prvResetNextTaskUnblockTime+0x3c>)
 800d162:	6013      	str	r3, [r2, #0]
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	20001d40 	.word	0x20001d40
 800d174:	20001da8 	.word	0x20001da8

0800d178 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d17e:	4b05      	ldr	r3, [pc, #20]	; (800d194 <xTaskGetCurrentTaskHandle+0x1c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d184:	687b      	ldr	r3, [r7, #4]
	}
 800d186:	4618      	mov	r0, r3
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	200018b4 	.word	0x200018b4

0800d198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d19e:	4b0b      	ldr	r3, [pc, #44]	; (800d1cc <xTaskGetSchedulerState+0x34>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d102      	bne.n	800d1ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	607b      	str	r3, [r7, #4]
 800d1aa:	e008      	b.n	800d1be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1ac:	4b08      	ldr	r3, [pc, #32]	; (800d1d0 <xTaskGetSchedulerState+0x38>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d102      	bne.n	800d1ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	607b      	str	r3, [r7, #4]
 800d1b8:	e001      	b.n	800d1be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1be:	687b      	ldr	r3, [r7, #4]
	}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	20001d94 	.word	0x20001d94
 800d1d0:	20001db0 	.word	0x20001db0

0800d1d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d051      	beq.n	800d28e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ee:	4b2a      	ldr	r3, [pc, #168]	; (800d298 <xTaskPriorityInherit+0xc4>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d241      	bcs.n	800d27c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	db06      	blt.n	800d20e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d200:	4b25      	ldr	r3, [pc, #148]	; (800d298 <xTaskPriorityInherit+0xc4>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	6959      	ldr	r1, [r3, #20]
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4a1f      	ldr	r2, [pc, #124]	; (800d29c <xTaskPriorityInherit+0xc8>)
 800d220:	4413      	add	r3, r2
 800d222:	4299      	cmp	r1, r3
 800d224:	d122      	bne.n	800d26c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	3304      	adds	r3, #4
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe f8ea 	bl	800b404 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d230:	4b19      	ldr	r3, [pc, #100]	; (800d298 <xTaskPriorityInherit+0xc4>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23e:	4b18      	ldr	r3, [pc, #96]	; (800d2a0 <xTaskPriorityInherit+0xcc>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	429a      	cmp	r2, r3
 800d244:	d903      	bls.n	800d24e <xTaskPriorityInherit+0x7a>
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24a:	4a15      	ldr	r2, [pc, #84]	; (800d2a0 <xTaskPriorityInherit+0xcc>)
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d252:	4613      	mov	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4a10      	ldr	r2, [pc, #64]	; (800d29c <xTaskPriorityInherit+0xc8>)
 800d25c:	441a      	add	r2, r3
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	3304      	adds	r3, #4
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7fe f870 	bl	800b34a <vListInsertEnd>
 800d26a:	e004      	b.n	800d276 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d26c:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <xTaskPriorityInherit+0xc4>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d276:	2301      	movs	r3, #1
 800d278:	60fb      	str	r3, [r7, #12]
 800d27a:	e008      	b.n	800d28e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d280:	4b05      	ldr	r3, [pc, #20]	; (800d298 <xTaskPriorityInherit+0xc4>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d286:	429a      	cmp	r2, r3
 800d288:	d201      	bcs.n	800d28e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d28a:	2301      	movs	r3, #1
 800d28c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d28e:	68fb      	ldr	r3, [r7, #12]
	}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	200018b4 	.word	0x200018b4
 800d29c:	200018b8 	.word	0x200018b8
 800d2a0:	20001d90 	.word	0x20001d90

0800d2a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d056      	beq.n	800d368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2ba:	4b2e      	ldr	r3, [pc, #184]	; (800d374 <xTaskPriorityDisinherit+0xd0>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d00a      	beq.n	800d2da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	60fb      	str	r3, [r7, #12]
}
 800d2d6:	bf00      	nop
 800d2d8:	e7fe      	b.n	800d2d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10a      	bne.n	800d2f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	60bb      	str	r3, [r7, #8]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2fc:	1e5a      	subs	r2, r3, #1
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d02c      	beq.n	800d368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d312:	2b00      	cmp	r3, #0
 800d314:	d128      	bne.n	800d368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	3304      	adds	r3, #4
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe f872 	bl	800b404 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <xTaskPriorityDisinherit+0xd4>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d903      	bls.n	800d348 <xTaskPriorityDisinherit+0xa4>
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	4a0c      	ldr	r2, [pc, #48]	; (800d378 <xTaskPriorityDisinherit+0xd4>)
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34c:	4613      	mov	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4a09      	ldr	r2, [pc, #36]	; (800d37c <xTaskPriorityDisinherit+0xd8>)
 800d356:	441a      	add	r2, r3
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	3304      	adds	r3, #4
 800d35c:	4619      	mov	r1, r3
 800d35e:	4610      	mov	r0, r2
 800d360:	f7fd fff3 	bl	800b34a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d364:	2301      	movs	r3, #1
 800d366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d368:	697b      	ldr	r3, [r7, #20]
	}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3718      	adds	r7, #24
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	200018b4 	.word	0x200018b4
 800d378:	20001d90 	.word	0x20001d90
 800d37c:	200018b8 	.word	0x200018b8

0800d380 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d38e:	2301      	movs	r3, #1
 800d390:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d06a      	beq.n	800d46e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10a      	bne.n	800d3b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	60fb      	str	r3, [r7, #12]
}
 800d3b2:	bf00      	nop
 800d3b4:	e7fe      	b.n	800d3b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d902      	bls.n	800d3c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e002      	b.n	800d3cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d0:	69fa      	ldr	r2, [r7, #28]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d04b      	beq.n	800d46e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d146      	bne.n	800d46e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d3e0:	4b25      	ldr	r3, [pc, #148]	; (800d478 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d10a      	bne.n	800d400 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	60bb      	str	r3, [r7, #8]
}
 800d3fc:	bf00      	nop
 800d3fe:	e7fe      	b.n	800d3fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d404:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	db04      	blt.n	800d41e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	6959      	ldr	r1, [r3, #20]
 800d422:	693a      	ldr	r2, [r7, #16]
 800d424:	4613      	mov	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4413      	add	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	4a13      	ldr	r2, [pc, #76]	; (800d47c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d42e:	4413      	add	r3, r2
 800d430:	4299      	cmp	r1, r3
 800d432:	d11c      	bne.n	800d46e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	3304      	adds	r3, #4
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fd ffe3 	bl	800b404 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d442:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	429a      	cmp	r2, r3
 800d448:	d903      	bls.n	800d452 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44e:	4a0c      	ldr	r2, [pc, #48]	; (800d480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d456:	4613      	mov	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4413      	add	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4a07      	ldr	r2, [pc, #28]	; (800d47c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d460:	441a      	add	r2, r3
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	3304      	adds	r3, #4
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fd ff6e 	bl	800b34a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d46e:	bf00      	nop
 800d470:	3720      	adds	r7, #32
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	200018b4 	.word	0x200018b4
 800d47c:	200018b8 	.word	0x200018b8
 800d480:	20001d90 	.word	0x20001d90

0800d484 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d484:	b480      	push	{r7}
 800d486:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d488:	4b07      	ldr	r3, [pc, #28]	; (800d4a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d004      	beq.n	800d49a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d490:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d496:	3201      	adds	r2, #1
 800d498:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d49a:	4b03      	ldr	r3, [pc, #12]	; (800d4a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d49c:	681b      	ldr	r3, [r3, #0]
	}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr
 800d4a8:	200018b4 	.word	0x200018b4

0800d4ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d4ba:	f000 ff83 	bl	800e3c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d4be:	4b29      	ldr	r3, [pc, #164]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d01c      	beq.n	800d506 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d4cc:	4b25      	ldr	r3, [pc, #148]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	43d2      	mvns	r2, r2
 800d4d8:	400a      	ands	r2, r1
 800d4da:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d4de:	4b21      	ldr	r3, [pc, #132]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00b      	beq.n	800d506 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	6838      	ldr	r0, [r7, #0]
 800d4f2:	f000 f9dd 	bl	800d8b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d4f6:	4b1c      	ldr	r3, [pc, #112]	; (800d568 <xTaskNotifyWait+0xbc>)
 800d4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d506:	f000 ff8d 	bl	800e424 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d50a:	f000 ff5b 	bl	800e3c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d005      	beq.n	800d520 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d514:	4b13      	ldr	r3, [pc, #76]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d520:	4b10      	ldr	r3, [pc, #64]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d002      	beq.n	800d534 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d52e:	2300      	movs	r3, #0
 800d530:	617b      	str	r3, [r7, #20]
 800d532:	e00a      	b.n	800d54a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d534:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	43d2      	mvns	r2, r2
 800d540:	400a      	ands	r2, r1
 800d542:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800d546:	2301      	movs	r3, #1
 800d548:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d54a:	4b06      	ldr	r3, [pc, #24]	; (800d564 <xTaskNotifyWait+0xb8>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800d554:	f000 ff66 	bl	800e424 <vPortExitCritical>

		return xReturn;
 800d558:	697b      	ldr	r3, [r7, #20]
	}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3718      	adds	r7, #24
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	200018b4 	.word	0x200018b4
 800d568:	e000ed04 	.word	0xe000ed04

0800d56c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08a      	sub	sp, #40	; 0x28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	603b      	str	r3, [r7, #0]
 800d578:	4613      	mov	r3, r2
 800d57a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d57c:	2301      	movs	r3, #1
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10a      	bne.n	800d59c <xTaskGenericNotify+0x30>
	__asm volatile
 800d586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	61bb      	str	r3, [r7, #24]
}
 800d598:	bf00      	nop
 800d59a:	e7fe      	b.n	800d59a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d5a0:	f000 ff10 	bl	800e3c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d004      	beq.n	800d5b4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d5b4:	6a3b      	ldr	r3, [r7, #32]
 800d5b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d5ba:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d82d      	bhi.n	800d626 <xTaskGenericNotify+0xba>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <xTaskGenericNotify+0x64>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d649 	.word	0x0800d649
 800d5d4:	0800d5e5 	.word	0x0800d5e5
 800d5d8:	0800d5f7 	.word	0x0800d5f7
 800d5dc:	0800d607 	.word	0x0800d607
 800d5e0:	0800d611 	.word	0x0800d611
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d5f4:	e02b      	b.n	800d64e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d604:	e023      	b.n	800d64e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d60e:	e01e      	b.n	800d64e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d610:	7ffb      	ldrb	r3, [r7, #31]
 800d612:	2b02      	cmp	r3, #2
 800d614:	d004      	beq.n	800d620 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	68ba      	ldr	r2, [r7, #8]
 800d61a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d61e:	e016      	b.n	800d64e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d620:	2300      	movs	r3, #0
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d624:	e013      	b.n	800d64e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d626:	6a3b      	ldr	r3, [r7, #32]
 800d628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d630:	d00c      	beq.n	800d64c <xTaskGenericNotify+0xe0>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	617b      	str	r3, [r7, #20]
}
 800d644:	bf00      	nop
 800d646:	e7fe      	b.n	800d646 <xTaskGenericNotify+0xda>
					break;
 800d648:	bf00      	nop
 800d64a:	e000      	b.n	800d64e <xTaskGenericNotify+0xe2>

					break;
 800d64c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d64e:	7ffb      	ldrb	r3, [r7, #31]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d13a      	bne.n	800d6ca <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	3304      	adds	r3, #4
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fd fed3 	bl	800b404 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d662:	4b1d      	ldr	r3, [pc, #116]	; (800d6d8 <xTaskGenericNotify+0x16c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d903      	bls.n	800d672 <xTaskGenericNotify+0x106>
 800d66a:	6a3b      	ldr	r3, [r7, #32]
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	4a1a      	ldr	r2, [pc, #104]	; (800d6d8 <xTaskGenericNotify+0x16c>)
 800d670:	6013      	str	r3, [r2, #0]
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4a17      	ldr	r2, [pc, #92]	; (800d6dc <xTaskGenericNotify+0x170>)
 800d680:	441a      	add	r2, r3
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	3304      	adds	r3, #4
 800d686:	4619      	mov	r1, r3
 800d688:	4610      	mov	r0, r2
 800d68a:	f7fd fe5e 	bl	800b34a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <xTaskGenericNotify+0x140>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	613b      	str	r3, [r7, #16]
}
 800d6a8:	bf00      	nop
 800d6aa:	e7fe      	b.n	800d6aa <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <xTaskGenericNotify+0x174>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d907      	bls.n	800d6ca <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d6ba:	4b0a      	ldr	r3, [pc, #40]	; (800d6e4 <xTaskGenericNotify+0x178>)
 800d6bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d6ca:	f000 feab 	bl	800e424 <vPortExitCritical>

		return xReturn;
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3728      	adds	r7, #40	; 0x28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	20001d90 	.word	0x20001d90
 800d6dc:	200018b8 	.word	0x200018b8
 800d6e0:	200018b4 	.word	0x200018b4
 800d6e4:	e000ed04 	.word	0xe000ed04

0800d6e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08e      	sub	sp, #56	; 0x38
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	603b      	str	r3, [r7, #0]
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10a      	bne.n	800d718 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	f383 8811 	msr	BASEPRI, r3
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d714:	bf00      	nop
 800d716:	e7fe      	b.n	800d716 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d718:	f000 ff36 	bl	800e588 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d720:	f3ef 8211 	mrs	r2, BASEPRI
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	623a      	str	r2, [r7, #32]
 800d736:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d738:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d73a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d004      	beq.n	800d74c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	2202      	movs	r2, #2
 800d75a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	2b04      	cmp	r3, #4
 800d762:	d82f      	bhi.n	800d7c4 <xTaskGenericNotifyFromISR+0xdc>
 800d764:	a201      	add	r2, pc, #4	; (adr r2, 800d76c <xTaskGenericNotifyFromISR+0x84>)
 800d766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76a:	bf00      	nop
 800d76c:	0800d7e7 	.word	0x0800d7e7
 800d770:	0800d781 	.word	0x0800d781
 800d774:	0800d793 	.word	0x0800d793
 800d778:	0800d7a3 	.word	0x0800d7a3
 800d77c:	0800d7ad 	.word	0x0800d7ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	431a      	orrs	r2, r3
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d790:	e02c      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d798:	1c5a      	adds	r2, r3, #1
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d7a0:	e024      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800d7aa:	e01f      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d7ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d004      	beq.n	800d7be <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d7bc:	e016      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d7c2:	e013      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ce:	d00c      	beq.n	800d7ea <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	61bb      	str	r3, [r7, #24]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d7e6:	bf00      	nop
 800d7e8:	e000      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x104>
					break;
 800d7ea:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d7ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d146      	bne.n	800d882 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00a      	beq.n	800d812 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	617b      	str	r3, [r7, #20]
}
 800d80e:	bf00      	nop
 800d810:	e7fe      	b.n	800d810 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d812:	4b21      	ldr	r3, [pc, #132]	; (800d898 <xTaskGenericNotifyFromISR+0x1b0>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d11d      	bne.n	800d856 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	3304      	adds	r3, #4
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd fdf0 	bl	800b404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d828:	4b1c      	ldr	r3, [pc, #112]	; (800d89c <xTaskGenericNotifyFromISR+0x1b4>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d903      	bls.n	800d838 <xTaskGenericNotifyFromISR+0x150>
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	4a19      	ldr	r2, [pc, #100]	; (800d89c <xTaskGenericNotifyFromISR+0x1b4>)
 800d836:	6013      	str	r3, [r2, #0]
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83c:	4613      	mov	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4413      	add	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	4a16      	ldr	r2, [pc, #88]	; (800d8a0 <xTaskGenericNotifyFromISR+0x1b8>)
 800d846:	441a      	add	r2, r3
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	3304      	adds	r3, #4
 800d84c:	4619      	mov	r1, r3
 800d84e:	4610      	mov	r0, r2
 800d850:	f7fd fd7b 	bl	800b34a <vListInsertEnd>
 800d854:	e005      	b.n	800d862 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	3318      	adds	r3, #24
 800d85a:	4619      	mov	r1, r3
 800d85c:	4811      	ldr	r0, [pc, #68]	; (800d8a4 <xTaskGenericNotifyFromISR+0x1bc>)
 800d85e:	f7fd fd74 	bl	800b34a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d866:	4b10      	ldr	r3, [pc, #64]	; (800d8a8 <xTaskGenericNotifyFromISR+0x1c0>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d908      	bls.n	800d882 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d002      	beq.n	800d87c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d878:	2201      	movs	r2, #1
 800d87a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d87c:	4b0b      	ldr	r3, [pc, #44]	; (800d8ac <xTaskGenericNotifyFromISR+0x1c4>)
 800d87e:	2201      	movs	r2, #1
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	f383 8811 	msr	BASEPRI, r3
}
 800d88c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d890:	4618      	mov	r0, r3
 800d892:	3738      	adds	r7, #56	; 0x38
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20001db0 	.word	0x20001db0
 800d89c:	20001d90 	.word	0x20001d90
 800d8a0:	200018b8 	.word	0x200018b8
 800d8a4:	20001d48 	.word	0x20001d48
 800d8a8:	200018b4 	.word	0x200018b4
 800d8ac:	20001d9c 	.word	0x20001d9c

0800d8b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8ba:	4b21      	ldr	r3, [pc, #132]	; (800d940 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c0:	4b20      	ldr	r3, [pc, #128]	; (800d944 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fd fd9c 	bl	800b404 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d2:	d10a      	bne.n	800d8ea <prvAddCurrentTaskToDelayedList+0x3a>
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d007      	beq.n	800d8ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8da:	4b1a      	ldr	r3, [pc, #104]	; (800d944 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3304      	adds	r3, #4
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4819      	ldr	r0, [pc, #100]	; (800d948 <prvAddCurrentTaskToDelayedList+0x98>)
 800d8e4:	f7fd fd31 	bl	800b34a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8e8:	e026      	b.n	800d938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8f2:	4b14      	ldr	r3, [pc, #80]	; (800d944 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d209      	bcs.n	800d916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d902:	4b12      	ldr	r3, [pc, #72]	; (800d94c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	4b0f      	ldr	r3, [pc, #60]	; (800d944 <prvAddCurrentTaskToDelayedList+0x94>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3304      	adds	r3, #4
 800d90c:	4619      	mov	r1, r3
 800d90e:	4610      	mov	r0, r2
 800d910:	f7fd fd3f 	bl	800b392 <vListInsert>
}
 800d914:	e010      	b.n	800d938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d916:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <prvAddCurrentTaskToDelayedList+0x94>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3304      	adds	r3, #4
 800d920:	4619      	mov	r1, r3
 800d922:	4610      	mov	r0, r2
 800d924:	f7fd fd35 	bl	800b392 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d928:	4b0a      	ldr	r3, [pc, #40]	; (800d954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d202      	bcs.n	800d938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d932:	4a08      	ldr	r2, [pc, #32]	; (800d954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	6013      	str	r3, [r2, #0]
}
 800d938:	bf00      	nop
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20001d8c 	.word	0x20001d8c
 800d944:	200018b4 	.word	0x200018b4
 800d948:	20001d74 	.word	0x20001d74
 800d94c:	20001d44 	.word	0x20001d44
 800d950:	20001d40 	.word	0x20001d40
 800d954:	20001da8 	.word	0x20001da8

0800d958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08a      	sub	sp, #40	; 0x28
 800d95c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d962:	f000 fba1 	bl	800e0a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d966:	4b1c      	ldr	r3, [pc, #112]	; (800d9d8 <xTimerCreateTimerTask+0x80>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d021      	beq.n	800d9b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d972:	2300      	movs	r3, #0
 800d974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d976:	1d3a      	adds	r2, r7, #4
 800d978:	f107 0108 	add.w	r1, r7, #8
 800d97c:	f107 030c 	add.w	r3, r7, #12
 800d980:	4618      	mov	r0, r3
 800d982:	f7fd fc9b 	bl	800b2bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	9202      	str	r2, [sp, #8]
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	2302      	movs	r3, #2
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	2300      	movs	r3, #0
 800d996:	460a      	mov	r2, r1
 800d998:	4910      	ldr	r1, [pc, #64]	; (800d9dc <xTimerCreateTimerTask+0x84>)
 800d99a:	4811      	ldr	r0, [pc, #68]	; (800d9e0 <xTimerCreateTimerTask+0x88>)
 800d99c:	f7fe fd14 	bl	800c3c8 <xTaskCreateStatic>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	4a10      	ldr	r2, [pc, #64]	; (800d9e4 <xTimerCreateTimerTask+0x8c>)
 800d9a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9a6:	4b0f      	ldr	r3, [pc, #60]	; (800d9e4 <xTimerCreateTimerTask+0x8c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10a      	bne.n	800d9ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	613b      	str	r3, [r7, #16]
}
 800d9ca:	bf00      	nop
 800d9cc:	e7fe      	b.n	800d9cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9ce:	697b      	ldr	r3, [r7, #20]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	20001de4 	.word	0x20001de4
 800d9dc:	08013b08 	.word	0x08013b08
 800d9e0:	0800dc51 	.word	0x0800dc51
 800d9e4:	20001de8 	.word	0x20001de8

0800d9e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af02      	add	r7, sp, #8
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d9f6:	202c      	movs	r0, #44	; 0x2c
 800d9f8:	f000 fe06 	bl	800e608 <pvPortMalloc>
 800d9fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00d      	beq.n	800da20 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2200      	movs	r2, #0
 800da08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	6a3b      	ldr	r3, [r7, #32]
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	68b9      	ldr	r1, [r7, #8]
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f000 f843 	bl	800daa6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800da20:	697b      	ldr	r3, [r7, #20]
	}
 800da22:	4618      	mov	r0, r3
 800da24:	3718      	adds	r7, #24
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b08a      	sub	sp, #40	; 0x28
 800da2e:	af02      	add	r7, sp, #8
 800da30:	60f8      	str	r0, [r7, #12]
 800da32:	60b9      	str	r1, [r7, #8]
 800da34:	607a      	str	r2, [r7, #4]
 800da36:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800da38:	232c      	movs	r3, #44	; 0x2c
 800da3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	2b2c      	cmp	r3, #44	; 0x2c
 800da40:	d00a      	beq.n	800da58 <xTimerCreateStatic+0x2e>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	61bb      	str	r3, [r7, #24]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800da5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <xTimerCreateStatic+0x4c>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	617b      	str	r3, [r7, #20]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00d      	beq.n	800da9c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	2202      	movs	r2, #2
 800da84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	9301      	str	r3, [sp, #4]
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	68b9      	ldr	r1, [r7, #8]
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f000 f805 	bl	800daa6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800da9c:	69fb      	ldr	r3, [r7, #28]
	}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3720      	adds	r7, #32
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b086      	sub	sp, #24
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
 800dab2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10a      	bne.n	800dad0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	617b      	str	r3, [r7, #20]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d01e      	beq.n	800db14 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dad6:	f000 fae7 	bl	800e0a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	6a3a      	ldr	r2, [r7, #32]
 800daf0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	3304      	adds	r3, #4
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fd fc1a 	bl	800b330 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d008      	beq.n	800db14 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db08:	f043 0304 	orr.w	r3, r3, #4
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800db14:	bf00      	nop
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08a      	sub	sp, #40	; 0x28
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10a      	bne.n	800db4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	623b      	str	r3, [r7, #32]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db4a:	4b1a      	ldr	r3, [pc, #104]	; (800dbb4 <xTimerGenericCommand+0x98>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d02a      	beq.n	800dba8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b05      	cmp	r3, #5
 800db62:	dc18      	bgt.n	800db96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db64:	f7ff fb18 	bl	800d198 <xTaskGetSchedulerState>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d109      	bne.n	800db82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db6e:	4b11      	ldr	r3, [pc, #68]	; (800dbb4 <xTimerGenericCommand+0x98>)
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	f107 0110 	add.w	r1, r7, #16
 800db76:	2300      	movs	r3, #0
 800db78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db7a:	f7fd fecb 	bl	800b914 <xQueueGenericSend>
 800db7e:	6278      	str	r0, [r7, #36]	; 0x24
 800db80:	e012      	b.n	800dba8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db82:	4b0c      	ldr	r3, [pc, #48]	; (800dbb4 <xTimerGenericCommand+0x98>)
 800db84:	6818      	ldr	r0, [r3, #0]
 800db86:	f107 0110 	add.w	r1, r7, #16
 800db8a:	2300      	movs	r3, #0
 800db8c:	2200      	movs	r2, #0
 800db8e:	f7fd fec1 	bl	800b914 <xQueueGenericSend>
 800db92:	6278      	str	r0, [r7, #36]	; 0x24
 800db94:	e008      	b.n	800dba8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db96:	4b07      	ldr	r3, [pc, #28]	; (800dbb4 <xTimerGenericCommand+0x98>)
 800db98:	6818      	ldr	r0, [r3, #0]
 800db9a:	f107 0110 	add.w	r1, r7, #16
 800db9e:	2300      	movs	r3, #0
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	f7fd ffb5 	bl	800bb10 <xQueueGenericSendFromISR>
 800dba6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3728      	adds	r7, #40	; 0x28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	20001de4 	.word	0x20001de4

0800dbb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af02      	add	r7, sp, #8
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc2:	4b22      	ldr	r3, [pc, #136]	; (800dc4c <prvProcessExpiredTimer+0x94>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fd fc17 	bl	800b404 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbdc:	f003 0304 	and.w	r3, r3, #4
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d022      	beq.n	800dc2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	699a      	ldr	r2, [r3, #24]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	18d1      	adds	r1, r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	6978      	ldr	r0, [r7, #20]
 800dbf2:	f000 f8d1 	bl	800dd98 <prvInsertTimerInActiveList>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01f      	beq.n	800dc3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	2300      	movs	r3, #0
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	2100      	movs	r1, #0
 800dc06:	6978      	ldr	r0, [r7, #20]
 800dc08:	f7ff ff88 	bl	800db1c <xTimerGenericCommand>
 800dc0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d113      	bne.n	800dc3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	60fb      	str	r3, [r7, #12]
}
 800dc26:	bf00      	nop
 800dc28:	e7fe      	b.n	800dc28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc30:	f023 0301 	bic.w	r3, r3, #1
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	6978      	ldr	r0, [r7, #20]
 800dc42:	4798      	blx	r3
}
 800dc44:	bf00      	nop
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	20001ddc 	.word	0x20001ddc

0800dc50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc58:	f107 0308 	add.w	r3, r7, #8
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 f857 	bl	800dd10 <prvGetNextExpireTime>
 800dc62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	4619      	mov	r1, r3
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f000 f803 	bl	800dc74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc6e:	f000 f8d5 	bl	800de1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc72:	e7f1      	b.n	800dc58 <prvTimerTask+0x8>

0800dc74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc7e:	f7fe fe7d 	bl	800c97c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc82:	f107 0308 	add.w	r3, r7, #8
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 f866 	bl	800dd58 <prvSampleTimeNow>
 800dc8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d130      	bne.n	800dcf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <prvProcessTimerOrBlockTask+0x3c>
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d806      	bhi.n	800dcb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dca2:	f7fe fe79 	bl	800c998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dca6:	68f9      	ldr	r1, [r7, #12]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff ff85 	bl	800dbb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dcae:	e024      	b.n	800dcfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d008      	beq.n	800dcc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dcb6:	4b13      	ldr	r3, [pc, #76]	; (800dd04 <prvProcessTimerOrBlockTask+0x90>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d101      	bne.n	800dcc4 <prvProcessTimerOrBlockTask+0x50>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e000      	b.n	800dcc6 <prvProcessTimerOrBlockTask+0x52>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dcc8:	4b0f      	ldr	r3, [pc, #60]	; (800dd08 <prvProcessTimerOrBlockTask+0x94>)
 800dcca:	6818      	ldr	r0, [r3, #0]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	f7fe fb43 	bl	800c360 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dcda:	f7fe fe5d 	bl	800c998 <xTaskResumeAll>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <prvProcessTimerOrBlockTask+0x98>)
 800dce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	f3bf 8f6f 	isb	sy
}
 800dcf4:	e001      	b.n	800dcfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dcf6:	f7fe fe4f 	bl	800c998 <xTaskResumeAll>
}
 800dcfa:	bf00      	nop
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20001de0 	.word	0x20001de0
 800dd08:	20001de4 	.word	0x20001de4
 800dd0c:	e000ed04 	.word	0xe000ed04

0800dd10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dd18:	4b0e      	ldr	r3, [pc, #56]	; (800dd54 <prvGetNextExpireTime+0x44>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <prvGetNextExpireTime+0x16>
 800dd22:	2201      	movs	r2, #1
 800dd24:	e000      	b.n	800dd28 <prvGetNextExpireTime+0x18>
 800dd26:	2200      	movs	r2, #0
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d105      	bne.n	800dd40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd34:	4b07      	ldr	r3, [pc, #28]	; (800dd54 <prvGetNextExpireTime+0x44>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	e001      	b.n	800dd44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd44:	68fb      	ldr	r3, [r7, #12]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	20001ddc 	.word	0x20001ddc

0800dd58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd60:	f7fe feb8 	bl	800cad4 <xTaskGetTickCount>
 800dd64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd66:	4b0b      	ldr	r3, [pc, #44]	; (800dd94 <prvSampleTimeNow+0x3c>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d205      	bcs.n	800dd7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd70:	f000 f936 	bl	800dfe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	e002      	b.n	800dd82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd82:	4a04      	ldr	r2, [pc, #16]	; (800dd94 <prvSampleTimeNow+0x3c>)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd88:	68fb      	ldr	r3, [r7, #12]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	20001dec 	.word	0x20001dec

0800dd98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dda6:	2300      	movs	r3, #0
 800dda8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ddb6:	68ba      	ldr	r2, [r7, #8]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d812      	bhi.n	800dde4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	1ad2      	subs	r2, r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	699b      	ldr	r3, [r3, #24]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d302      	bcc.n	800ddd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	617b      	str	r3, [r7, #20]
 800ddd0:	e01b      	b.n	800de0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ddd2:	4b10      	ldr	r3, [pc, #64]	; (800de14 <prvInsertTimerInActiveList+0x7c>)
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3304      	adds	r3, #4
 800ddda:	4619      	mov	r1, r3
 800dddc:	4610      	mov	r0, r2
 800ddde:	f7fd fad8 	bl	800b392 <vListInsert>
 800dde2:	e012      	b.n	800de0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d206      	bcs.n	800ddfa <prvInsertTimerInActiveList+0x62>
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d302      	bcc.n	800ddfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	617b      	str	r3, [r7, #20]
 800ddf8:	e007      	b.n	800de0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddfa:	4b07      	ldr	r3, [pc, #28]	; (800de18 <prvInsertTimerInActiveList+0x80>)
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3304      	adds	r3, #4
 800de02:	4619      	mov	r1, r3
 800de04:	4610      	mov	r0, r2
 800de06:	f7fd fac4 	bl	800b392 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800de0a:	697b      	ldr	r3, [r7, #20]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	20001de0 	.word	0x20001de0
 800de18:	20001ddc 	.word	0x20001ddc

0800de1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08e      	sub	sp, #56	; 0x38
 800de20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de22:	e0ca      	b.n	800dfba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	da18      	bge.n	800de5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800de2a:	1d3b      	adds	r3, r7, #4
 800de2c:	3304      	adds	r3, #4
 800de2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	61fb      	str	r3, [r7, #28]
}
 800de48:	bf00      	nop
 800de4a:	e7fe      	b.n	800de4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de52:	6850      	ldr	r0, [r2, #4]
 800de54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de56:	6892      	ldr	r2, [r2, #8]
 800de58:	4611      	mov	r1, r2
 800de5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f2c0 80aa 	blt.w	800dfb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	695b      	ldr	r3, [r3, #20]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d004      	beq.n	800de7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	3304      	adds	r3, #4
 800de74:	4618      	mov	r0, r3
 800de76:	f7fd fac5 	bl	800b404 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de7a:	463b      	mov	r3, r7
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7ff ff6b 	bl	800dd58 <prvSampleTimeNow>
 800de82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b09      	cmp	r3, #9
 800de88:	f200 8097 	bhi.w	800dfba <prvProcessReceivedCommands+0x19e>
 800de8c:	a201      	add	r2, pc, #4	; (adr r2, 800de94 <prvProcessReceivedCommands+0x78>)
 800de8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de92:	bf00      	nop
 800de94:	0800debd 	.word	0x0800debd
 800de98:	0800debd 	.word	0x0800debd
 800de9c:	0800debd 	.word	0x0800debd
 800dea0:	0800df31 	.word	0x0800df31
 800dea4:	0800df45 	.word	0x0800df45
 800dea8:	0800df8f 	.word	0x0800df8f
 800deac:	0800debd 	.word	0x0800debd
 800deb0:	0800debd 	.word	0x0800debd
 800deb4:	0800df31 	.word	0x0800df31
 800deb8:	0800df45 	.word	0x0800df45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dec2:	f043 0301 	orr.w	r3, r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	18d1      	adds	r1, r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dedc:	f7ff ff5c 	bl	800dd98 <prvInsertTimerInActiveList>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d069      	beq.n	800dfba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800def4:	f003 0304 	and.w	r3, r3, #4
 800def8:	2b00      	cmp	r3, #0
 800defa:	d05e      	beq.n	800dfba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	441a      	add	r2, r3
 800df04:	2300      	movs	r3, #0
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	2300      	movs	r3, #0
 800df0a:	2100      	movs	r1, #0
 800df0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0e:	f7ff fe05 	bl	800db1c <xTimerGenericCommand>
 800df12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d14f      	bne.n	800dfba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	61bb      	str	r3, [r7, #24]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df36:	f023 0301 	bic.w	r3, r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800df42:	e03a      	b.n	800dfba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df4a:	f043 0301 	orr.w	r3, r3, #1
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	617b      	str	r3, [r7, #20]
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	699a      	ldr	r2, [r3, #24]
 800df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df80:	18d1      	adds	r1, r2, r3
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df88:	f7ff ff06 	bl	800dd98 <prvInsertTimerInActiveList>
					break;
 800df8c:	e015      	b.n	800dfba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df94:	f003 0302 	and.w	r3, r3, #2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d103      	bne.n	800dfa4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df9e:	f000 fbff 	bl	800e7a0 <vPortFree>
 800dfa2:	e00a      	b.n	800dfba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfaa:	f023 0301 	bic.w	r3, r3, #1
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dfb6:	e000      	b.n	800dfba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dfb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfba:	4b08      	ldr	r3, [pc, #32]	; (800dfdc <prvProcessReceivedCommands+0x1c0>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	1d39      	adds	r1, r7, #4
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fd fe40 	bl	800bc48 <xQueueReceive>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f47f af2a 	bne.w	800de24 <prvProcessReceivedCommands+0x8>
	}
}
 800dfd0:	bf00      	nop
 800dfd2:	bf00      	nop
 800dfd4:	3730      	adds	r7, #48	; 0x30
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20001de4 	.word	0x20001de4

0800dfe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfe6:	e048      	b.n	800e07a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfe8:	4b2d      	ldr	r3, [pc, #180]	; (800e0a0 <prvSwitchTimerLists+0xc0>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff2:	4b2b      	ldr	r3, [pc, #172]	; (800e0a0 <prvSwitchTimerLists+0xc0>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3304      	adds	r3, #4
 800e000:	4618      	mov	r0, r3
 800e002:	f7fd f9ff 	bl	800b404 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d02e      	beq.n	800e07a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	4413      	add	r3, r2
 800e024:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d90e      	bls.n	800e04c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e03a:	4b19      	ldr	r3, [pc, #100]	; (800e0a0 <prvSwitchTimerLists+0xc0>)
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	3304      	adds	r3, #4
 800e042:	4619      	mov	r1, r3
 800e044:	4610      	mov	r0, r2
 800e046:	f7fd f9a4 	bl	800b392 <vListInsert>
 800e04a:	e016      	b.n	800e07a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e04c:	2300      	movs	r3, #0
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	2300      	movs	r3, #0
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	2100      	movs	r1, #0
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff fd60 	bl	800db1c <xTimerGenericCommand>
 800e05c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10a      	bne.n	800e07a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	f383 8811 	msr	BASEPRI, r3
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f3bf 8f4f 	dsb	sy
 800e074:	603b      	str	r3, [r7, #0]
}
 800e076:	bf00      	nop
 800e078:	e7fe      	b.n	800e078 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e07a:	4b09      	ldr	r3, [pc, #36]	; (800e0a0 <prvSwitchTimerLists+0xc0>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1b1      	bne.n	800dfe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e084:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <prvSwitchTimerLists+0xc0>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e08a:	4b06      	ldr	r3, [pc, #24]	; (800e0a4 <prvSwitchTimerLists+0xc4>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a04      	ldr	r2, [pc, #16]	; (800e0a0 <prvSwitchTimerLists+0xc0>)
 800e090:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e092:	4a04      	ldr	r2, [pc, #16]	; (800e0a4 <prvSwitchTimerLists+0xc4>)
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	6013      	str	r3, [r2, #0]
}
 800e098:	bf00      	nop
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	20001ddc 	.word	0x20001ddc
 800e0a4:	20001de0 	.word	0x20001de0

0800e0a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e0ae:	f000 f989 	bl	800e3c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e0b2:	4b15      	ldr	r3, [pc, #84]	; (800e108 <prvCheckForValidListAndQueue+0x60>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d120      	bne.n	800e0fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e0ba:	4814      	ldr	r0, [pc, #80]	; (800e10c <prvCheckForValidListAndQueue+0x64>)
 800e0bc:	f7fd f918 	bl	800b2f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e0c0:	4813      	ldr	r0, [pc, #76]	; (800e110 <prvCheckForValidListAndQueue+0x68>)
 800e0c2:	f7fd f915 	bl	800b2f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0c6:	4b13      	ldr	r3, [pc, #76]	; (800e114 <prvCheckForValidListAndQueue+0x6c>)
 800e0c8:	4a10      	ldr	r2, [pc, #64]	; (800e10c <prvCheckForValidListAndQueue+0x64>)
 800e0ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e0cc:	4b12      	ldr	r3, [pc, #72]	; (800e118 <prvCheckForValidListAndQueue+0x70>)
 800e0ce:	4a10      	ldr	r2, [pc, #64]	; (800e110 <prvCheckForValidListAndQueue+0x68>)
 800e0d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	4b11      	ldr	r3, [pc, #68]	; (800e11c <prvCheckForValidListAndQueue+0x74>)
 800e0d8:	4a11      	ldr	r2, [pc, #68]	; (800e120 <prvCheckForValidListAndQueue+0x78>)
 800e0da:	2110      	movs	r1, #16
 800e0dc:	200a      	movs	r0, #10
 800e0de:	f7fd fa23 	bl	800b528 <xQueueGenericCreateStatic>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	4a08      	ldr	r2, [pc, #32]	; (800e108 <prvCheckForValidListAndQueue+0x60>)
 800e0e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e0e8:	4b07      	ldr	r3, [pc, #28]	; (800e108 <prvCheckForValidListAndQueue+0x60>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d005      	beq.n	800e0fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0f0:	4b05      	ldr	r3, [pc, #20]	; (800e108 <prvCheckForValidListAndQueue+0x60>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	490b      	ldr	r1, [pc, #44]	; (800e124 <prvCheckForValidListAndQueue+0x7c>)
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe f8de 	bl	800c2b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0fc:	f000 f992 	bl	800e424 <vPortExitCritical>
}
 800e100:	bf00      	nop
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20001de4 	.word	0x20001de4
 800e10c:	20001db4 	.word	0x20001db4
 800e110:	20001dc8 	.word	0x20001dc8
 800e114:	20001ddc 	.word	0x20001ddc
 800e118:	20001de0 	.word	0x20001de0
 800e11c:	20001e90 	.word	0x20001e90
 800e120:	20001df0 	.word	0x20001df0
 800e124:	08013b10 	.word	0x08013b10

0800e128 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10a      	bne.n	800e150 <pvTimerGetTimerID+0x28>
	__asm volatile
 800e13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	60fb      	str	r3, [r7, #12]
}
 800e14c:	bf00      	nop
 800e14e:	e7fe      	b.n	800e14e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e150:	f000 f938 	bl	800e3c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	69db      	ldr	r3, [r3, #28]
 800e158:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e15a:	f000 f963 	bl	800e424 <vPortExitCritical>

	return pvReturn;
 800e15e:	693b      	ldr	r3, [r7, #16]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	3b04      	subs	r3, #4
 800e178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3b04      	subs	r3, #4
 800e186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f023 0201 	bic.w	r2, r3, #1
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3b04      	subs	r3, #4
 800e196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e198:	4a0c      	ldr	r2, [pc, #48]	; (800e1cc <pxPortInitialiseStack+0x64>)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3b14      	subs	r3, #20
 800e1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	3b04      	subs	r3, #4
 800e1ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f06f 0202 	mvn.w	r2, #2
 800e1b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	3b20      	subs	r3, #32
 800e1bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e1be:	68fb      	ldr	r3, [r7, #12]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3714      	adds	r7, #20
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	0800e1d1 	.word	0x0800e1d1

0800e1d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <prvTaskExitError+0x54>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e2:	d00a      	beq.n	800e1fa <prvTaskExitError+0x2a>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60fb      	str	r3, [r7, #12]
}
 800e1f6:	bf00      	nop
 800e1f8:	e7fe      	b.n	800e1f8 <prvTaskExitError+0x28>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	60bb      	str	r3, [r7, #8]
}
 800e20c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e20e:	bf00      	nop
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0fc      	beq.n	800e210 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e216:	bf00      	nop
 800e218:	bf00      	nop
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	2000009c 	.word	0x2000009c
	...

0800e230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <pxCurrentTCBConst2>)
 800e232:	6819      	ldr	r1, [r3, #0]
 800e234:	6808      	ldr	r0, [r1, #0]
 800e236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23a:	f380 8809 	msr	PSP, r0
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f04f 0000 	mov.w	r0, #0
 800e246:	f380 8811 	msr	BASEPRI, r0
 800e24a:	4770      	bx	lr
 800e24c:	f3af 8000 	nop.w

0800e250 <pxCurrentTCBConst2>:
 800e250:	200018b4 	.word	0x200018b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e254:	bf00      	nop
 800e256:	bf00      	nop

0800e258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e258:	4808      	ldr	r0, [pc, #32]	; (800e27c <prvPortStartFirstTask+0x24>)
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	6800      	ldr	r0, [r0, #0]
 800e25e:	f380 8808 	msr	MSP, r0
 800e262:	f04f 0000 	mov.w	r0, #0
 800e266:	f380 8814 	msr	CONTROL, r0
 800e26a:	b662      	cpsie	i
 800e26c:	b661      	cpsie	f
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	df00      	svc	0
 800e278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e27a:	bf00      	nop
 800e27c:	e000ed08 	.word	0xe000ed08

0800e280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e286:	4b46      	ldr	r3, [pc, #280]	; (800e3a0 <xPortStartScheduler+0x120>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a46      	ldr	r2, [pc, #280]	; (800e3a4 <xPortStartScheduler+0x124>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10a      	bne.n	800e2a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	613b      	str	r3, [r7, #16]
}
 800e2a2:	bf00      	nop
 800e2a4:	e7fe      	b.n	800e2a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e2a6:	4b3e      	ldr	r3, [pc, #248]	; (800e3a0 <xPortStartScheduler+0x120>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a3f      	ldr	r2, [pc, #252]	; (800e3a8 <xPortStartScheduler+0x128>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d10a      	bne.n	800e2c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	60fb      	str	r3, [r7, #12]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2c6:	4b39      	ldr	r3, [pc, #228]	; (800e3ac <xPortStartScheduler+0x12c>)
 800e2c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	22ff      	movs	r2, #255	; 0xff
 800e2d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4b31      	ldr	r3, [pc, #196]	; (800e3b0 <xPortStartScheduler+0x130>)
 800e2ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2ee:	4b31      	ldr	r3, [pc, #196]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e2f0:	2207      	movs	r2, #7
 800e2f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2f4:	e009      	b.n	800e30a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e2f6:	4b2f      	ldr	r3, [pc, #188]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	4a2d      	ldr	r2, [pc, #180]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e2fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e300:	78fb      	ldrb	r3, [r7, #3]
 800e302:	b2db      	uxtb	r3, r3
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	b2db      	uxtb	r3, r3
 800e308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e30a:	78fb      	ldrb	r3, [r7, #3]
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e312:	2b80      	cmp	r3, #128	; 0x80
 800e314:	d0ef      	beq.n	800e2f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e316:	4b27      	ldr	r3, [pc, #156]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f1c3 0307 	rsb	r3, r3, #7
 800e31e:	2b04      	cmp	r3, #4
 800e320:	d00a      	beq.n	800e338 <xPortStartScheduler+0xb8>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	60bb      	str	r3, [r7, #8]
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e338:	4b1e      	ldr	r3, [pc, #120]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	021b      	lsls	r3, r3, #8
 800e33e:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e342:	4b1c      	ldr	r3, [pc, #112]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e34a:	4a1a      	ldr	r2, [pc, #104]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e34c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	b2da      	uxtb	r2, r3
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e356:	4b18      	ldr	r3, [pc, #96]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a17      	ldr	r2, [pc, #92]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e35c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e362:	4b15      	ldr	r3, [pc, #84]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a14      	ldr	r2, [pc, #80]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e36c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e36e:	f000 f8dd 	bl	800e52c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e372:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <xPortStartScheduler+0x13c>)
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e378:	f000 f8fc 	bl	800e574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e37c:	4b10      	ldr	r3, [pc, #64]	; (800e3c0 <xPortStartScheduler+0x140>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a0f      	ldr	r2, [pc, #60]	; (800e3c0 <xPortStartScheduler+0x140>)
 800e382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e388:	f7ff ff66 	bl	800e258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e38c:	f7fe fc7e 	bl	800cc8c <vTaskSwitchContext>
	prvTaskExitError();
 800e390:	f7ff ff1e 	bl	800e1d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	e000ed00 	.word	0xe000ed00
 800e3a4:	410fc271 	.word	0x410fc271
 800e3a8:	410fc270 	.word	0x410fc270
 800e3ac:	e000e400 	.word	0xe000e400
 800e3b0:	20001ee0 	.word	0x20001ee0
 800e3b4:	20001ee4 	.word	0x20001ee4
 800e3b8:	e000ed20 	.word	0xe000ed20
 800e3bc:	2000009c 	.word	0x2000009c
 800e3c0:	e000ef34 	.word	0xe000ef34

0800e3c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	607b      	str	r3, [r7, #4]
}
 800e3dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3de:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <vPortEnterCritical+0x58>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	4a0d      	ldr	r2, [pc, #52]	; (800e41c <vPortEnterCritical+0x58>)
 800e3e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3e8:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <vPortEnterCritical+0x58>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d10f      	bne.n	800e410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3f0:	4b0b      	ldr	r3, [pc, #44]	; (800e420 <vPortEnterCritical+0x5c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00a      	beq.n	800e410 <vPortEnterCritical+0x4c>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	603b      	str	r3, [r7, #0]
}
 800e40c:	bf00      	nop
 800e40e:	e7fe      	b.n	800e40e <vPortEnterCritical+0x4a>
	}
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	2000009c 	.word	0x2000009c
 800e420:	e000ed04 	.word	0xe000ed04

0800e424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e42a:	4b12      	ldr	r3, [pc, #72]	; (800e474 <vPortExitCritical+0x50>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10a      	bne.n	800e448 <vPortExitCritical+0x24>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	607b      	str	r3, [r7, #4]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <vPortExitCritical+0x50>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	4a09      	ldr	r2, [pc, #36]	; (800e474 <vPortExitCritical+0x50>)
 800e450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <vPortExitCritical+0x50>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d105      	bne.n	800e466 <vPortExitCritical+0x42>
 800e45a:	2300      	movs	r3, #0
 800e45c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	f383 8811 	msr	BASEPRI, r3
}
 800e464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e466:	bf00      	nop
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	2000009c 	.word	0x2000009c
	...

0800e480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e480:	f3ef 8009 	mrs	r0, PSP
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <pxCurrentTCBConst>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	f01e 0f10 	tst.w	lr, #16
 800e490:	bf08      	it	eq
 800e492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	6010      	str	r0, [r2, #0]
 800e49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e4a4:	f380 8811 	msr	BASEPRI, r0
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f7fe fbec 	bl	800cc8c <vTaskSwitchContext>
 800e4b4:	f04f 0000 	mov.w	r0, #0
 800e4b8:	f380 8811 	msr	BASEPRI, r0
 800e4bc:	bc09      	pop	{r0, r3}
 800e4be:	6819      	ldr	r1, [r3, #0]
 800e4c0:	6808      	ldr	r0, [r1, #0]
 800e4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c6:	f01e 0f10 	tst.w	lr, #16
 800e4ca:	bf08      	it	eq
 800e4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4d0:	f380 8809 	msr	PSP, r0
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	f3af 8000 	nop.w

0800e4e0 <pxCurrentTCBConst>:
 800e4e0:	200018b4 	.word	0x200018b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop

0800e4e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e502:	f7fe fb09 	bl	800cb18 <xTaskIncrementTick>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e50c:	4b06      	ldr	r3, [pc, #24]	; (800e528 <xPortSysTickHandler+0x40>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	2300      	movs	r3, #0
 800e516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f383 8811 	msr	BASEPRI, r3
}
 800e51e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	e000ed04 	.word	0xe000ed04

0800e52c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e52c:	b480      	push	{r7}
 800e52e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e530:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <vPortSetupTimerInterrupt+0x34>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <vPortSetupTimerInterrupt+0x38>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e53c:	4b0a      	ldr	r3, [pc, #40]	; (800e568 <vPortSetupTimerInterrupt+0x3c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a0a      	ldr	r2, [pc, #40]	; (800e56c <vPortSetupTimerInterrupt+0x40>)
 800e542:	fba2 2303 	umull	r2, r3, r2, r3
 800e546:	099b      	lsrs	r3, r3, #6
 800e548:	4a09      	ldr	r2, [pc, #36]	; (800e570 <vPortSetupTimerInterrupt+0x44>)
 800e54a:	3b01      	subs	r3, #1
 800e54c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <vPortSetupTimerInterrupt+0x34>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
}
 800e554:	bf00      	nop
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	e000e010 	.word	0xe000e010
 800e564:	e000e018 	.word	0xe000e018
 800e568:	20000090 	.word	0x20000090
 800e56c:	10624dd3 	.word	0x10624dd3
 800e570:	e000e014 	.word	0xe000e014

0800e574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e584 <vPortEnableVFP+0x10>
 800e578:	6801      	ldr	r1, [r0, #0]
 800e57a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e57e:	6001      	str	r1, [r0, #0]
 800e580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e582:	bf00      	nop
 800e584:	e000ed88 	.word	0xe000ed88

0800e588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e58e:	f3ef 8305 	mrs	r3, IPSR
 800e592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b0f      	cmp	r3, #15
 800e598:	d914      	bls.n	800e5c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e59a:	4a17      	ldr	r2, [pc, #92]	; (800e5f8 <vPortValidateInterruptPriority+0x70>)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e5a4:	4b15      	ldr	r3, [pc, #84]	; (800e5fc <vPortValidateInterruptPriority+0x74>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	7afa      	ldrb	r2, [r7, #11]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d20a      	bcs.n	800e5c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	607b      	str	r3, [r7, #4]
}
 800e5c0:	bf00      	nop
 800e5c2:	e7fe      	b.n	800e5c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e5c4:	4b0e      	ldr	r3, [pc, #56]	; (800e600 <vPortValidateInterruptPriority+0x78>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <vPortValidateInterruptPriority+0x7c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d90a      	bls.n	800e5ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	603b      	str	r3, [r7, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	e7fe      	b.n	800e5e8 <vPortValidateInterruptPriority+0x60>
	}
 800e5ea:	bf00      	nop
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	e000e3f0 	.word	0xe000e3f0
 800e5fc:	20001ee0 	.word	0x20001ee0
 800e600:	e000ed0c 	.word	0xe000ed0c
 800e604:	20001ee4 	.word	0x20001ee4

0800e608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08a      	sub	sp, #40	; 0x28
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e610:	2300      	movs	r3, #0
 800e612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e614:	f7fe f9b2 	bl	800c97c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e618:	4b5b      	ldr	r3, [pc, #364]	; (800e788 <pvPortMalloc+0x180>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e620:	f000 f920 	bl	800e864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e624:	4b59      	ldr	r3, [pc, #356]	; (800e78c <pvPortMalloc+0x184>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4013      	ands	r3, r2
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f040 8093 	bne.w	800e758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d01d      	beq.n	800e674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e638:	2208      	movs	r2, #8
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4413      	add	r3, r2
 800e63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f003 0307 	and.w	r3, r3, #7
 800e646:	2b00      	cmp	r3, #0
 800e648:	d014      	beq.n	800e674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f023 0307 	bic.w	r3, r3, #7
 800e650:	3308      	adds	r3, #8
 800e652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f003 0307 	and.w	r3, r3, #7
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00a      	beq.n	800e674 <pvPortMalloc+0x6c>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	617b      	str	r3, [r7, #20]
}
 800e670:	bf00      	nop
 800e672:	e7fe      	b.n	800e672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d06e      	beq.n	800e758 <pvPortMalloc+0x150>
 800e67a:	4b45      	ldr	r3, [pc, #276]	; (800e790 <pvPortMalloc+0x188>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	429a      	cmp	r2, r3
 800e682:	d869      	bhi.n	800e758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e684:	4b43      	ldr	r3, [pc, #268]	; (800e794 <pvPortMalloc+0x18c>)
 800e686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e688:	4b42      	ldr	r3, [pc, #264]	; (800e794 <pvPortMalloc+0x18c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e68e:	e004      	b.n	800e69a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d903      	bls.n	800e6ac <pvPortMalloc+0xa4>
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1f1      	bne.n	800e690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6ac:	4b36      	ldr	r3, [pc, #216]	; (800e788 <pvPortMalloc+0x180>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d050      	beq.n	800e758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2208      	movs	r2, #8
 800e6bc:	4413      	add	r3, r2
 800e6be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	1ad2      	subs	r2, r2, r3
 800e6d0:	2308      	movs	r3, #8
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d91f      	bls.n	800e718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4413      	add	r3, r2
 800e6de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	f003 0307 	and.w	r3, r3, #7
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <pvPortMalloc+0xf8>
	__asm volatile
 800e6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ee:	f383 8811 	msr	BASEPRI, r3
 800e6f2:	f3bf 8f6f 	isb	sy
 800e6f6:	f3bf 8f4f 	dsb	sy
 800e6fa:	613b      	str	r3, [r7, #16]
}
 800e6fc:	bf00      	nop
 800e6fe:	e7fe      	b.n	800e6fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	1ad2      	subs	r2, r2, r3
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e712:	69b8      	ldr	r0, [r7, #24]
 800e714:	f000 f908 	bl	800e928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e718:	4b1d      	ldr	r3, [pc, #116]	; (800e790 <pvPortMalloc+0x188>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <pvPortMalloc+0x188>)
 800e724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e726:	4b1a      	ldr	r3, [pc, #104]	; (800e790 <pvPortMalloc+0x188>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	4b1b      	ldr	r3, [pc, #108]	; (800e798 <pvPortMalloc+0x190>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d203      	bcs.n	800e73a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e732:	4b17      	ldr	r3, [pc, #92]	; (800e790 <pvPortMalloc+0x188>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a18      	ldr	r2, [pc, #96]	; (800e798 <pvPortMalloc+0x190>)
 800e738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	4b13      	ldr	r3, [pc, #76]	; (800e78c <pvPortMalloc+0x184>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	431a      	orrs	r2, r3
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	2200      	movs	r2, #0
 800e74c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e74e:	4b13      	ldr	r3, [pc, #76]	; (800e79c <pvPortMalloc+0x194>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3301      	adds	r3, #1
 800e754:	4a11      	ldr	r2, [pc, #68]	; (800e79c <pvPortMalloc+0x194>)
 800e756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e758:	f7fe f91e 	bl	800c998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00a      	beq.n	800e77c <pvPortMalloc+0x174>
	__asm volatile
 800e766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76a:	f383 8811 	msr	BASEPRI, r3
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	60fb      	str	r3, [r7, #12]
}
 800e778:	bf00      	nop
 800e77a:	e7fe      	b.n	800e77a <pvPortMalloc+0x172>
	return pvReturn;
 800e77c:	69fb      	ldr	r3, [r7, #28]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3728      	adds	r7, #40	; 0x28
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	20005af0 	.word	0x20005af0
 800e78c:	20005b04 	.word	0x20005b04
 800e790:	20005af4 	.word	0x20005af4
 800e794:	20005ae8 	.word	0x20005ae8
 800e798:	20005af8 	.word	0x20005af8
 800e79c:	20005afc 	.word	0x20005afc

0800e7a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d04d      	beq.n	800e84e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	425b      	negs	r3, r3
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	685a      	ldr	r2, [r3, #4]
 800e7c4:	4b24      	ldr	r3, [pc, #144]	; (800e858 <vPortFree+0xb8>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4013      	ands	r3, r2
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10a      	bne.n	800e7e4 <vPortFree+0x44>
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d2:	f383 8811 	msr	BASEPRI, r3
 800e7d6:	f3bf 8f6f 	isb	sy
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	60fb      	str	r3, [r7, #12]
}
 800e7e0:	bf00      	nop
 800e7e2:	e7fe      	b.n	800e7e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00a      	beq.n	800e802 <vPortFree+0x62>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60bb      	str	r3, [r7, #8]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	685a      	ldr	r2, [r3, #4]
 800e806:	4b14      	ldr	r3, [pc, #80]	; (800e858 <vPortFree+0xb8>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4013      	ands	r3, r2
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01e      	beq.n	800e84e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d11a      	bne.n	800e84e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	685a      	ldr	r2, [r3, #4]
 800e81c:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <vPortFree+0xb8>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	43db      	mvns	r3, r3
 800e822:	401a      	ands	r2, r3
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e828:	f7fe f8a8 	bl	800c97c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	685a      	ldr	r2, [r3, #4]
 800e830:	4b0a      	ldr	r3, [pc, #40]	; (800e85c <vPortFree+0xbc>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4413      	add	r3, r2
 800e836:	4a09      	ldr	r2, [pc, #36]	; (800e85c <vPortFree+0xbc>)
 800e838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e83a:	6938      	ldr	r0, [r7, #16]
 800e83c:	f000 f874 	bl	800e928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e840:	4b07      	ldr	r3, [pc, #28]	; (800e860 <vPortFree+0xc0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3301      	adds	r3, #1
 800e846:	4a06      	ldr	r2, [pc, #24]	; (800e860 <vPortFree+0xc0>)
 800e848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e84a:	f7fe f8a5 	bl	800c998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e84e:	bf00      	nop
 800e850:	3718      	adds	r7, #24
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20005b04 	.word	0x20005b04
 800e85c:	20005af4 	.word	0x20005af4
 800e860:	20005b00 	.word	0x20005b00

0800e864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e870:	4b27      	ldr	r3, [pc, #156]	; (800e910 <prvHeapInit+0xac>)
 800e872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f003 0307 	and.w	r3, r3, #7
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00c      	beq.n	800e898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3307      	adds	r3, #7
 800e882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	4a1f      	ldr	r2, [pc, #124]	; (800e910 <prvHeapInit+0xac>)
 800e894:	4413      	add	r3, r2
 800e896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e89c:	4a1d      	ldr	r2, [pc, #116]	; (800e914 <prvHeapInit+0xb0>)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8a2:	4b1c      	ldr	r3, [pc, #112]	; (800e914 <prvHeapInit+0xb0>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8b0:	2208      	movs	r2, #8
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	1a9b      	subs	r3, r3, r2
 800e8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f023 0307 	bic.w	r3, r3, #7
 800e8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4a15      	ldr	r2, [pc, #84]	; (800e918 <prvHeapInit+0xb4>)
 800e8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8c6:	4b14      	ldr	r3, [pc, #80]	; (800e918 <prvHeapInit+0xb4>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8ce:	4b12      	ldr	r3, [pc, #72]	; (800e918 <prvHeapInit+0xb4>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e8e4:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <prvHeapInit+0xb4>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	4a0a      	ldr	r2, [pc, #40]	; (800e91c <prvHeapInit+0xb8>)
 800e8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	4a09      	ldr	r2, [pc, #36]	; (800e920 <prvHeapInit+0xbc>)
 800e8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e8fc:	4b09      	ldr	r3, [pc, #36]	; (800e924 <prvHeapInit+0xc0>)
 800e8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e902:	601a      	str	r2, [r3, #0]
}
 800e904:	bf00      	nop
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr
 800e910:	20001ee8 	.word	0x20001ee8
 800e914:	20005ae8 	.word	0x20005ae8
 800e918:	20005af0 	.word	0x20005af0
 800e91c:	20005af8 	.word	0x20005af8
 800e920:	20005af4 	.word	0x20005af4
 800e924:	20005b04 	.word	0x20005b04

0800e928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e930:	4b28      	ldr	r3, [pc, #160]	; (800e9d4 <prvInsertBlockIntoFreeList+0xac>)
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e002      	b.n	800e93c <prvInsertBlockIntoFreeList+0x14>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	429a      	cmp	r2, r3
 800e944:	d8f7      	bhi.n	800e936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	4413      	add	r3, r2
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	429a      	cmp	r2, r3
 800e956:	d108      	bne.n	800e96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	441a      	add	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	441a      	add	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d118      	bne.n	800e9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	4b15      	ldr	r3, [pc, #84]	; (800e9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	429a      	cmp	r2, r3
 800e988:	d00d      	beq.n	800e9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	441a      	add	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	e008      	b.n	800e9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9a6:	4b0c      	ldr	r3, [pc, #48]	; (800e9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	e003      	b.n	800e9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d002      	beq.n	800e9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9c6:	bf00      	nop
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	20005ae8 	.word	0x20005ae8
 800e9d8:	20005af0 	.word	0x20005af0

0800e9dc <__errno>:
 800e9dc:	4b01      	ldr	r3, [pc, #4]	; (800e9e4 <__errno+0x8>)
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	200000a0 	.word	0x200000a0

0800e9e8 <std>:
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	b510      	push	{r4, lr}
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	e9c0 3300 	strd	r3, r3, [r0]
 800e9f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9f6:	6083      	str	r3, [r0, #8]
 800e9f8:	8181      	strh	r1, [r0, #12]
 800e9fa:	6643      	str	r3, [r0, #100]	; 0x64
 800e9fc:	81c2      	strh	r2, [r0, #14]
 800e9fe:	6183      	str	r3, [r0, #24]
 800ea00:	4619      	mov	r1, r3
 800ea02:	2208      	movs	r2, #8
 800ea04:	305c      	adds	r0, #92	; 0x5c
 800ea06:	f000 f91a 	bl	800ec3e <memset>
 800ea0a:	4b05      	ldr	r3, [pc, #20]	; (800ea20 <std+0x38>)
 800ea0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ea0e:	4b05      	ldr	r3, [pc, #20]	; (800ea24 <std+0x3c>)
 800ea10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea12:	4b05      	ldr	r3, [pc, #20]	; (800ea28 <std+0x40>)
 800ea14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea16:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <std+0x44>)
 800ea18:	6224      	str	r4, [r4, #32]
 800ea1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ea1c:	bd10      	pop	{r4, pc}
 800ea1e:	bf00      	nop
 800ea20:	0800f85d 	.word	0x0800f85d
 800ea24:	0800f87f 	.word	0x0800f87f
 800ea28:	0800f8b7 	.word	0x0800f8b7
 800ea2c:	0800f8db 	.word	0x0800f8db

0800ea30 <_cleanup_r>:
 800ea30:	4901      	ldr	r1, [pc, #4]	; (800ea38 <_cleanup_r+0x8>)
 800ea32:	f000 b8af 	b.w	800eb94 <_fwalk_reent>
 800ea36:	bf00      	nop
 800ea38:	080108a9 	.word	0x080108a9

0800ea3c <__sfmoreglue>:
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	2268      	movs	r2, #104	; 0x68
 800ea40:	1e4d      	subs	r5, r1, #1
 800ea42:	4355      	muls	r5, r2
 800ea44:	460e      	mov	r6, r1
 800ea46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea4a:	f000 f921 	bl	800ec90 <_malloc_r>
 800ea4e:	4604      	mov	r4, r0
 800ea50:	b140      	cbz	r0, 800ea64 <__sfmoreglue+0x28>
 800ea52:	2100      	movs	r1, #0
 800ea54:	e9c0 1600 	strd	r1, r6, [r0]
 800ea58:	300c      	adds	r0, #12
 800ea5a:	60a0      	str	r0, [r4, #8]
 800ea5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea60:	f000 f8ed 	bl	800ec3e <memset>
 800ea64:	4620      	mov	r0, r4
 800ea66:	bd70      	pop	{r4, r5, r6, pc}

0800ea68 <__sfp_lock_acquire>:
 800ea68:	4801      	ldr	r0, [pc, #4]	; (800ea70 <__sfp_lock_acquire+0x8>)
 800ea6a:	f000 b8d8 	b.w	800ec1e <__retarget_lock_acquire_recursive>
 800ea6e:	bf00      	nop
 800ea70:	20005b09 	.word	0x20005b09

0800ea74 <__sfp_lock_release>:
 800ea74:	4801      	ldr	r0, [pc, #4]	; (800ea7c <__sfp_lock_release+0x8>)
 800ea76:	f000 b8d3 	b.w	800ec20 <__retarget_lock_release_recursive>
 800ea7a:	bf00      	nop
 800ea7c:	20005b09 	.word	0x20005b09

0800ea80 <__sinit_lock_acquire>:
 800ea80:	4801      	ldr	r0, [pc, #4]	; (800ea88 <__sinit_lock_acquire+0x8>)
 800ea82:	f000 b8cc 	b.w	800ec1e <__retarget_lock_acquire_recursive>
 800ea86:	bf00      	nop
 800ea88:	20005b0a 	.word	0x20005b0a

0800ea8c <__sinit_lock_release>:
 800ea8c:	4801      	ldr	r0, [pc, #4]	; (800ea94 <__sinit_lock_release+0x8>)
 800ea8e:	f000 b8c7 	b.w	800ec20 <__retarget_lock_release_recursive>
 800ea92:	bf00      	nop
 800ea94:	20005b0a 	.word	0x20005b0a

0800ea98 <__sinit>:
 800ea98:	b510      	push	{r4, lr}
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	f7ff fff0 	bl	800ea80 <__sinit_lock_acquire>
 800eaa0:	69a3      	ldr	r3, [r4, #24]
 800eaa2:	b11b      	cbz	r3, 800eaac <__sinit+0x14>
 800eaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaa8:	f7ff bff0 	b.w	800ea8c <__sinit_lock_release>
 800eaac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eab0:	6523      	str	r3, [r4, #80]	; 0x50
 800eab2:	4b13      	ldr	r3, [pc, #76]	; (800eb00 <__sinit+0x68>)
 800eab4:	4a13      	ldr	r2, [pc, #76]	; (800eb04 <__sinit+0x6c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	62a2      	str	r2, [r4, #40]	; 0x28
 800eaba:	42a3      	cmp	r3, r4
 800eabc:	bf04      	itt	eq
 800eabe:	2301      	moveq	r3, #1
 800eac0:	61a3      	streq	r3, [r4, #24]
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 f820 	bl	800eb08 <__sfp>
 800eac8:	6060      	str	r0, [r4, #4]
 800eaca:	4620      	mov	r0, r4
 800eacc:	f000 f81c 	bl	800eb08 <__sfp>
 800ead0:	60a0      	str	r0, [r4, #8]
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 f818 	bl	800eb08 <__sfp>
 800ead8:	2200      	movs	r2, #0
 800eada:	60e0      	str	r0, [r4, #12]
 800eadc:	2104      	movs	r1, #4
 800eade:	6860      	ldr	r0, [r4, #4]
 800eae0:	f7ff ff82 	bl	800e9e8 <std>
 800eae4:	68a0      	ldr	r0, [r4, #8]
 800eae6:	2201      	movs	r2, #1
 800eae8:	2109      	movs	r1, #9
 800eaea:	f7ff ff7d 	bl	800e9e8 <std>
 800eaee:	68e0      	ldr	r0, [r4, #12]
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	2112      	movs	r1, #18
 800eaf4:	f7ff ff78 	bl	800e9e8 <std>
 800eaf8:	2301      	movs	r3, #1
 800eafa:	61a3      	str	r3, [r4, #24]
 800eafc:	e7d2      	b.n	800eaa4 <__sinit+0xc>
 800eafe:	bf00      	nop
 800eb00:	08013ce0 	.word	0x08013ce0
 800eb04:	0800ea31 	.word	0x0800ea31

0800eb08 <__sfp>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	4607      	mov	r7, r0
 800eb0c:	f7ff ffac 	bl	800ea68 <__sfp_lock_acquire>
 800eb10:	4b1e      	ldr	r3, [pc, #120]	; (800eb8c <__sfp+0x84>)
 800eb12:	681e      	ldr	r6, [r3, #0]
 800eb14:	69b3      	ldr	r3, [r6, #24]
 800eb16:	b913      	cbnz	r3, 800eb1e <__sfp+0x16>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f7ff ffbd 	bl	800ea98 <__sinit>
 800eb1e:	3648      	adds	r6, #72	; 0x48
 800eb20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	d503      	bpl.n	800eb30 <__sfp+0x28>
 800eb28:	6833      	ldr	r3, [r6, #0]
 800eb2a:	b30b      	cbz	r3, 800eb70 <__sfp+0x68>
 800eb2c:	6836      	ldr	r6, [r6, #0]
 800eb2e:	e7f7      	b.n	800eb20 <__sfp+0x18>
 800eb30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb34:	b9d5      	cbnz	r5, 800eb6c <__sfp+0x64>
 800eb36:	4b16      	ldr	r3, [pc, #88]	; (800eb90 <__sfp+0x88>)
 800eb38:	60e3      	str	r3, [r4, #12]
 800eb3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb3e:	6665      	str	r5, [r4, #100]	; 0x64
 800eb40:	f000 f86c 	bl	800ec1c <__retarget_lock_init_recursive>
 800eb44:	f7ff ff96 	bl	800ea74 <__sfp_lock_release>
 800eb48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb50:	6025      	str	r5, [r4, #0]
 800eb52:	61a5      	str	r5, [r4, #24]
 800eb54:	2208      	movs	r2, #8
 800eb56:	4629      	mov	r1, r5
 800eb58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb5c:	f000 f86f 	bl	800ec3e <memset>
 800eb60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb68:	4620      	mov	r0, r4
 800eb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb6c:	3468      	adds	r4, #104	; 0x68
 800eb6e:	e7d9      	b.n	800eb24 <__sfp+0x1c>
 800eb70:	2104      	movs	r1, #4
 800eb72:	4638      	mov	r0, r7
 800eb74:	f7ff ff62 	bl	800ea3c <__sfmoreglue>
 800eb78:	4604      	mov	r4, r0
 800eb7a:	6030      	str	r0, [r6, #0]
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d1d5      	bne.n	800eb2c <__sfp+0x24>
 800eb80:	f7ff ff78 	bl	800ea74 <__sfp_lock_release>
 800eb84:	230c      	movs	r3, #12
 800eb86:	603b      	str	r3, [r7, #0]
 800eb88:	e7ee      	b.n	800eb68 <__sfp+0x60>
 800eb8a:	bf00      	nop
 800eb8c:	08013ce0 	.word	0x08013ce0
 800eb90:	ffff0001 	.word	0xffff0001

0800eb94 <_fwalk_reent>:
 800eb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb98:	4606      	mov	r6, r0
 800eb9a:	4688      	mov	r8, r1
 800eb9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eba0:	2700      	movs	r7, #0
 800eba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eba6:	f1b9 0901 	subs.w	r9, r9, #1
 800ebaa:	d505      	bpl.n	800ebb8 <_fwalk_reent+0x24>
 800ebac:	6824      	ldr	r4, [r4, #0]
 800ebae:	2c00      	cmp	r4, #0
 800ebb0:	d1f7      	bne.n	800eba2 <_fwalk_reent+0xe>
 800ebb2:	4638      	mov	r0, r7
 800ebb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb8:	89ab      	ldrh	r3, [r5, #12]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d907      	bls.n	800ebce <_fwalk_reent+0x3a>
 800ebbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	d003      	beq.n	800ebce <_fwalk_reent+0x3a>
 800ebc6:	4629      	mov	r1, r5
 800ebc8:	4630      	mov	r0, r6
 800ebca:	47c0      	blx	r8
 800ebcc:	4307      	orrs	r7, r0
 800ebce:	3568      	adds	r5, #104	; 0x68
 800ebd0:	e7e9      	b.n	800eba6 <_fwalk_reent+0x12>
	...

0800ebd4 <__libc_init_array>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	4d0d      	ldr	r5, [pc, #52]	; (800ec0c <__libc_init_array+0x38>)
 800ebd8:	4c0d      	ldr	r4, [pc, #52]	; (800ec10 <__libc_init_array+0x3c>)
 800ebda:	1b64      	subs	r4, r4, r5
 800ebdc:	10a4      	asrs	r4, r4, #2
 800ebde:	2600      	movs	r6, #0
 800ebe0:	42a6      	cmp	r6, r4
 800ebe2:	d109      	bne.n	800ebf8 <__libc_init_array+0x24>
 800ebe4:	4d0b      	ldr	r5, [pc, #44]	; (800ec14 <__libc_init_array+0x40>)
 800ebe6:	4c0c      	ldr	r4, [pc, #48]	; (800ec18 <__libc_init_array+0x44>)
 800ebe8:	f004 fd90 	bl	801370c <_init>
 800ebec:	1b64      	subs	r4, r4, r5
 800ebee:	10a4      	asrs	r4, r4, #2
 800ebf0:	2600      	movs	r6, #0
 800ebf2:	42a6      	cmp	r6, r4
 800ebf4:	d105      	bne.n	800ec02 <__libc_init_array+0x2e>
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebfc:	4798      	blx	r3
 800ebfe:	3601      	adds	r6, #1
 800ec00:	e7ee      	b.n	800ebe0 <__libc_init_array+0xc>
 800ec02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec06:	4798      	blx	r3
 800ec08:	3601      	adds	r6, #1
 800ec0a:	e7f2      	b.n	800ebf2 <__libc_init_array+0x1e>
 800ec0c:	080142b0 	.word	0x080142b0
 800ec10:	080142b0 	.word	0x080142b0
 800ec14:	080142b0 	.word	0x080142b0
 800ec18:	080142b4 	.word	0x080142b4

0800ec1c <__retarget_lock_init_recursive>:
 800ec1c:	4770      	bx	lr

0800ec1e <__retarget_lock_acquire_recursive>:
 800ec1e:	4770      	bx	lr

0800ec20 <__retarget_lock_release_recursive>:
 800ec20:	4770      	bx	lr

0800ec22 <memcpy>:
 800ec22:	440a      	add	r2, r1
 800ec24:	4291      	cmp	r1, r2
 800ec26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec2a:	d100      	bne.n	800ec2e <memcpy+0xc>
 800ec2c:	4770      	bx	lr
 800ec2e:	b510      	push	{r4, lr}
 800ec30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec38:	4291      	cmp	r1, r2
 800ec3a:	d1f9      	bne.n	800ec30 <memcpy+0xe>
 800ec3c:	bd10      	pop	{r4, pc}

0800ec3e <memset>:
 800ec3e:	4402      	add	r2, r0
 800ec40:	4603      	mov	r3, r0
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d100      	bne.n	800ec48 <memset+0xa>
 800ec46:	4770      	bx	lr
 800ec48:	f803 1b01 	strb.w	r1, [r3], #1
 800ec4c:	e7f9      	b.n	800ec42 <memset+0x4>
	...

0800ec50 <sbrk_aligned>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	4e0e      	ldr	r6, [pc, #56]	; (800ec8c <sbrk_aligned+0x3c>)
 800ec54:	460c      	mov	r4, r1
 800ec56:	6831      	ldr	r1, [r6, #0]
 800ec58:	4605      	mov	r5, r0
 800ec5a:	b911      	cbnz	r1, 800ec62 <sbrk_aligned+0x12>
 800ec5c:	f000 fdee 	bl	800f83c <_sbrk_r>
 800ec60:	6030      	str	r0, [r6, #0]
 800ec62:	4621      	mov	r1, r4
 800ec64:	4628      	mov	r0, r5
 800ec66:	f000 fde9 	bl	800f83c <_sbrk_r>
 800ec6a:	1c43      	adds	r3, r0, #1
 800ec6c:	d00a      	beq.n	800ec84 <sbrk_aligned+0x34>
 800ec6e:	1cc4      	adds	r4, r0, #3
 800ec70:	f024 0403 	bic.w	r4, r4, #3
 800ec74:	42a0      	cmp	r0, r4
 800ec76:	d007      	beq.n	800ec88 <sbrk_aligned+0x38>
 800ec78:	1a21      	subs	r1, r4, r0
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f000 fdde 	bl	800f83c <_sbrk_r>
 800ec80:	3001      	adds	r0, #1
 800ec82:	d101      	bne.n	800ec88 <sbrk_aligned+0x38>
 800ec84:	f04f 34ff 	mov.w	r4, #4294967295
 800ec88:	4620      	mov	r0, r4
 800ec8a:	bd70      	pop	{r4, r5, r6, pc}
 800ec8c:	20005b10 	.word	0x20005b10

0800ec90 <_malloc_r>:
 800ec90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec94:	1ccd      	adds	r5, r1, #3
 800ec96:	f025 0503 	bic.w	r5, r5, #3
 800ec9a:	3508      	adds	r5, #8
 800ec9c:	2d0c      	cmp	r5, #12
 800ec9e:	bf38      	it	cc
 800eca0:	250c      	movcc	r5, #12
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	4607      	mov	r7, r0
 800eca6:	db01      	blt.n	800ecac <_malloc_r+0x1c>
 800eca8:	42a9      	cmp	r1, r5
 800ecaa:	d905      	bls.n	800ecb8 <_malloc_r+0x28>
 800ecac:	230c      	movs	r3, #12
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	2600      	movs	r6, #0
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb8:	4e2e      	ldr	r6, [pc, #184]	; (800ed74 <_malloc_r+0xe4>)
 800ecba:	f001 feb5 	bl	8010a28 <__malloc_lock>
 800ecbe:	6833      	ldr	r3, [r6, #0]
 800ecc0:	461c      	mov	r4, r3
 800ecc2:	bb34      	cbnz	r4, 800ed12 <_malloc_r+0x82>
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	4638      	mov	r0, r7
 800ecc8:	f7ff ffc2 	bl	800ec50 <sbrk_aligned>
 800eccc:	1c43      	adds	r3, r0, #1
 800ecce:	4604      	mov	r4, r0
 800ecd0:	d14d      	bne.n	800ed6e <_malloc_r+0xde>
 800ecd2:	6834      	ldr	r4, [r6, #0]
 800ecd4:	4626      	mov	r6, r4
 800ecd6:	2e00      	cmp	r6, #0
 800ecd8:	d140      	bne.n	800ed5c <_malloc_r+0xcc>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	4631      	mov	r1, r6
 800ecde:	4638      	mov	r0, r7
 800ece0:	eb04 0803 	add.w	r8, r4, r3
 800ece4:	f000 fdaa 	bl	800f83c <_sbrk_r>
 800ece8:	4580      	cmp	r8, r0
 800ecea:	d13a      	bne.n	800ed62 <_malloc_r+0xd2>
 800ecec:	6821      	ldr	r1, [r4, #0]
 800ecee:	3503      	adds	r5, #3
 800ecf0:	1a6d      	subs	r5, r5, r1
 800ecf2:	f025 0503 	bic.w	r5, r5, #3
 800ecf6:	3508      	adds	r5, #8
 800ecf8:	2d0c      	cmp	r5, #12
 800ecfa:	bf38      	it	cc
 800ecfc:	250c      	movcc	r5, #12
 800ecfe:	4629      	mov	r1, r5
 800ed00:	4638      	mov	r0, r7
 800ed02:	f7ff ffa5 	bl	800ec50 <sbrk_aligned>
 800ed06:	3001      	adds	r0, #1
 800ed08:	d02b      	beq.n	800ed62 <_malloc_r+0xd2>
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	442b      	add	r3, r5
 800ed0e:	6023      	str	r3, [r4, #0]
 800ed10:	e00e      	b.n	800ed30 <_malloc_r+0xa0>
 800ed12:	6822      	ldr	r2, [r4, #0]
 800ed14:	1b52      	subs	r2, r2, r5
 800ed16:	d41e      	bmi.n	800ed56 <_malloc_r+0xc6>
 800ed18:	2a0b      	cmp	r2, #11
 800ed1a:	d916      	bls.n	800ed4a <_malloc_r+0xba>
 800ed1c:	1961      	adds	r1, r4, r5
 800ed1e:	42a3      	cmp	r3, r4
 800ed20:	6025      	str	r5, [r4, #0]
 800ed22:	bf18      	it	ne
 800ed24:	6059      	strne	r1, [r3, #4]
 800ed26:	6863      	ldr	r3, [r4, #4]
 800ed28:	bf08      	it	eq
 800ed2a:	6031      	streq	r1, [r6, #0]
 800ed2c:	5162      	str	r2, [r4, r5]
 800ed2e:	604b      	str	r3, [r1, #4]
 800ed30:	4638      	mov	r0, r7
 800ed32:	f104 060b 	add.w	r6, r4, #11
 800ed36:	f001 fe7d 	bl	8010a34 <__malloc_unlock>
 800ed3a:	f026 0607 	bic.w	r6, r6, #7
 800ed3e:	1d23      	adds	r3, r4, #4
 800ed40:	1af2      	subs	r2, r6, r3
 800ed42:	d0b6      	beq.n	800ecb2 <_malloc_r+0x22>
 800ed44:	1b9b      	subs	r3, r3, r6
 800ed46:	50a3      	str	r3, [r4, r2]
 800ed48:	e7b3      	b.n	800ecb2 <_malloc_r+0x22>
 800ed4a:	6862      	ldr	r2, [r4, #4]
 800ed4c:	42a3      	cmp	r3, r4
 800ed4e:	bf0c      	ite	eq
 800ed50:	6032      	streq	r2, [r6, #0]
 800ed52:	605a      	strne	r2, [r3, #4]
 800ed54:	e7ec      	b.n	800ed30 <_malloc_r+0xa0>
 800ed56:	4623      	mov	r3, r4
 800ed58:	6864      	ldr	r4, [r4, #4]
 800ed5a:	e7b2      	b.n	800ecc2 <_malloc_r+0x32>
 800ed5c:	4634      	mov	r4, r6
 800ed5e:	6876      	ldr	r6, [r6, #4]
 800ed60:	e7b9      	b.n	800ecd6 <_malloc_r+0x46>
 800ed62:	230c      	movs	r3, #12
 800ed64:	603b      	str	r3, [r7, #0]
 800ed66:	4638      	mov	r0, r7
 800ed68:	f001 fe64 	bl	8010a34 <__malloc_unlock>
 800ed6c:	e7a1      	b.n	800ecb2 <_malloc_r+0x22>
 800ed6e:	6025      	str	r5, [r4, #0]
 800ed70:	e7de      	b.n	800ed30 <_malloc_r+0xa0>
 800ed72:	bf00      	nop
 800ed74:	20005b0c 	.word	0x20005b0c

0800ed78 <__cvt>:
 800ed78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed7c:	ec55 4b10 	vmov	r4, r5, d0
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	460e      	mov	r6, r1
 800ed84:	4619      	mov	r1, r3
 800ed86:	462b      	mov	r3, r5
 800ed88:	bfbb      	ittet	lt
 800ed8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ed8e:	461d      	movlt	r5, r3
 800ed90:	2300      	movge	r3, #0
 800ed92:	232d      	movlt	r3, #45	; 0x2d
 800ed94:	700b      	strb	r3, [r1, #0]
 800ed96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed9c:	4691      	mov	r9, r2
 800ed9e:	f023 0820 	bic.w	r8, r3, #32
 800eda2:	bfbc      	itt	lt
 800eda4:	4622      	movlt	r2, r4
 800eda6:	4614      	movlt	r4, r2
 800eda8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edac:	d005      	beq.n	800edba <__cvt+0x42>
 800edae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edb2:	d100      	bne.n	800edb6 <__cvt+0x3e>
 800edb4:	3601      	adds	r6, #1
 800edb6:	2102      	movs	r1, #2
 800edb8:	e000      	b.n	800edbc <__cvt+0x44>
 800edba:	2103      	movs	r1, #3
 800edbc:	ab03      	add	r3, sp, #12
 800edbe:	9301      	str	r3, [sp, #4]
 800edc0:	ab02      	add	r3, sp, #8
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	ec45 4b10 	vmov	d0, r4, r5
 800edc8:	4653      	mov	r3, sl
 800edca:	4632      	mov	r2, r6
 800edcc:	f000 fef8 	bl	800fbc0 <_dtoa_r>
 800edd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800edd4:	4607      	mov	r7, r0
 800edd6:	d102      	bne.n	800edde <__cvt+0x66>
 800edd8:	f019 0f01 	tst.w	r9, #1
 800eddc:	d022      	beq.n	800ee24 <__cvt+0xac>
 800edde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ede2:	eb07 0906 	add.w	r9, r7, r6
 800ede6:	d110      	bne.n	800ee0a <__cvt+0x92>
 800ede8:	783b      	ldrb	r3, [r7, #0]
 800edea:	2b30      	cmp	r3, #48	; 0x30
 800edec:	d10a      	bne.n	800ee04 <__cvt+0x8c>
 800edee:	2200      	movs	r2, #0
 800edf0:	2300      	movs	r3, #0
 800edf2:	4620      	mov	r0, r4
 800edf4:	4629      	mov	r1, r5
 800edf6:	f7f1 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800edfa:	b918      	cbnz	r0, 800ee04 <__cvt+0x8c>
 800edfc:	f1c6 0601 	rsb	r6, r6, #1
 800ee00:	f8ca 6000 	str.w	r6, [sl]
 800ee04:	f8da 3000 	ldr.w	r3, [sl]
 800ee08:	4499      	add	r9, r3
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	4620      	mov	r0, r4
 800ee10:	4629      	mov	r1, r5
 800ee12:	f7f1 fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee16:	b108      	cbz	r0, 800ee1c <__cvt+0xa4>
 800ee18:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee1c:	2230      	movs	r2, #48	; 0x30
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	454b      	cmp	r3, r9
 800ee22:	d307      	bcc.n	800ee34 <__cvt+0xbc>
 800ee24:	9b03      	ldr	r3, [sp, #12]
 800ee26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee28:	1bdb      	subs	r3, r3, r7
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	b004      	add	sp, #16
 800ee30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee34:	1c59      	adds	r1, r3, #1
 800ee36:	9103      	str	r1, [sp, #12]
 800ee38:	701a      	strb	r2, [r3, #0]
 800ee3a:	e7f0      	b.n	800ee1e <__cvt+0xa6>

0800ee3c <__exponent>:
 800ee3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2900      	cmp	r1, #0
 800ee42:	bfb8      	it	lt
 800ee44:	4249      	neglt	r1, r1
 800ee46:	f803 2b02 	strb.w	r2, [r3], #2
 800ee4a:	bfb4      	ite	lt
 800ee4c:	222d      	movlt	r2, #45	; 0x2d
 800ee4e:	222b      	movge	r2, #43	; 0x2b
 800ee50:	2909      	cmp	r1, #9
 800ee52:	7042      	strb	r2, [r0, #1]
 800ee54:	dd2a      	ble.n	800eeac <__exponent+0x70>
 800ee56:	f10d 0407 	add.w	r4, sp, #7
 800ee5a:	46a4      	mov	ip, r4
 800ee5c:	270a      	movs	r7, #10
 800ee5e:	46a6      	mov	lr, r4
 800ee60:	460a      	mov	r2, r1
 800ee62:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee66:	fb07 1516 	mls	r5, r7, r6, r1
 800ee6a:	3530      	adds	r5, #48	; 0x30
 800ee6c:	2a63      	cmp	r2, #99	; 0x63
 800ee6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee76:	4631      	mov	r1, r6
 800ee78:	dcf1      	bgt.n	800ee5e <__exponent+0x22>
 800ee7a:	3130      	adds	r1, #48	; 0x30
 800ee7c:	f1ae 0502 	sub.w	r5, lr, #2
 800ee80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee84:	1c44      	adds	r4, r0, #1
 800ee86:	4629      	mov	r1, r5
 800ee88:	4561      	cmp	r1, ip
 800ee8a:	d30a      	bcc.n	800eea2 <__exponent+0x66>
 800ee8c:	f10d 0209 	add.w	r2, sp, #9
 800ee90:	eba2 020e 	sub.w	r2, r2, lr
 800ee94:	4565      	cmp	r5, ip
 800ee96:	bf88      	it	hi
 800ee98:	2200      	movhi	r2, #0
 800ee9a:	4413      	add	r3, r2
 800ee9c:	1a18      	subs	r0, r3, r0
 800ee9e:	b003      	add	sp, #12
 800eea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eea6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eeaa:	e7ed      	b.n	800ee88 <__exponent+0x4c>
 800eeac:	2330      	movs	r3, #48	; 0x30
 800eeae:	3130      	adds	r1, #48	; 0x30
 800eeb0:	7083      	strb	r3, [r0, #2]
 800eeb2:	70c1      	strb	r1, [r0, #3]
 800eeb4:	1d03      	adds	r3, r0, #4
 800eeb6:	e7f1      	b.n	800ee9c <__exponent+0x60>

0800eeb8 <_printf_float>:
 800eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eebc:	ed2d 8b02 	vpush	{d8}
 800eec0:	b08d      	sub	sp, #52	; 0x34
 800eec2:	460c      	mov	r4, r1
 800eec4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eec8:	4616      	mov	r6, r2
 800eeca:	461f      	mov	r7, r3
 800eecc:	4605      	mov	r5, r0
 800eece:	f001 fd27 	bl	8010920 <_localeconv_r>
 800eed2:	f8d0 a000 	ldr.w	sl, [r0]
 800eed6:	4650      	mov	r0, sl
 800eed8:	f7f1 f97a 	bl	80001d0 <strlen>
 800eedc:	2300      	movs	r3, #0
 800eede:	930a      	str	r3, [sp, #40]	; 0x28
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	9305      	str	r3, [sp, #20]
 800eee4:	f8d8 3000 	ldr.w	r3, [r8]
 800eee8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eeec:	3307      	adds	r3, #7
 800eeee:	f023 0307 	bic.w	r3, r3, #7
 800eef2:	f103 0208 	add.w	r2, r3, #8
 800eef6:	f8c8 2000 	str.w	r2, [r8]
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef0a:	9307      	str	r3, [sp, #28]
 800ef0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef10:	ee08 0a10 	vmov	s16, r0
 800ef14:	4b9f      	ldr	r3, [pc, #636]	; (800f194 <_printf_float+0x2dc>)
 800ef16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1e:	f7f1 fe05 	bl	8000b2c <__aeabi_dcmpun>
 800ef22:	bb88      	cbnz	r0, 800ef88 <_printf_float+0xd0>
 800ef24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef28:	4b9a      	ldr	r3, [pc, #616]	; (800f194 <_printf_float+0x2dc>)
 800ef2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef2e:	f7f1 fddf 	bl	8000af0 <__aeabi_dcmple>
 800ef32:	bb48      	cbnz	r0, 800ef88 <_printf_float+0xd0>
 800ef34:	2200      	movs	r2, #0
 800ef36:	2300      	movs	r3, #0
 800ef38:	4640      	mov	r0, r8
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	f7f1 fdce 	bl	8000adc <__aeabi_dcmplt>
 800ef40:	b110      	cbz	r0, 800ef48 <_printf_float+0x90>
 800ef42:	232d      	movs	r3, #45	; 0x2d
 800ef44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef48:	4b93      	ldr	r3, [pc, #588]	; (800f198 <_printf_float+0x2e0>)
 800ef4a:	4894      	ldr	r0, [pc, #592]	; (800f19c <_printf_float+0x2e4>)
 800ef4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef50:	bf94      	ite	ls
 800ef52:	4698      	movls	r8, r3
 800ef54:	4680      	movhi	r8, r0
 800ef56:	2303      	movs	r3, #3
 800ef58:	6123      	str	r3, [r4, #16]
 800ef5a:	9b05      	ldr	r3, [sp, #20]
 800ef5c:	f023 0204 	bic.w	r2, r3, #4
 800ef60:	6022      	str	r2, [r4, #0]
 800ef62:	f04f 0900 	mov.w	r9, #0
 800ef66:	9700      	str	r7, [sp, #0]
 800ef68:	4633      	mov	r3, r6
 800ef6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f000 f9d8 	bl	800f324 <_printf_common>
 800ef74:	3001      	adds	r0, #1
 800ef76:	f040 8090 	bne.w	800f09a <_printf_float+0x1e2>
 800ef7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7e:	b00d      	add	sp, #52	; 0x34
 800ef80:	ecbd 8b02 	vpop	{d8}
 800ef84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef88:	4642      	mov	r2, r8
 800ef8a:	464b      	mov	r3, r9
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	4649      	mov	r1, r9
 800ef90:	f7f1 fdcc 	bl	8000b2c <__aeabi_dcmpun>
 800ef94:	b140      	cbz	r0, 800efa8 <_printf_float+0xf0>
 800ef96:	464b      	mov	r3, r9
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	bfbc      	itt	lt
 800ef9c:	232d      	movlt	r3, #45	; 0x2d
 800ef9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efa2:	487f      	ldr	r0, [pc, #508]	; (800f1a0 <_printf_float+0x2e8>)
 800efa4:	4b7f      	ldr	r3, [pc, #508]	; (800f1a4 <_printf_float+0x2ec>)
 800efa6:	e7d1      	b.n	800ef4c <_printf_float+0x94>
 800efa8:	6863      	ldr	r3, [r4, #4]
 800efaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efae:	9206      	str	r2, [sp, #24]
 800efb0:	1c5a      	adds	r2, r3, #1
 800efb2:	d13f      	bne.n	800f034 <_printf_float+0x17c>
 800efb4:	2306      	movs	r3, #6
 800efb6:	6063      	str	r3, [r4, #4]
 800efb8:	9b05      	ldr	r3, [sp, #20]
 800efba:	6861      	ldr	r1, [r4, #4]
 800efbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efc0:	2300      	movs	r3, #0
 800efc2:	9303      	str	r3, [sp, #12]
 800efc4:	ab0a      	add	r3, sp, #40	; 0x28
 800efc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efca:	ab09      	add	r3, sp, #36	; 0x24
 800efcc:	ec49 8b10 	vmov	d0, r8, r9
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	6022      	str	r2, [r4, #0]
 800efd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efd8:	4628      	mov	r0, r5
 800efda:	f7ff fecd 	bl	800ed78 <__cvt>
 800efde:	9b06      	ldr	r3, [sp, #24]
 800efe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efe2:	2b47      	cmp	r3, #71	; 0x47
 800efe4:	4680      	mov	r8, r0
 800efe6:	d108      	bne.n	800effa <_printf_float+0x142>
 800efe8:	1cc8      	adds	r0, r1, #3
 800efea:	db02      	blt.n	800eff2 <_printf_float+0x13a>
 800efec:	6863      	ldr	r3, [r4, #4]
 800efee:	4299      	cmp	r1, r3
 800eff0:	dd41      	ble.n	800f076 <_printf_float+0x1be>
 800eff2:	f1ab 0b02 	sub.w	fp, fp, #2
 800eff6:	fa5f fb8b 	uxtb.w	fp, fp
 800effa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800effe:	d820      	bhi.n	800f042 <_printf_float+0x18a>
 800f000:	3901      	subs	r1, #1
 800f002:	465a      	mov	r2, fp
 800f004:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f008:	9109      	str	r1, [sp, #36]	; 0x24
 800f00a:	f7ff ff17 	bl	800ee3c <__exponent>
 800f00e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f010:	1813      	adds	r3, r2, r0
 800f012:	2a01      	cmp	r2, #1
 800f014:	4681      	mov	r9, r0
 800f016:	6123      	str	r3, [r4, #16]
 800f018:	dc02      	bgt.n	800f020 <_printf_float+0x168>
 800f01a:	6822      	ldr	r2, [r4, #0]
 800f01c:	07d2      	lsls	r2, r2, #31
 800f01e:	d501      	bpl.n	800f024 <_printf_float+0x16c>
 800f020:	3301      	adds	r3, #1
 800f022:	6123      	str	r3, [r4, #16]
 800f024:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d09c      	beq.n	800ef66 <_printf_float+0xae>
 800f02c:	232d      	movs	r3, #45	; 0x2d
 800f02e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f032:	e798      	b.n	800ef66 <_printf_float+0xae>
 800f034:	9a06      	ldr	r2, [sp, #24]
 800f036:	2a47      	cmp	r2, #71	; 0x47
 800f038:	d1be      	bne.n	800efb8 <_printf_float+0x100>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1bc      	bne.n	800efb8 <_printf_float+0x100>
 800f03e:	2301      	movs	r3, #1
 800f040:	e7b9      	b.n	800efb6 <_printf_float+0xfe>
 800f042:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f046:	d118      	bne.n	800f07a <_printf_float+0x1c2>
 800f048:	2900      	cmp	r1, #0
 800f04a:	6863      	ldr	r3, [r4, #4]
 800f04c:	dd0b      	ble.n	800f066 <_printf_float+0x1ae>
 800f04e:	6121      	str	r1, [r4, #16]
 800f050:	b913      	cbnz	r3, 800f058 <_printf_float+0x1a0>
 800f052:	6822      	ldr	r2, [r4, #0]
 800f054:	07d0      	lsls	r0, r2, #31
 800f056:	d502      	bpl.n	800f05e <_printf_float+0x1a6>
 800f058:	3301      	adds	r3, #1
 800f05a:	440b      	add	r3, r1
 800f05c:	6123      	str	r3, [r4, #16]
 800f05e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f060:	f04f 0900 	mov.w	r9, #0
 800f064:	e7de      	b.n	800f024 <_printf_float+0x16c>
 800f066:	b913      	cbnz	r3, 800f06e <_printf_float+0x1b6>
 800f068:	6822      	ldr	r2, [r4, #0]
 800f06a:	07d2      	lsls	r2, r2, #31
 800f06c:	d501      	bpl.n	800f072 <_printf_float+0x1ba>
 800f06e:	3302      	adds	r3, #2
 800f070:	e7f4      	b.n	800f05c <_printf_float+0x1a4>
 800f072:	2301      	movs	r3, #1
 800f074:	e7f2      	b.n	800f05c <_printf_float+0x1a4>
 800f076:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f07c:	4299      	cmp	r1, r3
 800f07e:	db05      	blt.n	800f08c <_printf_float+0x1d4>
 800f080:	6823      	ldr	r3, [r4, #0]
 800f082:	6121      	str	r1, [r4, #16]
 800f084:	07d8      	lsls	r0, r3, #31
 800f086:	d5ea      	bpl.n	800f05e <_printf_float+0x1a6>
 800f088:	1c4b      	adds	r3, r1, #1
 800f08a:	e7e7      	b.n	800f05c <_printf_float+0x1a4>
 800f08c:	2900      	cmp	r1, #0
 800f08e:	bfd4      	ite	le
 800f090:	f1c1 0202 	rsble	r2, r1, #2
 800f094:	2201      	movgt	r2, #1
 800f096:	4413      	add	r3, r2
 800f098:	e7e0      	b.n	800f05c <_printf_float+0x1a4>
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	055a      	lsls	r2, r3, #21
 800f09e:	d407      	bmi.n	800f0b0 <_printf_float+0x1f8>
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	4642      	mov	r2, r8
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	47b8      	blx	r7
 800f0aa:	3001      	adds	r0, #1
 800f0ac:	d12c      	bne.n	800f108 <_printf_float+0x250>
 800f0ae:	e764      	b.n	800ef7a <_printf_float+0xc2>
 800f0b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0b4:	f240 80e0 	bls.w	800f278 <_printf_float+0x3c0>
 800f0b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0bc:	2200      	movs	r2, #0
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f7f1 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d034      	beq.n	800f132 <_printf_float+0x27a>
 800f0c8:	4a37      	ldr	r2, [pc, #220]	; (800f1a8 <_printf_float+0x2f0>)
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	47b8      	blx	r7
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	f43f af51 	beq.w	800ef7a <_printf_float+0xc2>
 800f0d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	db02      	blt.n	800f0e6 <_printf_float+0x22e>
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	07d8      	lsls	r0, r3, #31
 800f0e4:	d510      	bpl.n	800f108 <_printf_float+0x250>
 800f0e6:	ee18 3a10 	vmov	r3, s16
 800f0ea:	4652      	mov	r2, sl
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	47b8      	blx	r7
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	f43f af41 	beq.w	800ef7a <_printf_float+0xc2>
 800f0f8:	f04f 0800 	mov.w	r8, #0
 800f0fc:	f104 091a 	add.w	r9, r4, #26
 800f100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f102:	3b01      	subs	r3, #1
 800f104:	4543      	cmp	r3, r8
 800f106:	dc09      	bgt.n	800f11c <_printf_float+0x264>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	079b      	lsls	r3, r3, #30
 800f10c:	f100 8105 	bmi.w	800f31a <_printf_float+0x462>
 800f110:	68e0      	ldr	r0, [r4, #12]
 800f112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f114:	4298      	cmp	r0, r3
 800f116:	bfb8      	it	lt
 800f118:	4618      	movlt	r0, r3
 800f11a:	e730      	b.n	800ef7e <_printf_float+0xc6>
 800f11c:	2301      	movs	r3, #1
 800f11e:	464a      	mov	r2, r9
 800f120:	4631      	mov	r1, r6
 800f122:	4628      	mov	r0, r5
 800f124:	47b8      	blx	r7
 800f126:	3001      	adds	r0, #1
 800f128:	f43f af27 	beq.w	800ef7a <_printf_float+0xc2>
 800f12c:	f108 0801 	add.w	r8, r8, #1
 800f130:	e7e6      	b.n	800f100 <_printf_float+0x248>
 800f132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f134:	2b00      	cmp	r3, #0
 800f136:	dc39      	bgt.n	800f1ac <_printf_float+0x2f4>
 800f138:	4a1b      	ldr	r2, [pc, #108]	; (800f1a8 <_printf_float+0x2f0>)
 800f13a:	2301      	movs	r3, #1
 800f13c:	4631      	mov	r1, r6
 800f13e:	4628      	mov	r0, r5
 800f140:	47b8      	blx	r7
 800f142:	3001      	adds	r0, #1
 800f144:	f43f af19 	beq.w	800ef7a <_printf_float+0xc2>
 800f148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f14c:	4313      	orrs	r3, r2
 800f14e:	d102      	bne.n	800f156 <_printf_float+0x29e>
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	07d9      	lsls	r1, r3, #31
 800f154:	d5d8      	bpl.n	800f108 <_printf_float+0x250>
 800f156:	ee18 3a10 	vmov	r3, s16
 800f15a:	4652      	mov	r2, sl
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	47b8      	blx	r7
 800f162:	3001      	adds	r0, #1
 800f164:	f43f af09 	beq.w	800ef7a <_printf_float+0xc2>
 800f168:	f04f 0900 	mov.w	r9, #0
 800f16c:	f104 0a1a 	add.w	sl, r4, #26
 800f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f172:	425b      	negs	r3, r3
 800f174:	454b      	cmp	r3, r9
 800f176:	dc01      	bgt.n	800f17c <_printf_float+0x2c4>
 800f178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f17a:	e792      	b.n	800f0a2 <_printf_float+0x1ea>
 800f17c:	2301      	movs	r3, #1
 800f17e:	4652      	mov	r2, sl
 800f180:	4631      	mov	r1, r6
 800f182:	4628      	mov	r0, r5
 800f184:	47b8      	blx	r7
 800f186:	3001      	adds	r0, #1
 800f188:	f43f aef7 	beq.w	800ef7a <_printf_float+0xc2>
 800f18c:	f109 0901 	add.w	r9, r9, #1
 800f190:	e7ee      	b.n	800f170 <_printf_float+0x2b8>
 800f192:	bf00      	nop
 800f194:	7fefffff 	.word	0x7fefffff
 800f198:	08013ce4 	.word	0x08013ce4
 800f19c:	08013ce8 	.word	0x08013ce8
 800f1a0:	08013cf0 	.word	0x08013cf0
 800f1a4:	08013cec 	.word	0x08013cec
 800f1a8:	08013cf4 	.word	0x08013cf4
 800f1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	bfa8      	it	ge
 800f1b4:	461a      	movge	r2, r3
 800f1b6:	2a00      	cmp	r2, #0
 800f1b8:	4691      	mov	r9, r2
 800f1ba:	dc37      	bgt.n	800f22c <_printf_float+0x374>
 800f1bc:	f04f 0b00 	mov.w	fp, #0
 800f1c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1c4:	f104 021a 	add.w	r2, r4, #26
 800f1c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1ca:	9305      	str	r3, [sp, #20]
 800f1cc:	eba3 0309 	sub.w	r3, r3, r9
 800f1d0:	455b      	cmp	r3, fp
 800f1d2:	dc33      	bgt.n	800f23c <_printf_float+0x384>
 800f1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	db3b      	blt.n	800f254 <_printf_float+0x39c>
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	07da      	lsls	r2, r3, #31
 800f1e0:	d438      	bmi.n	800f254 <_printf_float+0x39c>
 800f1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e4:	9a05      	ldr	r2, [sp, #20]
 800f1e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1e8:	1a9a      	subs	r2, r3, r2
 800f1ea:	eba3 0901 	sub.w	r9, r3, r1
 800f1ee:	4591      	cmp	r9, r2
 800f1f0:	bfa8      	it	ge
 800f1f2:	4691      	movge	r9, r2
 800f1f4:	f1b9 0f00 	cmp.w	r9, #0
 800f1f8:	dc35      	bgt.n	800f266 <_printf_float+0x3ae>
 800f1fa:	f04f 0800 	mov.w	r8, #0
 800f1fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f202:	f104 0a1a 	add.w	sl, r4, #26
 800f206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f20a:	1a9b      	subs	r3, r3, r2
 800f20c:	eba3 0309 	sub.w	r3, r3, r9
 800f210:	4543      	cmp	r3, r8
 800f212:	f77f af79 	ble.w	800f108 <_printf_float+0x250>
 800f216:	2301      	movs	r3, #1
 800f218:	4652      	mov	r2, sl
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	f43f aeaa 	beq.w	800ef7a <_printf_float+0xc2>
 800f226:	f108 0801 	add.w	r8, r8, #1
 800f22a:	e7ec      	b.n	800f206 <_printf_float+0x34e>
 800f22c:	4613      	mov	r3, r2
 800f22e:	4631      	mov	r1, r6
 800f230:	4642      	mov	r2, r8
 800f232:	4628      	mov	r0, r5
 800f234:	47b8      	blx	r7
 800f236:	3001      	adds	r0, #1
 800f238:	d1c0      	bne.n	800f1bc <_printf_float+0x304>
 800f23a:	e69e      	b.n	800ef7a <_printf_float+0xc2>
 800f23c:	2301      	movs	r3, #1
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	9205      	str	r2, [sp, #20]
 800f244:	47b8      	blx	r7
 800f246:	3001      	adds	r0, #1
 800f248:	f43f ae97 	beq.w	800ef7a <_printf_float+0xc2>
 800f24c:	9a05      	ldr	r2, [sp, #20]
 800f24e:	f10b 0b01 	add.w	fp, fp, #1
 800f252:	e7b9      	b.n	800f1c8 <_printf_float+0x310>
 800f254:	ee18 3a10 	vmov	r3, s16
 800f258:	4652      	mov	r2, sl
 800f25a:	4631      	mov	r1, r6
 800f25c:	4628      	mov	r0, r5
 800f25e:	47b8      	blx	r7
 800f260:	3001      	adds	r0, #1
 800f262:	d1be      	bne.n	800f1e2 <_printf_float+0x32a>
 800f264:	e689      	b.n	800ef7a <_printf_float+0xc2>
 800f266:	9a05      	ldr	r2, [sp, #20]
 800f268:	464b      	mov	r3, r9
 800f26a:	4442      	add	r2, r8
 800f26c:	4631      	mov	r1, r6
 800f26e:	4628      	mov	r0, r5
 800f270:	47b8      	blx	r7
 800f272:	3001      	adds	r0, #1
 800f274:	d1c1      	bne.n	800f1fa <_printf_float+0x342>
 800f276:	e680      	b.n	800ef7a <_printf_float+0xc2>
 800f278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f27a:	2a01      	cmp	r2, #1
 800f27c:	dc01      	bgt.n	800f282 <_printf_float+0x3ca>
 800f27e:	07db      	lsls	r3, r3, #31
 800f280:	d538      	bpl.n	800f2f4 <_printf_float+0x43c>
 800f282:	2301      	movs	r3, #1
 800f284:	4642      	mov	r2, r8
 800f286:	4631      	mov	r1, r6
 800f288:	4628      	mov	r0, r5
 800f28a:	47b8      	blx	r7
 800f28c:	3001      	adds	r0, #1
 800f28e:	f43f ae74 	beq.w	800ef7a <_printf_float+0xc2>
 800f292:	ee18 3a10 	vmov	r3, s16
 800f296:	4652      	mov	r2, sl
 800f298:	4631      	mov	r1, r6
 800f29a:	4628      	mov	r0, r5
 800f29c:	47b8      	blx	r7
 800f29e:	3001      	adds	r0, #1
 800f2a0:	f43f ae6b 	beq.w	800ef7a <_printf_float+0xc2>
 800f2a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f7f1 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2b0:	b9d8      	cbnz	r0, 800f2ea <_printf_float+0x432>
 800f2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b4:	f108 0201 	add.w	r2, r8, #1
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	4631      	mov	r1, r6
 800f2bc:	4628      	mov	r0, r5
 800f2be:	47b8      	blx	r7
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	d10e      	bne.n	800f2e2 <_printf_float+0x42a>
 800f2c4:	e659      	b.n	800ef7a <_printf_float+0xc2>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	4652      	mov	r2, sl
 800f2ca:	4631      	mov	r1, r6
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	47b8      	blx	r7
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	f43f ae52 	beq.w	800ef7a <_printf_float+0xc2>
 800f2d6:	f108 0801 	add.w	r8, r8, #1
 800f2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	4543      	cmp	r3, r8
 800f2e0:	dcf1      	bgt.n	800f2c6 <_printf_float+0x40e>
 800f2e2:	464b      	mov	r3, r9
 800f2e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2e8:	e6dc      	b.n	800f0a4 <_printf_float+0x1ec>
 800f2ea:	f04f 0800 	mov.w	r8, #0
 800f2ee:	f104 0a1a 	add.w	sl, r4, #26
 800f2f2:	e7f2      	b.n	800f2da <_printf_float+0x422>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	4642      	mov	r2, r8
 800f2f8:	e7df      	b.n	800f2ba <_printf_float+0x402>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	464a      	mov	r2, r9
 800f2fe:	4631      	mov	r1, r6
 800f300:	4628      	mov	r0, r5
 800f302:	47b8      	blx	r7
 800f304:	3001      	adds	r0, #1
 800f306:	f43f ae38 	beq.w	800ef7a <_printf_float+0xc2>
 800f30a:	f108 0801 	add.w	r8, r8, #1
 800f30e:	68e3      	ldr	r3, [r4, #12]
 800f310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f312:	1a5b      	subs	r3, r3, r1
 800f314:	4543      	cmp	r3, r8
 800f316:	dcf0      	bgt.n	800f2fa <_printf_float+0x442>
 800f318:	e6fa      	b.n	800f110 <_printf_float+0x258>
 800f31a:	f04f 0800 	mov.w	r8, #0
 800f31e:	f104 0919 	add.w	r9, r4, #25
 800f322:	e7f4      	b.n	800f30e <_printf_float+0x456>

0800f324 <_printf_common>:
 800f324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f328:	4616      	mov	r6, r2
 800f32a:	4699      	mov	r9, r3
 800f32c:	688a      	ldr	r2, [r1, #8]
 800f32e:	690b      	ldr	r3, [r1, #16]
 800f330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f334:	4293      	cmp	r3, r2
 800f336:	bfb8      	it	lt
 800f338:	4613      	movlt	r3, r2
 800f33a:	6033      	str	r3, [r6, #0]
 800f33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f340:	4607      	mov	r7, r0
 800f342:	460c      	mov	r4, r1
 800f344:	b10a      	cbz	r2, 800f34a <_printf_common+0x26>
 800f346:	3301      	adds	r3, #1
 800f348:	6033      	str	r3, [r6, #0]
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	0699      	lsls	r1, r3, #26
 800f34e:	bf42      	ittt	mi
 800f350:	6833      	ldrmi	r3, [r6, #0]
 800f352:	3302      	addmi	r3, #2
 800f354:	6033      	strmi	r3, [r6, #0]
 800f356:	6825      	ldr	r5, [r4, #0]
 800f358:	f015 0506 	ands.w	r5, r5, #6
 800f35c:	d106      	bne.n	800f36c <_printf_common+0x48>
 800f35e:	f104 0a19 	add.w	sl, r4, #25
 800f362:	68e3      	ldr	r3, [r4, #12]
 800f364:	6832      	ldr	r2, [r6, #0]
 800f366:	1a9b      	subs	r3, r3, r2
 800f368:	42ab      	cmp	r3, r5
 800f36a:	dc26      	bgt.n	800f3ba <_printf_common+0x96>
 800f36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f370:	1e13      	subs	r3, r2, #0
 800f372:	6822      	ldr	r2, [r4, #0]
 800f374:	bf18      	it	ne
 800f376:	2301      	movne	r3, #1
 800f378:	0692      	lsls	r2, r2, #26
 800f37a:	d42b      	bmi.n	800f3d4 <_printf_common+0xb0>
 800f37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f380:	4649      	mov	r1, r9
 800f382:	4638      	mov	r0, r7
 800f384:	47c0      	blx	r8
 800f386:	3001      	adds	r0, #1
 800f388:	d01e      	beq.n	800f3c8 <_printf_common+0xa4>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	68e5      	ldr	r5, [r4, #12]
 800f38e:	6832      	ldr	r2, [r6, #0]
 800f390:	f003 0306 	and.w	r3, r3, #6
 800f394:	2b04      	cmp	r3, #4
 800f396:	bf08      	it	eq
 800f398:	1aad      	subeq	r5, r5, r2
 800f39a:	68a3      	ldr	r3, [r4, #8]
 800f39c:	6922      	ldr	r2, [r4, #16]
 800f39e:	bf0c      	ite	eq
 800f3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3a4:	2500      	movne	r5, #0
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	bfc4      	itt	gt
 800f3aa:	1a9b      	subgt	r3, r3, r2
 800f3ac:	18ed      	addgt	r5, r5, r3
 800f3ae:	2600      	movs	r6, #0
 800f3b0:	341a      	adds	r4, #26
 800f3b2:	42b5      	cmp	r5, r6
 800f3b4:	d11a      	bne.n	800f3ec <_printf_common+0xc8>
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	e008      	b.n	800f3cc <_printf_common+0xa8>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	4652      	mov	r2, sl
 800f3be:	4649      	mov	r1, r9
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	47c0      	blx	r8
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d103      	bne.n	800f3d0 <_printf_common+0xac>
 800f3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d0:	3501      	adds	r5, #1
 800f3d2:	e7c6      	b.n	800f362 <_printf_common+0x3e>
 800f3d4:	18e1      	adds	r1, r4, r3
 800f3d6:	1c5a      	adds	r2, r3, #1
 800f3d8:	2030      	movs	r0, #48	; 0x30
 800f3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3de:	4422      	add	r2, r4
 800f3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3e8:	3302      	adds	r3, #2
 800f3ea:	e7c7      	b.n	800f37c <_printf_common+0x58>
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	4622      	mov	r2, r4
 800f3f0:	4649      	mov	r1, r9
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	47c0      	blx	r8
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	d0e6      	beq.n	800f3c8 <_printf_common+0xa4>
 800f3fa:	3601      	adds	r6, #1
 800f3fc:	e7d9      	b.n	800f3b2 <_printf_common+0x8e>
	...

0800f400 <_printf_i>:
 800f400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f404:	7e0f      	ldrb	r7, [r1, #24]
 800f406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f408:	2f78      	cmp	r7, #120	; 0x78
 800f40a:	4691      	mov	r9, r2
 800f40c:	4680      	mov	r8, r0
 800f40e:	460c      	mov	r4, r1
 800f410:	469a      	mov	sl, r3
 800f412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f416:	d807      	bhi.n	800f428 <_printf_i+0x28>
 800f418:	2f62      	cmp	r7, #98	; 0x62
 800f41a:	d80a      	bhi.n	800f432 <_printf_i+0x32>
 800f41c:	2f00      	cmp	r7, #0
 800f41e:	f000 80d8 	beq.w	800f5d2 <_printf_i+0x1d2>
 800f422:	2f58      	cmp	r7, #88	; 0x58
 800f424:	f000 80a3 	beq.w	800f56e <_printf_i+0x16e>
 800f428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f430:	e03a      	b.n	800f4a8 <_printf_i+0xa8>
 800f432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f436:	2b15      	cmp	r3, #21
 800f438:	d8f6      	bhi.n	800f428 <_printf_i+0x28>
 800f43a:	a101      	add	r1, pc, #4	; (adr r1, 800f440 <_printf_i+0x40>)
 800f43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f440:	0800f499 	.word	0x0800f499
 800f444:	0800f4ad 	.word	0x0800f4ad
 800f448:	0800f429 	.word	0x0800f429
 800f44c:	0800f429 	.word	0x0800f429
 800f450:	0800f429 	.word	0x0800f429
 800f454:	0800f429 	.word	0x0800f429
 800f458:	0800f4ad 	.word	0x0800f4ad
 800f45c:	0800f429 	.word	0x0800f429
 800f460:	0800f429 	.word	0x0800f429
 800f464:	0800f429 	.word	0x0800f429
 800f468:	0800f429 	.word	0x0800f429
 800f46c:	0800f5b9 	.word	0x0800f5b9
 800f470:	0800f4dd 	.word	0x0800f4dd
 800f474:	0800f59b 	.word	0x0800f59b
 800f478:	0800f429 	.word	0x0800f429
 800f47c:	0800f429 	.word	0x0800f429
 800f480:	0800f5db 	.word	0x0800f5db
 800f484:	0800f429 	.word	0x0800f429
 800f488:	0800f4dd 	.word	0x0800f4dd
 800f48c:	0800f429 	.word	0x0800f429
 800f490:	0800f429 	.word	0x0800f429
 800f494:	0800f5a3 	.word	0x0800f5a3
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	602a      	str	r2, [r5, #0]
 800f4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e0a3      	b.n	800f5f4 <_printf_i+0x1f4>
 800f4ac:	6820      	ldr	r0, [r4, #0]
 800f4ae:	6829      	ldr	r1, [r5, #0]
 800f4b0:	0606      	lsls	r6, r0, #24
 800f4b2:	f101 0304 	add.w	r3, r1, #4
 800f4b6:	d50a      	bpl.n	800f4ce <_printf_i+0xce>
 800f4b8:	680e      	ldr	r6, [r1, #0]
 800f4ba:	602b      	str	r3, [r5, #0]
 800f4bc:	2e00      	cmp	r6, #0
 800f4be:	da03      	bge.n	800f4c8 <_printf_i+0xc8>
 800f4c0:	232d      	movs	r3, #45	; 0x2d
 800f4c2:	4276      	negs	r6, r6
 800f4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4c8:	485e      	ldr	r0, [pc, #376]	; (800f644 <_printf_i+0x244>)
 800f4ca:	230a      	movs	r3, #10
 800f4cc:	e019      	b.n	800f502 <_printf_i+0x102>
 800f4ce:	680e      	ldr	r6, [r1, #0]
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4d6:	bf18      	it	ne
 800f4d8:	b236      	sxthne	r6, r6
 800f4da:	e7ef      	b.n	800f4bc <_printf_i+0xbc>
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	6820      	ldr	r0, [r4, #0]
 800f4e0:	1d19      	adds	r1, r3, #4
 800f4e2:	6029      	str	r1, [r5, #0]
 800f4e4:	0601      	lsls	r1, r0, #24
 800f4e6:	d501      	bpl.n	800f4ec <_printf_i+0xec>
 800f4e8:	681e      	ldr	r6, [r3, #0]
 800f4ea:	e002      	b.n	800f4f2 <_printf_i+0xf2>
 800f4ec:	0646      	lsls	r6, r0, #25
 800f4ee:	d5fb      	bpl.n	800f4e8 <_printf_i+0xe8>
 800f4f0:	881e      	ldrh	r6, [r3, #0]
 800f4f2:	4854      	ldr	r0, [pc, #336]	; (800f644 <_printf_i+0x244>)
 800f4f4:	2f6f      	cmp	r7, #111	; 0x6f
 800f4f6:	bf0c      	ite	eq
 800f4f8:	2308      	moveq	r3, #8
 800f4fa:	230a      	movne	r3, #10
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f502:	6865      	ldr	r5, [r4, #4]
 800f504:	60a5      	str	r5, [r4, #8]
 800f506:	2d00      	cmp	r5, #0
 800f508:	bfa2      	ittt	ge
 800f50a:	6821      	ldrge	r1, [r4, #0]
 800f50c:	f021 0104 	bicge.w	r1, r1, #4
 800f510:	6021      	strge	r1, [r4, #0]
 800f512:	b90e      	cbnz	r6, 800f518 <_printf_i+0x118>
 800f514:	2d00      	cmp	r5, #0
 800f516:	d04d      	beq.n	800f5b4 <_printf_i+0x1b4>
 800f518:	4615      	mov	r5, r2
 800f51a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f51e:	fb03 6711 	mls	r7, r3, r1, r6
 800f522:	5dc7      	ldrb	r7, [r0, r7]
 800f524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f528:	4637      	mov	r7, r6
 800f52a:	42bb      	cmp	r3, r7
 800f52c:	460e      	mov	r6, r1
 800f52e:	d9f4      	bls.n	800f51a <_printf_i+0x11a>
 800f530:	2b08      	cmp	r3, #8
 800f532:	d10b      	bne.n	800f54c <_printf_i+0x14c>
 800f534:	6823      	ldr	r3, [r4, #0]
 800f536:	07de      	lsls	r6, r3, #31
 800f538:	d508      	bpl.n	800f54c <_printf_i+0x14c>
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	6861      	ldr	r1, [r4, #4]
 800f53e:	4299      	cmp	r1, r3
 800f540:	bfde      	ittt	le
 800f542:	2330      	movle	r3, #48	; 0x30
 800f544:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f548:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f54c:	1b52      	subs	r2, r2, r5
 800f54e:	6122      	str	r2, [r4, #16]
 800f550:	f8cd a000 	str.w	sl, [sp]
 800f554:	464b      	mov	r3, r9
 800f556:	aa03      	add	r2, sp, #12
 800f558:	4621      	mov	r1, r4
 800f55a:	4640      	mov	r0, r8
 800f55c:	f7ff fee2 	bl	800f324 <_printf_common>
 800f560:	3001      	adds	r0, #1
 800f562:	d14c      	bne.n	800f5fe <_printf_i+0x1fe>
 800f564:	f04f 30ff 	mov.w	r0, #4294967295
 800f568:	b004      	add	sp, #16
 800f56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f56e:	4835      	ldr	r0, [pc, #212]	; (800f644 <_printf_i+0x244>)
 800f570:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f574:	6829      	ldr	r1, [r5, #0]
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	f851 6b04 	ldr.w	r6, [r1], #4
 800f57c:	6029      	str	r1, [r5, #0]
 800f57e:	061d      	lsls	r5, r3, #24
 800f580:	d514      	bpl.n	800f5ac <_printf_i+0x1ac>
 800f582:	07df      	lsls	r7, r3, #31
 800f584:	bf44      	itt	mi
 800f586:	f043 0320 	orrmi.w	r3, r3, #32
 800f58a:	6023      	strmi	r3, [r4, #0]
 800f58c:	b91e      	cbnz	r6, 800f596 <_printf_i+0x196>
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	f023 0320 	bic.w	r3, r3, #32
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	2310      	movs	r3, #16
 800f598:	e7b0      	b.n	800f4fc <_printf_i+0xfc>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	f043 0320 	orr.w	r3, r3, #32
 800f5a0:	6023      	str	r3, [r4, #0]
 800f5a2:	2378      	movs	r3, #120	; 0x78
 800f5a4:	4828      	ldr	r0, [pc, #160]	; (800f648 <_printf_i+0x248>)
 800f5a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5aa:	e7e3      	b.n	800f574 <_printf_i+0x174>
 800f5ac:	0659      	lsls	r1, r3, #25
 800f5ae:	bf48      	it	mi
 800f5b0:	b2b6      	uxthmi	r6, r6
 800f5b2:	e7e6      	b.n	800f582 <_printf_i+0x182>
 800f5b4:	4615      	mov	r5, r2
 800f5b6:	e7bb      	b.n	800f530 <_printf_i+0x130>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	6826      	ldr	r6, [r4, #0]
 800f5bc:	6961      	ldr	r1, [r4, #20]
 800f5be:	1d18      	adds	r0, r3, #4
 800f5c0:	6028      	str	r0, [r5, #0]
 800f5c2:	0635      	lsls	r5, r6, #24
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	d501      	bpl.n	800f5cc <_printf_i+0x1cc>
 800f5c8:	6019      	str	r1, [r3, #0]
 800f5ca:	e002      	b.n	800f5d2 <_printf_i+0x1d2>
 800f5cc:	0670      	lsls	r0, r6, #25
 800f5ce:	d5fb      	bpl.n	800f5c8 <_printf_i+0x1c8>
 800f5d0:	8019      	strh	r1, [r3, #0]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	6123      	str	r3, [r4, #16]
 800f5d6:	4615      	mov	r5, r2
 800f5d8:	e7ba      	b.n	800f550 <_printf_i+0x150>
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	1d1a      	adds	r2, r3, #4
 800f5de:	602a      	str	r2, [r5, #0]
 800f5e0:	681d      	ldr	r5, [r3, #0]
 800f5e2:	6862      	ldr	r2, [r4, #4]
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f7f0 fdfa 	bl	80001e0 <memchr>
 800f5ec:	b108      	cbz	r0, 800f5f2 <_printf_i+0x1f2>
 800f5ee:	1b40      	subs	r0, r0, r5
 800f5f0:	6060      	str	r0, [r4, #4]
 800f5f2:	6863      	ldr	r3, [r4, #4]
 800f5f4:	6123      	str	r3, [r4, #16]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5fc:	e7a8      	b.n	800f550 <_printf_i+0x150>
 800f5fe:	6923      	ldr	r3, [r4, #16]
 800f600:	462a      	mov	r2, r5
 800f602:	4649      	mov	r1, r9
 800f604:	4640      	mov	r0, r8
 800f606:	47d0      	blx	sl
 800f608:	3001      	adds	r0, #1
 800f60a:	d0ab      	beq.n	800f564 <_printf_i+0x164>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	079b      	lsls	r3, r3, #30
 800f610:	d413      	bmi.n	800f63a <_printf_i+0x23a>
 800f612:	68e0      	ldr	r0, [r4, #12]
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	4298      	cmp	r0, r3
 800f618:	bfb8      	it	lt
 800f61a:	4618      	movlt	r0, r3
 800f61c:	e7a4      	b.n	800f568 <_printf_i+0x168>
 800f61e:	2301      	movs	r3, #1
 800f620:	4632      	mov	r2, r6
 800f622:	4649      	mov	r1, r9
 800f624:	4640      	mov	r0, r8
 800f626:	47d0      	blx	sl
 800f628:	3001      	adds	r0, #1
 800f62a:	d09b      	beq.n	800f564 <_printf_i+0x164>
 800f62c:	3501      	adds	r5, #1
 800f62e:	68e3      	ldr	r3, [r4, #12]
 800f630:	9903      	ldr	r1, [sp, #12]
 800f632:	1a5b      	subs	r3, r3, r1
 800f634:	42ab      	cmp	r3, r5
 800f636:	dcf2      	bgt.n	800f61e <_printf_i+0x21e>
 800f638:	e7eb      	b.n	800f612 <_printf_i+0x212>
 800f63a:	2500      	movs	r5, #0
 800f63c:	f104 0619 	add.w	r6, r4, #25
 800f640:	e7f5      	b.n	800f62e <_printf_i+0x22e>
 800f642:	bf00      	nop
 800f644:	08013cf6 	.word	0x08013cf6
 800f648:	08013d07 	.word	0x08013d07

0800f64c <iprintf>:
 800f64c:	b40f      	push	{r0, r1, r2, r3}
 800f64e:	4b0a      	ldr	r3, [pc, #40]	; (800f678 <iprintf+0x2c>)
 800f650:	b513      	push	{r0, r1, r4, lr}
 800f652:	681c      	ldr	r4, [r3, #0]
 800f654:	b124      	cbz	r4, 800f660 <iprintf+0x14>
 800f656:	69a3      	ldr	r3, [r4, #24]
 800f658:	b913      	cbnz	r3, 800f660 <iprintf+0x14>
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7ff fa1c 	bl	800ea98 <__sinit>
 800f660:	ab05      	add	r3, sp, #20
 800f662:	9a04      	ldr	r2, [sp, #16]
 800f664:	68a1      	ldr	r1, [r4, #8]
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	4620      	mov	r0, r4
 800f66a:	f001 fdf9 	bl	8011260 <_vfiprintf_r>
 800f66e:	b002      	add	sp, #8
 800f670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f674:	b004      	add	sp, #16
 800f676:	4770      	bx	lr
 800f678:	200000a0 	.word	0x200000a0

0800f67c <_puts_r>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	460e      	mov	r6, r1
 800f680:	4605      	mov	r5, r0
 800f682:	b118      	cbz	r0, 800f68c <_puts_r+0x10>
 800f684:	6983      	ldr	r3, [r0, #24]
 800f686:	b90b      	cbnz	r3, 800f68c <_puts_r+0x10>
 800f688:	f7ff fa06 	bl	800ea98 <__sinit>
 800f68c:	69ab      	ldr	r3, [r5, #24]
 800f68e:	68ac      	ldr	r4, [r5, #8]
 800f690:	b913      	cbnz	r3, 800f698 <_puts_r+0x1c>
 800f692:	4628      	mov	r0, r5
 800f694:	f7ff fa00 	bl	800ea98 <__sinit>
 800f698:	4b2c      	ldr	r3, [pc, #176]	; (800f74c <_puts_r+0xd0>)
 800f69a:	429c      	cmp	r4, r3
 800f69c:	d120      	bne.n	800f6e0 <_puts_r+0x64>
 800f69e:	686c      	ldr	r4, [r5, #4]
 800f6a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6a2:	07db      	lsls	r3, r3, #31
 800f6a4:	d405      	bmi.n	800f6b2 <_puts_r+0x36>
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	0598      	lsls	r0, r3, #22
 800f6aa:	d402      	bmi.n	800f6b2 <_puts_r+0x36>
 800f6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ae:	f7ff fab6 	bl	800ec1e <__retarget_lock_acquire_recursive>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	0719      	lsls	r1, r3, #28
 800f6b6:	d51d      	bpl.n	800f6f4 <_puts_r+0x78>
 800f6b8:	6923      	ldr	r3, [r4, #16]
 800f6ba:	b1db      	cbz	r3, 800f6f4 <_puts_r+0x78>
 800f6bc:	3e01      	subs	r6, #1
 800f6be:	68a3      	ldr	r3, [r4, #8]
 800f6c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	60a3      	str	r3, [r4, #8]
 800f6c8:	bb39      	cbnz	r1, 800f71a <_puts_r+0x9e>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	da38      	bge.n	800f740 <_puts_r+0xc4>
 800f6ce:	4622      	mov	r2, r4
 800f6d0:	210a      	movs	r1, #10
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f000 f906 	bl	800f8e4 <__swbuf_r>
 800f6d8:	3001      	adds	r0, #1
 800f6da:	d011      	beq.n	800f700 <_puts_r+0x84>
 800f6dc:	250a      	movs	r5, #10
 800f6de:	e011      	b.n	800f704 <_puts_r+0x88>
 800f6e0:	4b1b      	ldr	r3, [pc, #108]	; (800f750 <_puts_r+0xd4>)
 800f6e2:	429c      	cmp	r4, r3
 800f6e4:	d101      	bne.n	800f6ea <_puts_r+0x6e>
 800f6e6:	68ac      	ldr	r4, [r5, #8]
 800f6e8:	e7da      	b.n	800f6a0 <_puts_r+0x24>
 800f6ea:	4b1a      	ldr	r3, [pc, #104]	; (800f754 <_puts_r+0xd8>)
 800f6ec:	429c      	cmp	r4, r3
 800f6ee:	bf08      	it	eq
 800f6f0:	68ec      	ldreq	r4, [r5, #12]
 800f6f2:	e7d5      	b.n	800f6a0 <_puts_r+0x24>
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f000 f958 	bl	800f9ac <__swsetup_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d0dd      	beq.n	800f6bc <_puts_r+0x40>
 800f700:	f04f 35ff 	mov.w	r5, #4294967295
 800f704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f706:	07da      	lsls	r2, r3, #31
 800f708:	d405      	bmi.n	800f716 <_puts_r+0x9a>
 800f70a:	89a3      	ldrh	r3, [r4, #12]
 800f70c:	059b      	lsls	r3, r3, #22
 800f70e:	d402      	bmi.n	800f716 <_puts_r+0x9a>
 800f710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f712:	f7ff fa85 	bl	800ec20 <__retarget_lock_release_recursive>
 800f716:	4628      	mov	r0, r5
 800f718:	bd70      	pop	{r4, r5, r6, pc}
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	da04      	bge.n	800f728 <_puts_r+0xac>
 800f71e:	69a2      	ldr	r2, [r4, #24]
 800f720:	429a      	cmp	r2, r3
 800f722:	dc06      	bgt.n	800f732 <_puts_r+0xb6>
 800f724:	290a      	cmp	r1, #10
 800f726:	d004      	beq.n	800f732 <_puts_r+0xb6>
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	1c5a      	adds	r2, r3, #1
 800f72c:	6022      	str	r2, [r4, #0]
 800f72e:	7019      	strb	r1, [r3, #0]
 800f730:	e7c5      	b.n	800f6be <_puts_r+0x42>
 800f732:	4622      	mov	r2, r4
 800f734:	4628      	mov	r0, r5
 800f736:	f000 f8d5 	bl	800f8e4 <__swbuf_r>
 800f73a:	3001      	adds	r0, #1
 800f73c:	d1bf      	bne.n	800f6be <_puts_r+0x42>
 800f73e:	e7df      	b.n	800f700 <_puts_r+0x84>
 800f740:	6823      	ldr	r3, [r4, #0]
 800f742:	250a      	movs	r5, #10
 800f744:	1c5a      	adds	r2, r3, #1
 800f746:	6022      	str	r2, [r4, #0]
 800f748:	701d      	strb	r5, [r3, #0]
 800f74a:	e7db      	b.n	800f704 <_puts_r+0x88>
 800f74c:	08013ca0 	.word	0x08013ca0
 800f750:	08013cc0 	.word	0x08013cc0
 800f754:	08013c80 	.word	0x08013c80

0800f758 <puts>:
 800f758:	4b02      	ldr	r3, [pc, #8]	; (800f764 <puts+0xc>)
 800f75a:	4601      	mov	r1, r0
 800f75c:	6818      	ldr	r0, [r3, #0]
 800f75e:	f7ff bf8d 	b.w	800f67c <_puts_r>
 800f762:	bf00      	nop
 800f764:	200000a0 	.word	0x200000a0

0800f768 <cleanup_glue>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	460c      	mov	r4, r1
 800f76c:	6809      	ldr	r1, [r1, #0]
 800f76e:	4605      	mov	r5, r0
 800f770:	b109      	cbz	r1, 800f776 <cleanup_glue+0xe>
 800f772:	f7ff fff9 	bl	800f768 <cleanup_glue>
 800f776:	4621      	mov	r1, r4
 800f778:	4628      	mov	r0, r5
 800f77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f77e:	f001 bcf9 	b.w	8011174 <_free_r>
	...

0800f784 <_reclaim_reent>:
 800f784:	4b2c      	ldr	r3, [pc, #176]	; (800f838 <_reclaim_reent+0xb4>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4283      	cmp	r3, r0
 800f78a:	b570      	push	{r4, r5, r6, lr}
 800f78c:	4604      	mov	r4, r0
 800f78e:	d051      	beq.n	800f834 <_reclaim_reent+0xb0>
 800f790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f792:	b143      	cbz	r3, 800f7a6 <_reclaim_reent+0x22>
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d14a      	bne.n	800f830 <_reclaim_reent+0xac>
 800f79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f79c:	6819      	ldr	r1, [r3, #0]
 800f79e:	b111      	cbz	r1, 800f7a6 <_reclaim_reent+0x22>
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f001 fce7 	bl	8011174 <_free_r>
 800f7a6:	6961      	ldr	r1, [r4, #20]
 800f7a8:	b111      	cbz	r1, 800f7b0 <_reclaim_reent+0x2c>
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f001 fce2 	bl	8011174 <_free_r>
 800f7b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f7b2:	b111      	cbz	r1, 800f7ba <_reclaim_reent+0x36>
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f001 fcdd 	bl	8011174 <_free_r>
 800f7ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f7bc:	b111      	cbz	r1, 800f7c4 <_reclaim_reent+0x40>
 800f7be:	4620      	mov	r0, r4
 800f7c0:	f001 fcd8 	bl	8011174 <_free_r>
 800f7c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f7c6:	b111      	cbz	r1, 800f7ce <_reclaim_reent+0x4a>
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f001 fcd3 	bl	8011174 <_free_r>
 800f7ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f7d0:	b111      	cbz	r1, 800f7d8 <_reclaim_reent+0x54>
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f001 fcce 	bl	8011174 <_free_r>
 800f7d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f7da:	b111      	cbz	r1, 800f7e2 <_reclaim_reent+0x5e>
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f001 fcc9 	bl	8011174 <_free_r>
 800f7e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f7e4:	b111      	cbz	r1, 800f7ec <_reclaim_reent+0x68>
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f001 fcc4 	bl	8011174 <_free_r>
 800f7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7ee:	b111      	cbz	r1, 800f7f6 <_reclaim_reent+0x72>
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f001 fcbf 	bl	8011174 <_free_r>
 800f7f6:	69a3      	ldr	r3, [r4, #24]
 800f7f8:	b1e3      	cbz	r3, 800f834 <_reclaim_reent+0xb0>
 800f7fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	4798      	blx	r3
 800f800:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f802:	b1b9      	cbz	r1, 800f834 <_reclaim_reent+0xb0>
 800f804:	4620      	mov	r0, r4
 800f806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f80a:	f7ff bfad 	b.w	800f768 <cleanup_glue>
 800f80e:	5949      	ldr	r1, [r1, r5]
 800f810:	b941      	cbnz	r1, 800f824 <_reclaim_reent+0xa0>
 800f812:	3504      	adds	r5, #4
 800f814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f816:	2d80      	cmp	r5, #128	; 0x80
 800f818:	68d9      	ldr	r1, [r3, #12]
 800f81a:	d1f8      	bne.n	800f80e <_reclaim_reent+0x8a>
 800f81c:	4620      	mov	r0, r4
 800f81e:	f001 fca9 	bl	8011174 <_free_r>
 800f822:	e7ba      	b.n	800f79a <_reclaim_reent+0x16>
 800f824:	680e      	ldr	r6, [r1, #0]
 800f826:	4620      	mov	r0, r4
 800f828:	f001 fca4 	bl	8011174 <_free_r>
 800f82c:	4631      	mov	r1, r6
 800f82e:	e7ef      	b.n	800f810 <_reclaim_reent+0x8c>
 800f830:	2500      	movs	r5, #0
 800f832:	e7ef      	b.n	800f814 <_reclaim_reent+0x90>
 800f834:	bd70      	pop	{r4, r5, r6, pc}
 800f836:	bf00      	nop
 800f838:	200000a0 	.word	0x200000a0

0800f83c <_sbrk_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4d06      	ldr	r5, [pc, #24]	; (800f858 <_sbrk_r+0x1c>)
 800f840:	2300      	movs	r3, #0
 800f842:	4604      	mov	r4, r0
 800f844:	4608      	mov	r0, r1
 800f846:	602b      	str	r3, [r5, #0]
 800f848:	f7f5 f836 	bl	80048b8 <_sbrk>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d102      	bne.n	800f856 <_sbrk_r+0x1a>
 800f850:	682b      	ldr	r3, [r5, #0]
 800f852:	b103      	cbz	r3, 800f856 <_sbrk_r+0x1a>
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	bd38      	pop	{r3, r4, r5, pc}
 800f858:	20005b14 	.word	0x20005b14

0800f85c <__sread>:
 800f85c:	b510      	push	{r4, lr}
 800f85e:	460c      	mov	r4, r1
 800f860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f864:	f001 fe2c 	bl	80114c0 <_read_r>
 800f868:	2800      	cmp	r0, #0
 800f86a:	bfab      	itete	ge
 800f86c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f86e:	89a3      	ldrhlt	r3, [r4, #12]
 800f870:	181b      	addge	r3, r3, r0
 800f872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f876:	bfac      	ite	ge
 800f878:	6563      	strge	r3, [r4, #84]	; 0x54
 800f87a:	81a3      	strhlt	r3, [r4, #12]
 800f87c:	bd10      	pop	{r4, pc}

0800f87e <__swrite>:
 800f87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f882:	461f      	mov	r7, r3
 800f884:	898b      	ldrh	r3, [r1, #12]
 800f886:	05db      	lsls	r3, r3, #23
 800f888:	4605      	mov	r5, r0
 800f88a:	460c      	mov	r4, r1
 800f88c:	4616      	mov	r6, r2
 800f88e:	d505      	bpl.n	800f89c <__swrite+0x1e>
 800f890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f894:	2302      	movs	r3, #2
 800f896:	2200      	movs	r2, #0
 800f898:	f001 f846 	bl	8010928 <_lseek_r>
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8a6:	81a3      	strh	r3, [r4, #12]
 800f8a8:	4632      	mov	r2, r6
 800f8aa:	463b      	mov	r3, r7
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b2:	f000 b869 	b.w	800f988 <_write_r>

0800f8b6 <__sseek>:
 800f8b6:	b510      	push	{r4, lr}
 800f8b8:	460c      	mov	r4, r1
 800f8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8be:	f001 f833 	bl	8010928 <_lseek_r>
 800f8c2:	1c43      	adds	r3, r0, #1
 800f8c4:	89a3      	ldrh	r3, [r4, #12]
 800f8c6:	bf15      	itete	ne
 800f8c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8d2:	81a3      	strheq	r3, [r4, #12]
 800f8d4:	bf18      	it	ne
 800f8d6:	81a3      	strhne	r3, [r4, #12]
 800f8d8:	bd10      	pop	{r4, pc}

0800f8da <__sclose>:
 800f8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8de:	f000 b8d3 	b.w	800fa88 <_close_r>
	...

0800f8e4 <__swbuf_r>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	460e      	mov	r6, r1
 800f8e8:	4614      	mov	r4, r2
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	b118      	cbz	r0, 800f8f6 <__swbuf_r+0x12>
 800f8ee:	6983      	ldr	r3, [r0, #24]
 800f8f0:	b90b      	cbnz	r3, 800f8f6 <__swbuf_r+0x12>
 800f8f2:	f7ff f8d1 	bl	800ea98 <__sinit>
 800f8f6:	4b21      	ldr	r3, [pc, #132]	; (800f97c <__swbuf_r+0x98>)
 800f8f8:	429c      	cmp	r4, r3
 800f8fa:	d12b      	bne.n	800f954 <__swbuf_r+0x70>
 800f8fc:	686c      	ldr	r4, [r5, #4]
 800f8fe:	69a3      	ldr	r3, [r4, #24]
 800f900:	60a3      	str	r3, [r4, #8]
 800f902:	89a3      	ldrh	r3, [r4, #12]
 800f904:	071a      	lsls	r2, r3, #28
 800f906:	d52f      	bpl.n	800f968 <__swbuf_r+0x84>
 800f908:	6923      	ldr	r3, [r4, #16]
 800f90a:	b36b      	cbz	r3, 800f968 <__swbuf_r+0x84>
 800f90c:	6923      	ldr	r3, [r4, #16]
 800f90e:	6820      	ldr	r0, [r4, #0]
 800f910:	1ac0      	subs	r0, r0, r3
 800f912:	6963      	ldr	r3, [r4, #20]
 800f914:	b2f6      	uxtb	r6, r6
 800f916:	4283      	cmp	r3, r0
 800f918:	4637      	mov	r7, r6
 800f91a:	dc04      	bgt.n	800f926 <__swbuf_r+0x42>
 800f91c:	4621      	mov	r1, r4
 800f91e:	4628      	mov	r0, r5
 800f920:	f000 ffc2 	bl	80108a8 <_fflush_r>
 800f924:	bb30      	cbnz	r0, 800f974 <__swbuf_r+0x90>
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	3b01      	subs	r3, #1
 800f92a:	60a3      	str	r3, [r4, #8]
 800f92c:	6823      	ldr	r3, [r4, #0]
 800f92e:	1c5a      	adds	r2, r3, #1
 800f930:	6022      	str	r2, [r4, #0]
 800f932:	701e      	strb	r6, [r3, #0]
 800f934:	6963      	ldr	r3, [r4, #20]
 800f936:	3001      	adds	r0, #1
 800f938:	4283      	cmp	r3, r0
 800f93a:	d004      	beq.n	800f946 <__swbuf_r+0x62>
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	07db      	lsls	r3, r3, #31
 800f940:	d506      	bpl.n	800f950 <__swbuf_r+0x6c>
 800f942:	2e0a      	cmp	r6, #10
 800f944:	d104      	bne.n	800f950 <__swbuf_r+0x6c>
 800f946:	4621      	mov	r1, r4
 800f948:	4628      	mov	r0, r5
 800f94a:	f000 ffad 	bl	80108a8 <_fflush_r>
 800f94e:	b988      	cbnz	r0, 800f974 <__swbuf_r+0x90>
 800f950:	4638      	mov	r0, r7
 800f952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f954:	4b0a      	ldr	r3, [pc, #40]	; (800f980 <__swbuf_r+0x9c>)
 800f956:	429c      	cmp	r4, r3
 800f958:	d101      	bne.n	800f95e <__swbuf_r+0x7a>
 800f95a:	68ac      	ldr	r4, [r5, #8]
 800f95c:	e7cf      	b.n	800f8fe <__swbuf_r+0x1a>
 800f95e:	4b09      	ldr	r3, [pc, #36]	; (800f984 <__swbuf_r+0xa0>)
 800f960:	429c      	cmp	r4, r3
 800f962:	bf08      	it	eq
 800f964:	68ec      	ldreq	r4, [r5, #12]
 800f966:	e7ca      	b.n	800f8fe <__swbuf_r+0x1a>
 800f968:	4621      	mov	r1, r4
 800f96a:	4628      	mov	r0, r5
 800f96c:	f000 f81e 	bl	800f9ac <__swsetup_r>
 800f970:	2800      	cmp	r0, #0
 800f972:	d0cb      	beq.n	800f90c <__swbuf_r+0x28>
 800f974:	f04f 37ff 	mov.w	r7, #4294967295
 800f978:	e7ea      	b.n	800f950 <__swbuf_r+0x6c>
 800f97a:	bf00      	nop
 800f97c:	08013ca0 	.word	0x08013ca0
 800f980:	08013cc0 	.word	0x08013cc0
 800f984:	08013c80 	.word	0x08013c80

0800f988 <_write_r>:
 800f988:	b538      	push	{r3, r4, r5, lr}
 800f98a:	4d07      	ldr	r5, [pc, #28]	; (800f9a8 <_write_r+0x20>)
 800f98c:	4604      	mov	r4, r0
 800f98e:	4608      	mov	r0, r1
 800f990:	4611      	mov	r1, r2
 800f992:	2200      	movs	r2, #0
 800f994:	602a      	str	r2, [r5, #0]
 800f996:	461a      	mov	r2, r3
 800f998:	f7f4 fbf1 	bl	800417e <_write>
 800f99c:	1c43      	adds	r3, r0, #1
 800f99e:	d102      	bne.n	800f9a6 <_write_r+0x1e>
 800f9a0:	682b      	ldr	r3, [r5, #0]
 800f9a2:	b103      	cbz	r3, 800f9a6 <_write_r+0x1e>
 800f9a4:	6023      	str	r3, [r4, #0]
 800f9a6:	bd38      	pop	{r3, r4, r5, pc}
 800f9a8:	20005b14 	.word	0x20005b14

0800f9ac <__swsetup_r>:
 800f9ac:	4b32      	ldr	r3, [pc, #200]	; (800fa78 <__swsetup_r+0xcc>)
 800f9ae:	b570      	push	{r4, r5, r6, lr}
 800f9b0:	681d      	ldr	r5, [r3, #0]
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	b125      	cbz	r5, 800f9c2 <__swsetup_r+0x16>
 800f9b8:	69ab      	ldr	r3, [r5, #24]
 800f9ba:	b913      	cbnz	r3, 800f9c2 <__swsetup_r+0x16>
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f7ff f86b 	bl	800ea98 <__sinit>
 800f9c2:	4b2e      	ldr	r3, [pc, #184]	; (800fa7c <__swsetup_r+0xd0>)
 800f9c4:	429c      	cmp	r4, r3
 800f9c6:	d10f      	bne.n	800f9e8 <__swsetup_r+0x3c>
 800f9c8:	686c      	ldr	r4, [r5, #4]
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9d0:	0719      	lsls	r1, r3, #28
 800f9d2:	d42c      	bmi.n	800fa2e <__swsetup_r+0x82>
 800f9d4:	06dd      	lsls	r5, r3, #27
 800f9d6:	d411      	bmi.n	800f9fc <__swsetup_r+0x50>
 800f9d8:	2309      	movs	r3, #9
 800f9da:	6033      	str	r3, [r6, #0]
 800f9dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9e0:	81a3      	strh	r3, [r4, #12]
 800f9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e6:	e03e      	b.n	800fa66 <__swsetup_r+0xba>
 800f9e8:	4b25      	ldr	r3, [pc, #148]	; (800fa80 <__swsetup_r+0xd4>)
 800f9ea:	429c      	cmp	r4, r3
 800f9ec:	d101      	bne.n	800f9f2 <__swsetup_r+0x46>
 800f9ee:	68ac      	ldr	r4, [r5, #8]
 800f9f0:	e7eb      	b.n	800f9ca <__swsetup_r+0x1e>
 800f9f2:	4b24      	ldr	r3, [pc, #144]	; (800fa84 <__swsetup_r+0xd8>)
 800f9f4:	429c      	cmp	r4, r3
 800f9f6:	bf08      	it	eq
 800f9f8:	68ec      	ldreq	r4, [r5, #12]
 800f9fa:	e7e6      	b.n	800f9ca <__swsetup_r+0x1e>
 800f9fc:	0758      	lsls	r0, r3, #29
 800f9fe:	d512      	bpl.n	800fa26 <__swsetup_r+0x7a>
 800fa00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa02:	b141      	cbz	r1, 800fa16 <__swsetup_r+0x6a>
 800fa04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa08:	4299      	cmp	r1, r3
 800fa0a:	d002      	beq.n	800fa12 <__swsetup_r+0x66>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f001 fbb1 	bl	8011174 <_free_r>
 800fa12:	2300      	movs	r3, #0
 800fa14:	6363      	str	r3, [r4, #52]	; 0x34
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa1c:	81a3      	strh	r3, [r4, #12]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6063      	str	r3, [r4, #4]
 800fa22:	6923      	ldr	r3, [r4, #16]
 800fa24:	6023      	str	r3, [r4, #0]
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	f043 0308 	orr.w	r3, r3, #8
 800fa2c:	81a3      	strh	r3, [r4, #12]
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	b94b      	cbnz	r3, 800fa46 <__swsetup_r+0x9a>
 800fa32:	89a3      	ldrh	r3, [r4, #12]
 800fa34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa3c:	d003      	beq.n	800fa46 <__swsetup_r+0x9a>
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4630      	mov	r0, r6
 800fa42:	f000 ffa9 	bl	8010998 <__smakebuf_r>
 800fa46:	89a0      	ldrh	r0, [r4, #12]
 800fa48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa4c:	f010 0301 	ands.w	r3, r0, #1
 800fa50:	d00a      	beq.n	800fa68 <__swsetup_r+0xbc>
 800fa52:	2300      	movs	r3, #0
 800fa54:	60a3      	str	r3, [r4, #8]
 800fa56:	6963      	ldr	r3, [r4, #20]
 800fa58:	425b      	negs	r3, r3
 800fa5a:	61a3      	str	r3, [r4, #24]
 800fa5c:	6923      	ldr	r3, [r4, #16]
 800fa5e:	b943      	cbnz	r3, 800fa72 <__swsetup_r+0xc6>
 800fa60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa64:	d1ba      	bne.n	800f9dc <__swsetup_r+0x30>
 800fa66:	bd70      	pop	{r4, r5, r6, pc}
 800fa68:	0781      	lsls	r1, r0, #30
 800fa6a:	bf58      	it	pl
 800fa6c:	6963      	ldrpl	r3, [r4, #20]
 800fa6e:	60a3      	str	r3, [r4, #8]
 800fa70:	e7f4      	b.n	800fa5c <__swsetup_r+0xb0>
 800fa72:	2000      	movs	r0, #0
 800fa74:	e7f7      	b.n	800fa66 <__swsetup_r+0xba>
 800fa76:	bf00      	nop
 800fa78:	200000a0 	.word	0x200000a0
 800fa7c:	08013ca0 	.word	0x08013ca0
 800fa80:	08013cc0 	.word	0x08013cc0
 800fa84:	08013c80 	.word	0x08013c80

0800fa88 <_close_r>:
 800fa88:	b538      	push	{r3, r4, r5, lr}
 800fa8a:	4d06      	ldr	r5, [pc, #24]	; (800faa4 <_close_r+0x1c>)
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	4604      	mov	r4, r0
 800fa90:	4608      	mov	r0, r1
 800fa92:	602b      	str	r3, [r5, #0]
 800fa94:	f7f4 fedb 	bl	800484e <_close>
 800fa98:	1c43      	adds	r3, r0, #1
 800fa9a:	d102      	bne.n	800faa2 <_close_r+0x1a>
 800fa9c:	682b      	ldr	r3, [r5, #0]
 800fa9e:	b103      	cbz	r3, 800faa2 <_close_r+0x1a>
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	bd38      	pop	{r3, r4, r5, pc}
 800faa4:	20005b14 	.word	0x20005b14

0800faa8 <quorem>:
 800faa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	6903      	ldr	r3, [r0, #16]
 800faae:	690c      	ldr	r4, [r1, #16]
 800fab0:	42a3      	cmp	r3, r4
 800fab2:	4607      	mov	r7, r0
 800fab4:	f2c0 8081 	blt.w	800fbba <quorem+0x112>
 800fab8:	3c01      	subs	r4, #1
 800faba:	f101 0814 	add.w	r8, r1, #20
 800fabe:	f100 0514 	add.w	r5, r0, #20
 800fac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800facc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fad0:	3301      	adds	r3, #1
 800fad2:	429a      	cmp	r2, r3
 800fad4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fad8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fadc:	fbb2 f6f3 	udiv	r6, r2, r3
 800fae0:	d331      	bcc.n	800fb46 <quorem+0x9e>
 800fae2:	f04f 0e00 	mov.w	lr, #0
 800fae6:	4640      	mov	r0, r8
 800fae8:	46ac      	mov	ip, r5
 800faea:	46f2      	mov	sl, lr
 800faec:	f850 2b04 	ldr.w	r2, [r0], #4
 800faf0:	b293      	uxth	r3, r2
 800faf2:	fb06 e303 	mla	r3, r6, r3, lr
 800faf6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	ebaa 0303 	sub.w	r3, sl, r3
 800fb00:	f8dc a000 	ldr.w	sl, [ip]
 800fb04:	0c12      	lsrs	r2, r2, #16
 800fb06:	fa13 f38a 	uxtah	r3, r3, sl
 800fb0a:	fb06 e202 	mla	r2, r6, r2, lr
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	9b00      	ldr	r3, [sp, #0]
 800fb12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb16:	b292      	uxth	r2, r2
 800fb18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb20:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb24:	4581      	cmp	r9, r0
 800fb26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb2a:	f84c 3b04 	str.w	r3, [ip], #4
 800fb2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb32:	d2db      	bcs.n	800faec <quorem+0x44>
 800fb34:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb38:	b92b      	cbnz	r3, 800fb46 <quorem+0x9e>
 800fb3a:	9b01      	ldr	r3, [sp, #4]
 800fb3c:	3b04      	subs	r3, #4
 800fb3e:	429d      	cmp	r5, r3
 800fb40:	461a      	mov	r2, r3
 800fb42:	d32e      	bcc.n	800fba2 <quorem+0xfa>
 800fb44:	613c      	str	r4, [r7, #16]
 800fb46:	4638      	mov	r0, r7
 800fb48:	f001 f9fc 	bl	8010f44 <__mcmp>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	db24      	blt.n	800fb9a <quorem+0xf2>
 800fb50:	3601      	adds	r6, #1
 800fb52:	4628      	mov	r0, r5
 800fb54:	f04f 0c00 	mov.w	ip, #0
 800fb58:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb5c:	f8d0 e000 	ldr.w	lr, [r0]
 800fb60:	b293      	uxth	r3, r2
 800fb62:	ebac 0303 	sub.w	r3, ip, r3
 800fb66:	0c12      	lsrs	r2, r2, #16
 800fb68:	fa13 f38e 	uxtah	r3, r3, lr
 800fb6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb7a:	45c1      	cmp	r9, r8
 800fb7c:	f840 3b04 	str.w	r3, [r0], #4
 800fb80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb84:	d2e8      	bcs.n	800fb58 <quorem+0xb0>
 800fb86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb8e:	b922      	cbnz	r2, 800fb9a <quorem+0xf2>
 800fb90:	3b04      	subs	r3, #4
 800fb92:	429d      	cmp	r5, r3
 800fb94:	461a      	mov	r2, r3
 800fb96:	d30a      	bcc.n	800fbae <quorem+0x106>
 800fb98:	613c      	str	r4, [r7, #16]
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	b003      	add	sp, #12
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	6812      	ldr	r2, [r2, #0]
 800fba4:	3b04      	subs	r3, #4
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	d1cc      	bne.n	800fb44 <quorem+0x9c>
 800fbaa:	3c01      	subs	r4, #1
 800fbac:	e7c7      	b.n	800fb3e <quorem+0x96>
 800fbae:	6812      	ldr	r2, [r2, #0]
 800fbb0:	3b04      	subs	r3, #4
 800fbb2:	2a00      	cmp	r2, #0
 800fbb4:	d1f0      	bne.n	800fb98 <quorem+0xf0>
 800fbb6:	3c01      	subs	r4, #1
 800fbb8:	e7eb      	b.n	800fb92 <quorem+0xea>
 800fbba:	2000      	movs	r0, #0
 800fbbc:	e7ee      	b.n	800fb9c <quorem+0xf4>
	...

0800fbc0 <_dtoa_r>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	ed2d 8b04 	vpush	{d8-d9}
 800fbc8:	ec57 6b10 	vmov	r6, r7, d0
 800fbcc:	b093      	sub	sp, #76	; 0x4c
 800fbce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbd4:	9106      	str	r1, [sp, #24]
 800fbd6:	ee10 aa10 	vmov	sl, s0
 800fbda:	4604      	mov	r4, r0
 800fbdc:	9209      	str	r2, [sp, #36]	; 0x24
 800fbde:	930c      	str	r3, [sp, #48]	; 0x30
 800fbe0:	46bb      	mov	fp, r7
 800fbe2:	b975      	cbnz	r5, 800fc02 <_dtoa_r+0x42>
 800fbe4:	2010      	movs	r0, #16
 800fbe6:	f000 ff17 	bl	8010a18 <malloc>
 800fbea:	4602      	mov	r2, r0
 800fbec:	6260      	str	r0, [r4, #36]	; 0x24
 800fbee:	b920      	cbnz	r0, 800fbfa <_dtoa_r+0x3a>
 800fbf0:	4ba7      	ldr	r3, [pc, #668]	; (800fe90 <_dtoa_r+0x2d0>)
 800fbf2:	21ea      	movs	r1, #234	; 0xea
 800fbf4:	48a7      	ldr	r0, [pc, #668]	; (800fe94 <_dtoa_r+0x2d4>)
 800fbf6:	f001 fc75 	bl	80114e4 <__assert_func>
 800fbfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fbfe:	6005      	str	r5, [r0, #0]
 800fc00:	60c5      	str	r5, [r0, #12]
 800fc02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc04:	6819      	ldr	r1, [r3, #0]
 800fc06:	b151      	cbz	r1, 800fc1e <_dtoa_r+0x5e>
 800fc08:	685a      	ldr	r2, [r3, #4]
 800fc0a:	604a      	str	r2, [r1, #4]
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	4093      	lsls	r3, r2
 800fc10:	608b      	str	r3, [r1, #8]
 800fc12:	4620      	mov	r0, r4
 800fc14:	f000 ff54 	bl	8010ac0 <_Bfree>
 800fc18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	1e3b      	subs	r3, r7, #0
 800fc20:	bfaa      	itet	ge
 800fc22:	2300      	movge	r3, #0
 800fc24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc28:	f8c8 3000 	strge.w	r3, [r8]
 800fc2c:	4b9a      	ldr	r3, [pc, #616]	; (800fe98 <_dtoa_r+0x2d8>)
 800fc2e:	bfbc      	itt	lt
 800fc30:	2201      	movlt	r2, #1
 800fc32:	f8c8 2000 	strlt.w	r2, [r8]
 800fc36:	ea33 030b 	bics.w	r3, r3, fp
 800fc3a:	d11b      	bne.n	800fc74 <_dtoa_r+0xb4>
 800fc3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc42:	6013      	str	r3, [r2, #0]
 800fc44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc48:	4333      	orrs	r3, r6
 800fc4a:	f000 8592 	beq.w	8010772 <_dtoa_r+0xbb2>
 800fc4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc50:	b963      	cbnz	r3, 800fc6c <_dtoa_r+0xac>
 800fc52:	4b92      	ldr	r3, [pc, #584]	; (800fe9c <_dtoa_r+0x2dc>)
 800fc54:	e022      	b.n	800fc9c <_dtoa_r+0xdc>
 800fc56:	4b92      	ldr	r3, [pc, #584]	; (800fea0 <_dtoa_r+0x2e0>)
 800fc58:	9301      	str	r3, [sp, #4]
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc5e:	6013      	str	r3, [r2, #0]
 800fc60:	9801      	ldr	r0, [sp, #4]
 800fc62:	b013      	add	sp, #76	; 0x4c
 800fc64:	ecbd 8b04 	vpop	{d8-d9}
 800fc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6c:	4b8b      	ldr	r3, [pc, #556]	; (800fe9c <_dtoa_r+0x2dc>)
 800fc6e:	9301      	str	r3, [sp, #4]
 800fc70:	3303      	adds	r3, #3
 800fc72:	e7f3      	b.n	800fc5c <_dtoa_r+0x9c>
 800fc74:	2200      	movs	r2, #0
 800fc76:	2300      	movs	r3, #0
 800fc78:	4650      	mov	r0, sl
 800fc7a:	4659      	mov	r1, fp
 800fc7c:	f7f0 ff24 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc80:	ec4b ab19 	vmov	d9, sl, fp
 800fc84:	4680      	mov	r8, r0
 800fc86:	b158      	cbz	r0, 800fca0 <_dtoa_r+0xe0>
 800fc88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	6013      	str	r3, [r2, #0]
 800fc8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f000 856b 	beq.w	801076c <_dtoa_r+0xbac>
 800fc96:	4883      	ldr	r0, [pc, #524]	; (800fea4 <_dtoa_r+0x2e4>)
 800fc98:	6018      	str	r0, [r3, #0]
 800fc9a:	1e43      	subs	r3, r0, #1
 800fc9c:	9301      	str	r3, [sp, #4]
 800fc9e:	e7df      	b.n	800fc60 <_dtoa_r+0xa0>
 800fca0:	ec4b ab10 	vmov	d0, sl, fp
 800fca4:	aa10      	add	r2, sp, #64	; 0x40
 800fca6:	a911      	add	r1, sp, #68	; 0x44
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f001 f9f1 	bl	8011090 <__d2b>
 800fcae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fcb2:	ee08 0a10 	vmov	s16, r0
 800fcb6:	2d00      	cmp	r5, #0
 800fcb8:	f000 8084 	beq.w	800fdc4 <_dtoa_r+0x204>
 800fcbc:	ee19 3a90 	vmov	r3, s19
 800fcc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fcc8:	4656      	mov	r6, sl
 800fcca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fcce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fcd6:	4b74      	ldr	r3, [pc, #464]	; (800fea8 <_dtoa_r+0x2e8>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4630      	mov	r0, r6
 800fcdc:	4639      	mov	r1, r7
 800fcde:	f7f0 fad3 	bl	8000288 <__aeabi_dsub>
 800fce2:	a365      	add	r3, pc, #404	; (adr r3, 800fe78 <_dtoa_r+0x2b8>)
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	f7f0 fc86 	bl	80005f8 <__aeabi_dmul>
 800fcec:	a364      	add	r3, pc, #400	; (adr r3, 800fe80 <_dtoa_r+0x2c0>)
 800fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf2:	f7f0 facb 	bl	800028c <__adddf3>
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	460f      	mov	r7, r1
 800fcfc:	f7f0 fc12 	bl	8000524 <__aeabi_i2d>
 800fd00:	a361      	add	r3, pc, #388	; (adr r3, 800fe88 <_dtoa_r+0x2c8>)
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	f7f0 fc77 	bl	80005f8 <__aeabi_dmul>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4630      	mov	r0, r6
 800fd10:	4639      	mov	r1, r7
 800fd12:	f7f0 fabb 	bl	800028c <__adddf3>
 800fd16:	4606      	mov	r6, r0
 800fd18:	460f      	mov	r7, r1
 800fd1a:	f7f0 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800fd1e:	2200      	movs	r2, #0
 800fd20:	9000      	str	r0, [sp, #0]
 800fd22:	2300      	movs	r3, #0
 800fd24:	4630      	mov	r0, r6
 800fd26:	4639      	mov	r1, r7
 800fd28:	f7f0 fed8 	bl	8000adc <__aeabi_dcmplt>
 800fd2c:	b150      	cbz	r0, 800fd44 <_dtoa_r+0x184>
 800fd2e:	9800      	ldr	r0, [sp, #0]
 800fd30:	f7f0 fbf8 	bl	8000524 <__aeabi_i2d>
 800fd34:	4632      	mov	r2, r6
 800fd36:	463b      	mov	r3, r7
 800fd38:	f7f0 fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd3c:	b910      	cbnz	r0, 800fd44 <_dtoa_r+0x184>
 800fd3e:	9b00      	ldr	r3, [sp, #0]
 800fd40:	3b01      	subs	r3, #1
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	9b00      	ldr	r3, [sp, #0]
 800fd46:	2b16      	cmp	r3, #22
 800fd48:	d85a      	bhi.n	800fe00 <_dtoa_r+0x240>
 800fd4a:	9a00      	ldr	r2, [sp, #0]
 800fd4c:	4b57      	ldr	r3, [pc, #348]	; (800feac <_dtoa_r+0x2ec>)
 800fd4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd56:	ec51 0b19 	vmov	r0, r1, d9
 800fd5a:	f7f0 febf 	bl	8000adc <__aeabi_dcmplt>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d050      	beq.n	800fe04 <_dtoa_r+0x244>
 800fd62:	9b00      	ldr	r3, [sp, #0]
 800fd64:	3b01      	subs	r3, #1
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd6e:	1b5d      	subs	r5, r3, r5
 800fd70:	1e6b      	subs	r3, r5, #1
 800fd72:	9305      	str	r3, [sp, #20]
 800fd74:	bf45      	ittet	mi
 800fd76:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd7a:	9304      	strmi	r3, [sp, #16]
 800fd7c:	2300      	movpl	r3, #0
 800fd7e:	2300      	movmi	r3, #0
 800fd80:	bf4c      	ite	mi
 800fd82:	9305      	strmi	r3, [sp, #20]
 800fd84:	9304      	strpl	r3, [sp, #16]
 800fd86:	9b00      	ldr	r3, [sp, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	db3d      	blt.n	800fe08 <_dtoa_r+0x248>
 800fd8c:	9b05      	ldr	r3, [sp, #20]
 800fd8e:	9a00      	ldr	r2, [sp, #0]
 800fd90:	920a      	str	r2, [sp, #40]	; 0x28
 800fd92:	4413      	add	r3, r2
 800fd94:	9305      	str	r3, [sp, #20]
 800fd96:	2300      	movs	r3, #0
 800fd98:	9307      	str	r3, [sp, #28]
 800fd9a:	9b06      	ldr	r3, [sp, #24]
 800fd9c:	2b09      	cmp	r3, #9
 800fd9e:	f200 8089 	bhi.w	800feb4 <_dtoa_r+0x2f4>
 800fda2:	2b05      	cmp	r3, #5
 800fda4:	bfc4      	itt	gt
 800fda6:	3b04      	subgt	r3, #4
 800fda8:	9306      	strgt	r3, [sp, #24]
 800fdaa:	9b06      	ldr	r3, [sp, #24]
 800fdac:	f1a3 0302 	sub.w	r3, r3, #2
 800fdb0:	bfcc      	ite	gt
 800fdb2:	2500      	movgt	r5, #0
 800fdb4:	2501      	movle	r5, #1
 800fdb6:	2b03      	cmp	r3, #3
 800fdb8:	f200 8087 	bhi.w	800feca <_dtoa_r+0x30a>
 800fdbc:	e8df f003 	tbb	[pc, r3]
 800fdc0:	59383a2d 	.word	0x59383a2d
 800fdc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fdc8:	441d      	add	r5, r3
 800fdca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fdce:	2b20      	cmp	r3, #32
 800fdd0:	bfc1      	itttt	gt
 800fdd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fdd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fdda:	fa0b f303 	lslgt.w	r3, fp, r3
 800fdde:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fde2:	bfda      	itte	le
 800fde4:	f1c3 0320 	rsble	r3, r3, #32
 800fde8:	fa06 f003 	lslle.w	r0, r6, r3
 800fdec:	4318      	orrgt	r0, r3
 800fdee:	f7f0 fb89 	bl	8000504 <__aeabi_ui2d>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fdfa:	3d01      	subs	r5, #1
 800fdfc:	930e      	str	r3, [sp, #56]	; 0x38
 800fdfe:	e76a      	b.n	800fcd6 <_dtoa_r+0x116>
 800fe00:	2301      	movs	r3, #1
 800fe02:	e7b2      	b.n	800fd6a <_dtoa_r+0x1aa>
 800fe04:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe06:	e7b1      	b.n	800fd6c <_dtoa_r+0x1ac>
 800fe08:	9b04      	ldr	r3, [sp, #16]
 800fe0a:	9a00      	ldr	r2, [sp, #0]
 800fe0c:	1a9b      	subs	r3, r3, r2
 800fe0e:	9304      	str	r3, [sp, #16]
 800fe10:	4253      	negs	r3, r2
 800fe12:	9307      	str	r3, [sp, #28]
 800fe14:	2300      	movs	r3, #0
 800fe16:	930a      	str	r3, [sp, #40]	; 0x28
 800fe18:	e7bf      	b.n	800fd9a <_dtoa_r+0x1da>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	9308      	str	r3, [sp, #32]
 800fe1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	dc55      	bgt.n	800fed0 <_dtoa_r+0x310>
 800fe24:	2301      	movs	r3, #1
 800fe26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe2e:	e00c      	b.n	800fe4a <_dtoa_r+0x28a>
 800fe30:	2301      	movs	r3, #1
 800fe32:	e7f3      	b.n	800fe1c <_dtoa_r+0x25c>
 800fe34:	2300      	movs	r3, #0
 800fe36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe38:	9308      	str	r3, [sp, #32]
 800fe3a:	9b00      	ldr	r3, [sp, #0]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	9302      	str	r3, [sp, #8]
 800fe40:	3301      	adds	r3, #1
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	9303      	str	r3, [sp, #12]
 800fe46:	bfb8      	it	lt
 800fe48:	2301      	movlt	r3, #1
 800fe4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	6042      	str	r2, [r0, #4]
 800fe50:	2204      	movs	r2, #4
 800fe52:	f102 0614 	add.w	r6, r2, #20
 800fe56:	429e      	cmp	r6, r3
 800fe58:	6841      	ldr	r1, [r0, #4]
 800fe5a:	d93d      	bls.n	800fed8 <_dtoa_r+0x318>
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f000 fdef 	bl	8010a40 <_Balloc>
 800fe62:	9001      	str	r0, [sp, #4]
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d13b      	bne.n	800fee0 <_dtoa_r+0x320>
 800fe68:	4b11      	ldr	r3, [pc, #68]	; (800feb0 <_dtoa_r+0x2f0>)
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe70:	e6c0      	b.n	800fbf4 <_dtoa_r+0x34>
 800fe72:	2301      	movs	r3, #1
 800fe74:	e7df      	b.n	800fe36 <_dtoa_r+0x276>
 800fe76:	bf00      	nop
 800fe78:	636f4361 	.word	0x636f4361
 800fe7c:	3fd287a7 	.word	0x3fd287a7
 800fe80:	8b60c8b3 	.word	0x8b60c8b3
 800fe84:	3fc68a28 	.word	0x3fc68a28
 800fe88:	509f79fb 	.word	0x509f79fb
 800fe8c:	3fd34413 	.word	0x3fd34413
 800fe90:	08013d25 	.word	0x08013d25
 800fe94:	08013d3c 	.word	0x08013d3c
 800fe98:	7ff00000 	.word	0x7ff00000
 800fe9c:	08013d21 	.word	0x08013d21
 800fea0:	08013d18 	.word	0x08013d18
 800fea4:	08013cf5 	.word	0x08013cf5
 800fea8:	3ff80000 	.word	0x3ff80000
 800feac:	08013e30 	.word	0x08013e30
 800feb0:	08013d97 	.word	0x08013d97
 800feb4:	2501      	movs	r5, #1
 800feb6:	2300      	movs	r3, #0
 800feb8:	9306      	str	r3, [sp, #24]
 800feba:	9508      	str	r5, [sp, #32]
 800febc:	f04f 33ff 	mov.w	r3, #4294967295
 800fec0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fec4:	2200      	movs	r2, #0
 800fec6:	2312      	movs	r3, #18
 800fec8:	e7b0      	b.n	800fe2c <_dtoa_r+0x26c>
 800feca:	2301      	movs	r3, #1
 800fecc:	9308      	str	r3, [sp, #32]
 800fece:	e7f5      	b.n	800febc <_dtoa_r+0x2fc>
 800fed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fed6:	e7b8      	b.n	800fe4a <_dtoa_r+0x28a>
 800fed8:	3101      	adds	r1, #1
 800feda:	6041      	str	r1, [r0, #4]
 800fedc:	0052      	lsls	r2, r2, #1
 800fede:	e7b8      	b.n	800fe52 <_dtoa_r+0x292>
 800fee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fee2:	9a01      	ldr	r2, [sp, #4]
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	9b03      	ldr	r3, [sp, #12]
 800fee8:	2b0e      	cmp	r3, #14
 800feea:	f200 809d 	bhi.w	8010028 <_dtoa_r+0x468>
 800feee:	2d00      	cmp	r5, #0
 800fef0:	f000 809a 	beq.w	8010028 <_dtoa_r+0x468>
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	dd32      	ble.n	800ff60 <_dtoa_r+0x3a0>
 800fefa:	4ab7      	ldr	r2, [pc, #732]	; (80101d8 <_dtoa_r+0x618>)
 800fefc:	f003 030f 	and.w	r3, r3, #15
 800ff00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff08:	9b00      	ldr	r3, [sp, #0]
 800ff0a:	05d8      	lsls	r0, r3, #23
 800ff0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ff10:	d516      	bpl.n	800ff40 <_dtoa_r+0x380>
 800ff12:	4bb2      	ldr	r3, [pc, #712]	; (80101dc <_dtoa_r+0x61c>)
 800ff14:	ec51 0b19 	vmov	r0, r1, d9
 800ff18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff1c:	f7f0 fc96 	bl	800084c <__aeabi_ddiv>
 800ff20:	f007 070f 	and.w	r7, r7, #15
 800ff24:	4682      	mov	sl, r0
 800ff26:	468b      	mov	fp, r1
 800ff28:	2503      	movs	r5, #3
 800ff2a:	4eac      	ldr	r6, [pc, #688]	; (80101dc <_dtoa_r+0x61c>)
 800ff2c:	b957      	cbnz	r7, 800ff44 <_dtoa_r+0x384>
 800ff2e:	4642      	mov	r2, r8
 800ff30:	464b      	mov	r3, r9
 800ff32:	4650      	mov	r0, sl
 800ff34:	4659      	mov	r1, fp
 800ff36:	f7f0 fc89 	bl	800084c <__aeabi_ddiv>
 800ff3a:	4682      	mov	sl, r0
 800ff3c:	468b      	mov	fp, r1
 800ff3e:	e028      	b.n	800ff92 <_dtoa_r+0x3d2>
 800ff40:	2502      	movs	r5, #2
 800ff42:	e7f2      	b.n	800ff2a <_dtoa_r+0x36a>
 800ff44:	07f9      	lsls	r1, r7, #31
 800ff46:	d508      	bpl.n	800ff5a <_dtoa_r+0x39a>
 800ff48:	4640      	mov	r0, r8
 800ff4a:	4649      	mov	r1, r9
 800ff4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff50:	f7f0 fb52 	bl	80005f8 <__aeabi_dmul>
 800ff54:	3501      	adds	r5, #1
 800ff56:	4680      	mov	r8, r0
 800ff58:	4689      	mov	r9, r1
 800ff5a:	107f      	asrs	r7, r7, #1
 800ff5c:	3608      	adds	r6, #8
 800ff5e:	e7e5      	b.n	800ff2c <_dtoa_r+0x36c>
 800ff60:	f000 809b 	beq.w	801009a <_dtoa_r+0x4da>
 800ff64:	9b00      	ldr	r3, [sp, #0]
 800ff66:	4f9d      	ldr	r7, [pc, #628]	; (80101dc <_dtoa_r+0x61c>)
 800ff68:	425e      	negs	r6, r3
 800ff6a:	4b9b      	ldr	r3, [pc, #620]	; (80101d8 <_dtoa_r+0x618>)
 800ff6c:	f006 020f 	and.w	r2, r6, #15
 800ff70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	ec51 0b19 	vmov	r0, r1, d9
 800ff7c:	f7f0 fb3c 	bl	80005f8 <__aeabi_dmul>
 800ff80:	1136      	asrs	r6, r6, #4
 800ff82:	4682      	mov	sl, r0
 800ff84:	468b      	mov	fp, r1
 800ff86:	2300      	movs	r3, #0
 800ff88:	2502      	movs	r5, #2
 800ff8a:	2e00      	cmp	r6, #0
 800ff8c:	d17a      	bne.n	8010084 <_dtoa_r+0x4c4>
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1d3      	bne.n	800ff3a <_dtoa_r+0x37a>
 800ff92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 8082 	beq.w	801009e <_dtoa_r+0x4de>
 800ff9a:	4b91      	ldr	r3, [pc, #580]	; (80101e0 <_dtoa_r+0x620>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	4650      	mov	r0, sl
 800ffa0:	4659      	mov	r1, fp
 800ffa2:	f7f0 fd9b 	bl	8000adc <__aeabi_dcmplt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d079      	beq.n	801009e <_dtoa_r+0x4de>
 800ffaa:	9b03      	ldr	r3, [sp, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d076      	beq.n	801009e <_dtoa_r+0x4de>
 800ffb0:	9b02      	ldr	r3, [sp, #8]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	dd36      	ble.n	8010024 <_dtoa_r+0x464>
 800ffb6:	9b00      	ldr	r3, [sp, #0]
 800ffb8:	4650      	mov	r0, sl
 800ffba:	4659      	mov	r1, fp
 800ffbc:	1e5f      	subs	r7, r3, #1
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	4b88      	ldr	r3, [pc, #544]	; (80101e4 <_dtoa_r+0x624>)
 800ffc2:	f7f0 fb19 	bl	80005f8 <__aeabi_dmul>
 800ffc6:	9e02      	ldr	r6, [sp, #8]
 800ffc8:	4682      	mov	sl, r0
 800ffca:	468b      	mov	fp, r1
 800ffcc:	3501      	adds	r5, #1
 800ffce:	4628      	mov	r0, r5
 800ffd0:	f7f0 faa8 	bl	8000524 <__aeabi_i2d>
 800ffd4:	4652      	mov	r2, sl
 800ffd6:	465b      	mov	r3, fp
 800ffd8:	f7f0 fb0e 	bl	80005f8 <__aeabi_dmul>
 800ffdc:	4b82      	ldr	r3, [pc, #520]	; (80101e8 <_dtoa_r+0x628>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f7f0 f954 	bl	800028c <__adddf3>
 800ffe4:	46d0      	mov	r8, sl
 800ffe6:	46d9      	mov	r9, fp
 800ffe8:	4682      	mov	sl, r0
 800ffea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ffee:	2e00      	cmp	r6, #0
 800fff0:	d158      	bne.n	80100a4 <_dtoa_r+0x4e4>
 800fff2:	4b7e      	ldr	r3, [pc, #504]	; (80101ec <_dtoa_r+0x62c>)
 800fff4:	2200      	movs	r2, #0
 800fff6:	4640      	mov	r0, r8
 800fff8:	4649      	mov	r1, r9
 800fffa:	f7f0 f945 	bl	8000288 <__aeabi_dsub>
 800fffe:	4652      	mov	r2, sl
 8010000:	465b      	mov	r3, fp
 8010002:	4680      	mov	r8, r0
 8010004:	4689      	mov	r9, r1
 8010006:	f7f0 fd87 	bl	8000b18 <__aeabi_dcmpgt>
 801000a:	2800      	cmp	r0, #0
 801000c:	f040 8295 	bne.w	801053a <_dtoa_r+0x97a>
 8010010:	4652      	mov	r2, sl
 8010012:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010016:	4640      	mov	r0, r8
 8010018:	4649      	mov	r1, r9
 801001a:	f7f0 fd5f 	bl	8000adc <__aeabi_dcmplt>
 801001e:	2800      	cmp	r0, #0
 8010020:	f040 8289 	bne.w	8010536 <_dtoa_r+0x976>
 8010024:	ec5b ab19 	vmov	sl, fp, d9
 8010028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801002a:	2b00      	cmp	r3, #0
 801002c:	f2c0 8148 	blt.w	80102c0 <_dtoa_r+0x700>
 8010030:	9a00      	ldr	r2, [sp, #0]
 8010032:	2a0e      	cmp	r2, #14
 8010034:	f300 8144 	bgt.w	80102c0 <_dtoa_r+0x700>
 8010038:	4b67      	ldr	r3, [pc, #412]	; (80101d8 <_dtoa_r+0x618>)
 801003a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801003e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010044:	2b00      	cmp	r3, #0
 8010046:	f280 80d5 	bge.w	80101f4 <_dtoa_r+0x634>
 801004a:	9b03      	ldr	r3, [sp, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	f300 80d1 	bgt.w	80101f4 <_dtoa_r+0x634>
 8010052:	f040 826f 	bne.w	8010534 <_dtoa_r+0x974>
 8010056:	4b65      	ldr	r3, [pc, #404]	; (80101ec <_dtoa_r+0x62c>)
 8010058:	2200      	movs	r2, #0
 801005a:	4640      	mov	r0, r8
 801005c:	4649      	mov	r1, r9
 801005e:	f7f0 facb 	bl	80005f8 <__aeabi_dmul>
 8010062:	4652      	mov	r2, sl
 8010064:	465b      	mov	r3, fp
 8010066:	f7f0 fd4d 	bl	8000b04 <__aeabi_dcmpge>
 801006a:	9e03      	ldr	r6, [sp, #12]
 801006c:	4637      	mov	r7, r6
 801006e:	2800      	cmp	r0, #0
 8010070:	f040 8245 	bne.w	80104fe <_dtoa_r+0x93e>
 8010074:	9d01      	ldr	r5, [sp, #4]
 8010076:	2331      	movs	r3, #49	; 0x31
 8010078:	f805 3b01 	strb.w	r3, [r5], #1
 801007c:	9b00      	ldr	r3, [sp, #0]
 801007e:	3301      	adds	r3, #1
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	e240      	b.n	8010506 <_dtoa_r+0x946>
 8010084:	07f2      	lsls	r2, r6, #31
 8010086:	d505      	bpl.n	8010094 <_dtoa_r+0x4d4>
 8010088:	e9d7 2300 	ldrd	r2, r3, [r7]
 801008c:	f7f0 fab4 	bl	80005f8 <__aeabi_dmul>
 8010090:	3501      	adds	r5, #1
 8010092:	2301      	movs	r3, #1
 8010094:	1076      	asrs	r6, r6, #1
 8010096:	3708      	adds	r7, #8
 8010098:	e777      	b.n	800ff8a <_dtoa_r+0x3ca>
 801009a:	2502      	movs	r5, #2
 801009c:	e779      	b.n	800ff92 <_dtoa_r+0x3d2>
 801009e:	9f00      	ldr	r7, [sp, #0]
 80100a0:	9e03      	ldr	r6, [sp, #12]
 80100a2:	e794      	b.n	800ffce <_dtoa_r+0x40e>
 80100a4:	9901      	ldr	r1, [sp, #4]
 80100a6:	4b4c      	ldr	r3, [pc, #304]	; (80101d8 <_dtoa_r+0x618>)
 80100a8:	4431      	add	r1, r6
 80100aa:	910d      	str	r1, [sp, #52]	; 0x34
 80100ac:	9908      	ldr	r1, [sp, #32]
 80100ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80100b6:	2900      	cmp	r1, #0
 80100b8:	d043      	beq.n	8010142 <_dtoa_r+0x582>
 80100ba:	494d      	ldr	r1, [pc, #308]	; (80101f0 <_dtoa_r+0x630>)
 80100bc:	2000      	movs	r0, #0
 80100be:	f7f0 fbc5 	bl	800084c <__aeabi_ddiv>
 80100c2:	4652      	mov	r2, sl
 80100c4:	465b      	mov	r3, fp
 80100c6:	f7f0 f8df 	bl	8000288 <__aeabi_dsub>
 80100ca:	9d01      	ldr	r5, [sp, #4]
 80100cc:	4682      	mov	sl, r0
 80100ce:	468b      	mov	fp, r1
 80100d0:	4649      	mov	r1, r9
 80100d2:	4640      	mov	r0, r8
 80100d4:	f7f0 fd40 	bl	8000b58 <__aeabi_d2iz>
 80100d8:	4606      	mov	r6, r0
 80100da:	f7f0 fa23 	bl	8000524 <__aeabi_i2d>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4640      	mov	r0, r8
 80100e4:	4649      	mov	r1, r9
 80100e6:	f7f0 f8cf 	bl	8000288 <__aeabi_dsub>
 80100ea:	3630      	adds	r6, #48	; 0x30
 80100ec:	f805 6b01 	strb.w	r6, [r5], #1
 80100f0:	4652      	mov	r2, sl
 80100f2:	465b      	mov	r3, fp
 80100f4:	4680      	mov	r8, r0
 80100f6:	4689      	mov	r9, r1
 80100f8:	f7f0 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d163      	bne.n	80101c8 <_dtoa_r+0x608>
 8010100:	4642      	mov	r2, r8
 8010102:	464b      	mov	r3, r9
 8010104:	4936      	ldr	r1, [pc, #216]	; (80101e0 <_dtoa_r+0x620>)
 8010106:	2000      	movs	r0, #0
 8010108:	f7f0 f8be 	bl	8000288 <__aeabi_dsub>
 801010c:	4652      	mov	r2, sl
 801010e:	465b      	mov	r3, fp
 8010110:	f7f0 fce4 	bl	8000adc <__aeabi_dcmplt>
 8010114:	2800      	cmp	r0, #0
 8010116:	f040 80b5 	bne.w	8010284 <_dtoa_r+0x6c4>
 801011a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801011c:	429d      	cmp	r5, r3
 801011e:	d081      	beq.n	8010024 <_dtoa_r+0x464>
 8010120:	4b30      	ldr	r3, [pc, #192]	; (80101e4 <_dtoa_r+0x624>)
 8010122:	2200      	movs	r2, #0
 8010124:	4650      	mov	r0, sl
 8010126:	4659      	mov	r1, fp
 8010128:	f7f0 fa66 	bl	80005f8 <__aeabi_dmul>
 801012c:	4b2d      	ldr	r3, [pc, #180]	; (80101e4 <_dtoa_r+0x624>)
 801012e:	4682      	mov	sl, r0
 8010130:	468b      	mov	fp, r1
 8010132:	4640      	mov	r0, r8
 8010134:	4649      	mov	r1, r9
 8010136:	2200      	movs	r2, #0
 8010138:	f7f0 fa5e 	bl	80005f8 <__aeabi_dmul>
 801013c:	4680      	mov	r8, r0
 801013e:	4689      	mov	r9, r1
 8010140:	e7c6      	b.n	80100d0 <_dtoa_r+0x510>
 8010142:	4650      	mov	r0, sl
 8010144:	4659      	mov	r1, fp
 8010146:	f7f0 fa57 	bl	80005f8 <__aeabi_dmul>
 801014a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801014c:	9d01      	ldr	r5, [sp, #4]
 801014e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010150:	4682      	mov	sl, r0
 8010152:	468b      	mov	fp, r1
 8010154:	4649      	mov	r1, r9
 8010156:	4640      	mov	r0, r8
 8010158:	f7f0 fcfe 	bl	8000b58 <__aeabi_d2iz>
 801015c:	4606      	mov	r6, r0
 801015e:	f7f0 f9e1 	bl	8000524 <__aeabi_i2d>
 8010162:	3630      	adds	r6, #48	; 0x30
 8010164:	4602      	mov	r2, r0
 8010166:	460b      	mov	r3, r1
 8010168:	4640      	mov	r0, r8
 801016a:	4649      	mov	r1, r9
 801016c:	f7f0 f88c 	bl	8000288 <__aeabi_dsub>
 8010170:	f805 6b01 	strb.w	r6, [r5], #1
 8010174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010176:	429d      	cmp	r5, r3
 8010178:	4680      	mov	r8, r0
 801017a:	4689      	mov	r9, r1
 801017c:	f04f 0200 	mov.w	r2, #0
 8010180:	d124      	bne.n	80101cc <_dtoa_r+0x60c>
 8010182:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <_dtoa_r+0x630>)
 8010184:	4650      	mov	r0, sl
 8010186:	4659      	mov	r1, fp
 8010188:	f7f0 f880 	bl	800028c <__adddf3>
 801018c:	4602      	mov	r2, r0
 801018e:	460b      	mov	r3, r1
 8010190:	4640      	mov	r0, r8
 8010192:	4649      	mov	r1, r9
 8010194:	f7f0 fcc0 	bl	8000b18 <__aeabi_dcmpgt>
 8010198:	2800      	cmp	r0, #0
 801019a:	d173      	bne.n	8010284 <_dtoa_r+0x6c4>
 801019c:	4652      	mov	r2, sl
 801019e:	465b      	mov	r3, fp
 80101a0:	4913      	ldr	r1, [pc, #76]	; (80101f0 <_dtoa_r+0x630>)
 80101a2:	2000      	movs	r0, #0
 80101a4:	f7f0 f870 	bl	8000288 <__aeabi_dsub>
 80101a8:	4602      	mov	r2, r0
 80101aa:	460b      	mov	r3, r1
 80101ac:	4640      	mov	r0, r8
 80101ae:	4649      	mov	r1, r9
 80101b0:	f7f0 fc94 	bl	8000adc <__aeabi_dcmplt>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	f43f af35 	beq.w	8010024 <_dtoa_r+0x464>
 80101ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80101bc:	1e6b      	subs	r3, r5, #1
 80101be:	930f      	str	r3, [sp, #60]	; 0x3c
 80101c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101c4:	2b30      	cmp	r3, #48	; 0x30
 80101c6:	d0f8      	beq.n	80101ba <_dtoa_r+0x5fa>
 80101c8:	9700      	str	r7, [sp, #0]
 80101ca:	e049      	b.n	8010260 <_dtoa_r+0x6a0>
 80101cc:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <_dtoa_r+0x624>)
 80101ce:	f7f0 fa13 	bl	80005f8 <__aeabi_dmul>
 80101d2:	4680      	mov	r8, r0
 80101d4:	4689      	mov	r9, r1
 80101d6:	e7bd      	b.n	8010154 <_dtoa_r+0x594>
 80101d8:	08013e30 	.word	0x08013e30
 80101dc:	08013e08 	.word	0x08013e08
 80101e0:	3ff00000 	.word	0x3ff00000
 80101e4:	40240000 	.word	0x40240000
 80101e8:	401c0000 	.word	0x401c0000
 80101ec:	40140000 	.word	0x40140000
 80101f0:	3fe00000 	.word	0x3fe00000
 80101f4:	9d01      	ldr	r5, [sp, #4]
 80101f6:	4656      	mov	r6, sl
 80101f8:	465f      	mov	r7, fp
 80101fa:	4642      	mov	r2, r8
 80101fc:	464b      	mov	r3, r9
 80101fe:	4630      	mov	r0, r6
 8010200:	4639      	mov	r1, r7
 8010202:	f7f0 fb23 	bl	800084c <__aeabi_ddiv>
 8010206:	f7f0 fca7 	bl	8000b58 <__aeabi_d2iz>
 801020a:	4682      	mov	sl, r0
 801020c:	f7f0 f98a 	bl	8000524 <__aeabi_i2d>
 8010210:	4642      	mov	r2, r8
 8010212:	464b      	mov	r3, r9
 8010214:	f7f0 f9f0 	bl	80005f8 <__aeabi_dmul>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4630      	mov	r0, r6
 801021e:	4639      	mov	r1, r7
 8010220:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010224:	f7f0 f830 	bl	8000288 <__aeabi_dsub>
 8010228:	f805 6b01 	strb.w	r6, [r5], #1
 801022c:	9e01      	ldr	r6, [sp, #4]
 801022e:	9f03      	ldr	r7, [sp, #12]
 8010230:	1bae      	subs	r6, r5, r6
 8010232:	42b7      	cmp	r7, r6
 8010234:	4602      	mov	r2, r0
 8010236:	460b      	mov	r3, r1
 8010238:	d135      	bne.n	80102a6 <_dtoa_r+0x6e6>
 801023a:	f7f0 f827 	bl	800028c <__adddf3>
 801023e:	4642      	mov	r2, r8
 8010240:	464b      	mov	r3, r9
 8010242:	4606      	mov	r6, r0
 8010244:	460f      	mov	r7, r1
 8010246:	f7f0 fc67 	bl	8000b18 <__aeabi_dcmpgt>
 801024a:	b9d0      	cbnz	r0, 8010282 <_dtoa_r+0x6c2>
 801024c:	4642      	mov	r2, r8
 801024e:	464b      	mov	r3, r9
 8010250:	4630      	mov	r0, r6
 8010252:	4639      	mov	r1, r7
 8010254:	f7f0 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8010258:	b110      	cbz	r0, 8010260 <_dtoa_r+0x6a0>
 801025a:	f01a 0f01 	tst.w	sl, #1
 801025e:	d110      	bne.n	8010282 <_dtoa_r+0x6c2>
 8010260:	4620      	mov	r0, r4
 8010262:	ee18 1a10 	vmov	r1, s16
 8010266:	f000 fc2b 	bl	8010ac0 <_Bfree>
 801026a:	2300      	movs	r3, #0
 801026c:	9800      	ldr	r0, [sp, #0]
 801026e:	702b      	strb	r3, [r5, #0]
 8010270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010272:	3001      	adds	r0, #1
 8010274:	6018      	str	r0, [r3, #0]
 8010276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010278:	2b00      	cmp	r3, #0
 801027a:	f43f acf1 	beq.w	800fc60 <_dtoa_r+0xa0>
 801027e:	601d      	str	r5, [r3, #0]
 8010280:	e4ee      	b.n	800fc60 <_dtoa_r+0xa0>
 8010282:	9f00      	ldr	r7, [sp, #0]
 8010284:	462b      	mov	r3, r5
 8010286:	461d      	mov	r5, r3
 8010288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801028c:	2a39      	cmp	r2, #57	; 0x39
 801028e:	d106      	bne.n	801029e <_dtoa_r+0x6de>
 8010290:	9a01      	ldr	r2, [sp, #4]
 8010292:	429a      	cmp	r2, r3
 8010294:	d1f7      	bne.n	8010286 <_dtoa_r+0x6c6>
 8010296:	9901      	ldr	r1, [sp, #4]
 8010298:	2230      	movs	r2, #48	; 0x30
 801029a:	3701      	adds	r7, #1
 801029c:	700a      	strb	r2, [r1, #0]
 801029e:	781a      	ldrb	r2, [r3, #0]
 80102a0:	3201      	adds	r2, #1
 80102a2:	701a      	strb	r2, [r3, #0]
 80102a4:	e790      	b.n	80101c8 <_dtoa_r+0x608>
 80102a6:	4ba6      	ldr	r3, [pc, #664]	; (8010540 <_dtoa_r+0x980>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	f7f0 f9a5 	bl	80005f8 <__aeabi_dmul>
 80102ae:	2200      	movs	r2, #0
 80102b0:	2300      	movs	r3, #0
 80102b2:	4606      	mov	r6, r0
 80102b4:	460f      	mov	r7, r1
 80102b6:	f7f0 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d09d      	beq.n	80101fa <_dtoa_r+0x63a>
 80102be:	e7cf      	b.n	8010260 <_dtoa_r+0x6a0>
 80102c0:	9a08      	ldr	r2, [sp, #32]
 80102c2:	2a00      	cmp	r2, #0
 80102c4:	f000 80d7 	beq.w	8010476 <_dtoa_r+0x8b6>
 80102c8:	9a06      	ldr	r2, [sp, #24]
 80102ca:	2a01      	cmp	r2, #1
 80102cc:	f300 80ba 	bgt.w	8010444 <_dtoa_r+0x884>
 80102d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102d2:	2a00      	cmp	r2, #0
 80102d4:	f000 80b2 	beq.w	801043c <_dtoa_r+0x87c>
 80102d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80102dc:	9e07      	ldr	r6, [sp, #28]
 80102de:	9d04      	ldr	r5, [sp, #16]
 80102e0:	9a04      	ldr	r2, [sp, #16]
 80102e2:	441a      	add	r2, r3
 80102e4:	9204      	str	r2, [sp, #16]
 80102e6:	9a05      	ldr	r2, [sp, #20]
 80102e8:	2101      	movs	r1, #1
 80102ea:	441a      	add	r2, r3
 80102ec:	4620      	mov	r0, r4
 80102ee:	9205      	str	r2, [sp, #20]
 80102f0:	f000 fc9e 	bl	8010c30 <__i2b>
 80102f4:	4607      	mov	r7, r0
 80102f6:	2d00      	cmp	r5, #0
 80102f8:	dd0c      	ble.n	8010314 <_dtoa_r+0x754>
 80102fa:	9b05      	ldr	r3, [sp, #20]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	dd09      	ble.n	8010314 <_dtoa_r+0x754>
 8010300:	42ab      	cmp	r3, r5
 8010302:	9a04      	ldr	r2, [sp, #16]
 8010304:	bfa8      	it	ge
 8010306:	462b      	movge	r3, r5
 8010308:	1ad2      	subs	r2, r2, r3
 801030a:	9204      	str	r2, [sp, #16]
 801030c:	9a05      	ldr	r2, [sp, #20]
 801030e:	1aed      	subs	r5, r5, r3
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	9305      	str	r3, [sp, #20]
 8010314:	9b07      	ldr	r3, [sp, #28]
 8010316:	b31b      	cbz	r3, 8010360 <_dtoa_r+0x7a0>
 8010318:	9b08      	ldr	r3, [sp, #32]
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 80af 	beq.w	801047e <_dtoa_r+0x8be>
 8010320:	2e00      	cmp	r6, #0
 8010322:	dd13      	ble.n	801034c <_dtoa_r+0x78c>
 8010324:	4639      	mov	r1, r7
 8010326:	4632      	mov	r2, r6
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fd41 	bl	8010db0 <__pow5mult>
 801032e:	ee18 2a10 	vmov	r2, s16
 8010332:	4601      	mov	r1, r0
 8010334:	4607      	mov	r7, r0
 8010336:	4620      	mov	r0, r4
 8010338:	f000 fc90 	bl	8010c5c <__multiply>
 801033c:	ee18 1a10 	vmov	r1, s16
 8010340:	4680      	mov	r8, r0
 8010342:	4620      	mov	r0, r4
 8010344:	f000 fbbc 	bl	8010ac0 <_Bfree>
 8010348:	ee08 8a10 	vmov	s16, r8
 801034c:	9b07      	ldr	r3, [sp, #28]
 801034e:	1b9a      	subs	r2, r3, r6
 8010350:	d006      	beq.n	8010360 <_dtoa_r+0x7a0>
 8010352:	ee18 1a10 	vmov	r1, s16
 8010356:	4620      	mov	r0, r4
 8010358:	f000 fd2a 	bl	8010db0 <__pow5mult>
 801035c:	ee08 0a10 	vmov	s16, r0
 8010360:	2101      	movs	r1, #1
 8010362:	4620      	mov	r0, r4
 8010364:	f000 fc64 	bl	8010c30 <__i2b>
 8010368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801036a:	2b00      	cmp	r3, #0
 801036c:	4606      	mov	r6, r0
 801036e:	f340 8088 	ble.w	8010482 <_dtoa_r+0x8c2>
 8010372:	461a      	mov	r2, r3
 8010374:	4601      	mov	r1, r0
 8010376:	4620      	mov	r0, r4
 8010378:	f000 fd1a 	bl	8010db0 <__pow5mult>
 801037c:	9b06      	ldr	r3, [sp, #24]
 801037e:	2b01      	cmp	r3, #1
 8010380:	4606      	mov	r6, r0
 8010382:	f340 8081 	ble.w	8010488 <_dtoa_r+0x8c8>
 8010386:	f04f 0800 	mov.w	r8, #0
 801038a:	6933      	ldr	r3, [r6, #16]
 801038c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010390:	6918      	ldr	r0, [r3, #16]
 8010392:	f000 fbfd 	bl	8010b90 <__hi0bits>
 8010396:	f1c0 0020 	rsb	r0, r0, #32
 801039a:	9b05      	ldr	r3, [sp, #20]
 801039c:	4418      	add	r0, r3
 801039e:	f010 001f 	ands.w	r0, r0, #31
 80103a2:	f000 8092 	beq.w	80104ca <_dtoa_r+0x90a>
 80103a6:	f1c0 0320 	rsb	r3, r0, #32
 80103aa:	2b04      	cmp	r3, #4
 80103ac:	f340 808a 	ble.w	80104c4 <_dtoa_r+0x904>
 80103b0:	f1c0 001c 	rsb	r0, r0, #28
 80103b4:	9b04      	ldr	r3, [sp, #16]
 80103b6:	4403      	add	r3, r0
 80103b8:	9304      	str	r3, [sp, #16]
 80103ba:	9b05      	ldr	r3, [sp, #20]
 80103bc:	4403      	add	r3, r0
 80103be:	4405      	add	r5, r0
 80103c0:	9305      	str	r3, [sp, #20]
 80103c2:	9b04      	ldr	r3, [sp, #16]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	dd07      	ble.n	80103d8 <_dtoa_r+0x818>
 80103c8:	ee18 1a10 	vmov	r1, s16
 80103cc:	461a      	mov	r2, r3
 80103ce:	4620      	mov	r0, r4
 80103d0:	f000 fd48 	bl	8010e64 <__lshift>
 80103d4:	ee08 0a10 	vmov	s16, r0
 80103d8:	9b05      	ldr	r3, [sp, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	dd05      	ble.n	80103ea <_dtoa_r+0x82a>
 80103de:	4631      	mov	r1, r6
 80103e0:	461a      	mov	r2, r3
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 fd3e 	bl	8010e64 <__lshift>
 80103e8:	4606      	mov	r6, r0
 80103ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d06e      	beq.n	80104ce <_dtoa_r+0x90e>
 80103f0:	ee18 0a10 	vmov	r0, s16
 80103f4:	4631      	mov	r1, r6
 80103f6:	f000 fda5 	bl	8010f44 <__mcmp>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	da67      	bge.n	80104ce <_dtoa_r+0x90e>
 80103fe:	9b00      	ldr	r3, [sp, #0]
 8010400:	3b01      	subs	r3, #1
 8010402:	ee18 1a10 	vmov	r1, s16
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	220a      	movs	r2, #10
 801040a:	2300      	movs	r3, #0
 801040c:	4620      	mov	r0, r4
 801040e:	f000 fb79 	bl	8010b04 <__multadd>
 8010412:	9b08      	ldr	r3, [sp, #32]
 8010414:	ee08 0a10 	vmov	s16, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	f000 81b1 	beq.w	8010780 <_dtoa_r+0xbc0>
 801041e:	2300      	movs	r3, #0
 8010420:	4639      	mov	r1, r7
 8010422:	220a      	movs	r2, #10
 8010424:	4620      	mov	r0, r4
 8010426:	f000 fb6d 	bl	8010b04 <__multadd>
 801042a:	9b02      	ldr	r3, [sp, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	4607      	mov	r7, r0
 8010430:	f300 808e 	bgt.w	8010550 <_dtoa_r+0x990>
 8010434:	9b06      	ldr	r3, [sp, #24]
 8010436:	2b02      	cmp	r3, #2
 8010438:	dc51      	bgt.n	80104de <_dtoa_r+0x91e>
 801043a:	e089      	b.n	8010550 <_dtoa_r+0x990>
 801043c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801043e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010442:	e74b      	b.n	80102dc <_dtoa_r+0x71c>
 8010444:	9b03      	ldr	r3, [sp, #12]
 8010446:	1e5e      	subs	r6, r3, #1
 8010448:	9b07      	ldr	r3, [sp, #28]
 801044a:	42b3      	cmp	r3, r6
 801044c:	bfbf      	itttt	lt
 801044e:	9b07      	ldrlt	r3, [sp, #28]
 8010450:	9607      	strlt	r6, [sp, #28]
 8010452:	1af2      	sublt	r2, r6, r3
 8010454:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010456:	bfb6      	itet	lt
 8010458:	189b      	addlt	r3, r3, r2
 801045a:	1b9e      	subge	r6, r3, r6
 801045c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801045e:	9b03      	ldr	r3, [sp, #12]
 8010460:	bfb8      	it	lt
 8010462:	2600      	movlt	r6, #0
 8010464:	2b00      	cmp	r3, #0
 8010466:	bfb7      	itett	lt
 8010468:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801046c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010470:	1a9d      	sublt	r5, r3, r2
 8010472:	2300      	movlt	r3, #0
 8010474:	e734      	b.n	80102e0 <_dtoa_r+0x720>
 8010476:	9e07      	ldr	r6, [sp, #28]
 8010478:	9d04      	ldr	r5, [sp, #16]
 801047a:	9f08      	ldr	r7, [sp, #32]
 801047c:	e73b      	b.n	80102f6 <_dtoa_r+0x736>
 801047e:	9a07      	ldr	r2, [sp, #28]
 8010480:	e767      	b.n	8010352 <_dtoa_r+0x792>
 8010482:	9b06      	ldr	r3, [sp, #24]
 8010484:	2b01      	cmp	r3, #1
 8010486:	dc18      	bgt.n	80104ba <_dtoa_r+0x8fa>
 8010488:	f1ba 0f00 	cmp.w	sl, #0
 801048c:	d115      	bne.n	80104ba <_dtoa_r+0x8fa>
 801048e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010492:	b993      	cbnz	r3, 80104ba <_dtoa_r+0x8fa>
 8010494:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010498:	0d1b      	lsrs	r3, r3, #20
 801049a:	051b      	lsls	r3, r3, #20
 801049c:	b183      	cbz	r3, 80104c0 <_dtoa_r+0x900>
 801049e:	9b04      	ldr	r3, [sp, #16]
 80104a0:	3301      	adds	r3, #1
 80104a2:	9304      	str	r3, [sp, #16]
 80104a4:	9b05      	ldr	r3, [sp, #20]
 80104a6:	3301      	adds	r3, #1
 80104a8:	9305      	str	r3, [sp, #20]
 80104aa:	f04f 0801 	mov.w	r8, #1
 80104ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f47f af6a 	bne.w	801038a <_dtoa_r+0x7ca>
 80104b6:	2001      	movs	r0, #1
 80104b8:	e76f      	b.n	801039a <_dtoa_r+0x7da>
 80104ba:	f04f 0800 	mov.w	r8, #0
 80104be:	e7f6      	b.n	80104ae <_dtoa_r+0x8ee>
 80104c0:	4698      	mov	r8, r3
 80104c2:	e7f4      	b.n	80104ae <_dtoa_r+0x8ee>
 80104c4:	f43f af7d 	beq.w	80103c2 <_dtoa_r+0x802>
 80104c8:	4618      	mov	r0, r3
 80104ca:	301c      	adds	r0, #28
 80104cc:	e772      	b.n	80103b4 <_dtoa_r+0x7f4>
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	dc37      	bgt.n	8010544 <_dtoa_r+0x984>
 80104d4:	9b06      	ldr	r3, [sp, #24]
 80104d6:	2b02      	cmp	r3, #2
 80104d8:	dd34      	ble.n	8010544 <_dtoa_r+0x984>
 80104da:	9b03      	ldr	r3, [sp, #12]
 80104dc:	9302      	str	r3, [sp, #8]
 80104de:	9b02      	ldr	r3, [sp, #8]
 80104e0:	b96b      	cbnz	r3, 80104fe <_dtoa_r+0x93e>
 80104e2:	4631      	mov	r1, r6
 80104e4:	2205      	movs	r2, #5
 80104e6:	4620      	mov	r0, r4
 80104e8:	f000 fb0c 	bl	8010b04 <__multadd>
 80104ec:	4601      	mov	r1, r0
 80104ee:	4606      	mov	r6, r0
 80104f0:	ee18 0a10 	vmov	r0, s16
 80104f4:	f000 fd26 	bl	8010f44 <__mcmp>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	f73f adbb 	bgt.w	8010074 <_dtoa_r+0x4b4>
 80104fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010500:	9d01      	ldr	r5, [sp, #4]
 8010502:	43db      	mvns	r3, r3
 8010504:	9300      	str	r3, [sp, #0]
 8010506:	f04f 0800 	mov.w	r8, #0
 801050a:	4631      	mov	r1, r6
 801050c:	4620      	mov	r0, r4
 801050e:	f000 fad7 	bl	8010ac0 <_Bfree>
 8010512:	2f00      	cmp	r7, #0
 8010514:	f43f aea4 	beq.w	8010260 <_dtoa_r+0x6a0>
 8010518:	f1b8 0f00 	cmp.w	r8, #0
 801051c:	d005      	beq.n	801052a <_dtoa_r+0x96a>
 801051e:	45b8      	cmp	r8, r7
 8010520:	d003      	beq.n	801052a <_dtoa_r+0x96a>
 8010522:	4641      	mov	r1, r8
 8010524:	4620      	mov	r0, r4
 8010526:	f000 facb 	bl	8010ac0 <_Bfree>
 801052a:	4639      	mov	r1, r7
 801052c:	4620      	mov	r0, r4
 801052e:	f000 fac7 	bl	8010ac0 <_Bfree>
 8010532:	e695      	b.n	8010260 <_dtoa_r+0x6a0>
 8010534:	2600      	movs	r6, #0
 8010536:	4637      	mov	r7, r6
 8010538:	e7e1      	b.n	80104fe <_dtoa_r+0x93e>
 801053a:	9700      	str	r7, [sp, #0]
 801053c:	4637      	mov	r7, r6
 801053e:	e599      	b.n	8010074 <_dtoa_r+0x4b4>
 8010540:	40240000 	.word	0x40240000
 8010544:	9b08      	ldr	r3, [sp, #32]
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 80ca 	beq.w	80106e0 <_dtoa_r+0xb20>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	9302      	str	r3, [sp, #8]
 8010550:	2d00      	cmp	r5, #0
 8010552:	dd05      	ble.n	8010560 <_dtoa_r+0x9a0>
 8010554:	4639      	mov	r1, r7
 8010556:	462a      	mov	r2, r5
 8010558:	4620      	mov	r0, r4
 801055a:	f000 fc83 	bl	8010e64 <__lshift>
 801055e:	4607      	mov	r7, r0
 8010560:	f1b8 0f00 	cmp.w	r8, #0
 8010564:	d05b      	beq.n	801061e <_dtoa_r+0xa5e>
 8010566:	6879      	ldr	r1, [r7, #4]
 8010568:	4620      	mov	r0, r4
 801056a:	f000 fa69 	bl	8010a40 <_Balloc>
 801056e:	4605      	mov	r5, r0
 8010570:	b928      	cbnz	r0, 801057e <_dtoa_r+0x9be>
 8010572:	4b87      	ldr	r3, [pc, #540]	; (8010790 <_dtoa_r+0xbd0>)
 8010574:	4602      	mov	r2, r0
 8010576:	f240 21ea 	movw	r1, #746	; 0x2ea
 801057a:	f7ff bb3b 	b.w	800fbf4 <_dtoa_r+0x34>
 801057e:	693a      	ldr	r2, [r7, #16]
 8010580:	3202      	adds	r2, #2
 8010582:	0092      	lsls	r2, r2, #2
 8010584:	f107 010c 	add.w	r1, r7, #12
 8010588:	300c      	adds	r0, #12
 801058a:	f7fe fb4a 	bl	800ec22 <memcpy>
 801058e:	2201      	movs	r2, #1
 8010590:	4629      	mov	r1, r5
 8010592:	4620      	mov	r0, r4
 8010594:	f000 fc66 	bl	8010e64 <__lshift>
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	f103 0901 	add.w	r9, r3, #1
 801059e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80105a2:	4413      	add	r3, r2
 80105a4:	9305      	str	r3, [sp, #20]
 80105a6:	f00a 0301 	and.w	r3, sl, #1
 80105aa:	46b8      	mov	r8, r7
 80105ac:	9304      	str	r3, [sp, #16]
 80105ae:	4607      	mov	r7, r0
 80105b0:	4631      	mov	r1, r6
 80105b2:	ee18 0a10 	vmov	r0, s16
 80105b6:	f7ff fa77 	bl	800faa8 <quorem>
 80105ba:	4641      	mov	r1, r8
 80105bc:	9002      	str	r0, [sp, #8]
 80105be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80105c2:	ee18 0a10 	vmov	r0, s16
 80105c6:	f000 fcbd 	bl	8010f44 <__mcmp>
 80105ca:	463a      	mov	r2, r7
 80105cc:	9003      	str	r0, [sp, #12]
 80105ce:	4631      	mov	r1, r6
 80105d0:	4620      	mov	r0, r4
 80105d2:	f000 fcd3 	bl	8010f7c <__mdiff>
 80105d6:	68c2      	ldr	r2, [r0, #12]
 80105d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80105dc:	4605      	mov	r5, r0
 80105de:	bb02      	cbnz	r2, 8010622 <_dtoa_r+0xa62>
 80105e0:	4601      	mov	r1, r0
 80105e2:	ee18 0a10 	vmov	r0, s16
 80105e6:	f000 fcad 	bl	8010f44 <__mcmp>
 80105ea:	4602      	mov	r2, r0
 80105ec:	4629      	mov	r1, r5
 80105ee:	4620      	mov	r0, r4
 80105f0:	9207      	str	r2, [sp, #28]
 80105f2:	f000 fa65 	bl	8010ac0 <_Bfree>
 80105f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80105fa:	ea43 0102 	orr.w	r1, r3, r2
 80105fe:	9b04      	ldr	r3, [sp, #16]
 8010600:	430b      	orrs	r3, r1
 8010602:	464d      	mov	r5, r9
 8010604:	d10f      	bne.n	8010626 <_dtoa_r+0xa66>
 8010606:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801060a:	d02a      	beq.n	8010662 <_dtoa_r+0xaa2>
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	2b00      	cmp	r3, #0
 8010610:	dd02      	ble.n	8010618 <_dtoa_r+0xa58>
 8010612:	9b02      	ldr	r3, [sp, #8]
 8010614:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010618:	f88b a000 	strb.w	sl, [fp]
 801061c:	e775      	b.n	801050a <_dtoa_r+0x94a>
 801061e:	4638      	mov	r0, r7
 8010620:	e7ba      	b.n	8010598 <_dtoa_r+0x9d8>
 8010622:	2201      	movs	r2, #1
 8010624:	e7e2      	b.n	80105ec <_dtoa_r+0xa2c>
 8010626:	9b03      	ldr	r3, [sp, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	db04      	blt.n	8010636 <_dtoa_r+0xa76>
 801062c:	9906      	ldr	r1, [sp, #24]
 801062e:	430b      	orrs	r3, r1
 8010630:	9904      	ldr	r1, [sp, #16]
 8010632:	430b      	orrs	r3, r1
 8010634:	d122      	bne.n	801067c <_dtoa_r+0xabc>
 8010636:	2a00      	cmp	r2, #0
 8010638:	ddee      	ble.n	8010618 <_dtoa_r+0xa58>
 801063a:	ee18 1a10 	vmov	r1, s16
 801063e:	2201      	movs	r2, #1
 8010640:	4620      	mov	r0, r4
 8010642:	f000 fc0f 	bl	8010e64 <__lshift>
 8010646:	4631      	mov	r1, r6
 8010648:	ee08 0a10 	vmov	s16, r0
 801064c:	f000 fc7a 	bl	8010f44 <__mcmp>
 8010650:	2800      	cmp	r0, #0
 8010652:	dc03      	bgt.n	801065c <_dtoa_r+0xa9c>
 8010654:	d1e0      	bne.n	8010618 <_dtoa_r+0xa58>
 8010656:	f01a 0f01 	tst.w	sl, #1
 801065a:	d0dd      	beq.n	8010618 <_dtoa_r+0xa58>
 801065c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010660:	d1d7      	bne.n	8010612 <_dtoa_r+0xa52>
 8010662:	2339      	movs	r3, #57	; 0x39
 8010664:	f88b 3000 	strb.w	r3, [fp]
 8010668:	462b      	mov	r3, r5
 801066a:	461d      	mov	r5, r3
 801066c:	3b01      	subs	r3, #1
 801066e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010672:	2a39      	cmp	r2, #57	; 0x39
 8010674:	d071      	beq.n	801075a <_dtoa_r+0xb9a>
 8010676:	3201      	adds	r2, #1
 8010678:	701a      	strb	r2, [r3, #0]
 801067a:	e746      	b.n	801050a <_dtoa_r+0x94a>
 801067c:	2a00      	cmp	r2, #0
 801067e:	dd07      	ble.n	8010690 <_dtoa_r+0xad0>
 8010680:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010684:	d0ed      	beq.n	8010662 <_dtoa_r+0xaa2>
 8010686:	f10a 0301 	add.w	r3, sl, #1
 801068a:	f88b 3000 	strb.w	r3, [fp]
 801068e:	e73c      	b.n	801050a <_dtoa_r+0x94a>
 8010690:	9b05      	ldr	r3, [sp, #20]
 8010692:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010696:	4599      	cmp	r9, r3
 8010698:	d047      	beq.n	801072a <_dtoa_r+0xb6a>
 801069a:	ee18 1a10 	vmov	r1, s16
 801069e:	2300      	movs	r3, #0
 80106a0:	220a      	movs	r2, #10
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 fa2e 	bl	8010b04 <__multadd>
 80106a8:	45b8      	cmp	r8, r7
 80106aa:	ee08 0a10 	vmov	s16, r0
 80106ae:	f04f 0300 	mov.w	r3, #0
 80106b2:	f04f 020a 	mov.w	r2, #10
 80106b6:	4641      	mov	r1, r8
 80106b8:	4620      	mov	r0, r4
 80106ba:	d106      	bne.n	80106ca <_dtoa_r+0xb0a>
 80106bc:	f000 fa22 	bl	8010b04 <__multadd>
 80106c0:	4680      	mov	r8, r0
 80106c2:	4607      	mov	r7, r0
 80106c4:	f109 0901 	add.w	r9, r9, #1
 80106c8:	e772      	b.n	80105b0 <_dtoa_r+0x9f0>
 80106ca:	f000 fa1b 	bl	8010b04 <__multadd>
 80106ce:	4639      	mov	r1, r7
 80106d0:	4680      	mov	r8, r0
 80106d2:	2300      	movs	r3, #0
 80106d4:	220a      	movs	r2, #10
 80106d6:	4620      	mov	r0, r4
 80106d8:	f000 fa14 	bl	8010b04 <__multadd>
 80106dc:	4607      	mov	r7, r0
 80106de:	e7f1      	b.n	80106c4 <_dtoa_r+0xb04>
 80106e0:	9b03      	ldr	r3, [sp, #12]
 80106e2:	9302      	str	r3, [sp, #8]
 80106e4:	9d01      	ldr	r5, [sp, #4]
 80106e6:	ee18 0a10 	vmov	r0, s16
 80106ea:	4631      	mov	r1, r6
 80106ec:	f7ff f9dc 	bl	800faa8 <quorem>
 80106f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80106f4:	9b01      	ldr	r3, [sp, #4]
 80106f6:	f805 ab01 	strb.w	sl, [r5], #1
 80106fa:	1aea      	subs	r2, r5, r3
 80106fc:	9b02      	ldr	r3, [sp, #8]
 80106fe:	4293      	cmp	r3, r2
 8010700:	dd09      	ble.n	8010716 <_dtoa_r+0xb56>
 8010702:	ee18 1a10 	vmov	r1, s16
 8010706:	2300      	movs	r3, #0
 8010708:	220a      	movs	r2, #10
 801070a:	4620      	mov	r0, r4
 801070c:	f000 f9fa 	bl	8010b04 <__multadd>
 8010710:	ee08 0a10 	vmov	s16, r0
 8010714:	e7e7      	b.n	80106e6 <_dtoa_r+0xb26>
 8010716:	9b02      	ldr	r3, [sp, #8]
 8010718:	2b00      	cmp	r3, #0
 801071a:	bfc8      	it	gt
 801071c:	461d      	movgt	r5, r3
 801071e:	9b01      	ldr	r3, [sp, #4]
 8010720:	bfd8      	it	le
 8010722:	2501      	movle	r5, #1
 8010724:	441d      	add	r5, r3
 8010726:	f04f 0800 	mov.w	r8, #0
 801072a:	ee18 1a10 	vmov	r1, s16
 801072e:	2201      	movs	r2, #1
 8010730:	4620      	mov	r0, r4
 8010732:	f000 fb97 	bl	8010e64 <__lshift>
 8010736:	4631      	mov	r1, r6
 8010738:	ee08 0a10 	vmov	s16, r0
 801073c:	f000 fc02 	bl	8010f44 <__mcmp>
 8010740:	2800      	cmp	r0, #0
 8010742:	dc91      	bgt.n	8010668 <_dtoa_r+0xaa8>
 8010744:	d102      	bne.n	801074c <_dtoa_r+0xb8c>
 8010746:	f01a 0f01 	tst.w	sl, #1
 801074a:	d18d      	bne.n	8010668 <_dtoa_r+0xaa8>
 801074c:	462b      	mov	r3, r5
 801074e:	461d      	mov	r5, r3
 8010750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010754:	2a30      	cmp	r2, #48	; 0x30
 8010756:	d0fa      	beq.n	801074e <_dtoa_r+0xb8e>
 8010758:	e6d7      	b.n	801050a <_dtoa_r+0x94a>
 801075a:	9a01      	ldr	r2, [sp, #4]
 801075c:	429a      	cmp	r2, r3
 801075e:	d184      	bne.n	801066a <_dtoa_r+0xaaa>
 8010760:	9b00      	ldr	r3, [sp, #0]
 8010762:	3301      	adds	r3, #1
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	2331      	movs	r3, #49	; 0x31
 8010768:	7013      	strb	r3, [r2, #0]
 801076a:	e6ce      	b.n	801050a <_dtoa_r+0x94a>
 801076c:	4b09      	ldr	r3, [pc, #36]	; (8010794 <_dtoa_r+0xbd4>)
 801076e:	f7ff ba95 	b.w	800fc9c <_dtoa_r+0xdc>
 8010772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010774:	2b00      	cmp	r3, #0
 8010776:	f47f aa6e 	bne.w	800fc56 <_dtoa_r+0x96>
 801077a:	4b07      	ldr	r3, [pc, #28]	; (8010798 <_dtoa_r+0xbd8>)
 801077c:	f7ff ba8e 	b.w	800fc9c <_dtoa_r+0xdc>
 8010780:	9b02      	ldr	r3, [sp, #8]
 8010782:	2b00      	cmp	r3, #0
 8010784:	dcae      	bgt.n	80106e4 <_dtoa_r+0xb24>
 8010786:	9b06      	ldr	r3, [sp, #24]
 8010788:	2b02      	cmp	r3, #2
 801078a:	f73f aea8 	bgt.w	80104de <_dtoa_r+0x91e>
 801078e:	e7a9      	b.n	80106e4 <_dtoa_r+0xb24>
 8010790:	08013d97 	.word	0x08013d97
 8010794:	08013cf4 	.word	0x08013cf4
 8010798:	08013d18 	.word	0x08013d18

0801079c <__sflush_r>:
 801079c:	898a      	ldrh	r2, [r1, #12]
 801079e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a2:	4605      	mov	r5, r0
 80107a4:	0710      	lsls	r0, r2, #28
 80107a6:	460c      	mov	r4, r1
 80107a8:	d458      	bmi.n	801085c <__sflush_r+0xc0>
 80107aa:	684b      	ldr	r3, [r1, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	dc05      	bgt.n	80107bc <__sflush_r+0x20>
 80107b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	dc02      	bgt.n	80107bc <__sflush_r+0x20>
 80107b6:	2000      	movs	r0, #0
 80107b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107be:	2e00      	cmp	r6, #0
 80107c0:	d0f9      	beq.n	80107b6 <__sflush_r+0x1a>
 80107c2:	2300      	movs	r3, #0
 80107c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107c8:	682f      	ldr	r7, [r5, #0]
 80107ca:	602b      	str	r3, [r5, #0]
 80107cc:	d032      	beq.n	8010834 <__sflush_r+0x98>
 80107ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	075a      	lsls	r2, r3, #29
 80107d4:	d505      	bpl.n	80107e2 <__sflush_r+0x46>
 80107d6:	6863      	ldr	r3, [r4, #4]
 80107d8:	1ac0      	subs	r0, r0, r3
 80107da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107dc:	b10b      	cbz	r3, 80107e2 <__sflush_r+0x46>
 80107de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107e0:	1ac0      	subs	r0, r0, r3
 80107e2:	2300      	movs	r3, #0
 80107e4:	4602      	mov	r2, r0
 80107e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107e8:	6a21      	ldr	r1, [r4, #32]
 80107ea:	4628      	mov	r0, r5
 80107ec:	47b0      	blx	r6
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	d106      	bne.n	8010802 <__sflush_r+0x66>
 80107f4:	6829      	ldr	r1, [r5, #0]
 80107f6:	291d      	cmp	r1, #29
 80107f8:	d82c      	bhi.n	8010854 <__sflush_r+0xb8>
 80107fa:	4a2a      	ldr	r2, [pc, #168]	; (80108a4 <__sflush_r+0x108>)
 80107fc:	40ca      	lsrs	r2, r1
 80107fe:	07d6      	lsls	r6, r2, #31
 8010800:	d528      	bpl.n	8010854 <__sflush_r+0xb8>
 8010802:	2200      	movs	r2, #0
 8010804:	6062      	str	r2, [r4, #4]
 8010806:	04d9      	lsls	r1, r3, #19
 8010808:	6922      	ldr	r2, [r4, #16]
 801080a:	6022      	str	r2, [r4, #0]
 801080c:	d504      	bpl.n	8010818 <__sflush_r+0x7c>
 801080e:	1c42      	adds	r2, r0, #1
 8010810:	d101      	bne.n	8010816 <__sflush_r+0x7a>
 8010812:	682b      	ldr	r3, [r5, #0]
 8010814:	b903      	cbnz	r3, 8010818 <__sflush_r+0x7c>
 8010816:	6560      	str	r0, [r4, #84]	; 0x54
 8010818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801081a:	602f      	str	r7, [r5, #0]
 801081c:	2900      	cmp	r1, #0
 801081e:	d0ca      	beq.n	80107b6 <__sflush_r+0x1a>
 8010820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010824:	4299      	cmp	r1, r3
 8010826:	d002      	beq.n	801082e <__sflush_r+0x92>
 8010828:	4628      	mov	r0, r5
 801082a:	f000 fca3 	bl	8011174 <_free_r>
 801082e:	2000      	movs	r0, #0
 8010830:	6360      	str	r0, [r4, #52]	; 0x34
 8010832:	e7c1      	b.n	80107b8 <__sflush_r+0x1c>
 8010834:	6a21      	ldr	r1, [r4, #32]
 8010836:	2301      	movs	r3, #1
 8010838:	4628      	mov	r0, r5
 801083a:	47b0      	blx	r6
 801083c:	1c41      	adds	r1, r0, #1
 801083e:	d1c7      	bne.n	80107d0 <__sflush_r+0x34>
 8010840:	682b      	ldr	r3, [r5, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d0c4      	beq.n	80107d0 <__sflush_r+0x34>
 8010846:	2b1d      	cmp	r3, #29
 8010848:	d001      	beq.n	801084e <__sflush_r+0xb2>
 801084a:	2b16      	cmp	r3, #22
 801084c:	d101      	bne.n	8010852 <__sflush_r+0xb6>
 801084e:	602f      	str	r7, [r5, #0]
 8010850:	e7b1      	b.n	80107b6 <__sflush_r+0x1a>
 8010852:	89a3      	ldrh	r3, [r4, #12]
 8010854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010858:	81a3      	strh	r3, [r4, #12]
 801085a:	e7ad      	b.n	80107b8 <__sflush_r+0x1c>
 801085c:	690f      	ldr	r7, [r1, #16]
 801085e:	2f00      	cmp	r7, #0
 8010860:	d0a9      	beq.n	80107b6 <__sflush_r+0x1a>
 8010862:	0793      	lsls	r3, r2, #30
 8010864:	680e      	ldr	r6, [r1, #0]
 8010866:	bf08      	it	eq
 8010868:	694b      	ldreq	r3, [r1, #20]
 801086a:	600f      	str	r7, [r1, #0]
 801086c:	bf18      	it	ne
 801086e:	2300      	movne	r3, #0
 8010870:	eba6 0807 	sub.w	r8, r6, r7
 8010874:	608b      	str	r3, [r1, #8]
 8010876:	f1b8 0f00 	cmp.w	r8, #0
 801087a:	dd9c      	ble.n	80107b6 <__sflush_r+0x1a>
 801087c:	6a21      	ldr	r1, [r4, #32]
 801087e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010880:	4643      	mov	r3, r8
 8010882:	463a      	mov	r2, r7
 8010884:	4628      	mov	r0, r5
 8010886:	47b0      	blx	r6
 8010888:	2800      	cmp	r0, #0
 801088a:	dc06      	bgt.n	801089a <__sflush_r+0xfe>
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010892:	81a3      	strh	r3, [r4, #12]
 8010894:	f04f 30ff 	mov.w	r0, #4294967295
 8010898:	e78e      	b.n	80107b8 <__sflush_r+0x1c>
 801089a:	4407      	add	r7, r0
 801089c:	eba8 0800 	sub.w	r8, r8, r0
 80108a0:	e7e9      	b.n	8010876 <__sflush_r+0xda>
 80108a2:	bf00      	nop
 80108a4:	20400001 	.word	0x20400001

080108a8 <_fflush_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	690b      	ldr	r3, [r1, #16]
 80108ac:	4605      	mov	r5, r0
 80108ae:	460c      	mov	r4, r1
 80108b0:	b913      	cbnz	r3, 80108b8 <_fflush_r+0x10>
 80108b2:	2500      	movs	r5, #0
 80108b4:	4628      	mov	r0, r5
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	b118      	cbz	r0, 80108c2 <_fflush_r+0x1a>
 80108ba:	6983      	ldr	r3, [r0, #24]
 80108bc:	b90b      	cbnz	r3, 80108c2 <_fflush_r+0x1a>
 80108be:	f7fe f8eb 	bl	800ea98 <__sinit>
 80108c2:	4b14      	ldr	r3, [pc, #80]	; (8010914 <_fflush_r+0x6c>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	d11b      	bne.n	8010900 <_fflush_r+0x58>
 80108c8:	686c      	ldr	r4, [r5, #4]
 80108ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d0ef      	beq.n	80108b2 <_fflush_r+0xa>
 80108d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108d4:	07d0      	lsls	r0, r2, #31
 80108d6:	d404      	bmi.n	80108e2 <_fflush_r+0x3a>
 80108d8:	0599      	lsls	r1, r3, #22
 80108da:	d402      	bmi.n	80108e2 <_fflush_r+0x3a>
 80108dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108de:	f7fe f99e 	bl	800ec1e <__retarget_lock_acquire_recursive>
 80108e2:	4628      	mov	r0, r5
 80108e4:	4621      	mov	r1, r4
 80108e6:	f7ff ff59 	bl	801079c <__sflush_r>
 80108ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108ec:	07da      	lsls	r2, r3, #31
 80108ee:	4605      	mov	r5, r0
 80108f0:	d4e0      	bmi.n	80108b4 <_fflush_r+0xc>
 80108f2:	89a3      	ldrh	r3, [r4, #12]
 80108f4:	059b      	lsls	r3, r3, #22
 80108f6:	d4dd      	bmi.n	80108b4 <_fflush_r+0xc>
 80108f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108fa:	f7fe f991 	bl	800ec20 <__retarget_lock_release_recursive>
 80108fe:	e7d9      	b.n	80108b4 <_fflush_r+0xc>
 8010900:	4b05      	ldr	r3, [pc, #20]	; (8010918 <_fflush_r+0x70>)
 8010902:	429c      	cmp	r4, r3
 8010904:	d101      	bne.n	801090a <_fflush_r+0x62>
 8010906:	68ac      	ldr	r4, [r5, #8]
 8010908:	e7df      	b.n	80108ca <_fflush_r+0x22>
 801090a:	4b04      	ldr	r3, [pc, #16]	; (801091c <_fflush_r+0x74>)
 801090c:	429c      	cmp	r4, r3
 801090e:	bf08      	it	eq
 8010910:	68ec      	ldreq	r4, [r5, #12]
 8010912:	e7da      	b.n	80108ca <_fflush_r+0x22>
 8010914:	08013ca0 	.word	0x08013ca0
 8010918:	08013cc0 	.word	0x08013cc0
 801091c:	08013c80 	.word	0x08013c80

08010920 <_localeconv_r>:
 8010920:	4800      	ldr	r0, [pc, #0]	; (8010924 <_localeconv_r+0x4>)
 8010922:	4770      	bx	lr
 8010924:	200001f4 	.word	0x200001f4

08010928 <_lseek_r>:
 8010928:	b538      	push	{r3, r4, r5, lr}
 801092a:	4d07      	ldr	r5, [pc, #28]	; (8010948 <_lseek_r+0x20>)
 801092c:	4604      	mov	r4, r0
 801092e:	4608      	mov	r0, r1
 8010930:	4611      	mov	r1, r2
 8010932:	2200      	movs	r2, #0
 8010934:	602a      	str	r2, [r5, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	f7f3 ffb0 	bl	800489c <_lseek>
 801093c:	1c43      	adds	r3, r0, #1
 801093e:	d102      	bne.n	8010946 <_lseek_r+0x1e>
 8010940:	682b      	ldr	r3, [r5, #0]
 8010942:	b103      	cbz	r3, 8010946 <_lseek_r+0x1e>
 8010944:	6023      	str	r3, [r4, #0]
 8010946:	bd38      	pop	{r3, r4, r5, pc}
 8010948:	20005b14 	.word	0x20005b14

0801094c <__swhatbuf_r>:
 801094c:	b570      	push	{r4, r5, r6, lr}
 801094e:	460e      	mov	r6, r1
 8010950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010954:	2900      	cmp	r1, #0
 8010956:	b096      	sub	sp, #88	; 0x58
 8010958:	4614      	mov	r4, r2
 801095a:	461d      	mov	r5, r3
 801095c:	da08      	bge.n	8010970 <__swhatbuf_r+0x24>
 801095e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	602a      	str	r2, [r5, #0]
 8010966:	061a      	lsls	r2, r3, #24
 8010968:	d410      	bmi.n	801098c <__swhatbuf_r+0x40>
 801096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801096e:	e00e      	b.n	801098e <__swhatbuf_r+0x42>
 8010970:	466a      	mov	r2, sp
 8010972:	f000 fde7 	bl	8011544 <_fstat_r>
 8010976:	2800      	cmp	r0, #0
 8010978:	dbf1      	blt.n	801095e <__swhatbuf_r+0x12>
 801097a:	9a01      	ldr	r2, [sp, #4]
 801097c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010984:	425a      	negs	r2, r3
 8010986:	415a      	adcs	r2, r3
 8010988:	602a      	str	r2, [r5, #0]
 801098a:	e7ee      	b.n	801096a <__swhatbuf_r+0x1e>
 801098c:	2340      	movs	r3, #64	; 0x40
 801098e:	2000      	movs	r0, #0
 8010990:	6023      	str	r3, [r4, #0]
 8010992:	b016      	add	sp, #88	; 0x58
 8010994:	bd70      	pop	{r4, r5, r6, pc}
	...

08010998 <__smakebuf_r>:
 8010998:	898b      	ldrh	r3, [r1, #12]
 801099a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801099c:	079d      	lsls	r5, r3, #30
 801099e:	4606      	mov	r6, r0
 80109a0:	460c      	mov	r4, r1
 80109a2:	d507      	bpl.n	80109b4 <__smakebuf_r+0x1c>
 80109a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80109a8:	6023      	str	r3, [r4, #0]
 80109aa:	6123      	str	r3, [r4, #16]
 80109ac:	2301      	movs	r3, #1
 80109ae:	6163      	str	r3, [r4, #20]
 80109b0:	b002      	add	sp, #8
 80109b2:	bd70      	pop	{r4, r5, r6, pc}
 80109b4:	ab01      	add	r3, sp, #4
 80109b6:	466a      	mov	r2, sp
 80109b8:	f7ff ffc8 	bl	801094c <__swhatbuf_r>
 80109bc:	9900      	ldr	r1, [sp, #0]
 80109be:	4605      	mov	r5, r0
 80109c0:	4630      	mov	r0, r6
 80109c2:	f7fe f965 	bl	800ec90 <_malloc_r>
 80109c6:	b948      	cbnz	r0, 80109dc <__smakebuf_r+0x44>
 80109c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109cc:	059a      	lsls	r2, r3, #22
 80109ce:	d4ef      	bmi.n	80109b0 <__smakebuf_r+0x18>
 80109d0:	f023 0303 	bic.w	r3, r3, #3
 80109d4:	f043 0302 	orr.w	r3, r3, #2
 80109d8:	81a3      	strh	r3, [r4, #12]
 80109da:	e7e3      	b.n	80109a4 <__smakebuf_r+0xc>
 80109dc:	4b0d      	ldr	r3, [pc, #52]	; (8010a14 <__smakebuf_r+0x7c>)
 80109de:	62b3      	str	r3, [r6, #40]	; 0x28
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	6020      	str	r0, [r4, #0]
 80109e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109e8:	81a3      	strh	r3, [r4, #12]
 80109ea:	9b00      	ldr	r3, [sp, #0]
 80109ec:	6163      	str	r3, [r4, #20]
 80109ee:	9b01      	ldr	r3, [sp, #4]
 80109f0:	6120      	str	r0, [r4, #16]
 80109f2:	b15b      	cbz	r3, 8010a0c <__smakebuf_r+0x74>
 80109f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109f8:	4630      	mov	r0, r6
 80109fa:	f000 fdb5 	bl	8011568 <_isatty_r>
 80109fe:	b128      	cbz	r0, 8010a0c <__smakebuf_r+0x74>
 8010a00:	89a3      	ldrh	r3, [r4, #12]
 8010a02:	f023 0303 	bic.w	r3, r3, #3
 8010a06:	f043 0301 	orr.w	r3, r3, #1
 8010a0a:	81a3      	strh	r3, [r4, #12]
 8010a0c:	89a0      	ldrh	r0, [r4, #12]
 8010a0e:	4305      	orrs	r5, r0
 8010a10:	81a5      	strh	r5, [r4, #12]
 8010a12:	e7cd      	b.n	80109b0 <__smakebuf_r+0x18>
 8010a14:	0800ea31 	.word	0x0800ea31

08010a18 <malloc>:
 8010a18:	4b02      	ldr	r3, [pc, #8]	; (8010a24 <malloc+0xc>)
 8010a1a:	4601      	mov	r1, r0
 8010a1c:	6818      	ldr	r0, [r3, #0]
 8010a1e:	f7fe b937 	b.w	800ec90 <_malloc_r>
 8010a22:	bf00      	nop
 8010a24:	200000a0 	.word	0x200000a0

08010a28 <__malloc_lock>:
 8010a28:	4801      	ldr	r0, [pc, #4]	; (8010a30 <__malloc_lock+0x8>)
 8010a2a:	f7fe b8f8 	b.w	800ec1e <__retarget_lock_acquire_recursive>
 8010a2e:	bf00      	nop
 8010a30:	20005b08 	.word	0x20005b08

08010a34 <__malloc_unlock>:
 8010a34:	4801      	ldr	r0, [pc, #4]	; (8010a3c <__malloc_unlock+0x8>)
 8010a36:	f7fe b8f3 	b.w	800ec20 <__retarget_lock_release_recursive>
 8010a3a:	bf00      	nop
 8010a3c:	20005b08 	.word	0x20005b08

08010a40 <_Balloc>:
 8010a40:	b570      	push	{r4, r5, r6, lr}
 8010a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a44:	4604      	mov	r4, r0
 8010a46:	460d      	mov	r5, r1
 8010a48:	b976      	cbnz	r6, 8010a68 <_Balloc+0x28>
 8010a4a:	2010      	movs	r0, #16
 8010a4c:	f7ff ffe4 	bl	8010a18 <malloc>
 8010a50:	4602      	mov	r2, r0
 8010a52:	6260      	str	r0, [r4, #36]	; 0x24
 8010a54:	b920      	cbnz	r0, 8010a60 <_Balloc+0x20>
 8010a56:	4b18      	ldr	r3, [pc, #96]	; (8010ab8 <_Balloc+0x78>)
 8010a58:	4818      	ldr	r0, [pc, #96]	; (8010abc <_Balloc+0x7c>)
 8010a5a:	2166      	movs	r1, #102	; 0x66
 8010a5c:	f000 fd42 	bl	80114e4 <__assert_func>
 8010a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a64:	6006      	str	r6, [r0, #0]
 8010a66:	60c6      	str	r6, [r0, #12]
 8010a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a6a:	68f3      	ldr	r3, [r6, #12]
 8010a6c:	b183      	cbz	r3, 8010a90 <_Balloc+0x50>
 8010a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a76:	b9b8      	cbnz	r0, 8010aa8 <_Balloc+0x68>
 8010a78:	2101      	movs	r1, #1
 8010a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010a7e:	1d72      	adds	r2, r6, #5
 8010a80:	0092      	lsls	r2, r2, #2
 8010a82:	4620      	mov	r0, r4
 8010a84:	f000 fb60 	bl	8011148 <_calloc_r>
 8010a88:	b160      	cbz	r0, 8010aa4 <_Balloc+0x64>
 8010a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a8e:	e00e      	b.n	8010aae <_Balloc+0x6e>
 8010a90:	2221      	movs	r2, #33	; 0x21
 8010a92:	2104      	movs	r1, #4
 8010a94:	4620      	mov	r0, r4
 8010a96:	f000 fb57 	bl	8011148 <_calloc_r>
 8010a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a9c:	60f0      	str	r0, [r6, #12]
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1e4      	bne.n	8010a6e <_Balloc+0x2e>
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}
 8010aa8:	6802      	ldr	r2, [r0, #0]
 8010aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ab4:	e7f7      	b.n	8010aa6 <_Balloc+0x66>
 8010ab6:	bf00      	nop
 8010ab8:	08013d25 	.word	0x08013d25
 8010abc:	08013da8 	.word	0x08013da8

08010ac0 <_Bfree>:
 8010ac0:	b570      	push	{r4, r5, r6, lr}
 8010ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ac4:	4605      	mov	r5, r0
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	b976      	cbnz	r6, 8010ae8 <_Bfree+0x28>
 8010aca:	2010      	movs	r0, #16
 8010acc:	f7ff ffa4 	bl	8010a18 <malloc>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8010ad4:	b920      	cbnz	r0, 8010ae0 <_Bfree+0x20>
 8010ad6:	4b09      	ldr	r3, [pc, #36]	; (8010afc <_Bfree+0x3c>)
 8010ad8:	4809      	ldr	r0, [pc, #36]	; (8010b00 <_Bfree+0x40>)
 8010ada:	218a      	movs	r1, #138	; 0x8a
 8010adc:	f000 fd02 	bl	80114e4 <__assert_func>
 8010ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ae4:	6006      	str	r6, [r0, #0]
 8010ae6:	60c6      	str	r6, [r0, #12]
 8010ae8:	b13c      	cbz	r4, 8010afa <_Bfree+0x3a>
 8010aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010aec:	6862      	ldr	r2, [r4, #4]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010af4:	6021      	str	r1, [r4, #0]
 8010af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
 8010afc:	08013d25 	.word	0x08013d25
 8010b00:	08013da8 	.word	0x08013da8

08010b04 <__multadd>:
 8010b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	690d      	ldr	r5, [r1, #16]
 8010b0a:	4607      	mov	r7, r0
 8010b0c:	460c      	mov	r4, r1
 8010b0e:	461e      	mov	r6, r3
 8010b10:	f101 0c14 	add.w	ip, r1, #20
 8010b14:	2000      	movs	r0, #0
 8010b16:	f8dc 3000 	ldr.w	r3, [ip]
 8010b1a:	b299      	uxth	r1, r3
 8010b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8010b20:	0c1e      	lsrs	r6, r3, #16
 8010b22:	0c0b      	lsrs	r3, r1, #16
 8010b24:	fb02 3306 	mla	r3, r2, r6, r3
 8010b28:	b289      	uxth	r1, r1
 8010b2a:	3001      	adds	r0, #1
 8010b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b30:	4285      	cmp	r5, r0
 8010b32:	f84c 1b04 	str.w	r1, [ip], #4
 8010b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b3a:	dcec      	bgt.n	8010b16 <__multadd+0x12>
 8010b3c:	b30e      	cbz	r6, 8010b82 <__multadd+0x7e>
 8010b3e:	68a3      	ldr	r3, [r4, #8]
 8010b40:	42ab      	cmp	r3, r5
 8010b42:	dc19      	bgt.n	8010b78 <__multadd+0x74>
 8010b44:	6861      	ldr	r1, [r4, #4]
 8010b46:	4638      	mov	r0, r7
 8010b48:	3101      	adds	r1, #1
 8010b4a:	f7ff ff79 	bl	8010a40 <_Balloc>
 8010b4e:	4680      	mov	r8, r0
 8010b50:	b928      	cbnz	r0, 8010b5e <__multadd+0x5a>
 8010b52:	4602      	mov	r2, r0
 8010b54:	4b0c      	ldr	r3, [pc, #48]	; (8010b88 <__multadd+0x84>)
 8010b56:	480d      	ldr	r0, [pc, #52]	; (8010b8c <__multadd+0x88>)
 8010b58:	21b5      	movs	r1, #181	; 0xb5
 8010b5a:	f000 fcc3 	bl	80114e4 <__assert_func>
 8010b5e:	6922      	ldr	r2, [r4, #16]
 8010b60:	3202      	adds	r2, #2
 8010b62:	f104 010c 	add.w	r1, r4, #12
 8010b66:	0092      	lsls	r2, r2, #2
 8010b68:	300c      	adds	r0, #12
 8010b6a:	f7fe f85a 	bl	800ec22 <memcpy>
 8010b6e:	4621      	mov	r1, r4
 8010b70:	4638      	mov	r0, r7
 8010b72:	f7ff ffa5 	bl	8010ac0 <_Bfree>
 8010b76:	4644      	mov	r4, r8
 8010b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b7c:	3501      	adds	r5, #1
 8010b7e:	615e      	str	r6, [r3, #20]
 8010b80:	6125      	str	r5, [r4, #16]
 8010b82:	4620      	mov	r0, r4
 8010b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b88:	08013d97 	.word	0x08013d97
 8010b8c:	08013da8 	.word	0x08013da8

08010b90 <__hi0bits>:
 8010b90:	0c03      	lsrs	r3, r0, #16
 8010b92:	041b      	lsls	r3, r3, #16
 8010b94:	b9d3      	cbnz	r3, 8010bcc <__hi0bits+0x3c>
 8010b96:	0400      	lsls	r0, r0, #16
 8010b98:	2310      	movs	r3, #16
 8010b9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b9e:	bf04      	itt	eq
 8010ba0:	0200      	lsleq	r0, r0, #8
 8010ba2:	3308      	addeq	r3, #8
 8010ba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ba8:	bf04      	itt	eq
 8010baa:	0100      	lsleq	r0, r0, #4
 8010bac:	3304      	addeq	r3, #4
 8010bae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bb2:	bf04      	itt	eq
 8010bb4:	0080      	lsleq	r0, r0, #2
 8010bb6:	3302      	addeq	r3, #2
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	db05      	blt.n	8010bc8 <__hi0bits+0x38>
 8010bbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010bc0:	f103 0301 	add.w	r3, r3, #1
 8010bc4:	bf08      	it	eq
 8010bc6:	2320      	moveq	r3, #32
 8010bc8:	4618      	mov	r0, r3
 8010bca:	4770      	bx	lr
 8010bcc:	2300      	movs	r3, #0
 8010bce:	e7e4      	b.n	8010b9a <__hi0bits+0xa>

08010bd0 <__lo0bits>:
 8010bd0:	6803      	ldr	r3, [r0, #0]
 8010bd2:	f013 0207 	ands.w	r2, r3, #7
 8010bd6:	4601      	mov	r1, r0
 8010bd8:	d00b      	beq.n	8010bf2 <__lo0bits+0x22>
 8010bda:	07da      	lsls	r2, r3, #31
 8010bdc:	d423      	bmi.n	8010c26 <__lo0bits+0x56>
 8010bde:	0798      	lsls	r0, r3, #30
 8010be0:	bf49      	itett	mi
 8010be2:	085b      	lsrmi	r3, r3, #1
 8010be4:	089b      	lsrpl	r3, r3, #2
 8010be6:	2001      	movmi	r0, #1
 8010be8:	600b      	strmi	r3, [r1, #0]
 8010bea:	bf5c      	itt	pl
 8010bec:	600b      	strpl	r3, [r1, #0]
 8010bee:	2002      	movpl	r0, #2
 8010bf0:	4770      	bx	lr
 8010bf2:	b298      	uxth	r0, r3
 8010bf4:	b9a8      	cbnz	r0, 8010c22 <__lo0bits+0x52>
 8010bf6:	0c1b      	lsrs	r3, r3, #16
 8010bf8:	2010      	movs	r0, #16
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	b90a      	cbnz	r2, 8010c02 <__lo0bits+0x32>
 8010bfe:	3008      	adds	r0, #8
 8010c00:	0a1b      	lsrs	r3, r3, #8
 8010c02:	071a      	lsls	r2, r3, #28
 8010c04:	bf04      	itt	eq
 8010c06:	091b      	lsreq	r3, r3, #4
 8010c08:	3004      	addeq	r0, #4
 8010c0a:	079a      	lsls	r2, r3, #30
 8010c0c:	bf04      	itt	eq
 8010c0e:	089b      	lsreq	r3, r3, #2
 8010c10:	3002      	addeq	r0, #2
 8010c12:	07da      	lsls	r2, r3, #31
 8010c14:	d403      	bmi.n	8010c1e <__lo0bits+0x4e>
 8010c16:	085b      	lsrs	r3, r3, #1
 8010c18:	f100 0001 	add.w	r0, r0, #1
 8010c1c:	d005      	beq.n	8010c2a <__lo0bits+0x5a>
 8010c1e:	600b      	str	r3, [r1, #0]
 8010c20:	4770      	bx	lr
 8010c22:	4610      	mov	r0, r2
 8010c24:	e7e9      	b.n	8010bfa <__lo0bits+0x2a>
 8010c26:	2000      	movs	r0, #0
 8010c28:	4770      	bx	lr
 8010c2a:	2020      	movs	r0, #32
 8010c2c:	4770      	bx	lr
	...

08010c30 <__i2b>:
 8010c30:	b510      	push	{r4, lr}
 8010c32:	460c      	mov	r4, r1
 8010c34:	2101      	movs	r1, #1
 8010c36:	f7ff ff03 	bl	8010a40 <_Balloc>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	b928      	cbnz	r0, 8010c4a <__i2b+0x1a>
 8010c3e:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <__i2b+0x24>)
 8010c40:	4805      	ldr	r0, [pc, #20]	; (8010c58 <__i2b+0x28>)
 8010c42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c46:	f000 fc4d 	bl	80114e4 <__assert_func>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	6144      	str	r4, [r0, #20]
 8010c4e:	6103      	str	r3, [r0, #16]
 8010c50:	bd10      	pop	{r4, pc}
 8010c52:	bf00      	nop
 8010c54:	08013d97 	.word	0x08013d97
 8010c58:	08013da8 	.word	0x08013da8

08010c5c <__multiply>:
 8010c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c60:	4691      	mov	r9, r2
 8010c62:	690a      	ldr	r2, [r1, #16]
 8010c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	bfb8      	it	lt
 8010c6c:	460b      	movlt	r3, r1
 8010c6e:	460c      	mov	r4, r1
 8010c70:	bfbc      	itt	lt
 8010c72:	464c      	movlt	r4, r9
 8010c74:	4699      	movlt	r9, r3
 8010c76:	6927      	ldr	r7, [r4, #16]
 8010c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c7c:	68a3      	ldr	r3, [r4, #8]
 8010c7e:	6861      	ldr	r1, [r4, #4]
 8010c80:	eb07 060a 	add.w	r6, r7, sl
 8010c84:	42b3      	cmp	r3, r6
 8010c86:	b085      	sub	sp, #20
 8010c88:	bfb8      	it	lt
 8010c8a:	3101      	addlt	r1, #1
 8010c8c:	f7ff fed8 	bl	8010a40 <_Balloc>
 8010c90:	b930      	cbnz	r0, 8010ca0 <__multiply+0x44>
 8010c92:	4602      	mov	r2, r0
 8010c94:	4b44      	ldr	r3, [pc, #272]	; (8010da8 <__multiply+0x14c>)
 8010c96:	4845      	ldr	r0, [pc, #276]	; (8010dac <__multiply+0x150>)
 8010c98:	f240 115d 	movw	r1, #349	; 0x15d
 8010c9c:	f000 fc22 	bl	80114e4 <__assert_func>
 8010ca0:	f100 0514 	add.w	r5, r0, #20
 8010ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010ca8:	462b      	mov	r3, r5
 8010caa:	2200      	movs	r2, #0
 8010cac:	4543      	cmp	r3, r8
 8010cae:	d321      	bcc.n	8010cf4 <__multiply+0x98>
 8010cb0:	f104 0314 	add.w	r3, r4, #20
 8010cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010cb8:	f109 0314 	add.w	r3, r9, #20
 8010cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010cc0:	9202      	str	r2, [sp, #8]
 8010cc2:	1b3a      	subs	r2, r7, r4
 8010cc4:	3a15      	subs	r2, #21
 8010cc6:	f022 0203 	bic.w	r2, r2, #3
 8010cca:	3204      	adds	r2, #4
 8010ccc:	f104 0115 	add.w	r1, r4, #21
 8010cd0:	428f      	cmp	r7, r1
 8010cd2:	bf38      	it	cc
 8010cd4:	2204      	movcc	r2, #4
 8010cd6:	9201      	str	r2, [sp, #4]
 8010cd8:	9a02      	ldr	r2, [sp, #8]
 8010cda:	9303      	str	r3, [sp, #12]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d80c      	bhi.n	8010cfa <__multiply+0x9e>
 8010ce0:	2e00      	cmp	r6, #0
 8010ce2:	dd03      	ble.n	8010cec <__multiply+0x90>
 8010ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d05a      	beq.n	8010da2 <__multiply+0x146>
 8010cec:	6106      	str	r6, [r0, #16]
 8010cee:	b005      	add	sp, #20
 8010cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf4:	f843 2b04 	str.w	r2, [r3], #4
 8010cf8:	e7d8      	b.n	8010cac <__multiply+0x50>
 8010cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8010cfe:	f1ba 0f00 	cmp.w	sl, #0
 8010d02:	d024      	beq.n	8010d4e <__multiply+0xf2>
 8010d04:	f104 0e14 	add.w	lr, r4, #20
 8010d08:	46a9      	mov	r9, r5
 8010d0a:	f04f 0c00 	mov.w	ip, #0
 8010d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d12:	f8d9 1000 	ldr.w	r1, [r9]
 8010d16:	fa1f fb82 	uxth.w	fp, r2
 8010d1a:	b289      	uxth	r1, r1
 8010d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010d24:	f8d9 2000 	ldr.w	r2, [r9]
 8010d28:	4461      	add	r1, ip
 8010d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d36:	b289      	uxth	r1, r1
 8010d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d3c:	4577      	cmp	r7, lr
 8010d3e:	f849 1b04 	str.w	r1, [r9], #4
 8010d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d46:	d8e2      	bhi.n	8010d0e <__multiply+0xb2>
 8010d48:	9a01      	ldr	r2, [sp, #4]
 8010d4a:	f845 c002 	str.w	ip, [r5, r2]
 8010d4e:	9a03      	ldr	r2, [sp, #12]
 8010d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d54:	3304      	adds	r3, #4
 8010d56:	f1b9 0f00 	cmp.w	r9, #0
 8010d5a:	d020      	beq.n	8010d9e <__multiply+0x142>
 8010d5c:	6829      	ldr	r1, [r5, #0]
 8010d5e:	f104 0c14 	add.w	ip, r4, #20
 8010d62:	46ae      	mov	lr, r5
 8010d64:	f04f 0a00 	mov.w	sl, #0
 8010d68:	f8bc b000 	ldrh.w	fp, [ip]
 8010d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d70:	fb09 220b 	mla	r2, r9, fp, r2
 8010d74:	4492      	add	sl, r2
 8010d76:	b289      	uxth	r1, r1
 8010d78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8010d80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d84:	f8be 1000 	ldrh.w	r1, [lr]
 8010d88:	0c12      	lsrs	r2, r2, #16
 8010d8a:	fb09 1102 	mla	r1, r9, r2, r1
 8010d8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010d92:	4567      	cmp	r7, ip
 8010d94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d98:	d8e6      	bhi.n	8010d68 <__multiply+0x10c>
 8010d9a:	9a01      	ldr	r2, [sp, #4]
 8010d9c:	50a9      	str	r1, [r5, r2]
 8010d9e:	3504      	adds	r5, #4
 8010da0:	e79a      	b.n	8010cd8 <__multiply+0x7c>
 8010da2:	3e01      	subs	r6, #1
 8010da4:	e79c      	b.n	8010ce0 <__multiply+0x84>
 8010da6:	bf00      	nop
 8010da8:	08013d97 	.word	0x08013d97
 8010dac:	08013da8 	.word	0x08013da8

08010db0 <__pow5mult>:
 8010db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010db4:	4615      	mov	r5, r2
 8010db6:	f012 0203 	ands.w	r2, r2, #3
 8010dba:	4606      	mov	r6, r0
 8010dbc:	460f      	mov	r7, r1
 8010dbe:	d007      	beq.n	8010dd0 <__pow5mult+0x20>
 8010dc0:	4c25      	ldr	r4, [pc, #148]	; (8010e58 <__pow5mult+0xa8>)
 8010dc2:	3a01      	subs	r2, #1
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010dca:	f7ff fe9b 	bl	8010b04 <__multadd>
 8010dce:	4607      	mov	r7, r0
 8010dd0:	10ad      	asrs	r5, r5, #2
 8010dd2:	d03d      	beq.n	8010e50 <__pow5mult+0xa0>
 8010dd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010dd6:	b97c      	cbnz	r4, 8010df8 <__pow5mult+0x48>
 8010dd8:	2010      	movs	r0, #16
 8010dda:	f7ff fe1d 	bl	8010a18 <malloc>
 8010dde:	4602      	mov	r2, r0
 8010de0:	6270      	str	r0, [r6, #36]	; 0x24
 8010de2:	b928      	cbnz	r0, 8010df0 <__pow5mult+0x40>
 8010de4:	4b1d      	ldr	r3, [pc, #116]	; (8010e5c <__pow5mult+0xac>)
 8010de6:	481e      	ldr	r0, [pc, #120]	; (8010e60 <__pow5mult+0xb0>)
 8010de8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010dec:	f000 fb7a 	bl	80114e4 <__assert_func>
 8010df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010df4:	6004      	str	r4, [r0, #0]
 8010df6:	60c4      	str	r4, [r0, #12]
 8010df8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e00:	b94c      	cbnz	r4, 8010e16 <__pow5mult+0x66>
 8010e02:	f240 2171 	movw	r1, #625	; 0x271
 8010e06:	4630      	mov	r0, r6
 8010e08:	f7ff ff12 	bl	8010c30 <__i2b>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e12:	4604      	mov	r4, r0
 8010e14:	6003      	str	r3, [r0, #0]
 8010e16:	f04f 0900 	mov.w	r9, #0
 8010e1a:	07eb      	lsls	r3, r5, #31
 8010e1c:	d50a      	bpl.n	8010e34 <__pow5mult+0x84>
 8010e1e:	4639      	mov	r1, r7
 8010e20:	4622      	mov	r2, r4
 8010e22:	4630      	mov	r0, r6
 8010e24:	f7ff ff1a 	bl	8010c5c <__multiply>
 8010e28:	4639      	mov	r1, r7
 8010e2a:	4680      	mov	r8, r0
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	f7ff fe47 	bl	8010ac0 <_Bfree>
 8010e32:	4647      	mov	r7, r8
 8010e34:	106d      	asrs	r5, r5, #1
 8010e36:	d00b      	beq.n	8010e50 <__pow5mult+0xa0>
 8010e38:	6820      	ldr	r0, [r4, #0]
 8010e3a:	b938      	cbnz	r0, 8010e4c <__pow5mult+0x9c>
 8010e3c:	4622      	mov	r2, r4
 8010e3e:	4621      	mov	r1, r4
 8010e40:	4630      	mov	r0, r6
 8010e42:	f7ff ff0b 	bl	8010c5c <__multiply>
 8010e46:	6020      	str	r0, [r4, #0]
 8010e48:	f8c0 9000 	str.w	r9, [r0]
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	e7e4      	b.n	8010e1a <__pow5mult+0x6a>
 8010e50:	4638      	mov	r0, r7
 8010e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e56:	bf00      	nop
 8010e58:	08013ef8 	.word	0x08013ef8
 8010e5c:	08013d25 	.word	0x08013d25
 8010e60:	08013da8 	.word	0x08013da8

08010e64 <__lshift>:
 8010e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e68:	460c      	mov	r4, r1
 8010e6a:	6849      	ldr	r1, [r1, #4]
 8010e6c:	6923      	ldr	r3, [r4, #16]
 8010e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e72:	68a3      	ldr	r3, [r4, #8]
 8010e74:	4607      	mov	r7, r0
 8010e76:	4691      	mov	r9, r2
 8010e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e7c:	f108 0601 	add.w	r6, r8, #1
 8010e80:	42b3      	cmp	r3, r6
 8010e82:	db0b      	blt.n	8010e9c <__lshift+0x38>
 8010e84:	4638      	mov	r0, r7
 8010e86:	f7ff fddb 	bl	8010a40 <_Balloc>
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	b948      	cbnz	r0, 8010ea2 <__lshift+0x3e>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	4b2a      	ldr	r3, [pc, #168]	; (8010f3c <__lshift+0xd8>)
 8010e92:	482b      	ldr	r0, [pc, #172]	; (8010f40 <__lshift+0xdc>)
 8010e94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e98:	f000 fb24 	bl	80114e4 <__assert_func>
 8010e9c:	3101      	adds	r1, #1
 8010e9e:	005b      	lsls	r3, r3, #1
 8010ea0:	e7ee      	b.n	8010e80 <__lshift+0x1c>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	f100 0114 	add.w	r1, r0, #20
 8010ea8:	f100 0210 	add.w	r2, r0, #16
 8010eac:	4618      	mov	r0, r3
 8010eae:	4553      	cmp	r3, sl
 8010eb0:	db37      	blt.n	8010f22 <__lshift+0xbe>
 8010eb2:	6920      	ldr	r0, [r4, #16]
 8010eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010eb8:	f104 0314 	add.w	r3, r4, #20
 8010ebc:	f019 091f 	ands.w	r9, r9, #31
 8010ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ec4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ec8:	d02f      	beq.n	8010f2a <__lshift+0xc6>
 8010eca:	f1c9 0e20 	rsb	lr, r9, #32
 8010ece:	468a      	mov	sl, r1
 8010ed0:	f04f 0c00 	mov.w	ip, #0
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	fa02 f209 	lsl.w	r2, r2, r9
 8010eda:	ea42 020c 	orr.w	r2, r2, ip
 8010ede:	f84a 2b04 	str.w	r2, [sl], #4
 8010ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ee6:	4298      	cmp	r0, r3
 8010ee8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010eec:	d8f2      	bhi.n	8010ed4 <__lshift+0x70>
 8010eee:	1b03      	subs	r3, r0, r4
 8010ef0:	3b15      	subs	r3, #21
 8010ef2:	f023 0303 	bic.w	r3, r3, #3
 8010ef6:	3304      	adds	r3, #4
 8010ef8:	f104 0215 	add.w	r2, r4, #21
 8010efc:	4290      	cmp	r0, r2
 8010efe:	bf38      	it	cc
 8010f00:	2304      	movcc	r3, #4
 8010f02:	f841 c003 	str.w	ip, [r1, r3]
 8010f06:	f1bc 0f00 	cmp.w	ip, #0
 8010f0a:	d001      	beq.n	8010f10 <__lshift+0xac>
 8010f0c:	f108 0602 	add.w	r6, r8, #2
 8010f10:	3e01      	subs	r6, #1
 8010f12:	4638      	mov	r0, r7
 8010f14:	612e      	str	r6, [r5, #16]
 8010f16:	4621      	mov	r1, r4
 8010f18:	f7ff fdd2 	bl	8010ac0 <_Bfree>
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f26:	3301      	adds	r3, #1
 8010f28:	e7c1      	b.n	8010eae <__lshift+0x4a>
 8010f2a:	3904      	subs	r1, #4
 8010f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f34:	4298      	cmp	r0, r3
 8010f36:	d8f9      	bhi.n	8010f2c <__lshift+0xc8>
 8010f38:	e7ea      	b.n	8010f10 <__lshift+0xac>
 8010f3a:	bf00      	nop
 8010f3c:	08013d97 	.word	0x08013d97
 8010f40:	08013da8 	.word	0x08013da8

08010f44 <__mcmp>:
 8010f44:	b530      	push	{r4, r5, lr}
 8010f46:	6902      	ldr	r2, [r0, #16]
 8010f48:	690c      	ldr	r4, [r1, #16]
 8010f4a:	1b12      	subs	r2, r2, r4
 8010f4c:	d10e      	bne.n	8010f6c <__mcmp+0x28>
 8010f4e:	f100 0314 	add.w	r3, r0, #20
 8010f52:	3114      	adds	r1, #20
 8010f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f64:	42a5      	cmp	r5, r4
 8010f66:	d003      	beq.n	8010f70 <__mcmp+0x2c>
 8010f68:	d305      	bcc.n	8010f76 <__mcmp+0x32>
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	bd30      	pop	{r4, r5, pc}
 8010f70:	4283      	cmp	r3, r0
 8010f72:	d3f3      	bcc.n	8010f5c <__mcmp+0x18>
 8010f74:	e7fa      	b.n	8010f6c <__mcmp+0x28>
 8010f76:	f04f 32ff 	mov.w	r2, #4294967295
 8010f7a:	e7f7      	b.n	8010f6c <__mcmp+0x28>

08010f7c <__mdiff>:
 8010f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f80:	460c      	mov	r4, r1
 8010f82:	4606      	mov	r6, r0
 8010f84:	4611      	mov	r1, r2
 8010f86:	4620      	mov	r0, r4
 8010f88:	4690      	mov	r8, r2
 8010f8a:	f7ff ffdb 	bl	8010f44 <__mcmp>
 8010f8e:	1e05      	subs	r5, r0, #0
 8010f90:	d110      	bne.n	8010fb4 <__mdiff+0x38>
 8010f92:	4629      	mov	r1, r5
 8010f94:	4630      	mov	r0, r6
 8010f96:	f7ff fd53 	bl	8010a40 <_Balloc>
 8010f9a:	b930      	cbnz	r0, 8010faa <__mdiff+0x2e>
 8010f9c:	4b3a      	ldr	r3, [pc, #232]	; (8011088 <__mdiff+0x10c>)
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	f240 2132 	movw	r1, #562	; 0x232
 8010fa4:	4839      	ldr	r0, [pc, #228]	; (801108c <__mdiff+0x110>)
 8010fa6:	f000 fa9d 	bl	80114e4 <__assert_func>
 8010faa:	2301      	movs	r3, #1
 8010fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb4:	bfa4      	itt	ge
 8010fb6:	4643      	movge	r3, r8
 8010fb8:	46a0      	movge	r8, r4
 8010fba:	4630      	mov	r0, r6
 8010fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010fc0:	bfa6      	itte	ge
 8010fc2:	461c      	movge	r4, r3
 8010fc4:	2500      	movge	r5, #0
 8010fc6:	2501      	movlt	r5, #1
 8010fc8:	f7ff fd3a 	bl	8010a40 <_Balloc>
 8010fcc:	b920      	cbnz	r0, 8010fd8 <__mdiff+0x5c>
 8010fce:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <__mdiff+0x10c>)
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010fd6:	e7e5      	b.n	8010fa4 <__mdiff+0x28>
 8010fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fdc:	6926      	ldr	r6, [r4, #16]
 8010fde:	60c5      	str	r5, [r0, #12]
 8010fe0:	f104 0914 	add.w	r9, r4, #20
 8010fe4:	f108 0514 	add.w	r5, r8, #20
 8010fe8:	f100 0e14 	add.w	lr, r0, #20
 8010fec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010ff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ff4:	f108 0210 	add.w	r2, r8, #16
 8010ff8:	46f2      	mov	sl, lr
 8010ffa:	2100      	movs	r1, #0
 8010ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011004:	fa1f f883 	uxth.w	r8, r3
 8011008:	fa11 f18b 	uxtah	r1, r1, fp
 801100c:	0c1b      	lsrs	r3, r3, #16
 801100e:	eba1 0808 	sub.w	r8, r1, r8
 8011012:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011016:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801101a:	fa1f f888 	uxth.w	r8, r8
 801101e:	1419      	asrs	r1, r3, #16
 8011020:	454e      	cmp	r6, r9
 8011022:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011026:	f84a 3b04 	str.w	r3, [sl], #4
 801102a:	d8e7      	bhi.n	8010ffc <__mdiff+0x80>
 801102c:	1b33      	subs	r3, r6, r4
 801102e:	3b15      	subs	r3, #21
 8011030:	f023 0303 	bic.w	r3, r3, #3
 8011034:	3304      	adds	r3, #4
 8011036:	3415      	adds	r4, #21
 8011038:	42a6      	cmp	r6, r4
 801103a:	bf38      	it	cc
 801103c:	2304      	movcc	r3, #4
 801103e:	441d      	add	r5, r3
 8011040:	4473      	add	r3, lr
 8011042:	469e      	mov	lr, r3
 8011044:	462e      	mov	r6, r5
 8011046:	4566      	cmp	r6, ip
 8011048:	d30e      	bcc.n	8011068 <__mdiff+0xec>
 801104a:	f10c 0203 	add.w	r2, ip, #3
 801104e:	1b52      	subs	r2, r2, r5
 8011050:	f022 0203 	bic.w	r2, r2, #3
 8011054:	3d03      	subs	r5, #3
 8011056:	45ac      	cmp	ip, r5
 8011058:	bf38      	it	cc
 801105a:	2200      	movcc	r2, #0
 801105c:	441a      	add	r2, r3
 801105e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011062:	b17b      	cbz	r3, 8011084 <__mdiff+0x108>
 8011064:	6107      	str	r7, [r0, #16]
 8011066:	e7a3      	b.n	8010fb0 <__mdiff+0x34>
 8011068:	f856 8b04 	ldr.w	r8, [r6], #4
 801106c:	fa11 f288 	uxtah	r2, r1, r8
 8011070:	1414      	asrs	r4, r2, #16
 8011072:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011076:	b292      	uxth	r2, r2
 8011078:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801107c:	f84e 2b04 	str.w	r2, [lr], #4
 8011080:	1421      	asrs	r1, r4, #16
 8011082:	e7e0      	b.n	8011046 <__mdiff+0xca>
 8011084:	3f01      	subs	r7, #1
 8011086:	e7ea      	b.n	801105e <__mdiff+0xe2>
 8011088:	08013d97 	.word	0x08013d97
 801108c:	08013da8 	.word	0x08013da8

08011090 <__d2b>:
 8011090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011094:	4689      	mov	r9, r1
 8011096:	2101      	movs	r1, #1
 8011098:	ec57 6b10 	vmov	r6, r7, d0
 801109c:	4690      	mov	r8, r2
 801109e:	f7ff fccf 	bl	8010a40 <_Balloc>
 80110a2:	4604      	mov	r4, r0
 80110a4:	b930      	cbnz	r0, 80110b4 <__d2b+0x24>
 80110a6:	4602      	mov	r2, r0
 80110a8:	4b25      	ldr	r3, [pc, #148]	; (8011140 <__d2b+0xb0>)
 80110aa:	4826      	ldr	r0, [pc, #152]	; (8011144 <__d2b+0xb4>)
 80110ac:	f240 310a 	movw	r1, #778	; 0x30a
 80110b0:	f000 fa18 	bl	80114e4 <__assert_func>
 80110b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110bc:	bb35      	cbnz	r5, 801110c <__d2b+0x7c>
 80110be:	2e00      	cmp	r6, #0
 80110c0:	9301      	str	r3, [sp, #4]
 80110c2:	d028      	beq.n	8011116 <__d2b+0x86>
 80110c4:	4668      	mov	r0, sp
 80110c6:	9600      	str	r6, [sp, #0]
 80110c8:	f7ff fd82 	bl	8010bd0 <__lo0bits>
 80110cc:	9900      	ldr	r1, [sp, #0]
 80110ce:	b300      	cbz	r0, 8011112 <__d2b+0x82>
 80110d0:	9a01      	ldr	r2, [sp, #4]
 80110d2:	f1c0 0320 	rsb	r3, r0, #32
 80110d6:	fa02 f303 	lsl.w	r3, r2, r3
 80110da:	430b      	orrs	r3, r1
 80110dc:	40c2      	lsrs	r2, r0
 80110de:	6163      	str	r3, [r4, #20]
 80110e0:	9201      	str	r2, [sp, #4]
 80110e2:	9b01      	ldr	r3, [sp, #4]
 80110e4:	61a3      	str	r3, [r4, #24]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	bf14      	ite	ne
 80110ea:	2202      	movne	r2, #2
 80110ec:	2201      	moveq	r2, #1
 80110ee:	6122      	str	r2, [r4, #16]
 80110f0:	b1d5      	cbz	r5, 8011128 <__d2b+0x98>
 80110f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80110f6:	4405      	add	r5, r0
 80110f8:	f8c9 5000 	str.w	r5, [r9]
 80110fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011100:	f8c8 0000 	str.w	r0, [r8]
 8011104:	4620      	mov	r0, r4
 8011106:	b003      	add	sp, #12
 8011108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801110c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011110:	e7d5      	b.n	80110be <__d2b+0x2e>
 8011112:	6161      	str	r1, [r4, #20]
 8011114:	e7e5      	b.n	80110e2 <__d2b+0x52>
 8011116:	a801      	add	r0, sp, #4
 8011118:	f7ff fd5a 	bl	8010bd0 <__lo0bits>
 801111c:	9b01      	ldr	r3, [sp, #4]
 801111e:	6163      	str	r3, [r4, #20]
 8011120:	2201      	movs	r2, #1
 8011122:	6122      	str	r2, [r4, #16]
 8011124:	3020      	adds	r0, #32
 8011126:	e7e3      	b.n	80110f0 <__d2b+0x60>
 8011128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801112c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011130:	f8c9 0000 	str.w	r0, [r9]
 8011134:	6918      	ldr	r0, [r3, #16]
 8011136:	f7ff fd2b 	bl	8010b90 <__hi0bits>
 801113a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801113e:	e7df      	b.n	8011100 <__d2b+0x70>
 8011140:	08013d97 	.word	0x08013d97
 8011144:	08013da8 	.word	0x08013da8

08011148 <_calloc_r>:
 8011148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801114a:	fba1 2402 	umull	r2, r4, r1, r2
 801114e:	b94c      	cbnz	r4, 8011164 <_calloc_r+0x1c>
 8011150:	4611      	mov	r1, r2
 8011152:	9201      	str	r2, [sp, #4]
 8011154:	f7fd fd9c 	bl	800ec90 <_malloc_r>
 8011158:	9a01      	ldr	r2, [sp, #4]
 801115a:	4605      	mov	r5, r0
 801115c:	b930      	cbnz	r0, 801116c <_calloc_r+0x24>
 801115e:	4628      	mov	r0, r5
 8011160:	b003      	add	sp, #12
 8011162:	bd30      	pop	{r4, r5, pc}
 8011164:	220c      	movs	r2, #12
 8011166:	6002      	str	r2, [r0, #0]
 8011168:	2500      	movs	r5, #0
 801116a:	e7f8      	b.n	801115e <_calloc_r+0x16>
 801116c:	4621      	mov	r1, r4
 801116e:	f7fd fd66 	bl	800ec3e <memset>
 8011172:	e7f4      	b.n	801115e <_calloc_r+0x16>

08011174 <_free_r>:
 8011174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011176:	2900      	cmp	r1, #0
 8011178:	d044      	beq.n	8011204 <_free_r+0x90>
 801117a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801117e:	9001      	str	r0, [sp, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	f1a1 0404 	sub.w	r4, r1, #4
 8011186:	bfb8      	it	lt
 8011188:	18e4      	addlt	r4, r4, r3
 801118a:	f7ff fc4d 	bl	8010a28 <__malloc_lock>
 801118e:	4a1e      	ldr	r2, [pc, #120]	; (8011208 <_free_r+0x94>)
 8011190:	9801      	ldr	r0, [sp, #4]
 8011192:	6813      	ldr	r3, [r2, #0]
 8011194:	b933      	cbnz	r3, 80111a4 <_free_r+0x30>
 8011196:	6063      	str	r3, [r4, #4]
 8011198:	6014      	str	r4, [r2, #0]
 801119a:	b003      	add	sp, #12
 801119c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111a0:	f7ff bc48 	b.w	8010a34 <__malloc_unlock>
 80111a4:	42a3      	cmp	r3, r4
 80111a6:	d908      	bls.n	80111ba <_free_r+0x46>
 80111a8:	6825      	ldr	r5, [r4, #0]
 80111aa:	1961      	adds	r1, r4, r5
 80111ac:	428b      	cmp	r3, r1
 80111ae:	bf01      	itttt	eq
 80111b0:	6819      	ldreq	r1, [r3, #0]
 80111b2:	685b      	ldreq	r3, [r3, #4]
 80111b4:	1949      	addeq	r1, r1, r5
 80111b6:	6021      	streq	r1, [r4, #0]
 80111b8:	e7ed      	b.n	8011196 <_free_r+0x22>
 80111ba:	461a      	mov	r2, r3
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	b10b      	cbz	r3, 80111c4 <_free_r+0x50>
 80111c0:	42a3      	cmp	r3, r4
 80111c2:	d9fa      	bls.n	80111ba <_free_r+0x46>
 80111c4:	6811      	ldr	r1, [r2, #0]
 80111c6:	1855      	adds	r5, r2, r1
 80111c8:	42a5      	cmp	r5, r4
 80111ca:	d10b      	bne.n	80111e4 <_free_r+0x70>
 80111cc:	6824      	ldr	r4, [r4, #0]
 80111ce:	4421      	add	r1, r4
 80111d0:	1854      	adds	r4, r2, r1
 80111d2:	42a3      	cmp	r3, r4
 80111d4:	6011      	str	r1, [r2, #0]
 80111d6:	d1e0      	bne.n	801119a <_free_r+0x26>
 80111d8:	681c      	ldr	r4, [r3, #0]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	6053      	str	r3, [r2, #4]
 80111de:	4421      	add	r1, r4
 80111e0:	6011      	str	r1, [r2, #0]
 80111e2:	e7da      	b.n	801119a <_free_r+0x26>
 80111e4:	d902      	bls.n	80111ec <_free_r+0x78>
 80111e6:	230c      	movs	r3, #12
 80111e8:	6003      	str	r3, [r0, #0]
 80111ea:	e7d6      	b.n	801119a <_free_r+0x26>
 80111ec:	6825      	ldr	r5, [r4, #0]
 80111ee:	1961      	adds	r1, r4, r5
 80111f0:	428b      	cmp	r3, r1
 80111f2:	bf04      	itt	eq
 80111f4:	6819      	ldreq	r1, [r3, #0]
 80111f6:	685b      	ldreq	r3, [r3, #4]
 80111f8:	6063      	str	r3, [r4, #4]
 80111fa:	bf04      	itt	eq
 80111fc:	1949      	addeq	r1, r1, r5
 80111fe:	6021      	streq	r1, [r4, #0]
 8011200:	6054      	str	r4, [r2, #4]
 8011202:	e7ca      	b.n	801119a <_free_r+0x26>
 8011204:	b003      	add	sp, #12
 8011206:	bd30      	pop	{r4, r5, pc}
 8011208:	20005b0c 	.word	0x20005b0c

0801120c <__sfputc_r>:
 801120c:	6893      	ldr	r3, [r2, #8]
 801120e:	3b01      	subs	r3, #1
 8011210:	2b00      	cmp	r3, #0
 8011212:	b410      	push	{r4}
 8011214:	6093      	str	r3, [r2, #8]
 8011216:	da08      	bge.n	801122a <__sfputc_r+0x1e>
 8011218:	6994      	ldr	r4, [r2, #24]
 801121a:	42a3      	cmp	r3, r4
 801121c:	db01      	blt.n	8011222 <__sfputc_r+0x16>
 801121e:	290a      	cmp	r1, #10
 8011220:	d103      	bne.n	801122a <__sfputc_r+0x1e>
 8011222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011226:	f7fe bb5d 	b.w	800f8e4 <__swbuf_r>
 801122a:	6813      	ldr	r3, [r2, #0]
 801122c:	1c58      	adds	r0, r3, #1
 801122e:	6010      	str	r0, [r2, #0]
 8011230:	7019      	strb	r1, [r3, #0]
 8011232:	4608      	mov	r0, r1
 8011234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011238:	4770      	bx	lr

0801123a <__sfputs_r>:
 801123a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801123c:	4606      	mov	r6, r0
 801123e:	460f      	mov	r7, r1
 8011240:	4614      	mov	r4, r2
 8011242:	18d5      	adds	r5, r2, r3
 8011244:	42ac      	cmp	r4, r5
 8011246:	d101      	bne.n	801124c <__sfputs_r+0x12>
 8011248:	2000      	movs	r0, #0
 801124a:	e007      	b.n	801125c <__sfputs_r+0x22>
 801124c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011250:	463a      	mov	r2, r7
 8011252:	4630      	mov	r0, r6
 8011254:	f7ff ffda 	bl	801120c <__sfputc_r>
 8011258:	1c43      	adds	r3, r0, #1
 801125a:	d1f3      	bne.n	8011244 <__sfputs_r+0xa>
 801125c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011260 <_vfiprintf_r>:
 8011260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011264:	460d      	mov	r5, r1
 8011266:	b09d      	sub	sp, #116	; 0x74
 8011268:	4614      	mov	r4, r2
 801126a:	4698      	mov	r8, r3
 801126c:	4606      	mov	r6, r0
 801126e:	b118      	cbz	r0, 8011278 <_vfiprintf_r+0x18>
 8011270:	6983      	ldr	r3, [r0, #24]
 8011272:	b90b      	cbnz	r3, 8011278 <_vfiprintf_r+0x18>
 8011274:	f7fd fc10 	bl	800ea98 <__sinit>
 8011278:	4b89      	ldr	r3, [pc, #548]	; (80114a0 <_vfiprintf_r+0x240>)
 801127a:	429d      	cmp	r5, r3
 801127c:	d11b      	bne.n	80112b6 <_vfiprintf_r+0x56>
 801127e:	6875      	ldr	r5, [r6, #4]
 8011280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011282:	07d9      	lsls	r1, r3, #31
 8011284:	d405      	bmi.n	8011292 <_vfiprintf_r+0x32>
 8011286:	89ab      	ldrh	r3, [r5, #12]
 8011288:	059a      	lsls	r2, r3, #22
 801128a:	d402      	bmi.n	8011292 <_vfiprintf_r+0x32>
 801128c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801128e:	f7fd fcc6 	bl	800ec1e <__retarget_lock_acquire_recursive>
 8011292:	89ab      	ldrh	r3, [r5, #12]
 8011294:	071b      	lsls	r3, r3, #28
 8011296:	d501      	bpl.n	801129c <_vfiprintf_r+0x3c>
 8011298:	692b      	ldr	r3, [r5, #16]
 801129a:	b9eb      	cbnz	r3, 80112d8 <_vfiprintf_r+0x78>
 801129c:	4629      	mov	r1, r5
 801129e:	4630      	mov	r0, r6
 80112a0:	f7fe fb84 	bl	800f9ac <__swsetup_r>
 80112a4:	b1c0      	cbz	r0, 80112d8 <_vfiprintf_r+0x78>
 80112a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112a8:	07dc      	lsls	r4, r3, #31
 80112aa:	d50e      	bpl.n	80112ca <_vfiprintf_r+0x6a>
 80112ac:	f04f 30ff 	mov.w	r0, #4294967295
 80112b0:	b01d      	add	sp, #116	; 0x74
 80112b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b6:	4b7b      	ldr	r3, [pc, #492]	; (80114a4 <_vfiprintf_r+0x244>)
 80112b8:	429d      	cmp	r5, r3
 80112ba:	d101      	bne.n	80112c0 <_vfiprintf_r+0x60>
 80112bc:	68b5      	ldr	r5, [r6, #8]
 80112be:	e7df      	b.n	8011280 <_vfiprintf_r+0x20>
 80112c0:	4b79      	ldr	r3, [pc, #484]	; (80114a8 <_vfiprintf_r+0x248>)
 80112c2:	429d      	cmp	r5, r3
 80112c4:	bf08      	it	eq
 80112c6:	68f5      	ldreq	r5, [r6, #12]
 80112c8:	e7da      	b.n	8011280 <_vfiprintf_r+0x20>
 80112ca:	89ab      	ldrh	r3, [r5, #12]
 80112cc:	0598      	lsls	r0, r3, #22
 80112ce:	d4ed      	bmi.n	80112ac <_vfiprintf_r+0x4c>
 80112d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112d2:	f7fd fca5 	bl	800ec20 <__retarget_lock_release_recursive>
 80112d6:	e7e9      	b.n	80112ac <_vfiprintf_r+0x4c>
 80112d8:	2300      	movs	r3, #0
 80112da:	9309      	str	r3, [sp, #36]	; 0x24
 80112dc:	2320      	movs	r3, #32
 80112de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80112e6:	2330      	movs	r3, #48	; 0x30
 80112e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80114ac <_vfiprintf_r+0x24c>
 80112ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112f0:	f04f 0901 	mov.w	r9, #1
 80112f4:	4623      	mov	r3, r4
 80112f6:	469a      	mov	sl, r3
 80112f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112fc:	b10a      	cbz	r2, 8011302 <_vfiprintf_r+0xa2>
 80112fe:	2a25      	cmp	r2, #37	; 0x25
 8011300:	d1f9      	bne.n	80112f6 <_vfiprintf_r+0x96>
 8011302:	ebba 0b04 	subs.w	fp, sl, r4
 8011306:	d00b      	beq.n	8011320 <_vfiprintf_r+0xc0>
 8011308:	465b      	mov	r3, fp
 801130a:	4622      	mov	r2, r4
 801130c:	4629      	mov	r1, r5
 801130e:	4630      	mov	r0, r6
 8011310:	f7ff ff93 	bl	801123a <__sfputs_r>
 8011314:	3001      	adds	r0, #1
 8011316:	f000 80aa 	beq.w	801146e <_vfiprintf_r+0x20e>
 801131a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801131c:	445a      	add	r2, fp
 801131e:	9209      	str	r2, [sp, #36]	; 0x24
 8011320:	f89a 3000 	ldrb.w	r3, [sl]
 8011324:	2b00      	cmp	r3, #0
 8011326:	f000 80a2 	beq.w	801146e <_vfiprintf_r+0x20e>
 801132a:	2300      	movs	r3, #0
 801132c:	f04f 32ff 	mov.w	r2, #4294967295
 8011330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011334:	f10a 0a01 	add.w	sl, sl, #1
 8011338:	9304      	str	r3, [sp, #16]
 801133a:	9307      	str	r3, [sp, #28]
 801133c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011340:	931a      	str	r3, [sp, #104]	; 0x68
 8011342:	4654      	mov	r4, sl
 8011344:	2205      	movs	r2, #5
 8011346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801134a:	4858      	ldr	r0, [pc, #352]	; (80114ac <_vfiprintf_r+0x24c>)
 801134c:	f7ee ff48 	bl	80001e0 <memchr>
 8011350:	9a04      	ldr	r2, [sp, #16]
 8011352:	b9d8      	cbnz	r0, 801138c <_vfiprintf_r+0x12c>
 8011354:	06d1      	lsls	r1, r2, #27
 8011356:	bf44      	itt	mi
 8011358:	2320      	movmi	r3, #32
 801135a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801135e:	0713      	lsls	r3, r2, #28
 8011360:	bf44      	itt	mi
 8011362:	232b      	movmi	r3, #43	; 0x2b
 8011364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011368:	f89a 3000 	ldrb.w	r3, [sl]
 801136c:	2b2a      	cmp	r3, #42	; 0x2a
 801136e:	d015      	beq.n	801139c <_vfiprintf_r+0x13c>
 8011370:	9a07      	ldr	r2, [sp, #28]
 8011372:	4654      	mov	r4, sl
 8011374:	2000      	movs	r0, #0
 8011376:	f04f 0c0a 	mov.w	ip, #10
 801137a:	4621      	mov	r1, r4
 801137c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011380:	3b30      	subs	r3, #48	; 0x30
 8011382:	2b09      	cmp	r3, #9
 8011384:	d94e      	bls.n	8011424 <_vfiprintf_r+0x1c4>
 8011386:	b1b0      	cbz	r0, 80113b6 <_vfiprintf_r+0x156>
 8011388:	9207      	str	r2, [sp, #28]
 801138a:	e014      	b.n	80113b6 <_vfiprintf_r+0x156>
 801138c:	eba0 0308 	sub.w	r3, r0, r8
 8011390:	fa09 f303 	lsl.w	r3, r9, r3
 8011394:	4313      	orrs	r3, r2
 8011396:	9304      	str	r3, [sp, #16]
 8011398:	46a2      	mov	sl, r4
 801139a:	e7d2      	b.n	8011342 <_vfiprintf_r+0xe2>
 801139c:	9b03      	ldr	r3, [sp, #12]
 801139e:	1d19      	adds	r1, r3, #4
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	9103      	str	r1, [sp, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	bfbb      	ittet	lt
 80113a8:	425b      	neglt	r3, r3
 80113aa:	f042 0202 	orrlt.w	r2, r2, #2
 80113ae:	9307      	strge	r3, [sp, #28]
 80113b0:	9307      	strlt	r3, [sp, #28]
 80113b2:	bfb8      	it	lt
 80113b4:	9204      	strlt	r2, [sp, #16]
 80113b6:	7823      	ldrb	r3, [r4, #0]
 80113b8:	2b2e      	cmp	r3, #46	; 0x2e
 80113ba:	d10c      	bne.n	80113d6 <_vfiprintf_r+0x176>
 80113bc:	7863      	ldrb	r3, [r4, #1]
 80113be:	2b2a      	cmp	r3, #42	; 0x2a
 80113c0:	d135      	bne.n	801142e <_vfiprintf_r+0x1ce>
 80113c2:	9b03      	ldr	r3, [sp, #12]
 80113c4:	1d1a      	adds	r2, r3, #4
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	9203      	str	r2, [sp, #12]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	bfb8      	it	lt
 80113ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80113d2:	3402      	adds	r4, #2
 80113d4:	9305      	str	r3, [sp, #20]
 80113d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80114bc <_vfiprintf_r+0x25c>
 80113da:	7821      	ldrb	r1, [r4, #0]
 80113dc:	2203      	movs	r2, #3
 80113de:	4650      	mov	r0, sl
 80113e0:	f7ee fefe 	bl	80001e0 <memchr>
 80113e4:	b140      	cbz	r0, 80113f8 <_vfiprintf_r+0x198>
 80113e6:	2340      	movs	r3, #64	; 0x40
 80113e8:	eba0 000a 	sub.w	r0, r0, sl
 80113ec:	fa03 f000 	lsl.w	r0, r3, r0
 80113f0:	9b04      	ldr	r3, [sp, #16]
 80113f2:	4303      	orrs	r3, r0
 80113f4:	3401      	adds	r4, #1
 80113f6:	9304      	str	r3, [sp, #16]
 80113f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113fc:	482c      	ldr	r0, [pc, #176]	; (80114b0 <_vfiprintf_r+0x250>)
 80113fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011402:	2206      	movs	r2, #6
 8011404:	f7ee feec 	bl	80001e0 <memchr>
 8011408:	2800      	cmp	r0, #0
 801140a:	d03f      	beq.n	801148c <_vfiprintf_r+0x22c>
 801140c:	4b29      	ldr	r3, [pc, #164]	; (80114b4 <_vfiprintf_r+0x254>)
 801140e:	bb1b      	cbnz	r3, 8011458 <_vfiprintf_r+0x1f8>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	3307      	adds	r3, #7
 8011414:	f023 0307 	bic.w	r3, r3, #7
 8011418:	3308      	adds	r3, #8
 801141a:	9303      	str	r3, [sp, #12]
 801141c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801141e:	443b      	add	r3, r7
 8011420:	9309      	str	r3, [sp, #36]	; 0x24
 8011422:	e767      	b.n	80112f4 <_vfiprintf_r+0x94>
 8011424:	fb0c 3202 	mla	r2, ip, r2, r3
 8011428:	460c      	mov	r4, r1
 801142a:	2001      	movs	r0, #1
 801142c:	e7a5      	b.n	801137a <_vfiprintf_r+0x11a>
 801142e:	2300      	movs	r3, #0
 8011430:	3401      	adds	r4, #1
 8011432:	9305      	str	r3, [sp, #20]
 8011434:	4619      	mov	r1, r3
 8011436:	f04f 0c0a 	mov.w	ip, #10
 801143a:	4620      	mov	r0, r4
 801143c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011440:	3a30      	subs	r2, #48	; 0x30
 8011442:	2a09      	cmp	r2, #9
 8011444:	d903      	bls.n	801144e <_vfiprintf_r+0x1ee>
 8011446:	2b00      	cmp	r3, #0
 8011448:	d0c5      	beq.n	80113d6 <_vfiprintf_r+0x176>
 801144a:	9105      	str	r1, [sp, #20]
 801144c:	e7c3      	b.n	80113d6 <_vfiprintf_r+0x176>
 801144e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011452:	4604      	mov	r4, r0
 8011454:	2301      	movs	r3, #1
 8011456:	e7f0      	b.n	801143a <_vfiprintf_r+0x1da>
 8011458:	ab03      	add	r3, sp, #12
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	462a      	mov	r2, r5
 801145e:	4b16      	ldr	r3, [pc, #88]	; (80114b8 <_vfiprintf_r+0x258>)
 8011460:	a904      	add	r1, sp, #16
 8011462:	4630      	mov	r0, r6
 8011464:	f7fd fd28 	bl	800eeb8 <_printf_float>
 8011468:	4607      	mov	r7, r0
 801146a:	1c78      	adds	r0, r7, #1
 801146c:	d1d6      	bne.n	801141c <_vfiprintf_r+0x1bc>
 801146e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011470:	07d9      	lsls	r1, r3, #31
 8011472:	d405      	bmi.n	8011480 <_vfiprintf_r+0x220>
 8011474:	89ab      	ldrh	r3, [r5, #12]
 8011476:	059a      	lsls	r2, r3, #22
 8011478:	d402      	bmi.n	8011480 <_vfiprintf_r+0x220>
 801147a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801147c:	f7fd fbd0 	bl	800ec20 <__retarget_lock_release_recursive>
 8011480:	89ab      	ldrh	r3, [r5, #12]
 8011482:	065b      	lsls	r3, r3, #25
 8011484:	f53f af12 	bmi.w	80112ac <_vfiprintf_r+0x4c>
 8011488:	9809      	ldr	r0, [sp, #36]	; 0x24
 801148a:	e711      	b.n	80112b0 <_vfiprintf_r+0x50>
 801148c:	ab03      	add	r3, sp, #12
 801148e:	9300      	str	r3, [sp, #0]
 8011490:	462a      	mov	r2, r5
 8011492:	4b09      	ldr	r3, [pc, #36]	; (80114b8 <_vfiprintf_r+0x258>)
 8011494:	a904      	add	r1, sp, #16
 8011496:	4630      	mov	r0, r6
 8011498:	f7fd ffb2 	bl	800f400 <_printf_i>
 801149c:	e7e4      	b.n	8011468 <_vfiprintf_r+0x208>
 801149e:	bf00      	nop
 80114a0:	08013ca0 	.word	0x08013ca0
 80114a4:	08013cc0 	.word	0x08013cc0
 80114a8:	08013c80 	.word	0x08013c80
 80114ac:	08013f04 	.word	0x08013f04
 80114b0:	08013f0e 	.word	0x08013f0e
 80114b4:	0800eeb9 	.word	0x0800eeb9
 80114b8:	0801123b 	.word	0x0801123b
 80114bc:	08013f0a 	.word	0x08013f0a

080114c0 <_read_r>:
 80114c0:	b538      	push	{r3, r4, r5, lr}
 80114c2:	4d07      	ldr	r5, [pc, #28]	; (80114e0 <_read_r+0x20>)
 80114c4:	4604      	mov	r4, r0
 80114c6:	4608      	mov	r0, r1
 80114c8:	4611      	mov	r1, r2
 80114ca:	2200      	movs	r2, #0
 80114cc:	602a      	str	r2, [r5, #0]
 80114ce:	461a      	mov	r2, r3
 80114d0:	f7f3 f9a0 	bl	8004814 <_read>
 80114d4:	1c43      	adds	r3, r0, #1
 80114d6:	d102      	bne.n	80114de <_read_r+0x1e>
 80114d8:	682b      	ldr	r3, [r5, #0]
 80114da:	b103      	cbz	r3, 80114de <_read_r+0x1e>
 80114dc:	6023      	str	r3, [r4, #0]
 80114de:	bd38      	pop	{r3, r4, r5, pc}
 80114e0:	20005b14 	.word	0x20005b14

080114e4 <__assert_func>:
 80114e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114e6:	4614      	mov	r4, r2
 80114e8:	461a      	mov	r2, r3
 80114ea:	4b09      	ldr	r3, [pc, #36]	; (8011510 <__assert_func+0x2c>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4605      	mov	r5, r0
 80114f0:	68d8      	ldr	r0, [r3, #12]
 80114f2:	b14c      	cbz	r4, 8011508 <__assert_func+0x24>
 80114f4:	4b07      	ldr	r3, [pc, #28]	; (8011514 <__assert_func+0x30>)
 80114f6:	9100      	str	r1, [sp, #0]
 80114f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114fc:	4906      	ldr	r1, [pc, #24]	; (8011518 <__assert_func+0x34>)
 80114fe:	462b      	mov	r3, r5
 8011500:	f000 f80e 	bl	8011520 <fiprintf>
 8011504:	f000 f85f 	bl	80115c6 <abort>
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <__assert_func+0x38>)
 801150a:	461c      	mov	r4, r3
 801150c:	e7f3      	b.n	80114f6 <__assert_func+0x12>
 801150e:	bf00      	nop
 8011510:	200000a0 	.word	0x200000a0
 8011514:	08013f15 	.word	0x08013f15
 8011518:	08013f22 	.word	0x08013f22
 801151c:	08013f50 	.word	0x08013f50

08011520 <fiprintf>:
 8011520:	b40e      	push	{r1, r2, r3}
 8011522:	b503      	push	{r0, r1, lr}
 8011524:	4601      	mov	r1, r0
 8011526:	ab03      	add	r3, sp, #12
 8011528:	4805      	ldr	r0, [pc, #20]	; (8011540 <fiprintf+0x20>)
 801152a:	f853 2b04 	ldr.w	r2, [r3], #4
 801152e:	6800      	ldr	r0, [r0, #0]
 8011530:	9301      	str	r3, [sp, #4]
 8011532:	f7ff fe95 	bl	8011260 <_vfiprintf_r>
 8011536:	b002      	add	sp, #8
 8011538:	f85d eb04 	ldr.w	lr, [sp], #4
 801153c:	b003      	add	sp, #12
 801153e:	4770      	bx	lr
 8011540:	200000a0 	.word	0x200000a0

08011544 <_fstat_r>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	4d07      	ldr	r5, [pc, #28]	; (8011564 <_fstat_r+0x20>)
 8011548:	2300      	movs	r3, #0
 801154a:	4604      	mov	r4, r0
 801154c:	4608      	mov	r0, r1
 801154e:	4611      	mov	r1, r2
 8011550:	602b      	str	r3, [r5, #0]
 8011552:	f7f3 f988 	bl	8004866 <_fstat>
 8011556:	1c43      	adds	r3, r0, #1
 8011558:	d102      	bne.n	8011560 <_fstat_r+0x1c>
 801155a:	682b      	ldr	r3, [r5, #0]
 801155c:	b103      	cbz	r3, 8011560 <_fstat_r+0x1c>
 801155e:	6023      	str	r3, [r4, #0]
 8011560:	bd38      	pop	{r3, r4, r5, pc}
 8011562:	bf00      	nop
 8011564:	20005b14 	.word	0x20005b14

08011568 <_isatty_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	4d06      	ldr	r5, [pc, #24]	; (8011584 <_isatty_r+0x1c>)
 801156c:	2300      	movs	r3, #0
 801156e:	4604      	mov	r4, r0
 8011570:	4608      	mov	r0, r1
 8011572:	602b      	str	r3, [r5, #0]
 8011574:	f7f3 f987 	bl	8004886 <_isatty>
 8011578:	1c43      	adds	r3, r0, #1
 801157a:	d102      	bne.n	8011582 <_isatty_r+0x1a>
 801157c:	682b      	ldr	r3, [r5, #0]
 801157e:	b103      	cbz	r3, 8011582 <_isatty_r+0x1a>
 8011580:	6023      	str	r3, [r4, #0]
 8011582:	bd38      	pop	{r3, r4, r5, pc}
 8011584:	20005b14 	.word	0x20005b14

08011588 <__ascii_mbtowc>:
 8011588:	b082      	sub	sp, #8
 801158a:	b901      	cbnz	r1, 801158e <__ascii_mbtowc+0x6>
 801158c:	a901      	add	r1, sp, #4
 801158e:	b142      	cbz	r2, 80115a2 <__ascii_mbtowc+0x1a>
 8011590:	b14b      	cbz	r3, 80115a6 <__ascii_mbtowc+0x1e>
 8011592:	7813      	ldrb	r3, [r2, #0]
 8011594:	600b      	str	r3, [r1, #0]
 8011596:	7812      	ldrb	r2, [r2, #0]
 8011598:	1e10      	subs	r0, r2, #0
 801159a:	bf18      	it	ne
 801159c:	2001      	movne	r0, #1
 801159e:	b002      	add	sp, #8
 80115a0:	4770      	bx	lr
 80115a2:	4610      	mov	r0, r2
 80115a4:	e7fb      	b.n	801159e <__ascii_mbtowc+0x16>
 80115a6:	f06f 0001 	mvn.w	r0, #1
 80115aa:	e7f8      	b.n	801159e <__ascii_mbtowc+0x16>

080115ac <__ascii_wctomb>:
 80115ac:	b149      	cbz	r1, 80115c2 <__ascii_wctomb+0x16>
 80115ae:	2aff      	cmp	r2, #255	; 0xff
 80115b0:	bf85      	ittet	hi
 80115b2:	238a      	movhi	r3, #138	; 0x8a
 80115b4:	6003      	strhi	r3, [r0, #0]
 80115b6:	700a      	strbls	r2, [r1, #0]
 80115b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80115bc:	bf98      	it	ls
 80115be:	2001      	movls	r0, #1
 80115c0:	4770      	bx	lr
 80115c2:	4608      	mov	r0, r1
 80115c4:	4770      	bx	lr

080115c6 <abort>:
 80115c6:	b508      	push	{r3, lr}
 80115c8:	2006      	movs	r0, #6
 80115ca:	f000 f82b 	bl	8011624 <raise>
 80115ce:	2001      	movs	r0, #1
 80115d0:	f7f3 f916 	bl	8004800 <_exit>

080115d4 <_raise_r>:
 80115d4:	291f      	cmp	r1, #31
 80115d6:	b538      	push	{r3, r4, r5, lr}
 80115d8:	4604      	mov	r4, r0
 80115da:	460d      	mov	r5, r1
 80115dc:	d904      	bls.n	80115e8 <_raise_r+0x14>
 80115de:	2316      	movs	r3, #22
 80115e0:	6003      	str	r3, [r0, #0]
 80115e2:	f04f 30ff 	mov.w	r0, #4294967295
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80115ea:	b112      	cbz	r2, 80115f2 <_raise_r+0x1e>
 80115ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115f0:	b94b      	cbnz	r3, 8011606 <_raise_r+0x32>
 80115f2:	4620      	mov	r0, r4
 80115f4:	f000 f830 	bl	8011658 <_getpid_r>
 80115f8:	462a      	mov	r2, r5
 80115fa:	4601      	mov	r1, r0
 80115fc:	4620      	mov	r0, r4
 80115fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011602:	f000 b817 	b.w	8011634 <_kill_r>
 8011606:	2b01      	cmp	r3, #1
 8011608:	d00a      	beq.n	8011620 <_raise_r+0x4c>
 801160a:	1c59      	adds	r1, r3, #1
 801160c:	d103      	bne.n	8011616 <_raise_r+0x42>
 801160e:	2316      	movs	r3, #22
 8011610:	6003      	str	r3, [r0, #0]
 8011612:	2001      	movs	r0, #1
 8011614:	e7e7      	b.n	80115e6 <_raise_r+0x12>
 8011616:	2400      	movs	r4, #0
 8011618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801161c:	4628      	mov	r0, r5
 801161e:	4798      	blx	r3
 8011620:	2000      	movs	r0, #0
 8011622:	e7e0      	b.n	80115e6 <_raise_r+0x12>

08011624 <raise>:
 8011624:	4b02      	ldr	r3, [pc, #8]	; (8011630 <raise+0xc>)
 8011626:	4601      	mov	r1, r0
 8011628:	6818      	ldr	r0, [r3, #0]
 801162a:	f7ff bfd3 	b.w	80115d4 <_raise_r>
 801162e:	bf00      	nop
 8011630:	200000a0 	.word	0x200000a0

08011634 <_kill_r>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	4d07      	ldr	r5, [pc, #28]	; (8011654 <_kill_r+0x20>)
 8011638:	2300      	movs	r3, #0
 801163a:	4604      	mov	r4, r0
 801163c:	4608      	mov	r0, r1
 801163e:	4611      	mov	r1, r2
 8011640:	602b      	str	r3, [r5, #0]
 8011642:	f7f3 f8cd 	bl	80047e0 <_kill>
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	d102      	bne.n	8011650 <_kill_r+0x1c>
 801164a:	682b      	ldr	r3, [r5, #0]
 801164c:	b103      	cbz	r3, 8011650 <_kill_r+0x1c>
 801164e:	6023      	str	r3, [r4, #0]
 8011650:	bd38      	pop	{r3, r4, r5, pc}
 8011652:	bf00      	nop
 8011654:	20005b14 	.word	0x20005b14

08011658 <_getpid_r>:
 8011658:	f7f3 b8ba 	b.w	80047d0 <_getpid>
 801165c:	0000      	movs	r0, r0
	...

08011660 <cos>:
 8011660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011662:	ec53 2b10 	vmov	r2, r3, d0
 8011666:	4826      	ldr	r0, [pc, #152]	; (8011700 <cos+0xa0>)
 8011668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801166c:	4281      	cmp	r1, r0
 801166e:	dc06      	bgt.n	801167e <cos+0x1e>
 8011670:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80116f8 <cos+0x98>
 8011674:	b005      	add	sp, #20
 8011676:	f85d eb04 	ldr.w	lr, [sp], #4
 801167a:	f000 bea9 	b.w	80123d0 <__kernel_cos>
 801167e:	4821      	ldr	r0, [pc, #132]	; (8011704 <cos+0xa4>)
 8011680:	4281      	cmp	r1, r0
 8011682:	dd09      	ble.n	8011698 <cos+0x38>
 8011684:	ee10 0a10 	vmov	r0, s0
 8011688:	4619      	mov	r1, r3
 801168a:	f7ee fdfd 	bl	8000288 <__aeabi_dsub>
 801168e:	ec41 0b10 	vmov	d0, r0, r1
 8011692:	b005      	add	sp, #20
 8011694:	f85d fb04 	ldr.w	pc, [sp], #4
 8011698:	4668      	mov	r0, sp
 801169a:	f000 fbd9 	bl	8011e50 <__ieee754_rem_pio2>
 801169e:	f000 0003 	and.w	r0, r0, #3
 80116a2:	2801      	cmp	r0, #1
 80116a4:	d00b      	beq.n	80116be <cos+0x5e>
 80116a6:	2802      	cmp	r0, #2
 80116a8:	d016      	beq.n	80116d8 <cos+0x78>
 80116aa:	b9e0      	cbnz	r0, 80116e6 <cos+0x86>
 80116ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116b0:	ed9d 0b00 	vldr	d0, [sp]
 80116b4:	f000 fe8c 	bl	80123d0 <__kernel_cos>
 80116b8:	ec51 0b10 	vmov	r0, r1, d0
 80116bc:	e7e7      	b.n	801168e <cos+0x2e>
 80116be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116c2:	ed9d 0b00 	vldr	d0, [sp]
 80116c6:	f001 fa9b 	bl	8012c00 <__kernel_sin>
 80116ca:	ec53 2b10 	vmov	r2, r3, d0
 80116ce:	ee10 0a10 	vmov	r0, s0
 80116d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80116d6:	e7da      	b.n	801168e <cos+0x2e>
 80116d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116dc:	ed9d 0b00 	vldr	d0, [sp]
 80116e0:	f000 fe76 	bl	80123d0 <__kernel_cos>
 80116e4:	e7f1      	b.n	80116ca <cos+0x6a>
 80116e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116ea:	ed9d 0b00 	vldr	d0, [sp]
 80116ee:	2001      	movs	r0, #1
 80116f0:	f001 fa86 	bl	8012c00 <__kernel_sin>
 80116f4:	e7e0      	b.n	80116b8 <cos+0x58>
 80116f6:	bf00      	nop
	...
 8011700:	3fe921fb 	.word	0x3fe921fb
 8011704:	7fefffff 	.word	0x7fefffff

08011708 <sin>:
 8011708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801170a:	ec53 2b10 	vmov	r2, r3, d0
 801170e:	4828      	ldr	r0, [pc, #160]	; (80117b0 <sin+0xa8>)
 8011710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011714:	4281      	cmp	r1, r0
 8011716:	dc07      	bgt.n	8011728 <sin+0x20>
 8011718:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80117a8 <sin+0xa0>
 801171c:	2000      	movs	r0, #0
 801171e:	b005      	add	sp, #20
 8011720:	f85d eb04 	ldr.w	lr, [sp], #4
 8011724:	f001 ba6c 	b.w	8012c00 <__kernel_sin>
 8011728:	4822      	ldr	r0, [pc, #136]	; (80117b4 <sin+0xac>)
 801172a:	4281      	cmp	r1, r0
 801172c:	dd09      	ble.n	8011742 <sin+0x3a>
 801172e:	ee10 0a10 	vmov	r0, s0
 8011732:	4619      	mov	r1, r3
 8011734:	f7ee fda8 	bl	8000288 <__aeabi_dsub>
 8011738:	ec41 0b10 	vmov	d0, r0, r1
 801173c:	b005      	add	sp, #20
 801173e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011742:	4668      	mov	r0, sp
 8011744:	f000 fb84 	bl	8011e50 <__ieee754_rem_pio2>
 8011748:	f000 0003 	and.w	r0, r0, #3
 801174c:	2801      	cmp	r0, #1
 801174e:	d00c      	beq.n	801176a <sin+0x62>
 8011750:	2802      	cmp	r0, #2
 8011752:	d011      	beq.n	8011778 <sin+0x70>
 8011754:	b9f0      	cbnz	r0, 8011794 <sin+0x8c>
 8011756:	ed9d 1b02 	vldr	d1, [sp, #8]
 801175a:	ed9d 0b00 	vldr	d0, [sp]
 801175e:	2001      	movs	r0, #1
 8011760:	f001 fa4e 	bl	8012c00 <__kernel_sin>
 8011764:	ec51 0b10 	vmov	r0, r1, d0
 8011768:	e7e6      	b.n	8011738 <sin+0x30>
 801176a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801176e:	ed9d 0b00 	vldr	d0, [sp]
 8011772:	f000 fe2d 	bl	80123d0 <__kernel_cos>
 8011776:	e7f5      	b.n	8011764 <sin+0x5c>
 8011778:	ed9d 1b02 	vldr	d1, [sp, #8]
 801177c:	ed9d 0b00 	vldr	d0, [sp]
 8011780:	2001      	movs	r0, #1
 8011782:	f001 fa3d 	bl	8012c00 <__kernel_sin>
 8011786:	ec53 2b10 	vmov	r2, r3, d0
 801178a:	ee10 0a10 	vmov	r0, s0
 801178e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011792:	e7d1      	b.n	8011738 <sin+0x30>
 8011794:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011798:	ed9d 0b00 	vldr	d0, [sp]
 801179c:	f000 fe18 	bl	80123d0 <__kernel_cos>
 80117a0:	e7f1      	b.n	8011786 <sin+0x7e>
 80117a2:	bf00      	nop
 80117a4:	f3af 8000 	nop.w
	...
 80117b0:	3fe921fb 	.word	0x3fe921fb
 80117b4:	7fefffff 	.word	0x7fefffff

080117b8 <tan>:
 80117b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ba:	ec53 2b10 	vmov	r2, r3, d0
 80117be:	4816      	ldr	r0, [pc, #88]	; (8011818 <tan+0x60>)
 80117c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80117c4:	4281      	cmp	r1, r0
 80117c6:	dc07      	bgt.n	80117d8 <tan+0x20>
 80117c8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8011810 <tan+0x58>
 80117cc:	2001      	movs	r0, #1
 80117ce:	b005      	add	sp, #20
 80117d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80117d4:	f001 bad4 	b.w	8012d80 <__kernel_tan>
 80117d8:	4810      	ldr	r0, [pc, #64]	; (801181c <tan+0x64>)
 80117da:	4281      	cmp	r1, r0
 80117dc:	dd09      	ble.n	80117f2 <tan+0x3a>
 80117de:	ee10 0a10 	vmov	r0, s0
 80117e2:	4619      	mov	r1, r3
 80117e4:	f7ee fd50 	bl	8000288 <__aeabi_dsub>
 80117e8:	ec41 0b10 	vmov	d0, r0, r1
 80117ec:	b005      	add	sp, #20
 80117ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80117f2:	4668      	mov	r0, sp
 80117f4:	f000 fb2c 	bl	8011e50 <__ieee754_rem_pio2>
 80117f8:	0040      	lsls	r0, r0, #1
 80117fa:	f000 0002 	and.w	r0, r0, #2
 80117fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011802:	ed9d 0b00 	vldr	d0, [sp]
 8011806:	f1c0 0001 	rsb	r0, r0, #1
 801180a:	f001 fab9 	bl	8012d80 <__kernel_tan>
 801180e:	e7ed      	b.n	80117ec <tan+0x34>
	...
 8011818:	3fe921fb 	.word	0x3fe921fb
 801181c:	7fefffff 	.word	0x7fefffff

08011820 <asin>:
 8011820:	b538      	push	{r3, r4, r5, lr}
 8011822:	ed2d 8b02 	vpush	{d8}
 8011826:	ec55 4b10 	vmov	r4, r5, d0
 801182a:	f000 f831 	bl	8011890 <__ieee754_asin>
 801182e:	4622      	mov	r2, r4
 8011830:	462b      	mov	r3, r5
 8011832:	4620      	mov	r0, r4
 8011834:	4629      	mov	r1, r5
 8011836:	eeb0 8a40 	vmov.f32	s16, s0
 801183a:	eef0 8a60 	vmov.f32	s17, s1
 801183e:	f7ef f975 	bl	8000b2c <__aeabi_dcmpun>
 8011842:	b9a8      	cbnz	r0, 8011870 <asin+0x50>
 8011844:	ec45 4b10 	vmov	d0, r4, r5
 8011848:	f001 fe46 	bl	80134d8 <fabs>
 801184c:	4b0c      	ldr	r3, [pc, #48]	; (8011880 <asin+0x60>)
 801184e:	ec51 0b10 	vmov	r0, r1, d0
 8011852:	2200      	movs	r2, #0
 8011854:	f7ef f960 	bl	8000b18 <__aeabi_dcmpgt>
 8011858:	b150      	cbz	r0, 8011870 <asin+0x50>
 801185a:	f7fd f8bf 	bl	800e9dc <__errno>
 801185e:	ecbd 8b02 	vpop	{d8}
 8011862:	2321      	movs	r3, #33	; 0x21
 8011864:	6003      	str	r3, [r0, #0]
 8011866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801186a:	4806      	ldr	r0, [pc, #24]	; (8011884 <asin+0x64>)
 801186c:	f001 bec0 	b.w	80135f0 <nan>
 8011870:	eeb0 0a48 	vmov.f32	s0, s16
 8011874:	eef0 0a68 	vmov.f32	s1, s17
 8011878:	ecbd 8b02 	vpop	{d8}
 801187c:	bd38      	pop	{r3, r4, r5, pc}
 801187e:	bf00      	nop
 8011880:	3ff00000 	.word	0x3ff00000
 8011884:	08013f50 	.word	0x08013f50

08011888 <atan2>:
 8011888:	f000 ba16 	b.w	8011cb8 <__ieee754_atan2>
 801188c:	0000      	movs	r0, r0
	...

08011890 <__ieee754_asin>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	ed2d 8b04 	vpush	{d8-d9}
 8011898:	ec55 4b10 	vmov	r4, r5, d0
 801189c:	4bcc      	ldr	r3, [pc, #816]	; (8011bd0 <__ieee754_asin+0x340>)
 801189e:	b083      	sub	sp, #12
 80118a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80118a4:	4598      	cmp	r8, r3
 80118a6:	9501      	str	r5, [sp, #4]
 80118a8:	dd35      	ble.n	8011916 <__ieee754_asin+0x86>
 80118aa:	ee10 3a10 	vmov	r3, s0
 80118ae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80118b2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80118b6:	ea58 0303 	orrs.w	r3, r8, r3
 80118ba:	d117      	bne.n	80118ec <__ieee754_asin+0x5c>
 80118bc:	a3aa      	add	r3, pc, #680	; (adr r3, 8011b68 <__ieee754_asin+0x2d8>)
 80118be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c2:	ee10 0a10 	vmov	r0, s0
 80118c6:	4629      	mov	r1, r5
 80118c8:	f7ee fe96 	bl	80005f8 <__aeabi_dmul>
 80118cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8011b70 <__ieee754_asin+0x2e0>)
 80118ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d2:	4606      	mov	r6, r0
 80118d4:	460f      	mov	r7, r1
 80118d6:	4620      	mov	r0, r4
 80118d8:	4629      	mov	r1, r5
 80118da:	f7ee fe8d 	bl	80005f8 <__aeabi_dmul>
 80118de:	4602      	mov	r2, r0
 80118e0:	460b      	mov	r3, r1
 80118e2:	4630      	mov	r0, r6
 80118e4:	4639      	mov	r1, r7
 80118e6:	f7ee fcd1 	bl	800028c <__adddf3>
 80118ea:	e00b      	b.n	8011904 <__ieee754_asin+0x74>
 80118ec:	ee10 2a10 	vmov	r2, s0
 80118f0:	462b      	mov	r3, r5
 80118f2:	ee10 0a10 	vmov	r0, s0
 80118f6:	4629      	mov	r1, r5
 80118f8:	f7ee fcc6 	bl	8000288 <__aeabi_dsub>
 80118fc:	4602      	mov	r2, r0
 80118fe:	460b      	mov	r3, r1
 8011900:	f7ee ffa4 	bl	800084c <__aeabi_ddiv>
 8011904:	4604      	mov	r4, r0
 8011906:	460d      	mov	r5, r1
 8011908:	ec45 4b10 	vmov	d0, r4, r5
 801190c:	b003      	add	sp, #12
 801190e:	ecbd 8b04 	vpop	{d8-d9}
 8011912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011916:	4baf      	ldr	r3, [pc, #700]	; (8011bd4 <__ieee754_asin+0x344>)
 8011918:	4598      	cmp	r8, r3
 801191a:	dc11      	bgt.n	8011940 <__ieee754_asin+0xb0>
 801191c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011920:	f280 80ae 	bge.w	8011a80 <__ieee754_asin+0x1f0>
 8011924:	a394      	add	r3, pc, #592	; (adr r3, 8011b78 <__ieee754_asin+0x2e8>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	ee10 0a10 	vmov	r0, s0
 801192e:	4629      	mov	r1, r5
 8011930:	f7ee fcac 	bl	800028c <__adddf3>
 8011934:	4ba8      	ldr	r3, [pc, #672]	; (8011bd8 <__ieee754_asin+0x348>)
 8011936:	2200      	movs	r2, #0
 8011938:	f7ef f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 801193c:	2800      	cmp	r0, #0
 801193e:	d1e3      	bne.n	8011908 <__ieee754_asin+0x78>
 8011940:	ec45 4b10 	vmov	d0, r4, r5
 8011944:	f001 fdc8 	bl	80134d8 <fabs>
 8011948:	49a3      	ldr	r1, [pc, #652]	; (8011bd8 <__ieee754_asin+0x348>)
 801194a:	ec53 2b10 	vmov	r2, r3, d0
 801194e:	2000      	movs	r0, #0
 8011950:	f7ee fc9a 	bl	8000288 <__aeabi_dsub>
 8011954:	4ba1      	ldr	r3, [pc, #644]	; (8011bdc <__ieee754_asin+0x34c>)
 8011956:	2200      	movs	r2, #0
 8011958:	f7ee fe4e 	bl	80005f8 <__aeabi_dmul>
 801195c:	a388      	add	r3, pc, #544	; (adr r3, 8011b80 <__ieee754_asin+0x2f0>)
 801195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011962:	4604      	mov	r4, r0
 8011964:	460d      	mov	r5, r1
 8011966:	f7ee fe47 	bl	80005f8 <__aeabi_dmul>
 801196a:	a387      	add	r3, pc, #540	; (adr r3, 8011b88 <__ieee754_asin+0x2f8>)
 801196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011970:	f7ee fc8c 	bl	800028c <__adddf3>
 8011974:	4622      	mov	r2, r4
 8011976:	462b      	mov	r3, r5
 8011978:	f7ee fe3e 	bl	80005f8 <__aeabi_dmul>
 801197c:	a384      	add	r3, pc, #528	; (adr r3, 8011b90 <__ieee754_asin+0x300>)
 801197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011982:	f7ee fc81 	bl	8000288 <__aeabi_dsub>
 8011986:	4622      	mov	r2, r4
 8011988:	462b      	mov	r3, r5
 801198a:	f7ee fe35 	bl	80005f8 <__aeabi_dmul>
 801198e:	a382      	add	r3, pc, #520	; (adr r3, 8011b98 <__ieee754_asin+0x308>)
 8011990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011994:	f7ee fc7a 	bl	800028c <__adddf3>
 8011998:	4622      	mov	r2, r4
 801199a:	462b      	mov	r3, r5
 801199c:	f7ee fe2c 	bl	80005f8 <__aeabi_dmul>
 80119a0:	a37f      	add	r3, pc, #508	; (adr r3, 8011ba0 <__ieee754_asin+0x310>)
 80119a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a6:	f7ee fc6f 	bl	8000288 <__aeabi_dsub>
 80119aa:	4622      	mov	r2, r4
 80119ac:	462b      	mov	r3, r5
 80119ae:	f7ee fe23 	bl	80005f8 <__aeabi_dmul>
 80119b2:	a37d      	add	r3, pc, #500	; (adr r3, 8011ba8 <__ieee754_asin+0x318>)
 80119b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b8:	f7ee fc68 	bl	800028c <__adddf3>
 80119bc:	4622      	mov	r2, r4
 80119be:	462b      	mov	r3, r5
 80119c0:	f7ee fe1a 	bl	80005f8 <__aeabi_dmul>
 80119c4:	a37a      	add	r3, pc, #488	; (adr r3, 8011bb0 <__ieee754_asin+0x320>)
 80119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ca:	ec41 0b18 	vmov	d8, r0, r1
 80119ce:	4620      	mov	r0, r4
 80119d0:	4629      	mov	r1, r5
 80119d2:	f7ee fe11 	bl	80005f8 <__aeabi_dmul>
 80119d6:	a378      	add	r3, pc, #480	; (adr r3, 8011bb8 <__ieee754_asin+0x328>)
 80119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119dc:	f7ee fc54 	bl	8000288 <__aeabi_dsub>
 80119e0:	4622      	mov	r2, r4
 80119e2:	462b      	mov	r3, r5
 80119e4:	f7ee fe08 	bl	80005f8 <__aeabi_dmul>
 80119e8:	a375      	add	r3, pc, #468	; (adr r3, 8011bc0 <__ieee754_asin+0x330>)
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	f7ee fc4d 	bl	800028c <__adddf3>
 80119f2:	4622      	mov	r2, r4
 80119f4:	462b      	mov	r3, r5
 80119f6:	f7ee fdff 	bl	80005f8 <__aeabi_dmul>
 80119fa:	a373      	add	r3, pc, #460	; (adr r3, 8011bc8 <__ieee754_asin+0x338>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	f7ee fc42 	bl	8000288 <__aeabi_dsub>
 8011a04:	4622      	mov	r2, r4
 8011a06:	462b      	mov	r3, r5
 8011a08:	f7ee fdf6 	bl	80005f8 <__aeabi_dmul>
 8011a0c:	4b72      	ldr	r3, [pc, #456]	; (8011bd8 <__ieee754_asin+0x348>)
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f7ee fc3c 	bl	800028c <__adddf3>
 8011a14:	ec45 4b10 	vmov	d0, r4, r5
 8011a18:	4606      	mov	r6, r0
 8011a1a:	460f      	mov	r7, r1
 8011a1c:	f000 fc24 	bl	8012268 <__ieee754_sqrt>
 8011a20:	4b6f      	ldr	r3, [pc, #444]	; (8011be0 <__ieee754_asin+0x350>)
 8011a22:	4598      	cmp	r8, r3
 8011a24:	ec5b ab10 	vmov	sl, fp, d0
 8011a28:	f340 80dc 	ble.w	8011be4 <__ieee754_asin+0x354>
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	463b      	mov	r3, r7
 8011a30:	ec51 0b18 	vmov	r0, r1, d8
 8011a34:	f7ee ff0a 	bl	800084c <__aeabi_ddiv>
 8011a38:	4652      	mov	r2, sl
 8011a3a:	465b      	mov	r3, fp
 8011a3c:	f7ee fddc 	bl	80005f8 <__aeabi_dmul>
 8011a40:	4652      	mov	r2, sl
 8011a42:	465b      	mov	r3, fp
 8011a44:	f7ee fc22 	bl	800028c <__adddf3>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	f7ee fc1e 	bl	800028c <__adddf3>
 8011a50:	a347      	add	r3, pc, #284	; (adr r3, 8011b70 <__ieee754_asin+0x2e0>)
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	f7ee fc17 	bl	8000288 <__aeabi_dsub>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	a142      	add	r1, pc, #264	; (adr r1, 8011b68 <__ieee754_asin+0x2d8>)
 8011a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a64:	f7ee fc10 	bl	8000288 <__aeabi_dsub>
 8011a68:	9b01      	ldr	r3, [sp, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	bfdc      	itt	le
 8011a6e:	4602      	movle	r2, r0
 8011a70:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8011a74:	4604      	mov	r4, r0
 8011a76:	460d      	mov	r5, r1
 8011a78:	bfdc      	itt	le
 8011a7a:	4614      	movle	r4, r2
 8011a7c:	461d      	movle	r5, r3
 8011a7e:	e743      	b.n	8011908 <__ieee754_asin+0x78>
 8011a80:	ee10 2a10 	vmov	r2, s0
 8011a84:	ee10 0a10 	vmov	r0, s0
 8011a88:	462b      	mov	r3, r5
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	f7ee fdb4 	bl	80005f8 <__aeabi_dmul>
 8011a90:	a33b      	add	r3, pc, #236	; (adr r3, 8011b80 <__ieee754_asin+0x2f0>)
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	4606      	mov	r6, r0
 8011a98:	460f      	mov	r7, r1
 8011a9a:	f7ee fdad 	bl	80005f8 <__aeabi_dmul>
 8011a9e:	a33a      	add	r3, pc, #232	; (adr r3, 8011b88 <__ieee754_asin+0x2f8>)
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	f7ee fbf2 	bl	800028c <__adddf3>
 8011aa8:	4632      	mov	r2, r6
 8011aaa:	463b      	mov	r3, r7
 8011aac:	f7ee fda4 	bl	80005f8 <__aeabi_dmul>
 8011ab0:	a337      	add	r3, pc, #220	; (adr r3, 8011b90 <__ieee754_asin+0x300>)
 8011ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab6:	f7ee fbe7 	bl	8000288 <__aeabi_dsub>
 8011aba:	4632      	mov	r2, r6
 8011abc:	463b      	mov	r3, r7
 8011abe:	f7ee fd9b 	bl	80005f8 <__aeabi_dmul>
 8011ac2:	a335      	add	r3, pc, #212	; (adr r3, 8011b98 <__ieee754_asin+0x308>)
 8011ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac8:	f7ee fbe0 	bl	800028c <__adddf3>
 8011acc:	4632      	mov	r2, r6
 8011ace:	463b      	mov	r3, r7
 8011ad0:	f7ee fd92 	bl	80005f8 <__aeabi_dmul>
 8011ad4:	a332      	add	r3, pc, #200	; (adr r3, 8011ba0 <__ieee754_asin+0x310>)
 8011ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ada:	f7ee fbd5 	bl	8000288 <__aeabi_dsub>
 8011ade:	4632      	mov	r2, r6
 8011ae0:	463b      	mov	r3, r7
 8011ae2:	f7ee fd89 	bl	80005f8 <__aeabi_dmul>
 8011ae6:	a330      	add	r3, pc, #192	; (adr r3, 8011ba8 <__ieee754_asin+0x318>)
 8011ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aec:	f7ee fbce 	bl	800028c <__adddf3>
 8011af0:	4632      	mov	r2, r6
 8011af2:	463b      	mov	r3, r7
 8011af4:	f7ee fd80 	bl	80005f8 <__aeabi_dmul>
 8011af8:	a32d      	add	r3, pc, #180	; (adr r3, 8011bb0 <__ieee754_asin+0x320>)
 8011afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afe:	4680      	mov	r8, r0
 8011b00:	4689      	mov	r9, r1
 8011b02:	4630      	mov	r0, r6
 8011b04:	4639      	mov	r1, r7
 8011b06:	f7ee fd77 	bl	80005f8 <__aeabi_dmul>
 8011b0a:	a32b      	add	r3, pc, #172	; (adr r3, 8011bb8 <__ieee754_asin+0x328>)
 8011b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b10:	f7ee fbba 	bl	8000288 <__aeabi_dsub>
 8011b14:	4632      	mov	r2, r6
 8011b16:	463b      	mov	r3, r7
 8011b18:	f7ee fd6e 	bl	80005f8 <__aeabi_dmul>
 8011b1c:	a328      	add	r3, pc, #160	; (adr r3, 8011bc0 <__ieee754_asin+0x330>)
 8011b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b22:	f7ee fbb3 	bl	800028c <__adddf3>
 8011b26:	4632      	mov	r2, r6
 8011b28:	463b      	mov	r3, r7
 8011b2a:	f7ee fd65 	bl	80005f8 <__aeabi_dmul>
 8011b2e:	a326      	add	r3, pc, #152	; (adr r3, 8011bc8 <__ieee754_asin+0x338>)
 8011b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b34:	f7ee fba8 	bl	8000288 <__aeabi_dsub>
 8011b38:	4632      	mov	r2, r6
 8011b3a:	463b      	mov	r3, r7
 8011b3c:	f7ee fd5c 	bl	80005f8 <__aeabi_dmul>
 8011b40:	4b25      	ldr	r3, [pc, #148]	; (8011bd8 <__ieee754_asin+0x348>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	f7ee fba2 	bl	800028c <__adddf3>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4640      	mov	r0, r8
 8011b4e:	4649      	mov	r1, r9
 8011b50:	f7ee fe7c 	bl	800084c <__aeabi_ddiv>
 8011b54:	4622      	mov	r2, r4
 8011b56:	462b      	mov	r3, r5
 8011b58:	f7ee fd4e 	bl	80005f8 <__aeabi_dmul>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	460b      	mov	r3, r1
 8011b60:	4620      	mov	r0, r4
 8011b62:	4629      	mov	r1, r5
 8011b64:	e6bf      	b.n	80118e6 <__ieee754_asin+0x56>
 8011b66:	bf00      	nop
 8011b68:	54442d18 	.word	0x54442d18
 8011b6c:	3ff921fb 	.word	0x3ff921fb
 8011b70:	33145c07 	.word	0x33145c07
 8011b74:	3c91a626 	.word	0x3c91a626
 8011b78:	8800759c 	.word	0x8800759c
 8011b7c:	7e37e43c 	.word	0x7e37e43c
 8011b80:	0dfdf709 	.word	0x0dfdf709
 8011b84:	3f023de1 	.word	0x3f023de1
 8011b88:	7501b288 	.word	0x7501b288
 8011b8c:	3f49efe0 	.word	0x3f49efe0
 8011b90:	b5688f3b 	.word	0xb5688f3b
 8011b94:	3fa48228 	.word	0x3fa48228
 8011b98:	0e884455 	.word	0x0e884455
 8011b9c:	3fc9c155 	.word	0x3fc9c155
 8011ba0:	03eb6f7d 	.word	0x03eb6f7d
 8011ba4:	3fd4d612 	.word	0x3fd4d612
 8011ba8:	55555555 	.word	0x55555555
 8011bac:	3fc55555 	.word	0x3fc55555
 8011bb0:	b12e9282 	.word	0xb12e9282
 8011bb4:	3fb3b8c5 	.word	0x3fb3b8c5
 8011bb8:	1b8d0159 	.word	0x1b8d0159
 8011bbc:	3fe6066c 	.word	0x3fe6066c
 8011bc0:	9c598ac8 	.word	0x9c598ac8
 8011bc4:	40002ae5 	.word	0x40002ae5
 8011bc8:	1c8a2d4b 	.word	0x1c8a2d4b
 8011bcc:	40033a27 	.word	0x40033a27
 8011bd0:	3fefffff 	.word	0x3fefffff
 8011bd4:	3fdfffff 	.word	0x3fdfffff
 8011bd8:	3ff00000 	.word	0x3ff00000
 8011bdc:	3fe00000 	.word	0x3fe00000
 8011be0:	3fef3332 	.word	0x3fef3332
 8011be4:	ee10 2a10 	vmov	r2, s0
 8011be8:	ee10 0a10 	vmov	r0, s0
 8011bec:	465b      	mov	r3, fp
 8011bee:	4659      	mov	r1, fp
 8011bf0:	f7ee fb4c 	bl	800028c <__adddf3>
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	463b      	mov	r3, r7
 8011bf8:	ec41 0b19 	vmov	d9, r0, r1
 8011bfc:	ec51 0b18 	vmov	r0, r1, d8
 8011c00:	f7ee fe24 	bl	800084c <__aeabi_ddiv>
 8011c04:	4602      	mov	r2, r0
 8011c06:	460b      	mov	r3, r1
 8011c08:	ec51 0b19 	vmov	r0, r1, d9
 8011c0c:	f7ee fcf4 	bl	80005f8 <__aeabi_dmul>
 8011c10:	f04f 0800 	mov.w	r8, #0
 8011c14:	4606      	mov	r6, r0
 8011c16:	460f      	mov	r7, r1
 8011c18:	4642      	mov	r2, r8
 8011c1a:	465b      	mov	r3, fp
 8011c1c:	4640      	mov	r0, r8
 8011c1e:	4659      	mov	r1, fp
 8011c20:	f7ee fcea 	bl	80005f8 <__aeabi_dmul>
 8011c24:	4602      	mov	r2, r0
 8011c26:	460b      	mov	r3, r1
 8011c28:	4620      	mov	r0, r4
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	f7ee fb2c 	bl	8000288 <__aeabi_dsub>
 8011c30:	4642      	mov	r2, r8
 8011c32:	4604      	mov	r4, r0
 8011c34:	460d      	mov	r5, r1
 8011c36:	465b      	mov	r3, fp
 8011c38:	4650      	mov	r0, sl
 8011c3a:	4659      	mov	r1, fp
 8011c3c:	f7ee fb26 	bl	800028c <__adddf3>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4620      	mov	r0, r4
 8011c46:	4629      	mov	r1, r5
 8011c48:	f7ee fe00 	bl	800084c <__aeabi_ddiv>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	460b      	mov	r3, r1
 8011c50:	f7ee fb1c 	bl	800028c <__adddf3>
 8011c54:	4602      	mov	r2, r0
 8011c56:	460b      	mov	r3, r1
 8011c58:	a113      	add	r1, pc, #76	; (adr r1, 8011ca8 <__ieee754_asin+0x418>)
 8011c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c5e:	f7ee fb13 	bl	8000288 <__aeabi_dsub>
 8011c62:	4602      	mov	r2, r0
 8011c64:	460b      	mov	r3, r1
 8011c66:	4630      	mov	r0, r6
 8011c68:	4639      	mov	r1, r7
 8011c6a:	f7ee fb0d 	bl	8000288 <__aeabi_dsub>
 8011c6e:	4642      	mov	r2, r8
 8011c70:	4604      	mov	r4, r0
 8011c72:	460d      	mov	r5, r1
 8011c74:	465b      	mov	r3, fp
 8011c76:	4640      	mov	r0, r8
 8011c78:	4659      	mov	r1, fp
 8011c7a:	f7ee fb07 	bl	800028c <__adddf3>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	460b      	mov	r3, r1
 8011c82:	a10b      	add	r1, pc, #44	; (adr r1, 8011cb0 <__ieee754_asin+0x420>)
 8011c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c88:	f7ee fafe 	bl	8000288 <__aeabi_dsub>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	460b      	mov	r3, r1
 8011c90:	4620      	mov	r0, r4
 8011c92:	4629      	mov	r1, r5
 8011c94:	f7ee faf8 	bl	8000288 <__aeabi_dsub>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	a104      	add	r1, pc, #16	; (adr r1, 8011cb0 <__ieee754_asin+0x420>)
 8011c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ca2:	e6df      	b.n	8011a64 <__ieee754_asin+0x1d4>
 8011ca4:	f3af 8000 	nop.w
 8011ca8:	33145c07 	.word	0x33145c07
 8011cac:	3c91a626 	.word	0x3c91a626
 8011cb0:	54442d18 	.word	0x54442d18
 8011cb4:	3fe921fb 	.word	0x3fe921fb

08011cb8 <__ieee754_atan2>:
 8011cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	ec57 6b11 	vmov	r6, r7, d1
 8011cc0:	4273      	negs	r3, r6
 8011cc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011e48 <__ieee754_atan2+0x190>
 8011cc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011cca:	4333      	orrs	r3, r6
 8011ccc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011cd0:	4573      	cmp	r3, lr
 8011cd2:	ec51 0b10 	vmov	r0, r1, d0
 8011cd6:	ee11 8a10 	vmov	r8, s2
 8011cda:	d80a      	bhi.n	8011cf2 <__ieee754_atan2+0x3a>
 8011cdc:	4244      	negs	r4, r0
 8011cde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ce2:	4304      	orrs	r4, r0
 8011ce4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011ce8:	4574      	cmp	r4, lr
 8011cea:	ee10 9a10 	vmov	r9, s0
 8011cee:	468c      	mov	ip, r1
 8011cf0:	d907      	bls.n	8011d02 <__ieee754_atan2+0x4a>
 8011cf2:	4632      	mov	r2, r6
 8011cf4:	463b      	mov	r3, r7
 8011cf6:	f7ee fac9 	bl	800028c <__adddf3>
 8011cfa:	ec41 0b10 	vmov	d0, r0, r1
 8011cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011d06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011d0a:	4334      	orrs	r4, r6
 8011d0c:	d103      	bne.n	8011d16 <__ieee754_atan2+0x5e>
 8011d0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d12:	f001 ba41 	b.w	8013198 <atan>
 8011d16:	17bc      	asrs	r4, r7, #30
 8011d18:	f004 0402 	and.w	r4, r4, #2
 8011d1c:	ea53 0909 	orrs.w	r9, r3, r9
 8011d20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011d24:	d107      	bne.n	8011d36 <__ieee754_atan2+0x7e>
 8011d26:	2c02      	cmp	r4, #2
 8011d28:	d060      	beq.n	8011dec <__ieee754_atan2+0x134>
 8011d2a:	2c03      	cmp	r4, #3
 8011d2c:	d1e5      	bne.n	8011cfa <__ieee754_atan2+0x42>
 8011d2e:	a142      	add	r1, pc, #264	; (adr r1, 8011e38 <__ieee754_atan2+0x180>)
 8011d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d34:	e7e1      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011d36:	ea52 0808 	orrs.w	r8, r2, r8
 8011d3a:	d106      	bne.n	8011d4a <__ieee754_atan2+0x92>
 8011d3c:	f1bc 0f00 	cmp.w	ip, #0
 8011d40:	da5f      	bge.n	8011e02 <__ieee754_atan2+0x14a>
 8011d42:	a13f      	add	r1, pc, #252	; (adr r1, 8011e40 <__ieee754_atan2+0x188>)
 8011d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d48:	e7d7      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011d4a:	4572      	cmp	r2, lr
 8011d4c:	d10f      	bne.n	8011d6e <__ieee754_atan2+0xb6>
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	f104 34ff 	add.w	r4, r4, #4294967295
 8011d54:	d107      	bne.n	8011d66 <__ieee754_atan2+0xae>
 8011d56:	2c02      	cmp	r4, #2
 8011d58:	d84c      	bhi.n	8011df4 <__ieee754_atan2+0x13c>
 8011d5a:	4b35      	ldr	r3, [pc, #212]	; (8011e30 <__ieee754_atan2+0x178>)
 8011d5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011d60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011d64:	e7c9      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011d66:	2c02      	cmp	r4, #2
 8011d68:	d848      	bhi.n	8011dfc <__ieee754_atan2+0x144>
 8011d6a:	4b32      	ldr	r3, [pc, #200]	; (8011e34 <__ieee754_atan2+0x17c>)
 8011d6c:	e7f6      	b.n	8011d5c <__ieee754_atan2+0xa4>
 8011d6e:	4573      	cmp	r3, lr
 8011d70:	d0e4      	beq.n	8011d3c <__ieee754_atan2+0x84>
 8011d72:	1a9b      	subs	r3, r3, r2
 8011d74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011d78:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d7c:	da1e      	bge.n	8011dbc <__ieee754_atan2+0x104>
 8011d7e:	2f00      	cmp	r7, #0
 8011d80:	da01      	bge.n	8011d86 <__ieee754_atan2+0xce>
 8011d82:	323c      	adds	r2, #60	; 0x3c
 8011d84:	db1e      	blt.n	8011dc4 <__ieee754_atan2+0x10c>
 8011d86:	4632      	mov	r2, r6
 8011d88:	463b      	mov	r3, r7
 8011d8a:	f7ee fd5f 	bl	800084c <__aeabi_ddiv>
 8011d8e:	ec41 0b10 	vmov	d0, r0, r1
 8011d92:	f001 fba1 	bl	80134d8 <fabs>
 8011d96:	f001 f9ff 	bl	8013198 <atan>
 8011d9a:	ec51 0b10 	vmov	r0, r1, d0
 8011d9e:	2c01      	cmp	r4, #1
 8011da0:	d013      	beq.n	8011dca <__ieee754_atan2+0x112>
 8011da2:	2c02      	cmp	r4, #2
 8011da4:	d015      	beq.n	8011dd2 <__ieee754_atan2+0x11a>
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	d0a7      	beq.n	8011cfa <__ieee754_atan2+0x42>
 8011daa:	a319      	add	r3, pc, #100	; (adr r3, 8011e10 <__ieee754_atan2+0x158>)
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	f7ee fa6a 	bl	8000288 <__aeabi_dsub>
 8011db4:	a318      	add	r3, pc, #96	; (adr r3, 8011e18 <__ieee754_atan2+0x160>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	e014      	b.n	8011de6 <__ieee754_atan2+0x12e>
 8011dbc:	a118      	add	r1, pc, #96	; (adr r1, 8011e20 <__ieee754_atan2+0x168>)
 8011dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dc2:	e7ec      	b.n	8011d9e <__ieee754_atan2+0xe6>
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	e7e9      	b.n	8011d9e <__ieee754_atan2+0xe6>
 8011dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dce:	4619      	mov	r1, r3
 8011dd0:	e793      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011dd2:	a30f      	add	r3, pc, #60	; (adr r3, 8011e10 <__ieee754_atan2+0x158>)
 8011dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd8:	f7ee fa56 	bl	8000288 <__aeabi_dsub>
 8011ddc:	4602      	mov	r2, r0
 8011dde:	460b      	mov	r3, r1
 8011de0:	a10d      	add	r1, pc, #52	; (adr r1, 8011e18 <__ieee754_atan2+0x160>)
 8011de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011de6:	f7ee fa4f 	bl	8000288 <__aeabi_dsub>
 8011dea:	e786      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011dec:	a10a      	add	r1, pc, #40	; (adr r1, 8011e18 <__ieee754_atan2+0x160>)
 8011dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011df2:	e782      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011df4:	a10c      	add	r1, pc, #48	; (adr r1, 8011e28 <__ieee754_atan2+0x170>)
 8011df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dfa:	e77e      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	2100      	movs	r1, #0
 8011e00:	e77b      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011e02:	a107      	add	r1, pc, #28	; (adr r1, 8011e20 <__ieee754_atan2+0x168>)
 8011e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e08:	e777      	b.n	8011cfa <__ieee754_atan2+0x42>
 8011e0a:	bf00      	nop
 8011e0c:	f3af 8000 	nop.w
 8011e10:	33145c07 	.word	0x33145c07
 8011e14:	3ca1a626 	.word	0x3ca1a626
 8011e18:	54442d18 	.word	0x54442d18
 8011e1c:	400921fb 	.word	0x400921fb
 8011e20:	54442d18 	.word	0x54442d18
 8011e24:	3ff921fb 	.word	0x3ff921fb
 8011e28:	54442d18 	.word	0x54442d18
 8011e2c:	3fe921fb 	.word	0x3fe921fb
 8011e30:	08014060 	.word	0x08014060
 8011e34:	08014078 	.word	0x08014078
 8011e38:	54442d18 	.word	0x54442d18
 8011e3c:	c00921fb 	.word	0xc00921fb
 8011e40:	54442d18 	.word	0x54442d18
 8011e44:	bff921fb 	.word	0xbff921fb
 8011e48:	7ff00000 	.word	0x7ff00000
 8011e4c:	00000000 	.word	0x00000000

08011e50 <__ieee754_rem_pio2>:
 8011e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	ed2d 8b02 	vpush	{d8}
 8011e58:	ec55 4b10 	vmov	r4, r5, d0
 8011e5c:	4bca      	ldr	r3, [pc, #808]	; (8012188 <__ieee754_rem_pio2+0x338>)
 8011e5e:	b08b      	sub	sp, #44	; 0x2c
 8011e60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011e64:	4598      	cmp	r8, r3
 8011e66:	4682      	mov	sl, r0
 8011e68:	9502      	str	r5, [sp, #8]
 8011e6a:	dc08      	bgt.n	8011e7e <__ieee754_rem_pio2+0x2e>
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	2300      	movs	r3, #0
 8011e70:	ed80 0b00 	vstr	d0, [r0]
 8011e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e78:	f04f 0b00 	mov.w	fp, #0
 8011e7c:	e028      	b.n	8011ed0 <__ieee754_rem_pio2+0x80>
 8011e7e:	4bc3      	ldr	r3, [pc, #780]	; (801218c <__ieee754_rem_pio2+0x33c>)
 8011e80:	4598      	cmp	r8, r3
 8011e82:	dc78      	bgt.n	8011f76 <__ieee754_rem_pio2+0x126>
 8011e84:	9b02      	ldr	r3, [sp, #8]
 8011e86:	4ec2      	ldr	r6, [pc, #776]	; (8012190 <__ieee754_rem_pio2+0x340>)
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	ee10 0a10 	vmov	r0, s0
 8011e8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012150 <__ieee754_rem_pio2+0x300>)
 8011e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e94:	4629      	mov	r1, r5
 8011e96:	dd39      	ble.n	8011f0c <__ieee754_rem_pio2+0xbc>
 8011e98:	f7ee f9f6 	bl	8000288 <__aeabi_dsub>
 8011e9c:	45b0      	cmp	r8, r6
 8011e9e:	4604      	mov	r4, r0
 8011ea0:	460d      	mov	r5, r1
 8011ea2:	d01b      	beq.n	8011edc <__ieee754_rem_pio2+0x8c>
 8011ea4:	a3ac      	add	r3, pc, #688	; (adr r3, 8012158 <__ieee754_rem_pio2+0x308>)
 8011ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eaa:	f7ee f9ed 	bl	8000288 <__aeabi_dsub>
 8011eae:	4602      	mov	r2, r0
 8011eb0:	460b      	mov	r3, r1
 8011eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	4629      	mov	r1, r5
 8011eba:	f7ee f9e5 	bl	8000288 <__aeabi_dsub>
 8011ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 8012158 <__ieee754_rem_pio2+0x308>)
 8011ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec4:	f7ee f9e0 	bl	8000288 <__aeabi_dsub>
 8011ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ecc:	f04f 0b01 	mov.w	fp, #1
 8011ed0:	4658      	mov	r0, fp
 8011ed2:	b00b      	add	sp, #44	; 0x2c
 8011ed4:	ecbd 8b02 	vpop	{d8}
 8011ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011edc:	a3a0      	add	r3, pc, #640	; (adr r3, 8012160 <__ieee754_rem_pio2+0x310>)
 8011ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee2:	f7ee f9d1 	bl	8000288 <__aeabi_dsub>
 8011ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 8012168 <__ieee754_rem_pio2+0x318>)
 8011ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eec:	4604      	mov	r4, r0
 8011eee:	460d      	mov	r5, r1
 8011ef0:	f7ee f9ca 	bl	8000288 <__aeabi_dsub>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8011efc:	4620      	mov	r0, r4
 8011efe:	4629      	mov	r1, r5
 8011f00:	f7ee f9c2 	bl	8000288 <__aeabi_dsub>
 8011f04:	a398      	add	r3, pc, #608	; (adr r3, 8012168 <__ieee754_rem_pio2+0x318>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	e7db      	b.n	8011ec4 <__ieee754_rem_pio2+0x74>
 8011f0c:	f7ee f9be 	bl	800028c <__adddf3>
 8011f10:	45b0      	cmp	r8, r6
 8011f12:	4604      	mov	r4, r0
 8011f14:	460d      	mov	r5, r1
 8011f16:	d016      	beq.n	8011f46 <__ieee754_rem_pio2+0xf6>
 8011f18:	a38f      	add	r3, pc, #572	; (adr r3, 8012158 <__ieee754_rem_pio2+0x308>)
 8011f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1e:	f7ee f9b5 	bl	800028c <__adddf3>
 8011f22:	4602      	mov	r2, r0
 8011f24:	460b      	mov	r3, r1
 8011f26:	e9ca 2300 	strd	r2, r3, [sl]
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	f7ee f9ab 	bl	8000288 <__aeabi_dsub>
 8011f32:	a389      	add	r3, pc, #548	; (adr r3, 8012158 <__ieee754_rem_pio2+0x308>)
 8011f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f38:	f7ee f9a8 	bl	800028c <__adddf3>
 8011f3c:	f04f 3bff 	mov.w	fp, #4294967295
 8011f40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f44:	e7c4      	b.n	8011ed0 <__ieee754_rem_pio2+0x80>
 8011f46:	a386      	add	r3, pc, #536	; (adr r3, 8012160 <__ieee754_rem_pio2+0x310>)
 8011f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4c:	f7ee f99e 	bl	800028c <__adddf3>
 8011f50:	a385      	add	r3, pc, #532	; (adr r3, 8012168 <__ieee754_rem_pio2+0x318>)
 8011f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f56:	4604      	mov	r4, r0
 8011f58:	460d      	mov	r5, r1
 8011f5a:	f7ee f997 	bl	800028c <__adddf3>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	460b      	mov	r3, r1
 8011f62:	e9ca 2300 	strd	r2, r3, [sl]
 8011f66:	4620      	mov	r0, r4
 8011f68:	4629      	mov	r1, r5
 8011f6a:	f7ee f98d 	bl	8000288 <__aeabi_dsub>
 8011f6e:	a37e      	add	r3, pc, #504	; (adr r3, 8012168 <__ieee754_rem_pio2+0x318>)
 8011f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f74:	e7e0      	b.n	8011f38 <__ieee754_rem_pio2+0xe8>
 8011f76:	4b87      	ldr	r3, [pc, #540]	; (8012194 <__ieee754_rem_pio2+0x344>)
 8011f78:	4598      	cmp	r8, r3
 8011f7a:	f300 80d9 	bgt.w	8012130 <__ieee754_rem_pio2+0x2e0>
 8011f7e:	f001 faab 	bl	80134d8 <fabs>
 8011f82:	ec55 4b10 	vmov	r4, r5, d0
 8011f86:	ee10 0a10 	vmov	r0, s0
 8011f8a:	a379      	add	r3, pc, #484	; (adr r3, 8012170 <__ieee754_rem_pio2+0x320>)
 8011f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f90:	4629      	mov	r1, r5
 8011f92:	f7ee fb31 	bl	80005f8 <__aeabi_dmul>
 8011f96:	4b80      	ldr	r3, [pc, #512]	; (8012198 <__ieee754_rem_pio2+0x348>)
 8011f98:	2200      	movs	r2, #0
 8011f9a:	f7ee f977 	bl	800028c <__adddf3>
 8011f9e:	f7ee fddb 	bl	8000b58 <__aeabi_d2iz>
 8011fa2:	4683      	mov	fp, r0
 8011fa4:	f7ee fabe 	bl	8000524 <__aeabi_i2d>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	460b      	mov	r3, r1
 8011fac:	ec43 2b18 	vmov	d8, r2, r3
 8011fb0:	a367      	add	r3, pc, #412	; (adr r3, 8012150 <__ieee754_rem_pio2+0x300>)
 8011fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb6:	f7ee fb1f 	bl	80005f8 <__aeabi_dmul>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f7ee f961 	bl	8000288 <__aeabi_dsub>
 8011fc6:	a364      	add	r3, pc, #400	; (adr r3, 8012158 <__ieee754_rem_pio2+0x308>)
 8011fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fcc:	4606      	mov	r6, r0
 8011fce:	460f      	mov	r7, r1
 8011fd0:	ec51 0b18 	vmov	r0, r1, d8
 8011fd4:	f7ee fb10 	bl	80005f8 <__aeabi_dmul>
 8011fd8:	f1bb 0f1f 	cmp.w	fp, #31
 8011fdc:	4604      	mov	r4, r0
 8011fde:	460d      	mov	r5, r1
 8011fe0:	dc0d      	bgt.n	8011ffe <__ieee754_rem_pio2+0x1ae>
 8011fe2:	4b6e      	ldr	r3, [pc, #440]	; (801219c <__ieee754_rem_pio2+0x34c>)
 8011fe4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fec:	4543      	cmp	r3, r8
 8011fee:	d006      	beq.n	8011ffe <__ieee754_rem_pio2+0x1ae>
 8011ff0:	4622      	mov	r2, r4
 8011ff2:	462b      	mov	r3, r5
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	f7ee f946 	bl	8000288 <__aeabi_dsub>
 8011ffc:	e00f      	b.n	801201e <__ieee754_rem_pio2+0x1ce>
 8011ffe:	462b      	mov	r3, r5
 8012000:	4622      	mov	r2, r4
 8012002:	4630      	mov	r0, r6
 8012004:	4639      	mov	r1, r7
 8012006:	f7ee f93f 	bl	8000288 <__aeabi_dsub>
 801200a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801200e:	9303      	str	r3, [sp, #12]
 8012010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012014:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012018:	f1b8 0f10 	cmp.w	r8, #16
 801201c:	dc02      	bgt.n	8012024 <__ieee754_rem_pio2+0x1d4>
 801201e:	e9ca 0100 	strd	r0, r1, [sl]
 8012022:	e039      	b.n	8012098 <__ieee754_rem_pio2+0x248>
 8012024:	a34e      	add	r3, pc, #312	; (adr r3, 8012160 <__ieee754_rem_pio2+0x310>)
 8012026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202a:	ec51 0b18 	vmov	r0, r1, d8
 801202e:	f7ee fae3 	bl	80005f8 <__aeabi_dmul>
 8012032:	4604      	mov	r4, r0
 8012034:	460d      	mov	r5, r1
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	4630      	mov	r0, r6
 801203c:	4639      	mov	r1, r7
 801203e:	f7ee f923 	bl	8000288 <__aeabi_dsub>
 8012042:	4602      	mov	r2, r0
 8012044:	460b      	mov	r3, r1
 8012046:	4680      	mov	r8, r0
 8012048:	4689      	mov	r9, r1
 801204a:	4630      	mov	r0, r6
 801204c:	4639      	mov	r1, r7
 801204e:	f7ee f91b 	bl	8000288 <__aeabi_dsub>
 8012052:	4622      	mov	r2, r4
 8012054:	462b      	mov	r3, r5
 8012056:	f7ee f917 	bl	8000288 <__aeabi_dsub>
 801205a:	a343      	add	r3, pc, #268	; (adr r3, 8012168 <__ieee754_rem_pio2+0x318>)
 801205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012060:	4604      	mov	r4, r0
 8012062:	460d      	mov	r5, r1
 8012064:	ec51 0b18 	vmov	r0, r1, d8
 8012068:	f7ee fac6 	bl	80005f8 <__aeabi_dmul>
 801206c:	4622      	mov	r2, r4
 801206e:	462b      	mov	r3, r5
 8012070:	f7ee f90a 	bl	8000288 <__aeabi_dsub>
 8012074:	4602      	mov	r2, r0
 8012076:	460b      	mov	r3, r1
 8012078:	4604      	mov	r4, r0
 801207a:	460d      	mov	r5, r1
 801207c:	4640      	mov	r0, r8
 801207e:	4649      	mov	r1, r9
 8012080:	f7ee f902 	bl	8000288 <__aeabi_dsub>
 8012084:	9a03      	ldr	r2, [sp, #12]
 8012086:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	2b31      	cmp	r3, #49	; 0x31
 801208e:	dc24      	bgt.n	80120da <__ieee754_rem_pio2+0x28a>
 8012090:	e9ca 0100 	strd	r0, r1, [sl]
 8012094:	4646      	mov	r6, r8
 8012096:	464f      	mov	r7, r9
 8012098:	e9da 8900 	ldrd	r8, r9, [sl]
 801209c:	4630      	mov	r0, r6
 801209e:	4642      	mov	r2, r8
 80120a0:	464b      	mov	r3, r9
 80120a2:	4639      	mov	r1, r7
 80120a4:	f7ee f8f0 	bl	8000288 <__aeabi_dsub>
 80120a8:	462b      	mov	r3, r5
 80120aa:	4622      	mov	r2, r4
 80120ac:	f7ee f8ec 	bl	8000288 <__aeabi_dsub>
 80120b0:	9b02      	ldr	r3, [sp, #8]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120b8:	f6bf af0a 	bge.w	8011ed0 <__ieee754_rem_pio2+0x80>
 80120bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80120c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120c8:	f8ca 8000 	str.w	r8, [sl]
 80120cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80120d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80120d4:	f1cb 0b00 	rsb	fp, fp, #0
 80120d8:	e6fa      	b.n	8011ed0 <__ieee754_rem_pio2+0x80>
 80120da:	a327      	add	r3, pc, #156	; (adr r3, 8012178 <__ieee754_rem_pio2+0x328>)
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	ec51 0b18 	vmov	r0, r1, d8
 80120e4:	f7ee fa88 	bl	80005f8 <__aeabi_dmul>
 80120e8:	4604      	mov	r4, r0
 80120ea:	460d      	mov	r5, r1
 80120ec:	4602      	mov	r2, r0
 80120ee:	460b      	mov	r3, r1
 80120f0:	4640      	mov	r0, r8
 80120f2:	4649      	mov	r1, r9
 80120f4:	f7ee f8c8 	bl	8000288 <__aeabi_dsub>
 80120f8:	4602      	mov	r2, r0
 80120fa:	460b      	mov	r3, r1
 80120fc:	4606      	mov	r6, r0
 80120fe:	460f      	mov	r7, r1
 8012100:	4640      	mov	r0, r8
 8012102:	4649      	mov	r1, r9
 8012104:	f7ee f8c0 	bl	8000288 <__aeabi_dsub>
 8012108:	4622      	mov	r2, r4
 801210a:	462b      	mov	r3, r5
 801210c:	f7ee f8bc 	bl	8000288 <__aeabi_dsub>
 8012110:	a31b      	add	r3, pc, #108	; (adr r3, 8012180 <__ieee754_rem_pio2+0x330>)
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	4604      	mov	r4, r0
 8012118:	460d      	mov	r5, r1
 801211a:	ec51 0b18 	vmov	r0, r1, d8
 801211e:	f7ee fa6b 	bl	80005f8 <__aeabi_dmul>
 8012122:	4622      	mov	r2, r4
 8012124:	462b      	mov	r3, r5
 8012126:	f7ee f8af 	bl	8000288 <__aeabi_dsub>
 801212a:	4604      	mov	r4, r0
 801212c:	460d      	mov	r5, r1
 801212e:	e75f      	b.n	8011ff0 <__ieee754_rem_pio2+0x1a0>
 8012130:	4b1b      	ldr	r3, [pc, #108]	; (80121a0 <__ieee754_rem_pio2+0x350>)
 8012132:	4598      	cmp	r8, r3
 8012134:	dd36      	ble.n	80121a4 <__ieee754_rem_pio2+0x354>
 8012136:	ee10 2a10 	vmov	r2, s0
 801213a:	462b      	mov	r3, r5
 801213c:	4620      	mov	r0, r4
 801213e:	4629      	mov	r1, r5
 8012140:	f7ee f8a2 	bl	8000288 <__aeabi_dsub>
 8012144:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012148:	e9ca 0100 	strd	r0, r1, [sl]
 801214c:	e694      	b.n	8011e78 <__ieee754_rem_pio2+0x28>
 801214e:	bf00      	nop
 8012150:	54400000 	.word	0x54400000
 8012154:	3ff921fb 	.word	0x3ff921fb
 8012158:	1a626331 	.word	0x1a626331
 801215c:	3dd0b461 	.word	0x3dd0b461
 8012160:	1a600000 	.word	0x1a600000
 8012164:	3dd0b461 	.word	0x3dd0b461
 8012168:	2e037073 	.word	0x2e037073
 801216c:	3ba3198a 	.word	0x3ba3198a
 8012170:	6dc9c883 	.word	0x6dc9c883
 8012174:	3fe45f30 	.word	0x3fe45f30
 8012178:	2e000000 	.word	0x2e000000
 801217c:	3ba3198a 	.word	0x3ba3198a
 8012180:	252049c1 	.word	0x252049c1
 8012184:	397b839a 	.word	0x397b839a
 8012188:	3fe921fb 	.word	0x3fe921fb
 801218c:	4002d97b 	.word	0x4002d97b
 8012190:	3ff921fb 	.word	0x3ff921fb
 8012194:	413921fb 	.word	0x413921fb
 8012198:	3fe00000 	.word	0x3fe00000
 801219c:	08014090 	.word	0x08014090
 80121a0:	7fefffff 	.word	0x7fefffff
 80121a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80121a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80121ac:	ee10 0a10 	vmov	r0, s0
 80121b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80121b4:	ee10 6a10 	vmov	r6, s0
 80121b8:	460f      	mov	r7, r1
 80121ba:	f7ee fccd 	bl	8000b58 <__aeabi_d2iz>
 80121be:	f7ee f9b1 	bl	8000524 <__aeabi_i2d>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	4630      	mov	r0, r6
 80121c8:	4639      	mov	r1, r7
 80121ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121ce:	f7ee f85b 	bl	8000288 <__aeabi_dsub>
 80121d2:	4b23      	ldr	r3, [pc, #140]	; (8012260 <__ieee754_rem_pio2+0x410>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	f7ee fa0f 	bl	80005f8 <__aeabi_dmul>
 80121da:	460f      	mov	r7, r1
 80121dc:	4606      	mov	r6, r0
 80121de:	f7ee fcbb 	bl	8000b58 <__aeabi_d2iz>
 80121e2:	f7ee f99f 	bl	8000524 <__aeabi_i2d>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	4630      	mov	r0, r6
 80121ec:	4639      	mov	r1, r7
 80121ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80121f2:	f7ee f849 	bl	8000288 <__aeabi_dsub>
 80121f6:	4b1a      	ldr	r3, [pc, #104]	; (8012260 <__ieee754_rem_pio2+0x410>)
 80121f8:	2200      	movs	r2, #0
 80121fa:	f7ee f9fd 	bl	80005f8 <__aeabi_dmul>
 80121fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012202:	ad04      	add	r5, sp, #16
 8012204:	f04f 0803 	mov.w	r8, #3
 8012208:	46a9      	mov	r9, r5
 801220a:	2600      	movs	r6, #0
 801220c:	2700      	movs	r7, #0
 801220e:	4632      	mov	r2, r6
 8012210:	463b      	mov	r3, r7
 8012212:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012216:	46c3      	mov	fp, r8
 8012218:	3d08      	subs	r5, #8
 801221a:	f108 38ff 	add.w	r8, r8, #4294967295
 801221e:	f7ee fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8012222:	2800      	cmp	r0, #0
 8012224:	d1f3      	bne.n	801220e <__ieee754_rem_pio2+0x3be>
 8012226:	4b0f      	ldr	r3, [pc, #60]	; (8012264 <__ieee754_rem_pio2+0x414>)
 8012228:	9301      	str	r3, [sp, #4]
 801222a:	2302      	movs	r3, #2
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	4622      	mov	r2, r4
 8012230:	465b      	mov	r3, fp
 8012232:	4651      	mov	r1, sl
 8012234:	4648      	mov	r0, r9
 8012236:	f000 f993 	bl	8012560 <__kernel_rem_pio2>
 801223a:	9b02      	ldr	r3, [sp, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	4683      	mov	fp, r0
 8012240:	f6bf ae46 	bge.w	8011ed0 <__ieee754_rem_pio2+0x80>
 8012244:	e9da 2100 	ldrd	r2, r1, [sl]
 8012248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801224c:	e9ca 2300 	strd	r2, r3, [sl]
 8012250:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012258:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801225c:	e73a      	b.n	80120d4 <__ieee754_rem_pio2+0x284>
 801225e:	bf00      	nop
 8012260:	41700000 	.word	0x41700000
 8012264:	08014110 	.word	0x08014110

08012268 <__ieee754_sqrt>:
 8012268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801226c:	ec55 4b10 	vmov	r4, r5, d0
 8012270:	4e55      	ldr	r6, [pc, #340]	; (80123c8 <__ieee754_sqrt+0x160>)
 8012272:	43ae      	bics	r6, r5
 8012274:	ee10 0a10 	vmov	r0, s0
 8012278:	ee10 3a10 	vmov	r3, s0
 801227c:	462a      	mov	r2, r5
 801227e:	4629      	mov	r1, r5
 8012280:	d110      	bne.n	80122a4 <__ieee754_sqrt+0x3c>
 8012282:	ee10 2a10 	vmov	r2, s0
 8012286:	462b      	mov	r3, r5
 8012288:	f7ee f9b6 	bl	80005f8 <__aeabi_dmul>
 801228c:	4602      	mov	r2, r0
 801228e:	460b      	mov	r3, r1
 8012290:	4620      	mov	r0, r4
 8012292:	4629      	mov	r1, r5
 8012294:	f7ed fffa 	bl	800028c <__adddf3>
 8012298:	4604      	mov	r4, r0
 801229a:	460d      	mov	r5, r1
 801229c:	ec45 4b10 	vmov	d0, r4, r5
 80122a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a4:	2d00      	cmp	r5, #0
 80122a6:	dc10      	bgt.n	80122ca <__ieee754_sqrt+0x62>
 80122a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122ac:	4330      	orrs	r0, r6
 80122ae:	d0f5      	beq.n	801229c <__ieee754_sqrt+0x34>
 80122b0:	b15d      	cbz	r5, 80122ca <__ieee754_sqrt+0x62>
 80122b2:	ee10 2a10 	vmov	r2, s0
 80122b6:	462b      	mov	r3, r5
 80122b8:	ee10 0a10 	vmov	r0, s0
 80122bc:	f7ed ffe4 	bl	8000288 <__aeabi_dsub>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	f7ee fac2 	bl	800084c <__aeabi_ddiv>
 80122c8:	e7e6      	b.n	8012298 <__ieee754_sqrt+0x30>
 80122ca:	1512      	asrs	r2, r2, #20
 80122cc:	d074      	beq.n	80123b8 <__ieee754_sqrt+0x150>
 80122ce:	07d4      	lsls	r4, r2, #31
 80122d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80122d4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80122d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80122dc:	bf5e      	ittt	pl
 80122de:	0fda      	lsrpl	r2, r3, #31
 80122e0:	005b      	lslpl	r3, r3, #1
 80122e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80122e6:	2400      	movs	r4, #0
 80122e8:	0fda      	lsrs	r2, r3, #31
 80122ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80122ee:	107f      	asrs	r7, r7, #1
 80122f0:	005b      	lsls	r3, r3, #1
 80122f2:	2516      	movs	r5, #22
 80122f4:	4620      	mov	r0, r4
 80122f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80122fa:	1886      	adds	r6, r0, r2
 80122fc:	428e      	cmp	r6, r1
 80122fe:	bfde      	ittt	le
 8012300:	1b89      	suble	r1, r1, r6
 8012302:	18b0      	addle	r0, r6, r2
 8012304:	18a4      	addle	r4, r4, r2
 8012306:	0049      	lsls	r1, r1, #1
 8012308:	3d01      	subs	r5, #1
 801230a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801230e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012312:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012316:	d1f0      	bne.n	80122fa <__ieee754_sqrt+0x92>
 8012318:	462a      	mov	r2, r5
 801231a:	f04f 0e20 	mov.w	lr, #32
 801231e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012322:	4281      	cmp	r1, r0
 8012324:	eb06 0c05 	add.w	ip, r6, r5
 8012328:	dc02      	bgt.n	8012330 <__ieee754_sqrt+0xc8>
 801232a:	d113      	bne.n	8012354 <__ieee754_sqrt+0xec>
 801232c:	459c      	cmp	ip, r3
 801232e:	d811      	bhi.n	8012354 <__ieee754_sqrt+0xec>
 8012330:	f1bc 0f00 	cmp.w	ip, #0
 8012334:	eb0c 0506 	add.w	r5, ip, r6
 8012338:	da43      	bge.n	80123c2 <__ieee754_sqrt+0x15a>
 801233a:	2d00      	cmp	r5, #0
 801233c:	db41      	blt.n	80123c2 <__ieee754_sqrt+0x15a>
 801233e:	f100 0801 	add.w	r8, r0, #1
 8012342:	1a09      	subs	r1, r1, r0
 8012344:	459c      	cmp	ip, r3
 8012346:	bf88      	it	hi
 8012348:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801234c:	eba3 030c 	sub.w	r3, r3, ip
 8012350:	4432      	add	r2, r6
 8012352:	4640      	mov	r0, r8
 8012354:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012358:	f1be 0e01 	subs.w	lr, lr, #1
 801235c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012360:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012364:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012368:	d1db      	bne.n	8012322 <__ieee754_sqrt+0xba>
 801236a:	430b      	orrs	r3, r1
 801236c:	d006      	beq.n	801237c <__ieee754_sqrt+0x114>
 801236e:	1c50      	adds	r0, r2, #1
 8012370:	bf13      	iteet	ne
 8012372:	3201      	addne	r2, #1
 8012374:	3401      	addeq	r4, #1
 8012376:	4672      	moveq	r2, lr
 8012378:	f022 0201 	bicne.w	r2, r2, #1
 801237c:	1063      	asrs	r3, r4, #1
 801237e:	0852      	lsrs	r2, r2, #1
 8012380:	07e1      	lsls	r1, r4, #31
 8012382:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012386:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801238a:	bf48      	it	mi
 801238c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012390:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012394:	4614      	mov	r4, r2
 8012396:	e781      	b.n	801229c <__ieee754_sqrt+0x34>
 8012398:	0ad9      	lsrs	r1, r3, #11
 801239a:	3815      	subs	r0, #21
 801239c:	055b      	lsls	r3, r3, #21
 801239e:	2900      	cmp	r1, #0
 80123a0:	d0fa      	beq.n	8012398 <__ieee754_sqrt+0x130>
 80123a2:	02cd      	lsls	r5, r1, #11
 80123a4:	d50a      	bpl.n	80123bc <__ieee754_sqrt+0x154>
 80123a6:	f1c2 0420 	rsb	r4, r2, #32
 80123aa:	fa23 f404 	lsr.w	r4, r3, r4
 80123ae:	1e55      	subs	r5, r2, #1
 80123b0:	4093      	lsls	r3, r2
 80123b2:	4321      	orrs	r1, r4
 80123b4:	1b42      	subs	r2, r0, r5
 80123b6:	e78a      	b.n	80122ce <__ieee754_sqrt+0x66>
 80123b8:	4610      	mov	r0, r2
 80123ba:	e7f0      	b.n	801239e <__ieee754_sqrt+0x136>
 80123bc:	0049      	lsls	r1, r1, #1
 80123be:	3201      	adds	r2, #1
 80123c0:	e7ef      	b.n	80123a2 <__ieee754_sqrt+0x13a>
 80123c2:	4680      	mov	r8, r0
 80123c4:	e7bd      	b.n	8012342 <__ieee754_sqrt+0xda>
 80123c6:	bf00      	nop
 80123c8:	7ff00000 	.word	0x7ff00000
 80123cc:	00000000 	.word	0x00000000

080123d0 <__kernel_cos>:
 80123d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	ec57 6b10 	vmov	r6, r7, d0
 80123d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80123dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80123e0:	ed8d 1b00 	vstr	d1, [sp]
 80123e4:	da07      	bge.n	80123f6 <__kernel_cos+0x26>
 80123e6:	ee10 0a10 	vmov	r0, s0
 80123ea:	4639      	mov	r1, r7
 80123ec:	f7ee fbb4 	bl	8000b58 <__aeabi_d2iz>
 80123f0:	2800      	cmp	r0, #0
 80123f2:	f000 8088 	beq.w	8012506 <__kernel_cos+0x136>
 80123f6:	4632      	mov	r2, r6
 80123f8:	463b      	mov	r3, r7
 80123fa:	4630      	mov	r0, r6
 80123fc:	4639      	mov	r1, r7
 80123fe:	f7ee f8fb 	bl	80005f8 <__aeabi_dmul>
 8012402:	4b51      	ldr	r3, [pc, #324]	; (8012548 <__kernel_cos+0x178>)
 8012404:	2200      	movs	r2, #0
 8012406:	4604      	mov	r4, r0
 8012408:	460d      	mov	r5, r1
 801240a:	f7ee f8f5 	bl	80005f8 <__aeabi_dmul>
 801240e:	a340      	add	r3, pc, #256	; (adr r3, 8012510 <__kernel_cos+0x140>)
 8012410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012414:	4682      	mov	sl, r0
 8012416:	468b      	mov	fp, r1
 8012418:	4620      	mov	r0, r4
 801241a:	4629      	mov	r1, r5
 801241c:	f7ee f8ec 	bl	80005f8 <__aeabi_dmul>
 8012420:	a33d      	add	r3, pc, #244	; (adr r3, 8012518 <__kernel_cos+0x148>)
 8012422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012426:	f7ed ff31 	bl	800028c <__adddf3>
 801242a:	4622      	mov	r2, r4
 801242c:	462b      	mov	r3, r5
 801242e:	f7ee f8e3 	bl	80005f8 <__aeabi_dmul>
 8012432:	a33b      	add	r3, pc, #236	; (adr r3, 8012520 <__kernel_cos+0x150>)
 8012434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012438:	f7ed ff26 	bl	8000288 <__aeabi_dsub>
 801243c:	4622      	mov	r2, r4
 801243e:	462b      	mov	r3, r5
 8012440:	f7ee f8da 	bl	80005f8 <__aeabi_dmul>
 8012444:	a338      	add	r3, pc, #224	; (adr r3, 8012528 <__kernel_cos+0x158>)
 8012446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244a:	f7ed ff1f 	bl	800028c <__adddf3>
 801244e:	4622      	mov	r2, r4
 8012450:	462b      	mov	r3, r5
 8012452:	f7ee f8d1 	bl	80005f8 <__aeabi_dmul>
 8012456:	a336      	add	r3, pc, #216	; (adr r3, 8012530 <__kernel_cos+0x160>)
 8012458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245c:	f7ed ff14 	bl	8000288 <__aeabi_dsub>
 8012460:	4622      	mov	r2, r4
 8012462:	462b      	mov	r3, r5
 8012464:	f7ee f8c8 	bl	80005f8 <__aeabi_dmul>
 8012468:	a333      	add	r3, pc, #204	; (adr r3, 8012538 <__kernel_cos+0x168>)
 801246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246e:	f7ed ff0d 	bl	800028c <__adddf3>
 8012472:	4622      	mov	r2, r4
 8012474:	462b      	mov	r3, r5
 8012476:	f7ee f8bf 	bl	80005f8 <__aeabi_dmul>
 801247a:	4622      	mov	r2, r4
 801247c:	462b      	mov	r3, r5
 801247e:	f7ee f8bb 	bl	80005f8 <__aeabi_dmul>
 8012482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012486:	4604      	mov	r4, r0
 8012488:	460d      	mov	r5, r1
 801248a:	4630      	mov	r0, r6
 801248c:	4639      	mov	r1, r7
 801248e:	f7ee f8b3 	bl	80005f8 <__aeabi_dmul>
 8012492:	460b      	mov	r3, r1
 8012494:	4602      	mov	r2, r0
 8012496:	4629      	mov	r1, r5
 8012498:	4620      	mov	r0, r4
 801249a:	f7ed fef5 	bl	8000288 <__aeabi_dsub>
 801249e:	4b2b      	ldr	r3, [pc, #172]	; (801254c <__kernel_cos+0x17c>)
 80124a0:	4598      	cmp	r8, r3
 80124a2:	4606      	mov	r6, r0
 80124a4:	460f      	mov	r7, r1
 80124a6:	dc10      	bgt.n	80124ca <__kernel_cos+0xfa>
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4650      	mov	r0, sl
 80124ae:	4659      	mov	r1, fp
 80124b0:	f7ed feea 	bl	8000288 <__aeabi_dsub>
 80124b4:	460b      	mov	r3, r1
 80124b6:	4926      	ldr	r1, [pc, #152]	; (8012550 <__kernel_cos+0x180>)
 80124b8:	4602      	mov	r2, r0
 80124ba:	2000      	movs	r0, #0
 80124bc:	f7ed fee4 	bl	8000288 <__aeabi_dsub>
 80124c0:	ec41 0b10 	vmov	d0, r0, r1
 80124c4:	b003      	add	sp, #12
 80124c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ca:	4b22      	ldr	r3, [pc, #136]	; (8012554 <__kernel_cos+0x184>)
 80124cc:	4920      	ldr	r1, [pc, #128]	; (8012550 <__kernel_cos+0x180>)
 80124ce:	4598      	cmp	r8, r3
 80124d0:	bfcc      	ite	gt
 80124d2:	4d21      	ldrgt	r5, [pc, #132]	; (8012558 <__kernel_cos+0x188>)
 80124d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80124d8:	2400      	movs	r4, #0
 80124da:	4622      	mov	r2, r4
 80124dc:	462b      	mov	r3, r5
 80124de:	2000      	movs	r0, #0
 80124e0:	f7ed fed2 	bl	8000288 <__aeabi_dsub>
 80124e4:	4622      	mov	r2, r4
 80124e6:	4680      	mov	r8, r0
 80124e8:	4689      	mov	r9, r1
 80124ea:	462b      	mov	r3, r5
 80124ec:	4650      	mov	r0, sl
 80124ee:	4659      	mov	r1, fp
 80124f0:	f7ed feca 	bl	8000288 <__aeabi_dsub>
 80124f4:	4632      	mov	r2, r6
 80124f6:	463b      	mov	r3, r7
 80124f8:	f7ed fec6 	bl	8000288 <__aeabi_dsub>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4640      	mov	r0, r8
 8012502:	4649      	mov	r1, r9
 8012504:	e7da      	b.n	80124bc <__kernel_cos+0xec>
 8012506:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012540 <__kernel_cos+0x170>
 801250a:	e7db      	b.n	80124c4 <__kernel_cos+0xf4>
 801250c:	f3af 8000 	nop.w
 8012510:	be8838d4 	.word	0xbe8838d4
 8012514:	bda8fae9 	.word	0xbda8fae9
 8012518:	bdb4b1c4 	.word	0xbdb4b1c4
 801251c:	3e21ee9e 	.word	0x3e21ee9e
 8012520:	809c52ad 	.word	0x809c52ad
 8012524:	3e927e4f 	.word	0x3e927e4f
 8012528:	19cb1590 	.word	0x19cb1590
 801252c:	3efa01a0 	.word	0x3efa01a0
 8012530:	16c15177 	.word	0x16c15177
 8012534:	3f56c16c 	.word	0x3f56c16c
 8012538:	5555554c 	.word	0x5555554c
 801253c:	3fa55555 	.word	0x3fa55555
 8012540:	00000000 	.word	0x00000000
 8012544:	3ff00000 	.word	0x3ff00000
 8012548:	3fe00000 	.word	0x3fe00000
 801254c:	3fd33332 	.word	0x3fd33332
 8012550:	3ff00000 	.word	0x3ff00000
 8012554:	3fe90000 	.word	0x3fe90000
 8012558:	3fd20000 	.word	0x3fd20000
 801255c:	00000000 	.word	0x00000000

08012560 <__kernel_rem_pio2>:
 8012560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012564:	ed2d 8b02 	vpush	{d8}
 8012568:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801256c:	f112 0f14 	cmn.w	r2, #20
 8012570:	9308      	str	r3, [sp, #32]
 8012572:	9101      	str	r1, [sp, #4]
 8012574:	4bc4      	ldr	r3, [pc, #784]	; (8012888 <__kernel_rem_pio2+0x328>)
 8012576:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012578:	900b      	str	r0, [sp, #44]	; 0x2c
 801257a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801257e:	9302      	str	r3, [sp, #8]
 8012580:	9b08      	ldr	r3, [sp, #32]
 8012582:	f103 33ff 	add.w	r3, r3, #4294967295
 8012586:	bfa8      	it	ge
 8012588:	1ed4      	subge	r4, r2, #3
 801258a:	9306      	str	r3, [sp, #24]
 801258c:	bfb2      	itee	lt
 801258e:	2400      	movlt	r4, #0
 8012590:	2318      	movge	r3, #24
 8012592:	fb94 f4f3 	sdivge	r4, r4, r3
 8012596:	f06f 0317 	mvn.w	r3, #23
 801259a:	fb04 3303 	mla	r3, r4, r3, r3
 801259e:	eb03 0a02 	add.w	sl, r3, r2
 80125a2:	9b02      	ldr	r3, [sp, #8]
 80125a4:	9a06      	ldr	r2, [sp, #24]
 80125a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012878 <__kernel_rem_pio2+0x318>
 80125aa:	eb03 0802 	add.w	r8, r3, r2
 80125ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80125b0:	1aa7      	subs	r7, r4, r2
 80125b2:	ae22      	add	r6, sp, #136	; 0x88
 80125b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80125b8:	2500      	movs	r5, #0
 80125ba:	4545      	cmp	r5, r8
 80125bc:	dd13      	ble.n	80125e6 <__kernel_rem_pio2+0x86>
 80125be:	9b08      	ldr	r3, [sp, #32]
 80125c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012878 <__kernel_rem_pio2+0x318>
 80125c4:	aa22      	add	r2, sp, #136	; 0x88
 80125c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80125ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80125ce:	f04f 0800 	mov.w	r8, #0
 80125d2:	9b02      	ldr	r3, [sp, #8]
 80125d4:	4598      	cmp	r8, r3
 80125d6:	dc2f      	bgt.n	8012638 <__kernel_rem_pio2+0xd8>
 80125d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80125dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80125e0:	462f      	mov	r7, r5
 80125e2:	2600      	movs	r6, #0
 80125e4:	e01b      	b.n	801261e <__kernel_rem_pio2+0xbe>
 80125e6:	42ef      	cmn	r7, r5
 80125e8:	d407      	bmi.n	80125fa <__kernel_rem_pio2+0x9a>
 80125ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80125ee:	f7ed ff99 	bl	8000524 <__aeabi_i2d>
 80125f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80125f6:	3501      	adds	r5, #1
 80125f8:	e7df      	b.n	80125ba <__kernel_rem_pio2+0x5a>
 80125fa:	ec51 0b18 	vmov	r0, r1, d8
 80125fe:	e7f8      	b.n	80125f2 <__kernel_rem_pio2+0x92>
 8012600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012604:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012608:	f7ed fff6 	bl	80005f8 <__aeabi_dmul>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012614:	f7ed fe3a 	bl	800028c <__adddf3>
 8012618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801261c:	3601      	adds	r6, #1
 801261e:	9b06      	ldr	r3, [sp, #24]
 8012620:	429e      	cmp	r6, r3
 8012622:	f1a7 0708 	sub.w	r7, r7, #8
 8012626:	ddeb      	ble.n	8012600 <__kernel_rem_pio2+0xa0>
 8012628:	ed9d 7b04 	vldr	d7, [sp, #16]
 801262c:	f108 0801 	add.w	r8, r8, #1
 8012630:	ecab 7b02 	vstmia	fp!, {d7}
 8012634:	3508      	adds	r5, #8
 8012636:	e7cc      	b.n	80125d2 <__kernel_rem_pio2+0x72>
 8012638:	9b02      	ldr	r3, [sp, #8]
 801263a:	aa0e      	add	r2, sp, #56	; 0x38
 801263c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012640:	930d      	str	r3, [sp, #52]	; 0x34
 8012642:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012644:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012648:	9c02      	ldr	r4, [sp, #8]
 801264a:	930c      	str	r3, [sp, #48]	; 0x30
 801264c:	00e3      	lsls	r3, r4, #3
 801264e:	930a      	str	r3, [sp, #40]	; 0x28
 8012650:	ab9a      	add	r3, sp, #616	; 0x268
 8012652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012656:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801265a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801265e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012660:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012664:	46c3      	mov	fp, r8
 8012666:	46a1      	mov	r9, r4
 8012668:	f1b9 0f00 	cmp.w	r9, #0
 801266c:	f1a5 0508 	sub.w	r5, r5, #8
 8012670:	dc77      	bgt.n	8012762 <__kernel_rem_pio2+0x202>
 8012672:	ec47 6b10 	vmov	d0, r6, r7
 8012676:	4650      	mov	r0, sl
 8012678:	f000 ffc2 	bl	8013600 <scalbn>
 801267c:	ec57 6b10 	vmov	r6, r7, d0
 8012680:	2200      	movs	r2, #0
 8012682:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012686:	ee10 0a10 	vmov	r0, s0
 801268a:	4639      	mov	r1, r7
 801268c:	f7ed ffb4 	bl	80005f8 <__aeabi_dmul>
 8012690:	ec41 0b10 	vmov	d0, r0, r1
 8012694:	f000 ff2c 	bl	80134f0 <floor>
 8012698:	4b7c      	ldr	r3, [pc, #496]	; (801288c <__kernel_rem_pio2+0x32c>)
 801269a:	ec51 0b10 	vmov	r0, r1, d0
 801269e:	2200      	movs	r2, #0
 80126a0:	f7ed ffaa 	bl	80005f8 <__aeabi_dmul>
 80126a4:	4602      	mov	r2, r0
 80126a6:	460b      	mov	r3, r1
 80126a8:	4630      	mov	r0, r6
 80126aa:	4639      	mov	r1, r7
 80126ac:	f7ed fdec 	bl	8000288 <__aeabi_dsub>
 80126b0:	460f      	mov	r7, r1
 80126b2:	4606      	mov	r6, r0
 80126b4:	f7ee fa50 	bl	8000b58 <__aeabi_d2iz>
 80126b8:	9004      	str	r0, [sp, #16]
 80126ba:	f7ed ff33 	bl	8000524 <__aeabi_i2d>
 80126be:	4602      	mov	r2, r0
 80126c0:	460b      	mov	r3, r1
 80126c2:	4630      	mov	r0, r6
 80126c4:	4639      	mov	r1, r7
 80126c6:	f7ed fddf 	bl	8000288 <__aeabi_dsub>
 80126ca:	f1ba 0f00 	cmp.w	sl, #0
 80126ce:	4606      	mov	r6, r0
 80126d0:	460f      	mov	r7, r1
 80126d2:	dd6d      	ble.n	80127b0 <__kernel_rem_pio2+0x250>
 80126d4:	1e62      	subs	r2, r4, #1
 80126d6:	ab0e      	add	r3, sp, #56	; 0x38
 80126d8:	9d04      	ldr	r5, [sp, #16]
 80126da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80126de:	f1ca 0118 	rsb	r1, sl, #24
 80126e2:	fa40 f301 	asr.w	r3, r0, r1
 80126e6:	441d      	add	r5, r3
 80126e8:	408b      	lsls	r3, r1
 80126ea:	1ac0      	subs	r0, r0, r3
 80126ec:	ab0e      	add	r3, sp, #56	; 0x38
 80126ee:	9504      	str	r5, [sp, #16]
 80126f0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80126f4:	f1ca 0317 	rsb	r3, sl, #23
 80126f8:	fa40 fb03 	asr.w	fp, r0, r3
 80126fc:	f1bb 0f00 	cmp.w	fp, #0
 8012700:	dd65      	ble.n	80127ce <__kernel_rem_pio2+0x26e>
 8012702:	9b04      	ldr	r3, [sp, #16]
 8012704:	2200      	movs	r2, #0
 8012706:	3301      	adds	r3, #1
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	4615      	mov	r5, r2
 801270c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012710:	4294      	cmp	r4, r2
 8012712:	f300 809c 	bgt.w	801284e <__kernel_rem_pio2+0x2ee>
 8012716:	f1ba 0f00 	cmp.w	sl, #0
 801271a:	dd07      	ble.n	801272c <__kernel_rem_pio2+0x1cc>
 801271c:	f1ba 0f01 	cmp.w	sl, #1
 8012720:	f000 80c0 	beq.w	80128a4 <__kernel_rem_pio2+0x344>
 8012724:	f1ba 0f02 	cmp.w	sl, #2
 8012728:	f000 80c6 	beq.w	80128b8 <__kernel_rem_pio2+0x358>
 801272c:	f1bb 0f02 	cmp.w	fp, #2
 8012730:	d14d      	bne.n	80127ce <__kernel_rem_pio2+0x26e>
 8012732:	4632      	mov	r2, r6
 8012734:	463b      	mov	r3, r7
 8012736:	4956      	ldr	r1, [pc, #344]	; (8012890 <__kernel_rem_pio2+0x330>)
 8012738:	2000      	movs	r0, #0
 801273a:	f7ed fda5 	bl	8000288 <__aeabi_dsub>
 801273e:	4606      	mov	r6, r0
 8012740:	460f      	mov	r7, r1
 8012742:	2d00      	cmp	r5, #0
 8012744:	d043      	beq.n	80127ce <__kernel_rem_pio2+0x26e>
 8012746:	4650      	mov	r0, sl
 8012748:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012880 <__kernel_rem_pio2+0x320>
 801274c:	f000 ff58 	bl	8013600 <scalbn>
 8012750:	4630      	mov	r0, r6
 8012752:	4639      	mov	r1, r7
 8012754:	ec53 2b10 	vmov	r2, r3, d0
 8012758:	f7ed fd96 	bl	8000288 <__aeabi_dsub>
 801275c:	4606      	mov	r6, r0
 801275e:	460f      	mov	r7, r1
 8012760:	e035      	b.n	80127ce <__kernel_rem_pio2+0x26e>
 8012762:	4b4c      	ldr	r3, [pc, #304]	; (8012894 <__kernel_rem_pio2+0x334>)
 8012764:	2200      	movs	r2, #0
 8012766:	4630      	mov	r0, r6
 8012768:	4639      	mov	r1, r7
 801276a:	f7ed ff45 	bl	80005f8 <__aeabi_dmul>
 801276e:	f7ee f9f3 	bl	8000b58 <__aeabi_d2iz>
 8012772:	f7ed fed7 	bl	8000524 <__aeabi_i2d>
 8012776:	4602      	mov	r2, r0
 8012778:	460b      	mov	r3, r1
 801277a:	ec43 2b18 	vmov	d8, r2, r3
 801277e:	4b46      	ldr	r3, [pc, #280]	; (8012898 <__kernel_rem_pio2+0x338>)
 8012780:	2200      	movs	r2, #0
 8012782:	f7ed ff39 	bl	80005f8 <__aeabi_dmul>
 8012786:	4602      	mov	r2, r0
 8012788:	460b      	mov	r3, r1
 801278a:	4630      	mov	r0, r6
 801278c:	4639      	mov	r1, r7
 801278e:	f7ed fd7b 	bl	8000288 <__aeabi_dsub>
 8012792:	f7ee f9e1 	bl	8000b58 <__aeabi_d2iz>
 8012796:	e9d5 2300 	ldrd	r2, r3, [r5]
 801279a:	f84b 0b04 	str.w	r0, [fp], #4
 801279e:	ec51 0b18 	vmov	r0, r1, d8
 80127a2:	f7ed fd73 	bl	800028c <__adddf3>
 80127a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80127aa:	4606      	mov	r6, r0
 80127ac:	460f      	mov	r7, r1
 80127ae:	e75b      	b.n	8012668 <__kernel_rem_pio2+0x108>
 80127b0:	d106      	bne.n	80127c0 <__kernel_rem_pio2+0x260>
 80127b2:	1e63      	subs	r3, r4, #1
 80127b4:	aa0e      	add	r2, sp, #56	; 0x38
 80127b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80127ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80127be:	e79d      	b.n	80126fc <__kernel_rem_pio2+0x19c>
 80127c0:	4b36      	ldr	r3, [pc, #216]	; (801289c <__kernel_rem_pio2+0x33c>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	f7ee f99e 	bl	8000b04 <__aeabi_dcmpge>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d13d      	bne.n	8012848 <__kernel_rem_pio2+0x2e8>
 80127cc:	4683      	mov	fp, r0
 80127ce:	2200      	movs	r2, #0
 80127d0:	2300      	movs	r3, #0
 80127d2:	4630      	mov	r0, r6
 80127d4:	4639      	mov	r1, r7
 80127d6:	f7ee f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80127da:	2800      	cmp	r0, #0
 80127dc:	f000 80c0 	beq.w	8012960 <__kernel_rem_pio2+0x400>
 80127e0:	1e65      	subs	r5, r4, #1
 80127e2:	462b      	mov	r3, r5
 80127e4:	2200      	movs	r2, #0
 80127e6:	9902      	ldr	r1, [sp, #8]
 80127e8:	428b      	cmp	r3, r1
 80127ea:	da6c      	bge.n	80128c6 <__kernel_rem_pio2+0x366>
 80127ec:	2a00      	cmp	r2, #0
 80127ee:	f000 8089 	beq.w	8012904 <__kernel_rem_pio2+0x3a4>
 80127f2:	ab0e      	add	r3, sp, #56	; 0x38
 80127f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80127f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	f000 80ad 	beq.w	801295c <__kernel_rem_pio2+0x3fc>
 8012802:	4650      	mov	r0, sl
 8012804:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012880 <__kernel_rem_pio2+0x320>
 8012808:	f000 fefa 	bl	8013600 <scalbn>
 801280c:	ab9a      	add	r3, sp, #616	; 0x268
 801280e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012812:	ec57 6b10 	vmov	r6, r7, d0
 8012816:	00ec      	lsls	r4, r5, #3
 8012818:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801281c:	46aa      	mov	sl, r5
 801281e:	f1ba 0f00 	cmp.w	sl, #0
 8012822:	f280 80d6 	bge.w	80129d2 <__kernel_rem_pio2+0x472>
 8012826:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012878 <__kernel_rem_pio2+0x318>
 801282a:	462e      	mov	r6, r5
 801282c:	2e00      	cmp	r6, #0
 801282e:	f2c0 8104 	blt.w	8012a3a <__kernel_rem_pio2+0x4da>
 8012832:	ab72      	add	r3, sp, #456	; 0x1c8
 8012834:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012838:	f8df a064 	ldr.w	sl, [pc, #100]	; 80128a0 <__kernel_rem_pio2+0x340>
 801283c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012840:	f04f 0800 	mov.w	r8, #0
 8012844:	1baf      	subs	r7, r5, r6
 8012846:	e0ea      	b.n	8012a1e <__kernel_rem_pio2+0x4be>
 8012848:	f04f 0b02 	mov.w	fp, #2
 801284c:	e759      	b.n	8012702 <__kernel_rem_pio2+0x1a2>
 801284e:	f8d8 3000 	ldr.w	r3, [r8]
 8012852:	b955      	cbnz	r5, 801286a <__kernel_rem_pio2+0x30a>
 8012854:	b123      	cbz	r3, 8012860 <__kernel_rem_pio2+0x300>
 8012856:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801285a:	f8c8 3000 	str.w	r3, [r8]
 801285e:	2301      	movs	r3, #1
 8012860:	3201      	adds	r2, #1
 8012862:	f108 0804 	add.w	r8, r8, #4
 8012866:	461d      	mov	r5, r3
 8012868:	e752      	b.n	8012710 <__kernel_rem_pio2+0x1b0>
 801286a:	1acb      	subs	r3, r1, r3
 801286c:	f8c8 3000 	str.w	r3, [r8]
 8012870:	462b      	mov	r3, r5
 8012872:	e7f5      	b.n	8012860 <__kernel_rem_pio2+0x300>
 8012874:	f3af 8000 	nop.w
	...
 8012884:	3ff00000 	.word	0x3ff00000
 8012888:	08014258 	.word	0x08014258
 801288c:	40200000 	.word	0x40200000
 8012890:	3ff00000 	.word	0x3ff00000
 8012894:	3e700000 	.word	0x3e700000
 8012898:	41700000 	.word	0x41700000
 801289c:	3fe00000 	.word	0x3fe00000
 80128a0:	08014218 	.word	0x08014218
 80128a4:	1e62      	subs	r2, r4, #1
 80128a6:	ab0e      	add	r3, sp, #56	; 0x38
 80128a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80128b0:	a90e      	add	r1, sp, #56	; 0x38
 80128b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80128b6:	e739      	b.n	801272c <__kernel_rem_pio2+0x1cc>
 80128b8:	1e62      	subs	r2, r4, #1
 80128ba:	ab0e      	add	r3, sp, #56	; 0x38
 80128bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80128c4:	e7f4      	b.n	80128b0 <__kernel_rem_pio2+0x350>
 80128c6:	a90e      	add	r1, sp, #56	; 0x38
 80128c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80128cc:	3b01      	subs	r3, #1
 80128ce:	430a      	orrs	r2, r1
 80128d0:	e789      	b.n	80127e6 <__kernel_rem_pio2+0x286>
 80128d2:	3301      	adds	r3, #1
 80128d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80128d8:	2900      	cmp	r1, #0
 80128da:	d0fa      	beq.n	80128d2 <__kernel_rem_pio2+0x372>
 80128dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80128e2:	446a      	add	r2, sp
 80128e4:	3a98      	subs	r2, #152	; 0x98
 80128e6:	920a      	str	r2, [sp, #40]	; 0x28
 80128e8:	9a08      	ldr	r2, [sp, #32]
 80128ea:	18e3      	adds	r3, r4, r3
 80128ec:	18a5      	adds	r5, r4, r2
 80128ee:	aa22      	add	r2, sp, #136	; 0x88
 80128f0:	f104 0801 	add.w	r8, r4, #1
 80128f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80128f8:	9304      	str	r3, [sp, #16]
 80128fa:	9b04      	ldr	r3, [sp, #16]
 80128fc:	4543      	cmp	r3, r8
 80128fe:	da04      	bge.n	801290a <__kernel_rem_pio2+0x3aa>
 8012900:	461c      	mov	r4, r3
 8012902:	e6a3      	b.n	801264c <__kernel_rem_pio2+0xec>
 8012904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012906:	2301      	movs	r3, #1
 8012908:	e7e4      	b.n	80128d4 <__kernel_rem_pio2+0x374>
 801290a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801290c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012910:	f7ed fe08 	bl	8000524 <__aeabi_i2d>
 8012914:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801291a:	46ab      	mov	fp, r5
 801291c:	461c      	mov	r4, r3
 801291e:	f04f 0900 	mov.w	r9, #0
 8012922:	2600      	movs	r6, #0
 8012924:	2700      	movs	r7, #0
 8012926:	9b06      	ldr	r3, [sp, #24]
 8012928:	4599      	cmp	r9, r3
 801292a:	dd06      	ble.n	801293a <__kernel_rem_pio2+0x3da>
 801292c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801292e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012932:	f108 0801 	add.w	r8, r8, #1
 8012936:	930a      	str	r3, [sp, #40]	; 0x28
 8012938:	e7df      	b.n	80128fa <__kernel_rem_pio2+0x39a>
 801293a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801293e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012942:	f7ed fe59 	bl	80005f8 <__aeabi_dmul>
 8012946:	4602      	mov	r2, r0
 8012948:	460b      	mov	r3, r1
 801294a:	4630      	mov	r0, r6
 801294c:	4639      	mov	r1, r7
 801294e:	f7ed fc9d 	bl	800028c <__adddf3>
 8012952:	f109 0901 	add.w	r9, r9, #1
 8012956:	4606      	mov	r6, r0
 8012958:	460f      	mov	r7, r1
 801295a:	e7e4      	b.n	8012926 <__kernel_rem_pio2+0x3c6>
 801295c:	3d01      	subs	r5, #1
 801295e:	e748      	b.n	80127f2 <__kernel_rem_pio2+0x292>
 8012960:	ec47 6b10 	vmov	d0, r6, r7
 8012964:	f1ca 0000 	rsb	r0, sl, #0
 8012968:	f000 fe4a 	bl	8013600 <scalbn>
 801296c:	ec57 6b10 	vmov	r6, r7, d0
 8012970:	4ba0      	ldr	r3, [pc, #640]	; (8012bf4 <__kernel_rem_pio2+0x694>)
 8012972:	ee10 0a10 	vmov	r0, s0
 8012976:	2200      	movs	r2, #0
 8012978:	4639      	mov	r1, r7
 801297a:	f7ee f8c3 	bl	8000b04 <__aeabi_dcmpge>
 801297e:	b1f8      	cbz	r0, 80129c0 <__kernel_rem_pio2+0x460>
 8012980:	4b9d      	ldr	r3, [pc, #628]	; (8012bf8 <__kernel_rem_pio2+0x698>)
 8012982:	2200      	movs	r2, #0
 8012984:	4630      	mov	r0, r6
 8012986:	4639      	mov	r1, r7
 8012988:	f7ed fe36 	bl	80005f8 <__aeabi_dmul>
 801298c:	f7ee f8e4 	bl	8000b58 <__aeabi_d2iz>
 8012990:	4680      	mov	r8, r0
 8012992:	f7ed fdc7 	bl	8000524 <__aeabi_i2d>
 8012996:	4b97      	ldr	r3, [pc, #604]	; (8012bf4 <__kernel_rem_pio2+0x694>)
 8012998:	2200      	movs	r2, #0
 801299a:	f7ed fe2d 	bl	80005f8 <__aeabi_dmul>
 801299e:	460b      	mov	r3, r1
 80129a0:	4602      	mov	r2, r0
 80129a2:	4639      	mov	r1, r7
 80129a4:	4630      	mov	r0, r6
 80129a6:	f7ed fc6f 	bl	8000288 <__aeabi_dsub>
 80129aa:	f7ee f8d5 	bl	8000b58 <__aeabi_d2iz>
 80129ae:	1c65      	adds	r5, r4, #1
 80129b0:	ab0e      	add	r3, sp, #56	; 0x38
 80129b2:	f10a 0a18 	add.w	sl, sl, #24
 80129b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80129be:	e720      	b.n	8012802 <__kernel_rem_pio2+0x2a2>
 80129c0:	4630      	mov	r0, r6
 80129c2:	4639      	mov	r1, r7
 80129c4:	f7ee f8c8 	bl	8000b58 <__aeabi_d2iz>
 80129c8:	ab0e      	add	r3, sp, #56	; 0x38
 80129ca:	4625      	mov	r5, r4
 80129cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129d0:	e717      	b.n	8012802 <__kernel_rem_pio2+0x2a2>
 80129d2:	ab0e      	add	r3, sp, #56	; 0x38
 80129d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80129d8:	f7ed fda4 	bl	8000524 <__aeabi_i2d>
 80129dc:	4632      	mov	r2, r6
 80129de:	463b      	mov	r3, r7
 80129e0:	f7ed fe0a 	bl	80005f8 <__aeabi_dmul>
 80129e4:	4b84      	ldr	r3, [pc, #528]	; (8012bf8 <__kernel_rem_pio2+0x698>)
 80129e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80129ea:	2200      	movs	r2, #0
 80129ec:	4630      	mov	r0, r6
 80129ee:	4639      	mov	r1, r7
 80129f0:	f7ed fe02 	bl	80005f8 <__aeabi_dmul>
 80129f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80129f8:	4606      	mov	r6, r0
 80129fa:	460f      	mov	r7, r1
 80129fc:	e70f      	b.n	801281e <__kernel_rem_pio2+0x2be>
 80129fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012a02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012a06:	f7ed fdf7 	bl	80005f8 <__aeabi_dmul>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a12:	f7ed fc3b 	bl	800028c <__adddf3>
 8012a16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a1a:	f108 0801 	add.w	r8, r8, #1
 8012a1e:	9b02      	ldr	r3, [sp, #8]
 8012a20:	4598      	cmp	r8, r3
 8012a22:	dc01      	bgt.n	8012a28 <__kernel_rem_pio2+0x4c8>
 8012a24:	45b8      	cmp	r8, r7
 8012a26:	ddea      	ble.n	80129fe <__kernel_rem_pio2+0x49e>
 8012a28:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012a2c:	ab4a      	add	r3, sp, #296	; 0x128
 8012a2e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012a32:	ed87 7b00 	vstr	d7, [r7]
 8012a36:	3e01      	subs	r6, #1
 8012a38:	e6f8      	b.n	801282c <__kernel_rem_pio2+0x2cc>
 8012a3a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a3c:	2b02      	cmp	r3, #2
 8012a3e:	dc0b      	bgt.n	8012a58 <__kernel_rem_pio2+0x4f8>
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	dc35      	bgt.n	8012ab0 <__kernel_rem_pio2+0x550>
 8012a44:	d059      	beq.n	8012afa <__kernel_rem_pio2+0x59a>
 8012a46:	9b04      	ldr	r3, [sp, #16]
 8012a48:	f003 0007 	and.w	r0, r3, #7
 8012a4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012a50:	ecbd 8b02 	vpop	{d8}
 8012a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a58:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d1f3      	bne.n	8012a46 <__kernel_rem_pio2+0x4e6>
 8012a5e:	ab4a      	add	r3, sp, #296	; 0x128
 8012a60:	4423      	add	r3, r4
 8012a62:	9306      	str	r3, [sp, #24]
 8012a64:	461c      	mov	r4, r3
 8012a66:	469a      	mov	sl, r3
 8012a68:	9502      	str	r5, [sp, #8]
 8012a6a:	9b02      	ldr	r3, [sp, #8]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f1aa 0a08 	sub.w	sl, sl, #8
 8012a72:	dc6b      	bgt.n	8012b4c <__kernel_rem_pio2+0x5ec>
 8012a74:	46aa      	mov	sl, r5
 8012a76:	f1ba 0f01 	cmp.w	sl, #1
 8012a7a:	f1a4 0408 	sub.w	r4, r4, #8
 8012a7e:	f300 8085 	bgt.w	8012b8c <__kernel_rem_pio2+0x62c>
 8012a82:	9c06      	ldr	r4, [sp, #24]
 8012a84:	2000      	movs	r0, #0
 8012a86:	3408      	adds	r4, #8
 8012a88:	2100      	movs	r1, #0
 8012a8a:	2d01      	cmp	r5, #1
 8012a8c:	f300 809d 	bgt.w	8012bca <__kernel_rem_pio2+0x66a>
 8012a90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012a94:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012a98:	f1bb 0f00 	cmp.w	fp, #0
 8012a9c:	f040 809b 	bne.w	8012bd6 <__kernel_rem_pio2+0x676>
 8012aa0:	9b01      	ldr	r3, [sp, #4]
 8012aa2:	e9c3 5600 	strd	r5, r6, [r3]
 8012aa6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012aaa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012aae:	e7ca      	b.n	8012a46 <__kernel_rem_pio2+0x4e6>
 8012ab0:	3408      	adds	r4, #8
 8012ab2:	ab4a      	add	r3, sp, #296	; 0x128
 8012ab4:	441c      	add	r4, r3
 8012ab6:	462e      	mov	r6, r5
 8012ab8:	2000      	movs	r0, #0
 8012aba:	2100      	movs	r1, #0
 8012abc:	2e00      	cmp	r6, #0
 8012abe:	da36      	bge.n	8012b2e <__kernel_rem_pio2+0x5ce>
 8012ac0:	f1bb 0f00 	cmp.w	fp, #0
 8012ac4:	d039      	beq.n	8012b3a <__kernel_rem_pio2+0x5da>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012acc:	9c01      	ldr	r4, [sp, #4]
 8012ace:	e9c4 2300 	strd	r2, r3, [r4]
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012ada:	f7ed fbd5 	bl	8000288 <__aeabi_dsub>
 8012ade:	ae4c      	add	r6, sp, #304	; 0x130
 8012ae0:	2401      	movs	r4, #1
 8012ae2:	42a5      	cmp	r5, r4
 8012ae4:	da2c      	bge.n	8012b40 <__kernel_rem_pio2+0x5e0>
 8012ae6:	f1bb 0f00 	cmp.w	fp, #0
 8012aea:	d002      	beq.n	8012af2 <__kernel_rem_pio2+0x592>
 8012aec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012af0:	4619      	mov	r1, r3
 8012af2:	9b01      	ldr	r3, [sp, #4]
 8012af4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012af8:	e7a5      	b.n	8012a46 <__kernel_rem_pio2+0x4e6>
 8012afa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012afe:	eb0d 0403 	add.w	r4, sp, r3
 8012b02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012b06:	2000      	movs	r0, #0
 8012b08:	2100      	movs	r1, #0
 8012b0a:	2d00      	cmp	r5, #0
 8012b0c:	da09      	bge.n	8012b22 <__kernel_rem_pio2+0x5c2>
 8012b0e:	f1bb 0f00 	cmp.w	fp, #0
 8012b12:	d002      	beq.n	8012b1a <__kernel_rem_pio2+0x5ba>
 8012b14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b18:	4619      	mov	r1, r3
 8012b1a:	9b01      	ldr	r3, [sp, #4]
 8012b1c:	e9c3 0100 	strd	r0, r1, [r3]
 8012b20:	e791      	b.n	8012a46 <__kernel_rem_pio2+0x4e6>
 8012b22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b26:	f7ed fbb1 	bl	800028c <__adddf3>
 8012b2a:	3d01      	subs	r5, #1
 8012b2c:	e7ed      	b.n	8012b0a <__kernel_rem_pio2+0x5aa>
 8012b2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b32:	f7ed fbab 	bl	800028c <__adddf3>
 8012b36:	3e01      	subs	r6, #1
 8012b38:	e7c0      	b.n	8012abc <__kernel_rem_pio2+0x55c>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	e7c5      	b.n	8012acc <__kernel_rem_pio2+0x56c>
 8012b40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012b44:	f7ed fba2 	bl	800028c <__adddf3>
 8012b48:	3401      	adds	r4, #1
 8012b4a:	e7ca      	b.n	8012ae2 <__kernel_rem_pio2+0x582>
 8012b4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012b54:	9b02      	ldr	r3, [sp, #8]
 8012b56:	3b01      	subs	r3, #1
 8012b58:	9302      	str	r3, [sp, #8]
 8012b5a:	4632      	mov	r2, r6
 8012b5c:	463b      	mov	r3, r7
 8012b5e:	4640      	mov	r0, r8
 8012b60:	4649      	mov	r1, r9
 8012b62:	f7ed fb93 	bl	800028c <__adddf3>
 8012b66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	4640      	mov	r0, r8
 8012b70:	4649      	mov	r1, r9
 8012b72:	f7ed fb89 	bl	8000288 <__aeabi_dsub>
 8012b76:	4632      	mov	r2, r6
 8012b78:	463b      	mov	r3, r7
 8012b7a:	f7ed fb87 	bl	800028c <__adddf3>
 8012b7e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012b82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b86:	ed8a 7b00 	vstr	d7, [sl]
 8012b8a:	e76e      	b.n	8012a6a <__kernel_rem_pio2+0x50a>
 8012b8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012b90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012b94:	4640      	mov	r0, r8
 8012b96:	4632      	mov	r2, r6
 8012b98:	463b      	mov	r3, r7
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	f7ed fb76 	bl	800028c <__adddf3>
 8012ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	4640      	mov	r0, r8
 8012baa:	4649      	mov	r1, r9
 8012bac:	f7ed fb6c 	bl	8000288 <__aeabi_dsub>
 8012bb0:	4632      	mov	r2, r6
 8012bb2:	463b      	mov	r3, r7
 8012bb4:	f7ed fb6a 	bl	800028c <__adddf3>
 8012bb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012bbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012bc0:	ed84 7b00 	vstr	d7, [r4]
 8012bc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012bc8:	e755      	b.n	8012a76 <__kernel_rem_pio2+0x516>
 8012bca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bce:	f7ed fb5d 	bl	800028c <__adddf3>
 8012bd2:	3d01      	subs	r5, #1
 8012bd4:	e759      	b.n	8012a8a <__kernel_rem_pio2+0x52a>
 8012bd6:	9b01      	ldr	r3, [sp, #4]
 8012bd8:	9a01      	ldr	r2, [sp, #4]
 8012bda:	601d      	str	r5, [r3, #0]
 8012bdc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012be0:	605c      	str	r4, [r3, #4]
 8012be2:	609f      	str	r7, [r3, #8]
 8012be4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012be8:	60d3      	str	r3, [r2, #12]
 8012bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bee:	6110      	str	r0, [r2, #16]
 8012bf0:	6153      	str	r3, [r2, #20]
 8012bf2:	e728      	b.n	8012a46 <__kernel_rem_pio2+0x4e6>
 8012bf4:	41700000 	.word	0x41700000
 8012bf8:	3e700000 	.word	0x3e700000
 8012bfc:	00000000 	.word	0x00000000

08012c00 <__kernel_sin>:
 8012c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c04:	ed2d 8b04 	vpush	{d8-d9}
 8012c08:	eeb0 8a41 	vmov.f32	s16, s2
 8012c0c:	eef0 8a61 	vmov.f32	s17, s3
 8012c10:	ec55 4b10 	vmov	r4, r5, d0
 8012c14:	b083      	sub	sp, #12
 8012c16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c1e:	9001      	str	r0, [sp, #4]
 8012c20:	da06      	bge.n	8012c30 <__kernel_sin+0x30>
 8012c22:	ee10 0a10 	vmov	r0, s0
 8012c26:	4629      	mov	r1, r5
 8012c28:	f7ed ff96 	bl	8000b58 <__aeabi_d2iz>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d051      	beq.n	8012cd4 <__kernel_sin+0xd4>
 8012c30:	4622      	mov	r2, r4
 8012c32:	462b      	mov	r3, r5
 8012c34:	4620      	mov	r0, r4
 8012c36:	4629      	mov	r1, r5
 8012c38:	f7ed fcde 	bl	80005f8 <__aeabi_dmul>
 8012c3c:	4682      	mov	sl, r0
 8012c3e:	468b      	mov	fp, r1
 8012c40:	4602      	mov	r2, r0
 8012c42:	460b      	mov	r3, r1
 8012c44:	4620      	mov	r0, r4
 8012c46:	4629      	mov	r1, r5
 8012c48:	f7ed fcd6 	bl	80005f8 <__aeabi_dmul>
 8012c4c:	a341      	add	r3, pc, #260	; (adr r3, 8012d54 <__kernel_sin+0x154>)
 8012c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c52:	4680      	mov	r8, r0
 8012c54:	4689      	mov	r9, r1
 8012c56:	4650      	mov	r0, sl
 8012c58:	4659      	mov	r1, fp
 8012c5a:	f7ed fccd 	bl	80005f8 <__aeabi_dmul>
 8012c5e:	a33f      	add	r3, pc, #252	; (adr r3, 8012d5c <__kernel_sin+0x15c>)
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	f7ed fb10 	bl	8000288 <__aeabi_dsub>
 8012c68:	4652      	mov	r2, sl
 8012c6a:	465b      	mov	r3, fp
 8012c6c:	f7ed fcc4 	bl	80005f8 <__aeabi_dmul>
 8012c70:	a33c      	add	r3, pc, #240	; (adr r3, 8012d64 <__kernel_sin+0x164>)
 8012c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c76:	f7ed fb09 	bl	800028c <__adddf3>
 8012c7a:	4652      	mov	r2, sl
 8012c7c:	465b      	mov	r3, fp
 8012c7e:	f7ed fcbb 	bl	80005f8 <__aeabi_dmul>
 8012c82:	a33a      	add	r3, pc, #232	; (adr r3, 8012d6c <__kernel_sin+0x16c>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	f7ed fafe 	bl	8000288 <__aeabi_dsub>
 8012c8c:	4652      	mov	r2, sl
 8012c8e:	465b      	mov	r3, fp
 8012c90:	f7ed fcb2 	bl	80005f8 <__aeabi_dmul>
 8012c94:	a337      	add	r3, pc, #220	; (adr r3, 8012d74 <__kernel_sin+0x174>)
 8012c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9a:	f7ed faf7 	bl	800028c <__adddf3>
 8012c9e:	9b01      	ldr	r3, [sp, #4]
 8012ca0:	4606      	mov	r6, r0
 8012ca2:	460f      	mov	r7, r1
 8012ca4:	b9eb      	cbnz	r3, 8012ce2 <__kernel_sin+0xe2>
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4650      	mov	r0, sl
 8012cac:	4659      	mov	r1, fp
 8012cae:	f7ed fca3 	bl	80005f8 <__aeabi_dmul>
 8012cb2:	a325      	add	r3, pc, #148	; (adr r3, 8012d48 <__kernel_sin+0x148>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	f7ed fae6 	bl	8000288 <__aeabi_dsub>
 8012cbc:	4642      	mov	r2, r8
 8012cbe:	464b      	mov	r3, r9
 8012cc0:	f7ed fc9a 	bl	80005f8 <__aeabi_dmul>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	4620      	mov	r0, r4
 8012cca:	4629      	mov	r1, r5
 8012ccc:	f7ed fade 	bl	800028c <__adddf3>
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	460d      	mov	r5, r1
 8012cd4:	ec45 4b10 	vmov	d0, r4, r5
 8012cd8:	b003      	add	sp, #12
 8012cda:	ecbd 8b04 	vpop	{d8-d9}
 8012cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce2:	4b1b      	ldr	r3, [pc, #108]	; (8012d50 <__kernel_sin+0x150>)
 8012ce4:	ec51 0b18 	vmov	r0, r1, d8
 8012ce8:	2200      	movs	r2, #0
 8012cea:	f7ed fc85 	bl	80005f8 <__aeabi_dmul>
 8012cee:	4632      	mov	r2, r6
 8012cf0:	ec41 0b19 	vmov	d9, r0, r1
 8012cf4:	463b      	mov	r3, r7
 8012cf6:	4640      	mov	r0, r8
 8012cf8:	4649      	mov	r1, r9
 8012cfa:	f7ed fc7d 	bl	80005f8 <__aeabi_dmul>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	460b      	mov	r3, r1
 8012d02:	ec51 0b19 	vmov	r0, r1, d9
 8012d06:	f7ed fabf 	bl	8000288 <__aeabi_dsub>
 8012d0a:	4652      	mov	r2, sl
 8012d0c:	465b      	mov	r3, fp
 8012d0e:	f7ed fc73 	bl	80005f8 <__aeabi_dmul>
 8012d12:	ec53 2b18 	vmov	r2, r3, d8
 8012d16:	f7ed fab7 	bl	8000288 <__aeabi_dsub>
 8012d1a:	a30b      	add	r3, pc, #44	; (adr r3, 8012d48 <__kernel_sin+0x148>)
 8012d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d20:	4606      	mov	r6, r0
 8012d22:	460f      	mov	r7, r1
 8012d24:	4640      	mov	r0, r8
 8012d26:	4649      	mov	r1, r9
 8012d28:	f7ed fc66 	bl	80005f8 <__aeabi_dmul>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4630      	mov	r0, r6
 8012d32:	4639      	mov	r1, r7
 8012d34:	f7ed faaa 	bl	800028c <__adddf3>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ed faa2 	bl	8000288 <__aeabi_dsub>
 8012d44:	e7c4      	b.n	8012cd0 <__kernel_sin+0xd0>
 8012d46:	bf00      	nop
 8012d48:	55555549 	.word	0x55555549
 8012d4c:	3fc55555 	.word	0x3fc55555
 8012d50:	3fe00000 	.word	0x3fe00000
 8012d54:	5acfd57c 	.word	0x5acfd57c
 8012d58:	3de5d93a 	.word	0x3de5d93a
 8012d5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d60:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d64:	57b1fe7d 	.word	0x57b1fe7d
 8012d68:	3ec71de3 	.word	0x3ec71de3
 8012d6c:	19c161d5 	.word	0x19c161d5
 8012d70:	3f2a01a0 	.word	0x3f2a01a0
 8012d74:	1110f8a6 	.word	0x1110f8a6
 8012d78:	3f811111 	.word	0x3f811111
 8012d7c:	00000000 	.word	0x00000000

08012d80 <__kernel_tan>:
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	ed2d 8b06 	vpush	{d8-d10}
 8012d88:	ec5b ab10 	vmov	sl, fp, d0
 8012d8c:	4be0      	ldr	r3, [pc, #896]	; (8013110 <__kernel_tan+0x390>)
 8012d8e:	b083      	sub	sp, #12
 8012d90:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8012d94:	429f      	cmp	r7, r3
 8012d96:	ec59 8b11 	vmov	r8, r9, d1
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	f8cd b000 	str.w	fp, [sp]
 8012da0:	dc61      	bgt.n	8012e66 <__kernel_tan+0xe6>
 8012da2:	ee10 0a10 	vmov	r0, s0
 8012da6:	4659      	mov	r1, fp
 8012da8:	f7ed fed6 	bl	8000b58 <__aeabi_d2iz>
 8012dac:	4605      	mov	r5, r0
 8012dae:	2800      	cmp	r0, #0
 8012db0:	f040 8083 	bne.w	8012eba <__kernel_tan+0x13a>
 8012db4:	1c73      	adds	r3, r6, #1
 8012db6:	4652      	mov	r2, sl
 8012db8:	4313      	orrs	r3, r2
 8012dba:	433b      	orrs	r3, r7
 8012dbc:	d112      	bne.n	8012de4 <__kernel_tan+0x64>
 8012dbe:	ec4b ab10 	vmov	d0, sl, fp
 8012dc2:	f000 fb89 	bl	80134d8 <fabs>
 8012dc6:	49d3      	ldr	r1, [pc, #844]	; (8013114 <__kernel_tan+0x394>)
 8012dc8:	ec53 2b10 	vmov	r2, r3, d0
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f7ed fd3d 	bl	800084c <__aeabi_ddiv>
 8012dd2:	4682      	mov	sl, r0
 8012dd4:	468b      	mov	fp, r1
 8012dd6:	ec4b ab10 	vmov	d0, sl, fp
 8012dda:	b003      	add	sp, #12
 8012ddc:	ecbd 8b06 	vpop	{d8-d10}
 8012de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de4:	2e01      	cmp	r6, #1
 8012de6:	d0f6      	beq.n	8012dd6 <__kernel_tan+0x56>
 8012de8:	4642      	mov	r2, r8
 8012dea:	464b      	mov	r3, r9
 8012dec:	4650      	mov	r0, sl
 8012dee:	4659      	mov	r1, fp
 8012df0:	f7ed fa4c 	bl	800028c <__adddf3>
 8012df4:	4602      	mov	r2, r0
 8012df6:	460b      	mov	r3, r1
 8012df8:	460f      	mov	r7, r1
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	49c6      	ldr	r1, [pc, #792]	; (8013118 <__kernel_tan+0x398>)
 8012dfe:	f7ed fd25 	bl	800084c <__aeabi_ddiv>
 8012e02:	e9cd 0100 	strd	r0, r1, [sp]
 8012e06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e0a:	462e      	mov	r6, r5
 8012e0c:	4652      	mov	r2, sl
 8012e0e:	462c      	mov	r4, r5
 8012e10:	4630      	mov	r0, r6
 8012e12:	461d      	mov	r5, r3
 8012e14:	4639      	mov	r1, r7
 8012e16:	465b      	mov	r3, fp
 8012e18:	f7ed fa36 	bl	8000288 <__aeabi_dsub>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	4640      	mov	r0, r8
 8012e22:	4649      	mov	r1, r9
 8012e24:	f7ed fa30 	bl	8000288 <__aeabi_dsub>
 8012e28:	4632      	mov	r2, r6
 8012e2a:	462b      	mov	r3, r5
 8012e2c:	f7ed fbe4 	bl	80005f8 <__aeabi_dmul>
 8012e30:	4632      	mov	r2, r6
 8012e32:	4680      	mov	r8, r0
 8012e34:	4689      	mov	r9, r1
 8012e36:	462b      	mov	r3, r5
 8012e38:	4630      	mov	r0, r6
 8012e3a:	4639      	mov	r1, r7
 8012e3c:	f7ed fbdc 	bl	80005f8 <__aeabi_dmul>
 8012e40:	4bb4      	ldr	r3, [pc, #720]	; (8013114 <__kernel_tan+0x394>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	f7ed fa22 	bl	800028c <__adddf3>
 8012e48:	4602      	mov	r2, r0
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	4640      	mov	r0, r8
 8012e4e:	4649      	mov	r1, r9
 8012e50:	f7ed fa1c 	bl	800028c <__adddf3>
 8012e54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e58:	f7ed fbce 	bl	80005f8 <__aeabi_dmul>
 8012e5c:	4622      	mov	r2, r4
 8012e5e:	462b      	mov	r3, r5
 8012e60:	f7ed fa14 	bl	800028c <__adddf3>
 8012e64:	e7b5      	b.n	8012dd2 <__kernel_tan+0x52>
 8012e66:	4bad      	ldr	r3, [pc, #692]	; (801311c <__kernel_tan+0x39c>)
 8012e68:	429f      	cmp	r7, r3
 8012e6a:	dd26      	ble.n	8012eba <__kernel_tan+0x13a>
 8012e6c:	9b00      	ldr	r3, [sp, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	da09      	bge.n	8012e86 <__kernel_tan+0x106>
 8012e72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012e76:	469b      	mov	fp, r3
 8012e78:	ee10 aa10 	vmov	sl, s0
 8012e7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012e80:	ee11 8a10 	vmov	r8, s2
 8012e84:	4699      	mov	r9, r3
 8012e86:	4652      	mov	r2, sl
 8012e88:	465b      	mov	r3, fp
 8012e8a:	a183      	add	r1, pc, #524	; (adr r1, 8013098 <__kernel_tan+0x318>)
 8012e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e90:	f7ed f9fa 	bl	8000288 <__aeabi_dsub>
 8012e94:	4642      	mov	r2, r8
 8012e96:	464b      	mov	r3, r9
 8012e98:	4604      	mov	r4, r0
 8012e9a:	460d      	mov	r5, r1
 8012e9c:	a180      	add	r1, pc, #512	; (adr r1, 80130a0 <__kernel_tan+0x320>)
 8012e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ea2:	f7ed f9f1 	bl	8000288 <__aeabi_dsub>
 8012ea6:	4622      	mov	r2, r4
 8012ea8:	462b      	mov	r3, r5
 8012eaa:	f7ed f9ef 	bl	800028c <__adddf3>
 8012eae:	f04f 0800 	mov.w	r8, #0
 8012eb2:	4682      	mov	sl, r0
 8012eb4:	468b      	mov	fp, r1
 8012eb6:	f04f 0900 	mov.w	r9, #0
 8012eba:	4652      	mov	r2, sl
 8012ebc:	465b      	mov	r3, fp
 8012ebe:	4650      	mov	r0, sl
 8012ec0:	4659      	mov	r1, fp
 8012ec2:	f7ed fb99 	bl	80005f8 <__aeabi_dmul>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	ec43 2b18 	vmov	d8, r2, r3
 8012ece:	f7ed fb93 	bl	80005f8 <__aeabi_dmul>
 8012ed2:	ec53 2b18 	vmov	r2, r3, d8
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	460d      	mov	r5, r1
 8012eda:	4650      	mov	r0, sl
 8012edc:	4659      	mov	r1, fp
 8012ede:	f7ed fb8b 	bl	80005f8 <__aeabi_dmul>
 8012ee2:	a371      	add	r3, pc, #452	; (adr r3, 80130a8 <__kernel_tan+0x328>)
 8012ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee8:	ec41 0b19 	vmov	d9, r0, r1
 8012eec:	4620      	mov	r0, r4
 8012eee:	4629      	mov	r1, r5
 8012ef0:	f7ed fb82 	bl	80005f8 <__aeabi_dmul>
 8012ef4:	a36e      	add	r3, pc, #440	; (adr r3, 80130b0 <__kernel_tan+0x330>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	f7ed f9c7 	bl	800028c <__adddf3>
 8012efe:	4622      	mov	r2, r4
 8012f00:	462b      	mov	r3, r5
 8012f02:	f7ed fb79 	bl	80005f8 <__aeabi_dmul>
 8012f06:	a36c      	add	r3, pc, #432	; (adr r3, 80130b8 <__kernel_tan+0x338>)
 8012f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0c:	f7ed f9be 	bl	800028c <__adddf3>
 8012f10:	4622      	mov	r2, r4
 8012f12:	462b      	mov	r3, r5
 8012f14:	f7ed fb70 	bl	80005f8 <__aeabi_dmul>
 8012f18:	a369      	add	r3, pc, #420	; (adr r3, 80130c0 <__kernel_tan+0x340>)
 8012f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1e:	f7ed f9b5 	bl	800028c <__adddf3>
 8012f22:	4622      	mov	r2, r4
 8012f24:	462b      	mov	r3, r5
 8012f26:	f7ed fb67 	bl	80005f8 <__aeabi_dmul>
 8012f2a:	a367      	add	r3, pc, #412	; (adr r3, 80130c8 <__kernel_tan+0x348>)
 8012f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f30:	f7ed f9ac 	bl	800028c <__adddf3>
 8012f34:	4622      	mov	r2, r4
 8012f36:	462b      	mov	r3, r5
 8012f38:	f7ed fb5e 	bl	80005f8 <__aeabi_dmul>
 8012f3c:	a364      	add	r3, pc, #400	; (adr r3, 80130d0 <__kernel_tan+0x350>)
 8012f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f42:	f7ed f9a3 	bl	800028c <__adddf3>
 8012f46:	ec53 2b18 	vmov	r2, r3, d8
 8012f4a:	f7ed fb55 	bl	80005f8 <__aeabi_dmul>
 8012f4e:	a362      	add	r3, pc, #392	; (adr r3, 80130d8 <__kernel_tan+0x358>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	ec41 0b1a 	vmov	d10, r0, r1
 8012f58:	4620      	mov	r0, r4
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	f7ed fb4c 	bl	80005f8 <__aeabi_dmul>
 8012f60:	a35f      	add	r3, pc, #380	; (adr r3, 80130e0 <__kernel_tan+0x360>)
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	f7ed f991 	bl	800028c <__adddf3>
 8012f6a:	4622      	mov	r2, r4
 8012f6c:	462b      	mov	r3, r5
 8012f6e:	f7ed fb43 	bl	80005f8 <__aeabi_dmul>
 8012f72:	a35d      	add	r3, pc, #372	; (adr r3, 80130e8 <__kernel_tan+0x368>)
 8012f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f78:	f7ed f988 	bl	800028c <__adddf3>
 8012f7c:	4622      	mov	r2, r4
 8012f7e:	462b      	mov	r3, r5
 8012f80:	f7ed fb3a 	bl	80005f8 <__aeabi_dmul>
 8012f84:	a35a      	add	r3, pc, #360	; (adr r3, 80130f0 <__kernel_tan+0x370>)
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	f7ed f97f 	bl	800028c <__adddf3>
 8012f8e:	4622      	mov	r2, r4
 8012f90:	462b      	mov	r3, r5
 8012f92:	f7ed fb31 	bl	80005f8 <__aeabi_dmul>
 8012f96:	a358      	add	r3, pc, #352	; (adr r3, 80130f8 <__kernel_tan+0x378>)
 8012f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9c:	f7ed f976 	bl	800028c <__adddf3>
 8012fa0:	4622      	mov	r2, r4
 8012fa2:	462b      	mov	r3, r5
 8012fa4:	f7ed fb28 	bl	80005f8 <__aeabi_dmul>
 8012fa8:	a355      	add	r3, pc, #340	; (adr r3, 8013100 <__kernel_tan+0x380>)
 8012faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fae:	f7ed f96d 	bl	800028c <__adddf3>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	ec51 0b1a 	vmov	r0, r1, d10
 8012fba:	f7ed f967 	bl	800028c <__adddf3>
 8012fbe:	ec53 2b19 	vmov	r2, r3, d9
 8012fc2:	f7ed fb19 	bl	80005f8 <__aeabi_dmul>
 8012fc6:	4642      	mov	r2, r8
 8012fc8:	464b      	mov	r3, r9
 8012fca:	f7ed f95f 	bl	800028c <__adddf3>
 8012fce:	ec53 2b18 	vmov	r2, r3, d8
 8012fd2:	f7ed fb11 	bl	80005f8 <__aeabi_dmul>
 8012fd6:	4642      	mov	r2, r8
 8012fd8:	464b      	mov	r3, r9
 8012fda:	f7ed f957 	bl	800028c <__adddf3>
 8012fde:	a34a      	add	r3, pc, #296	; (adr r3, 8013108 <__kernel_tan+0x388>)
 8012fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	460d      	mov	r5, r1
 8012fe8:	ec51 0b19 	vmov	r0, r1, d9
 8012fec:	f7ed fb04 	bl	80005f8 <__aeabi_dmul>
 8012ff0:	4622      	mov	r2, r4
 8012ff2:	462b      	mov	r3, r5
 8012ff4:	f7ed f94a 	bl	800028c <__adddf3>
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	ec41 0b18 	vmov	d8, r0, r1
 8012ffe:	4602      	mov	r2, r0
 8013000:	4659      	mov	r1, fp
 8013002:	4650      	mov	r0, sl
 8013004:	f7ed f942 	bl	800028c <__adddf3>
 8013008:	4b44      	ldr	r3, [pc, #272]	; (801311c <__kernel_tan+0x39c>)
 801300a:	429f      	cmp	r7, r3
 801300c:	4604      	mov	r4, r0
 801300e:	460d      	mov	r5, r1
 8013010:	f340 8086 	ble.w	8013120 <__kernel_tan+0x3a0>
 8013014:	4630      	mov	r0, r6
 8013016:	f7ed fa85 	bl	8000524 <__aeabi_i2d>
 801301a:	4622      	mov	r2, r4
 801301c:	4680      	mov	r8, r0
 801301e:	4689      	mov	r9, r1
 8013020:	462b      	mov	r3, r5
 8013022:	4620      	mov	r0, r4
 8013024:	4629      	mov	r1, r5
 8013026:	f7ed fae7 	bl	80005f8 <__aeabi_dmul>
 801302a:	4642      	mov	r2, r8
 801302c:	4606      	mov	r6, r0
 801302e:	460f      	mov	r7, r1
 8013030:	464b      	mov	r3, r9
 8013032:	4620      	mov	r0, r4
 8013034:	4629      	mov	r1, r5
 8013036:	f7ed f929 	bl	800028c <__adddf3>
 801303a:	4602      	mov	r2, r0
 801303c:	460b      	mov	r3, r1
 801303e:	4630      	mov	r0, r6
 8013040:	4639      	mov	r1, r7
 8013042:	f7ed fc03 	bl	800084c <__aeabi_ddiv>
 8013046:	ec53 2b18 	vmov	r2, r3, d8
 801304a:	f7ed f91d 	bl	8000288 <__aeabi_dsub>
 801304e:	4602      	mov	r2, r0
 8013050:	460b      	mov	r3, r1
 8013052:	4650      	mov	r0, sl
 8013054:	4659      	mov	r1, fp
 8013056:	f7ed f917 	bl	8000288 <__aeabi_dsub>
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	f7ed f915 	bl	800028c <__adddf3>
 8013062:	4602      	mov	r2, r0
 8013064:	460b      	mov	r3, r1
 8013066:	4640      	mov	r0, r8
 8013068:	4649      	mov	r1, r9
 801306a:	f7ed f90d 	bl	8000288 <__aeabi_dsub>
 801306e:	9b00      	ldr	r3, [sp, #0]
 8013070:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8013074:	f00a 0a02 	and.w	sl, sl, #2
 8013078:	4604      	mov	r4, r0
 801307a:	f1ca 0001 	rsb	r0, sl, #1
 801307e:	460d      	mov	r5, r1
 8013080:	f7ed fa50 	bl	8000524 <__aeabi_i2d>
 8013084:	4602      	mov	r2, r0
 8013086:	460b      	mov	r3, r1
 8013088:	4620      	mov	r0, r4
 801308a:	4629      	mov	r1, r5
 801308c:	f7ed fab4 	bl	80005f8 <__aeabi_dmul>
 8013090:	e69f      	b.n	8012dd2 <__kernel_tan+0x52>
 8013092:	bf00      	nop
 8013094:	f3af 8000 	nop.w
 8013098:	54442d18 	.word	0x54442d18
 801309c:	3fe921fb 	.word	0x3fe921fb
 80130a0:	33145c07 	.word	0x33145c07
 80130a4:	3c81a626 	.word	0x3c81a626
 80130a8:	74bf7ad4 	.word	0x74bf7ad4
 80130ac:	3efb2a70 	.word	0x3efb2a70
 80130b0:	32f0a7e9 	.word	0x32f0a7e9
 80130b4:	3f12b80f 	.word	0x3f12b80f
 80130b8:	1a8d1068 	.word	0x1a8d1068
 80130bc:	3f3026f7 	.word	0x3f3026f7
 80130c0:	fee08315 	.word	0xfee08315
 80130c4:	3f57dbc8 	.word	0x3f57dbc8
 80130c8:	e96e8493 	.word	0xe96e8493
 80130cc:	3f8226e3 	.word	0x3f8226e3
 80130d0:	1bb341fe 	.word	0x1bb341fe
 80130d4:	3faba1ba 	.word	0x3faba1ba
 80130d8:	db605373 	.word	0xdb605373
 80130dc:	bef375cb 	.word	0xbef375cb
 80130e0:	a03792a6 	.word	0xa03792a6
 80130e4:	3f147e88 	.word	0x3f147e88
 80130e8:	f2f26501 	.word	0xf2f26501
 80130ec:	3f4344d8 	.word	0x3f4344d8
 80130f0:	c9560328 	.word	0xc9560328
 80130f4:	3f6d6d22 	.word	0x3f6d6d22
 80130f8:	8406d637 	.word	0x8406d637
 80130fc:	3f9664f4 	.word	0x3f9664f4
 8013100:	1110fe7a 	.word	0x1110fe7a
 8013104:	3fc11111 	.word	0x3fc11111
 8013108:	55555563 	.word	0x55555563
 801310c:	3fd55555 	.word	0x3fd55555
 8013110:	3e2fffff 	.word	0x3e2fffff
 8013114:	3ff00000 	.word	0x3ff00000
 8013118:	bff00000 	.word	0xbff00000
 801311c:	3fe59427 	.word	0x3fe59427
 8013120:	2e01      	cmp	r6, #1
 8013122:	d02f      	beq.n	8013184 <__kernel_tan+0x404>
 8013124:	460f      	mov	r7, r1
 8013126:	4602      	mov	r2, r0
 8013128:	460b      	mov	r3, r1
 801312a:	4689      	mov	r9, r1
 801312c:	2000      	movs	r0, #0
 801312e:	4917      	ldr	r1, [pc, #92]	; (801318c <__kernel_tan+0x40c>)
 8013130:	f7ed fb8c 	bl	800084c <__aeabi_ddiv>
 8013134:	2600      	movs	r6, #0
 8013136:	e9cd 0100 	strd	r0, r1, [sp]
 801313a:	4652      	mov	r2, sl
 801313c:	465b      	mov	r3, fp
 801313e:	4630      	mov	r0, r6
 8013140:	4639      	mov	r1, r7
 8013142:	f7ed f8a1 	bl	8000288 <__aeabi_dsub>
 8013146:	e9dd 4500 	ldrd	r4, r5, [sp]
 801314a:	4602      	mov	r2, r0
 801314c:	460b      	mov	r3, r1
 801314e:	ec51 0b18 	vmov	r0, r1, d8
 8013152:	f7ed f899 	bl	8000288 <__aeabi_dsub>
 8013156:	4632      	mov	r2, r6
 8013158:	462b      	mov	r3, r5
 801315a:	f7ed fa4d 	bl	80005f8 <__aeabi_dmul>
 801315e:	46b0      	mov	r8, r6
 8013160:	460f      	mov	r7, r1
 8013162:	4642      	mov	r2, r8
 8013164:	462b      	mov	r3, r5
 8013166:	4634      	mov	r4, r6
 8013168:	4649      	mov	r1, r9
 801316a:	4606      	mov	r6, r0
 801316c:	4640      	mov	r0, r8
 801316e:	f7ed fa43 	bl	80005f8 <__aeabi_dmul>
 8013172:	4b07      	ldr	r3, [pc, #28]	; (8013190 <__kernel_tan+0x410>)
 8013174:	2200      	movs	r2, #0
 8013176:	f7ed f889 	bl	800028c <__adddf3>
 801317a:	4602      	mov	r2, r0
 801317c:	460b      	mov	r3, r1
 801317e:	4630      	mov	r0, r6
 8013180:	4639      	mov	r1, r7
 8013182:	e665      	b.n	8012e50 <__kernel_tan+0xd0>
 8013184:	4682      	mov	sl, r0
 8013186:	468b      	mov	fp, r1
 8013188:	e625      	b.n	8012dd6 <__kernel_tan+0x56>
 801318a:	bf00      	nop
 801318c:	bff00000 	.word	0xbff00000
 8013190:	3ff00000 	.word	0x3ff00000
 8013194:	00000000 	.word	0x00000000

08013198 <atan>:
 8013198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	ec55 4b10 	vmov	r4, r5, d0
 80131a0:	4bc3      	ldr	r3, [pc, #780]	; (80134b0 <atan+0x318>)
 80131a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80131a6:	429e      	cmp	r6, r3
 80131a8:	46ab      	mov	fp, r5
 80131aa:	dd18      	ble.n	80131de <atan+0x46>
 80131ac:	4bc1      	ldr	r3, [pc, #772]	; (80134b4 <atan+0x31c>)
 80131ae:	429e      	cmp	r6, r3
 80131b0:	dc01      	bgt.n	80131b6 <atan+0x1e>
 80131b2:	d109      	bne.n	80131c8 <atan+0x30>
 80131b4:	b144      	cbz	r4, 80131c8 <atan+0x30>
 80131b6:	4622      	mov	r2, r4
 80131b8:	462b      	mov	r3, r5
 80131ba:	4620      	mov	r0, r4
 80131bc:	4629      	mov	r1, r5
 80131be:	f7ed f865 	bl	800028c <__adddf3>
 80131c2:	4604      	mov	r4, r0
 80131c4:	460d      	mov	r5, r1
 80131c6:	e006      	b.n	80131d6 <atan+0x3e>
 80131c8:	f1bb 0f00 	cmp.w	fp, #0
 80131cc:	f300 8131 	bgt.w	8013432 <atan+0x29a>
 80131d0:	a59b      	add	r5, pc, #620	; (adr r5, 8013440 <atan+0x2a8>)
 80131d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131d6:	ec45 4b10 	vmov	d0, r4, r5
 80131da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131de:	4bb6      	ldr	r3, [pc, #728]	; (80134b8 <atan+0x320>)
 80131e0:	429e      	cmp	r6, r3
 80131e2:	dc14      	bgt.n	801320e <atan+0x76>
 80131e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80131e8:	429e      	cmp	r6, r3
 80131ea:	dc0d      	bgt.n	8013208 <atan+0x70>
 80131ec:	a396      	add	r3, pc, #600	; (adr r3, 8013448 <atan+0x2b0>)
 80131ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f2:	ee10 0a10 	vmov	r0, s0
 80131f6:	4629      	mov	r1, r5
 80131f8:	f7ed f848 	bl	800028c <__adddf3>
 80131fc:	4baf      	ldr	r3, [pc, #700]	; (80134bc <atan+0x324>)
 80131fe:	2200      	movs	r2, #0
 8013200:	f7ed fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 8013204:	2800      	cmp	r0, #0
 8013206:	d1e6      	bne.n	80131d6 <atan+0x3e>
 8013208:	f04f 3aff 	mov.w	sl, #4294967295
 801320c:	e02b      	b.n	8013266 <atan+0xce>
 801320e:	f000 f963 	bl	80134d8 <fabs>
 8013212:	4bab      	ldr	r3, [pc, #684]	; (80134c0 <atan+0x328>)
 8013214:	429e      	cmp	r6, r3
 8013216:	ec55 4b10 	vmov	r4, r5, d0
 801321a:	f300 80bf 	bgt.w	801339c <atan+0x204>
 801321e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013222:	429e      	cmp	r6, r3
 8013224:	f300 80a0 	bgt.w	8013368 <atan+0x1d0>
 8013228:	ee10 2a10 	vmov	r2, s0
 801322c:	ee10 0a10 	vmov	r0, s0
 8013230:	462b      	mov	r3, r5
 8013232:	4629      	mov	r1, r5
 8013234:	f7ed f82a 	bl	800028c <__adddf3>
 8013238:	4ba0      	ldr	r3, [pc, #640]	; (80134bc <atan+0x324>)
 801323a:	2200      	movs	r2, #0
 801323c:	f7ed f824 	bl	8000288 <__aeabi_dsub>
 8013240:	2200      	movs	r2, #0
 8013242:	4606      	mov	r6, r0
 8013244:	460f      	mov	r7, r1
 8013246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801324a:	4620      	mov	r0, r4
 801324c:	4629      	mov	r1, r5
 801324e:	f7ed f81d 	bl	800028c <__adddf3>
 8013252:	4602      	mov	r2, r0
 8013254:	460b      	mov	r3, r1
 8013256:	4630      	mov	r0, r6
 8013258:	4639      	mov	r1, r7
 801325a:	f7ed faf7 	bl	800084c <__aeabi_ddiv>
 801325e:	f04f 0a00 	mov.w	sl, #0
 8013262:	4604      	mov	r4, r0
 8013264:	460d      	mov	r5, r1
 8013266:	4622      	mov	r2, r4
 8013268:	462b      	mov	r3, r5
 801326a:	4620      	mov	r0, r4
 801326c:	4629      	mov	r1, r5
 801326e:	f7ed f9c3 	bl	80005f8 <__aeabi_dmul>
 8013272:	4602      	mov	r2, r0
 8013274:	460b      	mov	r3, r1
 8013276:	4680      	mov	r8, r0
 8013278:	4689      	mov	r9, r1
 801327a:	f7ed f9bd 	bl	80005f8 <__aeabi_dmul>
 801327e:	a374      	add	r3, pc, #464	; (adr r3, 8013450 <atan+0x2b8>)
 8013280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013284:	4606      	mov	r6, r0
 8013286:	460f      	mov	r7, r1
 8013288:	f7ed f9b6 	bl	80005f8 <__aeabi_dmul>
 801328c:	a372      	add	r3, pc, #456	; (adr r3, 8013458 <atan+0x2c0>)
 801328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013292:	f7ec fffb 	bl	800028c <__adddf3>
 8013296:	4632      	mov	r2, r6
 8013298:	463b      	mov	r3, r7
 801329a:	f7ed f9ad 	bl	80005f8 <__aeabi_dmul>
 801329e:	a370      	add	r3, pc, #448	; (adr r3, 8013460 <atan+0x2c8>)
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	f7ec fff2 	bl	800028c <__adddf3>
 80132a8:	4632      	mov	r2, r6
 80132aa:	463b      	mov	r3, r7
 80132ac:	f7ed f9a4 	bl	80005f8 <__aeabi_dmul>
 80132b0:	a36d      	add	r3, pc, #436	; (adr r3, 8013468 <atan+0x2d0>)
 80132b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b6:	f7ec ffe9 	bl	800028c <__adddf3>
 80132ba:	4632      	mov	r2, r6
 80132bc:	463b      	mov	r3, r7
 80132be:	f7ed f99b 	bl	80005f8 <__aeabi_dmul>
 80132c2:	a36b      	add	r3, pc, #428	; (adr r3, 8013470 <atan+0x2d8>)
 80132c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c8:	f7ec ffe0 	bl	800028c <__adddf3>
 80132cc:	4632      	mov	r2, r6
 80132ce:	463b      	mov	r3, r7
 80132d0:	f7ed f992 	bl	80005f8 <__aeabi_dmul>
 80132d4:	a368      	add	r3, pc, #416	; (adr r3, 8013478 <atan+0x2e0>)
 80132d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132da:	f7ec ffd7 	bl	800028c <__adddf3>
 80132de:	4642      	mov	r2, r8
 80132e0:	464b      	mov	r3, r9
 80132e2:	f7ed f989 	bl	80005f8 <__aeabi_dmul>
 80132e6:	a366      	add	r3, pc, #408	; (adr r3, 8013480 <atan+0x2e8>)
 80132e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ec:	4680      	mov	r8, r0
 80132ee:	4689      	mov	r9, r1
 80132f0:	4630      	mov	r0, r6
 80132f2:	4639      	mov	r1, r7
 80132f4:	f7ed f980 	bl	80005f8 <__aeabi_dmul>
 80132f8:	a363      	add	r3, pc, #396	; (adr r3, 8013488 <atan+0x2f0>)
 80132fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fe:	f7ec ffc3 	bl	8000288 <__aeabi_dsub>
 8013302:	4632      	mov	r2, r6
 8013304:	463b      	mov	r3, r7
 8013306:	f7ed f977 	bl	80005f8 <__aeabi_dmul>
 801330a:	a361      	add	r3, pc, #388	; (adr r3, 8013490 <atan+0x2f8>)
 801330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013310:	f7ec ffba 	bl	8000288 <__aeabi_dsub>
 8013314:	4632      	mov	r2, r6
 8013316:	463b      	mov	r3, r7
 8013318:	f7ed f96e 	bl	80005f8 <__aeabi_dmul>
 801331c:	a35e      	add	r3, pc, #376	; (adr r3, 8013498 <atan+0x300>)
 801331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013322:	f7ec ffb1 	bl	8000288 <__aeabi_dsub>
 8013326:	4632      	mov	r2, r6
 8013328:	463b      	mov	r3, r7
 801332a:	f7ed f965 	bl	80005f8 <__aeabi_dmul>
 801332e:	a35c      	add	r3, pc, #368	; (adr r3, 80134a0 <atan+0x308>)
 8013330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013334:	f7ec ffa8 	bl	8000288 <__aeabi_dsub>
 8013338:	4632      	mov	r2, r6
 801333a:	463b      	mov	r3, r7
 801333c:	f7ed f95c 	bl	80005f8 <__aeabi_dmul>
 8013340:	4602      	mov	r2, r0
 8013342:	460b      	mov	r3, r1
 8013344:	4640      	mov	r0, r8
 8013346:	4649      	mov	r1, r9
 8013348:	f7ec ffa0 	bl	800028c <__adddf3>
 801334c:	4622      	mov	r2, r4
 801334e:	462b      	mov	r3, r5
 8013350:	f7ed f952 	bl	80005f8 <__aeabi_dmul>
 8013354:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013358:	4602      	mov	r2, r0
 801335a:	460b      	mov	r3, r1
 801335c:	d14b      	bne.n	80133f6 <atan+0x25e>
 801335e:	4620      	mov	r0, r4
 8013360:	4629      	mov	r1, r5
 8013362:	f7ec ff91 	bl	8000288 <__aeabi_dsub>
 8013366:	e72c      	b.n	80131c2 <atan+0x2a>
 8013368:	ee10 0a10 	vmov	r0, s0
 801336c:	4b53      	ldr	r3, [pc, #332]	; (80134bc <atan+0x324>)
 801336e:	2200      	movs	r2, #0
 8013370:	4629      	mov	r1, r5
 8013372:	f7ec ff89 	bl	8000288 <__aeabi_dsub>
 8013376:	4b51      	ldr	r3, [pc, #324]	; (80134bc <atan+0x324>)
 8013378:	4606      	mov	r6, r0
 801337a:	460f      	mov	r7, r1
 801337c:	2200      	movs	r2, #0
 801337e:	4620      	mov	r0, r4
 8013380:	4629      	mov	r1, r5
 8013382:	f7ec ff83 	bl	800028c <__adddf3>
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ed fa5d 	bl	800084c <__aeabi_ddiv>
 8013392:	f04f 0a01 	mov.w	sl, #1
 8013396:	4604      	mov	r4, r0
 8013398:	460d      	mov	r5, r1
 801339a:	e764      	b.n	8013266 <atan+0xce>
 801339c:	4b49      	ldr	r3, [pc, #292]	; (80134c4 <atan+0x32c>)
 801339e:	429e      	cmp	r6, r3
 80133a0:	da1d      	bge.n	80133de <atan+0x246>
 80133a2:	ee10 0a10 	vmov	r0, s0
 80133a6:	4b48      	ldr	r3, [pc, #288]	; (80134c8 <atan+0x330>)
 80133a8:	2200      	movs	r2, #0
 80133aa:	4629      	mov	r1, r5
 80133ac:	f7ec ff6c 	bl	8000288 <__aeabi_dsub>
 80133b0:	4b45      	ldr	r3, [pc, #276]	; (80134c8 <atan+0x330>)
 80133b2:	4606      	mov	r6, r0
 80133b4:	460f      	mov	r7, r1
 80133b6:	2200      	movs	r2, #0
 80133b8:	4620      	mov	r0, r4
 80133ba:	4629      	mov	r1, r5
 80133bc:	f7ed f91c 	bl	80005f8 <__aeabi_dmul>
 80133c0:	4b3e      	ldr	r3, [pc, #248]	; (80134bc <atan+0x324>)
 80133c2:	2200      	movs	r2, #0
 80133c4:	f7ec ff62 	bl	800028c <__adddf3>
 80133c8:	4602      	mov	r2, r0
 80133ca:	460b      	mov	r3, r1
 80133cc:	4630      	mov	r0, r6
 80133ce:	4639      	mov	r1, r7
 80133d0:	f7ed fa3c 	bl	800084c <__aeabi_ddiv>
 80133d4:	f04f 0a02 	mov.w	sl, #2
 80133d8:	4604      	mov	r4, r0
 80133da:	460d      	mov	r5, r1
 80133dc:	e743      	b.n	8013266 <atan+0xce>
 80133de:	462b      	mov	r3, r5
 80133e0:	ee10 2a10 	vmov	r2, s0
 80133e4:	4939      	ldr	r1, [pc, #228]	; (80134cc <atan+0x334>)
 80133e6:	2000      	movs	r0, #0
 80133e8:	f7ed fa30 	bl	800084c <__aeabi_ddiv>
 80133ec:	f04f 0a03 	mov.w	sl, #3
 80133f0:	4604      	mov	r4, r0
 80133f2:	460d      	mov	r5, r1
 80133f4:	e737      	b.n	8013266 <atan+0xce>
 80133f6:	4b36      	ldr	r3, [pc, #216]	; (80134d0 <atan+0x338>)
 80133f8:	4e36      	ldr	r6, [pc, #216]	; (80134d4 <atan+0x33c>)
 80133fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80133fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013402:	e9da 2300 	ldrd	r2, r3, [sl]
 8013406:	f7ec ff3f 	bl	8000288 <__aeabi_dsub>
 801340a:	4622      	mov	r2, r4
 801340c:	462b      	mov	r3, r5
 801340e:	f7ec ff3b 	bl	8000288 <__aeabi_dsub>
 8013412:	4602      	mov	r2, r0
 8013414:	460b      	mov	r3, r1
 8013416:	e9d6 0100 	ldrd	r0, r1, [r6]
 801341a:	f7ec ff35 	bl	8000288 <__aeabi_dsub>
 801341e:	f1bb 0f00 	cmp.w	fp, #0
 8013422:	4604      	mov	r4, r0
 8013424:	460d      	mov	r5, r1
 8013426:	f6bf aed6 	bge.w	80131d6 <atan+0x3e>
 801342a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801342e:	461d      	mov	r5, r3
 8013430:	e6d1      	b.n	80131d6 <atan+0x3e>
 8013432:	a51d      	add	r5, pc, #116	; (adr r5, 80134a8 <atan+0x310>)
 8013434:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013438:	e6cd      	b.n	80131d6 <atan+0x3e>
 801343a:	bf00      	nop
 801343c:	f3af 8000 	nop.w
 8013440:	54442d18 	.word	0x54442d18
 8013444:	bff921fb 	.word	0xbff921fb
 8013448:	8800759c 	.word	0x8800759c
 801344c:	7e37e43c 	.word	0x7e37e43c
 8013450:	e322da11 	.word	0xe322da11
 8013454:	3f90ad3a 	.word	0x3f90ad3a
 8013458:	24760deb 	.word	0x24760deb
 801345c:	3fa97b4b 	.word	0x3fa97b4b
 8013460:	a0d03d51 	.word	0xa0d03d51
 8013464:	3fb10d66 	.word	0x3fb10d66
 8013468:	c54c206e 	.word	0xc54c206e
 801346c:	3fb745cd 	.word	0x3fb745cd
 8013470:	920083ff 	.word	0x920083ff
 8013474:	3fc24924 	.word	0x3fc24924
 8013478:	5555550d 	.word	0x5555550d
 801347c:	3fd55555 	.word	0x3fd55555
 8013480:	2c6a6c2f 	.word	0x2c6a6c2f
 8013484:	bfa2b444 	.word	0xbfa2b444
 8013488:	52defd9a 	.word	0x52defd9a
 801348c:	3fadde2d 	.word	0x3fadde2d
 8013490:	af749a6d 	.word	0xaf749a6d
 8013494:	3fb3b0f2 	.word	0x3fb3b0f2
 8013498:	fe231671 	.word	0xfe231671
 801349c:	3fbc71c6 	.word	0x3fbc71c6
 80134a0:	9998ebc4 	.word	0x9998ebc4
 80134a4:	3fc99999 	.word	0x3fc99999
 80134a8:	54442d18 	.word	0x54442d18
 80134ac:	3ff921fb 	.word	0x3ff921fb
 80134b0:	440fffff 	.word	0x440fffff
 80134b4:	7ff00000 	.word	0x7ff00000
 80134b8:	3fdbffff 	.word	0x3fdbffff
 80134bc:	3ff00000 	.word	0x3ff00000
 80134c0:	3ff2ffff 	.word	0x3ff2ffff
 80134c4:	40038000 	.word	0x40038000
 80134c8:	3ff80000 	.word	0x3ff80000
 80134cc:	bff00000 	.word	0xbff00000
 80134d0:	08014288 	.word	0x08014288
 80134d4:	08014268 	.word	0x08014268

080134d8 <fabs>:
 80134d8:	ec51 0b10 	vmov	r0, r1, d0
 80134dc:	ee10 2a10 	vmov	r2, s0
 80134e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80134e4:	ec43 2b10 	vmov	d0, r2, r3
 80134e8:	4770      	bx	lr
 80134ea:	0000      	movs	r0, r0
 80134ec:	0000      	movs	r0, r0
	...

080134f0 <floor>:
 80134f0:	ec51 0b10 	vmov	r0, r1, d0
 80134f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80134fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013500:	2e13      	cmp	r6, #19
 8013502:	ee10 5a10 	vmov	r5, s0
 8013506:	ee10 8a10 	vmov	r8, s0
 801350a:	460c      	mov	r4, r1
 801350c:	dc32      	bgt.n	8013574 <floor+0x84>
 801350e:	2e00      	cmp	r6, #0
 8013510:	da14      	bge.n	801353c <floor+0x4c>
 8013512:	a333      	add	r3, pc, #204	; (adr r3, 80135e0 <floor+0xf0>)
 8013514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013518:	f7ec feb8 	bl	800028c <__adddf3>
 801351c:	2200      	movs	r2, #0
 801351e:	2300      	movs	r3, #0
 8013520:	f7ed fafa 	bl	8000b18 <__aeabi_dcmpgt>
 8013524:	b138      	cbz	r0, 8013536 <floor+0x46>
 8013526:	2c00      	cmp	r4, #0
 8013528:	da57      	bge.n	80135da <floor+0xea>
 801352a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801352e:	431d      	orrs	r5, r3
 8013530:	d001      	beq.n	8013536 <floor+0x46>
 8013532:	4c2d      	ldr	r4, [pc, #180]	; (80135e8 <floor+0xf8>)
 8013534:	2500      	movs	r5, #0
 8013536:	4621      	mov	r1, r4
 8013538:	4628      	mov	r0, r5
 801353a:	e025      	b.n	8013588 <floor+0x98>
 801353c:	4f2b      	ldr	r7, [pc, #172]	; (80135ec <floor+0xfc>)
 801353e:	4137      	asrs	r7, r6
 8013540:	ea01 0307 	and.w	r3, r1, r7
 8013544:	4303      	orrs	r3, r0
 8013546:	d01f      	beq.n	8013588 <floor+0x98>
 8013548:	a325      	add	r3, pc, #148	; (adr r3, 80135e0 <floor+0xf0>)
 801354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354e:	f7ec fe9d 	bl	800028c <__adddf3>
 8013552:	2200      	movs	r2, #0
 8013554:	2300      	movs	r3, #0
 8013556:	f7ed fadf 	bl	8000b18 <__aeabi_dcmpgt>
 801355a:	2800      	cmp	r0, #0
 801355c:	d0eb      	beq.n	8013536 <floor+0x46>
 801355e:	2c00      	cmp	r4, #0
 8013560:	bfbe      	ittt	lt
 8013562:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013566:	fa43 f606 	asrlt.w	r6, r3, r6
 801356a:	19a4      	addlt	r4, r4, r6
 801356c:	ea24 0407 	bic.w	r4, r4, r7
 8013570:	2500      	movs	r5, #0
 8013572:	e7e0      	b.n	8013536 <floor+0x46>
 8013574:	2e33      	cmp	r6, #51	; 0x33
 8013576:	dd0b      	ble.n	8013590 <floor+0xa0>
 8013578:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801357c:	d104      	bne.n	8013588 <floor+0x98>
 801357e:	ee10 2a10 	vmov	r2, s0
 8013582:	460b      	mov	r3, r1
 8013584:	f7ec fe82 	bl	800028c <__adddf3>
 8013588:	ec41 0b10 	vmov	d0, r0, r1
 801358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013590:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013594:	f04f 33ff 	mov.w	r3, #4294967295
 8013598:	fa23 f707 	lsr.w	r7, r3, r7
 801359c:	4207      	tst	r7, r0
 801359e:	d0f3      	beq.n	8013588 <floor+0x98>
 80135a0:	a30f      	add	r3, pc, #60	; (adr r3, 80135e0 <floor+0xf0>)
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	f7ec fe71 	bl	800028c <__adddf3>
 80135aa:	2200      	movs	r2, #0
 80135ac:	2300      	movs	r3, #0
 80135ae:	f7ed fab3 	bl	8000b18 <__aeabi_dcmpgt>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d0bf      	beq.n	8013536 <floor+0x46>
 80135b6:	2c00      	cmp	r4, #0
 80135b8:	da02      	bge.n	80135c0 <floor+0xd0>
 80135ba:	2e14      	cmp	r6, #20
 80135bc:	d103      	bne.n	80135c6 <floor+0xd6>
 80135be:	3401      	adds	r4, #1
 80135c0:	ea25 0507 	bic.w	r5, r5, r7
 80135c4:	e7b7      	b.n	8013536 <floor+0x46>
 80135c6:	2301      	movs	r3, #1
 80135c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80135cc:	fa03 f606 	lsl.w	r6, r3, r6
 80135d0:	4435      	add	r5, r6
 80135d2:	4545      	cmp	r5, r8
 80135d4:	bf38      	it	cc
 80135d6:	18e4      	addcc	r4, r4, r3
 80135d8:	e7f2      	b.n	80135c0 <floor+0xd0>
 80135da:	2500      	movs	r5, #0
 80135dc:	462c      	mov	r4, r5
 80135de:	e7aa      	b.n	8013536 <floor+0x46>
 80135e0:	8800759c 	.word	0x8800759c
 80135e4:	7e37e43c 	.word	0x7e37e43c
 80135e8:	bff00000 	.word	0xbff00000
 80135ec:	000fffff 	.word	0x000fffff

080135f0 <nan>:
 80135f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80135f8 <nan+0x8>
 80135f4:	4770      	bx	lr
 80135f6:	bf00      	nop
 80135f8:	00000000 	.word	0x00000000
 80135fc:	7ff80000 	.word	0x7ff80000

08013600 <scalbn>:
 8013600:	b570      	push	{r4, r5, r6, lr}
 8013602:	ec55 4b10 	vmov	r4, r5, d0
 8013606:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801360a:	4606      	mov	r6, r0
 801360c:	462b      	mov	r3, r5
 801360e:	b99a      	cbnz	r2, 8013638 <scalbn+0x38>
 8013610:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013614:	4323      	orrs	r3, r4
 8013616:	d036      	beq.n	8013686 <scalbn+0x86>
 8013618:	4b39      	ldr	r3, [pc, #228]	; (8013700 <scalbn+0x100>)
 801361a:	4629      	mov	r1, r5
 801361c:	ee10 0a10 	vmov	r0, s0
 8013620:	2200      	movs	r2, #0
 8013622:	f7ec ffe9 	bl	80005f8 <__aeabi_dmul>
 8013626:	4b37      	ldr	r3, [pc, #220]	; (8013704 <scalbn+0x104>)
 8013628:	429e      	cmp	r6, r3
 801362a:	4604      	mov	r4, r0
 801362c:	460d      	mov	r5, r1
 801362e:	da10      	bge.n	8013652 <scalbn+0x52>
 8013630:	a32b      	add	r3, pc, #172	; (adr r3, 80136e0 <scalbn+0xe0>)
 8013632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013636:	e03a      	b.n	80136ae <scalbn+0xae>
 8013638:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801363c:	428a      	cmp	r2, r1
 801363e:	d10c      	bne.n	801365a <scalbn+0x5a>
 8013640:	ee10 2a10 	vmov	r2, s0
 8013644:	4620      	mov	r0, r4
 8013646:	4629      	mov	r1, r5
 8013648:	f7ec fe20 	bl	800028c <__adddf3>
 801364c:	4604      	mov	r4, r0
 801364e:	460d      	mov	r5, r1
 8013650:	e019      	b.n	8013686 <scalbn+0x86>
 8013652:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013656:	460b      	mov	r3, r1
 8013658:	3a36      	subs	r2, #54	; 0x36
 801365a:	4432      	add	r2, r6
 801365c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013660:	428a      	cmp	r2, r1
 8013662:	dd08      	ble.n	8013676 <scalbn+0x76>
 8013664:	2d00      	cmp	r5, #0
 8013666:	a120      	add	r1, pc, #128	; (adr r1, 80136e8 <scalbn+0xe8>)
 8013668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801366c:	da1c      	bge.n	80136a8 <scalbn+0xa8>
 801366e:	a120      	add	r1, pc, #128	; (adr r1, 80136f0 <scalbn+0xf0>)
 8013670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013674:	e018      	b.n	80136a8 <scalbn+0xa8>
 8013676:	2a00      	cmp	r2, #0
 8013678:	dd08      	ble.n	801368c <scalbn+0x8c>
 801367a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801367e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013682:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013686:	ec45 4b10 	vmov	d0, r4, r5
 801368a:	bd70      	pop	{r4, r5, r6, pc}
 801368c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013690:	da19      	bge.n	80136c6 <scalbn+0xc6>
 8013692:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013696:	429e      	cmp	r6, r3
 8013698:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801369c:	dd0a      	ble.n	80136b4 <scalbn+0xb4>
 801369e:	a112      	add	r1, pc, #72	; (adr r1, 80136e8 <scalbn+0xe8>)
 80136a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1e2      	bne.n	801366e <scalbn+0x6e>
 80136a8:	a30f      	add	r3, pc, #60	; (adr r3, 80136e8 <scalbn+0xe8>)
 80136aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ae:	f7ec ffa3 	bl	80005f8 <__aeabi_dmul>
 80136b2:	e7cb      	b.n	801364c <scalbn+0x4c>
 80136b4:	a10a      	add	r1, pc, #40	; (adr r1, 80136e0 <scalbn+0xe0>)
 80136b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d0b8      	beq.n	8013630 <scalbn+0x30>
 80136be:	a10e      	add	r1, pc, #56	; (adr r1, 80136f8 <scalbn+0xf8>)
 80136c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136c4:	e7b4      	b.n	8013630 <scalbn+0x30>
 80136c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136ca:	3236      	adds	r2, #54	; 0x36
 80136cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80136d4:	4620      	mov	r0, r4
 80136d6:	4b0c      	ldr	r3, [pc, #48]	; (8013708 <scalbn+0x108>)
 80136d8:	2200      	movs	r2, #0
 80136da:	e7e8      	b.n	80136ae <scalbn+0xae>
 80136dc:	f3af 8000 	nop.w
 80136e0:	c2f8f359 	.word	0xc2f8f359
 80136e4:	01a56e1f 	.word	0x01a56e1f
 80136e8:	8800759c 	.word	0x8800759c
 80136ec:	7e37e43c 	.word	0x7e37e43c
 80136f0:	8800759c 	.word	0x8800759c
 80136f4:	fe37e43c 	.word	0xfe37e43c
 80136f8:	c2f8f359 	.word	0xc2f8f359
 80136fc:	81a56e1f 	.word	0x81a56e1f
 8013700:	43500000 	.word	0x43500000
 8013704:	ffff3cb0 	.word	0xffff3cb0
 8013708:	3c900000 	.word	0x3c900000

0801370c <_init>:
 801370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370e:	bf00      	nop
 8013710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013712:	bc08      	pop	{r3}
 8013714:	469e      	mov	lr, r3
 8013716:	4770      	bx	lr

08013718 <_fini>:
 8013718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801371a:	bf00      	nop
 801371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801371e:	bc08      	pop	{r3}
 8013720:	469e      	mov	lr, r3
 8013722:	4770      	bx	lr
