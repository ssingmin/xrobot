
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800bf34  0800bf34  0001bf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2fc  0800c2fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2fc  0800c2fc  0001c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c304  0800c304  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c304  0800c304  0001c304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c308  0800c308  0001c308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000052a0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005314  20005314  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d0b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ce2  00000000  00000000  00041daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00046a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  000484a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f97  00000000  00000000  00049cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec17  00000000  00000000  00050c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d14f1  00000000  00000000  0006f85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140d4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007378  00000000  00000000  00140da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf1c 	.word	0x0800bf1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800bf1c 	.word	0x0800bf1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 800057c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <ws2812NumOn+0x20>)
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <ws2812NumOn+0x24>)
 8000586:	f004 fbf7 	bl	8004d78 <HAL_TIM_PWM_Start_DMA>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	20000760 	.word	0x20000760

0800059c <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800059c:	b480      	push	{r7}
 800059e:	b09d      	sub	sp, #116	; 0x74
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	70fb      	strb	r3, [r7, #3]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70bb      	strb	r3, [r7, #2]
 80005b2:	4613      	mov	r3, r2
 80005b4:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4413      	add	r3, r2
 80005be:	021a      	lsls	r2, r3, #8
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	4413      	add	r3, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3370      	adds	r3, #112	; 0x70
 80005cc:	443b      	add	r3, r7
 80005ce:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005d6:	e02c      	b.n	8000632 <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3370      	adds	r3, #112	; 0x70
 80005de:	443b      	add	r3, r7
 80005e0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80005e4:	2101      	movs	r1, #1
 80005e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4013      	ands	r3, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00e      	beq.n	8000610 <ws2812SetColor+0x74>
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <ws2812SetColor+0xac>)
 8000608:	2143      	movs	r1, #67	; 0x43
 800060a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060e:	e00d      	b.n	800062c <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4613      	mov	r3, r2
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	461a      	mov	r2, r3
 800061c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <ws2812SetColor+0xac>)
 8000626:	2121      	movs	r1, #33	; 0x21
 8000628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	3301      	adds	r3, #1
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000634:	2b17      	cmp	r3, #23
 8000636:	ddcf      	ble.n	80005d8 <ws2812SetColor+0x3c>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3774      	adds	r7, #116	; 0x74
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090

0800064c <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	460b      	mov	r3, r1
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4413      	add	r3, r2
 8000666:	021a      	lsls	r2, r3, #8
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 800066e:	2318      	movs	r3, #24
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e02d      	b.n	80006d0 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e024      	b.n	80006c4 <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 800067a:	2201      	movs	r2, #1
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <ws2812AllColor+0x5a>
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	461a      	mov	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <ws2812AllColor+0x98>)
 800069e:	2143      	movs	r1, #67	; 0x43
 80006a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a4:	e00b      	b.n	80006be <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	461a      	mov	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <ws2812AllColor+0x98>)
 80006b8:	2121      	movs	r1, #33	; 0x21
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	3301      	adds	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	ddd7      	ble.n	800067a <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dcce      	bgt.n	8000674 <ws2812AllColor+0x28>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	20000090 	.word	0x20000090

080006e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN1_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN1_Init+0x64>)
 8000706:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_CAN1_Init+0x64>)
 800070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_CAN1_Init+0x64>)
 800071c:	2201      	movs	r2, #1
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_CAN1_Init+0x64>)
 800073a:	f001 fe81 	bl	8002440 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 ff86 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200005d8 	.word	0x200005d8
 8000750:	40006400 	.word	0x40006400

08000754 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_CAN_MspInit+0x94>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d134      	bne.n	80007e0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_CAN_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_CAN_MspInit+0x9c>)
 80007cc:	f003 f9b4 	bl	8003b38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2014      	movs	r0, #20
 80007d6:	f002 fd83 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007da:	2014      	movs	r0, #20
 80007dc:	f002 fd9c 	bl	8003318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40006400 	.word	0x40006400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <CanInit+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <CanInit+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <CanInit+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <CanInit+0x98>)
 8000818:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	b29b      	uxth	r3, r3
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <CanInit+0x98>)
 8000826:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <CanInit+0x98>)
 8000830:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b29b      	uxth	r3, r3
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <CanInit+0x98>)
 800083e:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <CanInit+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <CanInit+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <CanInit+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <CanInit+0x9c>)
 8000854:	f001 ffd0 	bl	80027f8 <HAL_CAN_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <CanInit+0x6e>
 800085e:	f000 fef9 	bl	8001654 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8000862:	2102      	movs	r1, #2
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <CanInit+0x9c>)
 8000866:	f002 fa2d 	bl	8002cc4 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d000      	beq.n	8000872 <CanInit+0x7e>
 8000870:	e7fe      	b.n	8000870 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <CanInit+0x98>)
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <CanInit+0x9c>)
 8000876:	f001 fedf 	bl	8002638 <HAL_CAN_ConfigFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000880:	f000 fee8 	bl	8001654 <Error_Handler>
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200005b0 	.word	0x200005b0
 8000890:	200005d8 	.word	0x200005d8

08000894 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	460b      	mov	r3, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <sendCan+0x2c>
 80008bc:	2304      	movs	r3, #4
 80008be:	e000      	b.n	80008c2 <sendCan+0x2e>
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <sendCan+0x74>)
 80008d0:	f002 f8b1 	bl	8002a36 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	f107 0114 	add.w	r1, r7, #20
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <sendCan+0x74>)
 80008ea:	f001 ffc9 	bl	8002880 <HAL_CAN_AddTxMessage>
 80008ee:	4603      	mov	r3, r0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d000      	beq.n	80008fa <sendCan+0x66>
 80008f8:	e7fe      	b.n	80008f8 <sendCan+0x64>
    }
    osDelay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f007 f987 	bl	8007c0e <osDelay>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200005d8 	.word	0x200005d8

0800090c <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	460b      	mov	r3, r1
 800091a:	80bb      	strh	r3, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

	switch (len) {
 8000928:	7e3b      	ldrb	r3, [r7, #24]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b03      	cmp	r3, #3
 800092e:	d817      	bhi.n	8000960 <SDOMsg+0x54>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <SDOMsg+0x2c>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	0800094f 	.word	0x0800094f
 8000940:	08000955 	.word	0x08000955
 8000944:	0800095b 	.word	0x0800095b
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8000948:	232f      	movs	r3, #47	; 0x2f
 800094a:	723b      	strb	r3, [r7, #8]
 800094c:	e008      	b.n	8000960 <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800094e:	232b      	movs	r3, #43	; 0x2b
 8000950:	723b      	strb	r3, [r7, #8]
 8000952:	e005      	b.n	8000960 <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 8000954:	2327      	movs	r3, #39	; 0x27
 8000956:	723b      	strb	r3, [r7, #8]
 8000958:	e002      	b.n	8000960 <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 800095a:	2323      	movs	r3, #35	; 0x23
 800095c:	723b      	strb	r3, [r7, #8]
 800095e:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	3301      	adds	r3, #1
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	3304      	adds	r3, #4
 8000974:	7e3a      	ldrb	r2, [r7, #24]
 8000976:	4639      	mov	r1, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f00a fb42 	bl	800b002 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000984:	4618      	mov	r0, r3
 8000986:	f107 0108 	add.w	r1, r7, #8
 800098a:	2300      	movs	r3, #0
 800098c:	2208      	movs	r2, #8
 800098e:	f7ff ff81 	bl	8000894 <sendCan>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop

0800099c <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d102      	bne.n	80009c0 <NMT_Mode+0x24>
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	723b      	strb	r3, [r7, #8]
 80009be:	e001      	b.n	80009c4 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 80009c0:	2301      	movs	r3, #1
 80009c2:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 80009c8:	f107 0108 	add.w	r1, r7, #8
 80009cc:	2300      	movs	r3, #0
 80009ce:	2208      	movs	r2, #8
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff5f 	bl	8000894 <sendCan>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PDOMapping>:


//MappingPar tmp={{0x1234,0x2341,0x3412,0x4123}, {0x55,0x56,0x65,0x66}, {0x77,0x78,0x87,0x88}, 0x9a, 0xbcde};
void PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 80009de:	b082      	sub	sp, #8
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	f107 0420 	add.w	r4, r7, #32
 80009ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	460b      	mov	r3, r1
 80009f4:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp=0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]

	osDelay(1);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f007 f907 	bl	8007c0e <osDelay>
	//printf("Num_entry!!!: %02X\n", Num_entry);

	NMT_Mode(1, 1);//pre-operation mode
 8000a00:	2101      	movs	r1, #1
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff ffca 	bl	800099c <NMT_Mode>


	//tmp=(0x1000000*Param[i].length)+(0x10000* Param[i].subindex)+(0x100*(uint8_t)(Param[i].index))+((uint8_t)(Param[i].index>>8));

		//printf("Num_entry!!!: %02X\n", Num_entry);
	SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 8000a08:	88b9      	ldrh	r1, [r7, #4]
 8000a0a:	79f8      	ldrb	r0, [r7, #7]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	f7ff ff7a 	bl	800090c <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e021      	b.n	8000a62 <PDOMapping+0x84>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f107 0220 	add.w	r2, r7, #32
 8000a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	440a      	add	r2, r1
 8000a32:	7812      	ldrb	r2, [r2, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	440a      	add	r2, r1
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	60bb      	str	r3, [r7, #8]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	88b9      	ldrh	r1, [r7, #4]
 8000a50:	79f8      	ldrb	r0, [r7, #7]
 8000a52:	2304      	movs	r3, #4
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	f7ff ff58 	bl	800090c <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbd8      	blt.n	8000a1e <PDOMapping+0x40>
	}
	SDOMsg(Node_id, PDO_index-0x200, 1, 0x200+Node_id, 4);//cob-id??
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a72:	b299      	uxth	r1, r3
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	79f8      	ldrb	r0, [r7, #7]
 8000a7e:	2304      	movs	r3, #4
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4613      	mov	r3, r2
 8000a84:	2201      	movs	r2, #1
 8000a86:	f7ff ff41 	bl	800090c <SDOMsg>
	SDOMsg(Node_id, PDO_index-0x200, 2, 0xff, 1);//transmission type, fix asynchronous with 0xff
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a90:	b299      	uxth	r1, r3
 8000a92:	79f8      	ldrb	r0, [r7, #7]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	23ff      	movs	r3, #255	; 0xff
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	f7ff ff36 	bl	800090c <SDOMsg>
	SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 4);//not necessary 3= inhibit mode, 5=event timer mode
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ab6:	461c      	mov	r4, r3
 8000ab8:	79f8      	ldrb	r0, [r7, #7]
 8000aba:	2304      	movs	r3, #4
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	4623      	mov	r3, r4
 8000ac0:	f7ff ff24 	bl	800090c <SDOMsg>
	SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//clear rpdo0 mapping
 8000ac4:	88b9      	ldrh	r1, [r7, #4]
 8000ac6:	79f8      	ldrb	r0, [r7, #7]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2301      	movs	r3, #1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f7ff ff1c 	bl	800090c <SDOMsg>

	NMT_Mode(2, 1);//operation mode
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff ff60 	bl	800099c <NMT_Mode>
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ae6:	b002      	add	sp, #8
 8000ae8:	4770      	bx	lr
	...

08000aec <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	480a      	ldr	r0, [pc, #40]	; (8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000afc:	f001 ffd0 	bl	8002aa0 <HAL_CAN_GetRxMessage>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d000      	beq.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8000b06:	e7fe      	b.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000b10:	6013      	str	r3, [r2, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000058c 	.word	0x2000058c
 8000b20:	20000594 	.word	0x20000594
 8000b24:	200005d8 	.word	0x200005d8
 8000b28:	20000588 	.word	0x20000588

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_DMA_Init+0x68>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_DMA_Init+0x68>)
 8000b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_DMA_Init+0x68>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_DMA_Init+0x68>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MX_DMA_Init+0x68>)
 8000b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MX_DMA_Init+0x68>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	200e      	movs	r0, #14
 8000b70:	f002 fbb6 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b74:	200e      	movs	r0, #14
 8000b76:	f002 fbcf 	bl	8003318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	203a      	movs	r0, #58	; 0x3a
 8000b80:	f002 fbae 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b84:	203a      	movs	r0, #58	; 0x3a
 8000b86:	f002 fbc7 	bl	8003318 <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <fanInit+0x10>)
 8000ba0:	f004 f822 	bl	8004be8 <HAL_TIM_PWM_Start>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200006d0 	.word	0x200006d0

08000bac <fanOn>:

void fanOn(uint8_t duty)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b63      	cmp	r3, #99	; 0x63
 8000bba:	d901      	bls.n	8000bc0 <fanOn+0x14>
 8000bbc:	2364      	movs	r3, #100	; 0x64
 8000bbe:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <fanOn+0x24>
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <fanOn+0x38>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 8000bce:	e003      	b.n	8000bd8 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <fanOn+0x38>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200006d0 	.word	0x200006d0

08000be8 <HAL_GPIO_EXTI_Callback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 ff39 	bl	8007a70 <osThreadFlagsSet>

    if(GPIO_Pin == PS_SIG1_Pin) {
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	2b10      	cmp	r3, #16
 8000c02:	d102      	bne.n	8000c0a <HAL_GPIO_EXTI_Callback+0x22>
    	//osSemaphoreRelease(PSx_SIG_BinSemHandle);
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c06:	f00a fb2d 	bl	800b264 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
    	//printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
    }
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000614 	.word	0x20000614
 8000c18:	0800bf7c 	.word	0x0800bf7c

08000c1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_FREERTOS_Init+0x78>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	2001      	movs	r0, #1
 8000c26:	f007 f83a 	bl	8007c9e <osSemaphoreNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <MX_FREERTOS_Init+0x7c>)
 8000c2e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <MX_FREERTOS_Init+0x80>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <MX_FREERTOS_Init+0x84>)
 8000c36:	f006 fe88 	bl	800794a <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MX_FREERTOS_Init+0x88>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <MX_FREERTOS_Init+0x8c>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <MX_FREERTOS_Init+0x90>)
 8000c46:	f006 fe80 	bl	800794a <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <MX_FREERTOS_Init+0x94>)
 8000c4e:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_FREERTOS_Init+0x98>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <MX_FREERTOS_Init+0x9c>)
 8000c56:	f006 fe78 	bl	800794a <osThreadNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <MX_FREERTOS_Init+0xa0>)
 8000c5e:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_FREERTOS_Init+0xa4>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <MX_FREERTOS_Init+0xa8>)
 8000c66:	f006 fe70 	bl	800794a <osThreadNew>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <MX_FREERTOS_Init+0xac>)
 8000c6e:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <MX_FREERTOS_Init+0xb0>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <MX_FREERTOS_Init+0xb4>)
 8000c76:	f006 fe68 	bl	800794a <osThreadNew>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_FREERTOS_Init+0xb8>)
 8000c7e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8000c80:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <MX_FREERTOS_Init+0xbc>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_FREERTOS_Init+0xc0>)
 8000c86:	f006 fe60 	bl	800794a <osThreadNew>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <MX_FREERTOS_Init+0xc4>)
 8000c8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800c234 	.word	0x0800c234
 8000c98:	20000618 	.word	0x20000618
 8000c9c:	0800c15c 	.word	0x0800c15c
 8000ca0:	08000ce5 	.word	0x08000ce5
 8000ca4:	20000600 	.word	0x20000600
 8000ca8:	0800c180 	.word	0x0800c180
 8000cac:	08000d11 	.word	0x08000d11
 8000cb0:	20000604 	.word	0x20000604
 8000cb4:	0800c1a4 	.word	0x0800c1a4
 8000cb8:	08000d91 	.word	0x08000d91
 8000cbc:	20000608 	.word	0x20000608
 8000cc0:	0800c1c8 	.word	0x0800c1c8
 8000cc4:	08000de5 	.word	0x08000de5
 8000cc8:	2000060c 	.word	0x2000060c
 8000ccc:	0800c1ec 	.word	0x0800c1ec
 8000cd0:	08001211 	.word	0x08001211
 8000cd4:	20000610 	.word	0x20000610
 8000cd8:	0800c210 	.word	0x0800c210
 8000cdc:	08001245 	.word	0x08001245
 8000ce0:	20000614 	.word	0x20000614

08000ce4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8000cec:	f006 fe18 	bl	8007920 <osKernelGetTickCount>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000cf8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f006 ffa2 	bl	8007c44 <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	4801      	ldr	r0, [pc, #4]	; (8000d0c <StartDefaultTask+0x28>)
 8000d06:	f003 f8cc 	bl	8003ea2 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8000d0a:	e7f2      	b.n	8000cf2 <StartDefaultTask+0xe>
 8000d0c:	40020800 	.word	0x40020800

08000d10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <StartTask02+0x78>)
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d22:	e883 0003 	stmia.w	r3, {r0, r1}
	MappingPar tmp={{0x1234,0x2341,0x3412,0x4123}, {0x55,0x56,0x65,0x66}, {0x77,0x78,0x87,0x88}, 0x9a, 0xbcde};
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <StartTask02+0x7c>)
 8000d28:	f107 0408 	add.w	r4, r7, #8
 8000d2c:	461d      	mov	r5, r3
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	6023      	str	r3, [r4, #0]
//	  uint8_t length;
//	  uint8_t option;
//	  uint16_t option_time;
//	} MappingPar;

	uint32_t lastTime = osKernelGetTickCount();
 8000d36:	f006 fdf3 	bl	8007920 <osKernelGetTickCount>
 8000d3a:	6278      	str	r0, [r7, #36]	; 0x24

	CanInit(0,0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fd58 	bl	80007f4 <CanInit>

	//void PDOMapping(uint8_t Node_id, uint16_t PDO_index, uint32_t MappingPar, uint8_t option, uint16_t option_time)
	//PDOMapping(0x1,0x1600,0x60ff0320,1,500);//0x60ff(index) 03(subindex) 20(length), must check time 500
	//PDOMapping(1, 0x1600, tmp);
	PDOMapping(1, 0x1600, tmp, 4);
 8000d44:	2304      	movs	r3, #4
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	466c      	mov	r4, sp
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	cb0c      	ldmia	r3, {r2, r3}
 8000d5c:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fe3c 	bl	80009de <PDOMapping>
  /* Infinite loop */
  for(;;)
  {


	lastTime += PERIOD_CANCOMM;;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
	osDelayUntil(lastTime);
 8000d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d70:	f006 ff68 	bl	8007c44 <osDelayUntil>

	SDOMsg(1,0x1011, 0x3, 0xf1, 1);
 8000d74:	2301      	movs	r3, #1
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	23f1      	movs	r3, #241	; 0xf1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	f241 0111 	movw	r1, #4113	; 0x1011
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fdc3 	bl	800090c <SDOMsg>
	lastTime += PERIOD_CANCOMM;;
 8000d86:	e7ee      	b.n	8000d66 <StartTask02+0x56>
 8000d88:	0800bf9c 	.word	0x0800bf9c
 8000d8c:	0800bfa4 	.word	0x0800bfa4

08000d90 <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b092      	sub	sp, #72	; 0x48
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <StartTask03+0x50>)
 8000d9a:	f107 040c 	add.w	r4, r7, #12
 8000d9e:	461d      	mov	r5, r3
 8000da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	uint32_t lastTime = osKernelGetTickCount();
 8000db0:	f006 fdb6 	bl	8007920 <osKernelGetTickCount>
 8000db4:	63f8      	str	r0, [r7, #60]	; 0x3c


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8000db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db8:	3332      	adds	r3, #50	; 0x32
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(lastTime);
 8000dbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dbe:	f006 ff41 	bl	8007c44 <osDelayUntil>
	DataSetSteering(buf, 3, 0, 0, 0);
 8000dc2:	f107 000c 	add.w	r0, r7, #12
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2103      	movs	r1, #3
 8000dd0:	f000 fc98 	bl	8001704 <DataSetSteering>

	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fc6b 	bl	80016b4 <ServoMotor_writeDMA>
	lastTime += PERIOD_STEERING;
 8000dde:	e7ea      	b.n	8000db6 <StartTask03+0x26>
 8000de0:	0800bfb8 	.word	0x0800bfb8

08000de4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8000dec:	f006 fd98 	bl	8007920 <osKernelGetTickCount>
 8000df0:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000df8:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f006 ff22 	bl	8007c44 <osDelayUntil>


		temp++;
 8000e00:	4bd0      	ldr	r3, [pc, #832]	; (8001144 <StartTask04+0x360>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4acf      	ldr	r2, [pc, #828]	; (8001144 <StartTask04+0x360>)
 8000e08:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8000e0a:	4bce      	ldr	r3, [pc, #824]	; (8001144 <StartTask04+0x360>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	f200 81ea 	bhi.w	80011ea <StartTask04+0x406>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <StartTask04+0x38>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e3d 	.word	0x08000e3d
 8000e20:	08000ea5 	.word	0x08000ea5
 8000e24:	08000f0d 	.word	0x08000f0d
 8000e28:	08000f75 	.word	0x08000f75
 8000e2c:	08000fdd 	.word	0x08000fdd
 8000e30:	0800105d 	.word	0x0800105d
 8000e34:	080010dd 	.word	0x080010dd
 8000e38:	08001165 	.word	0x08001165
			case 1:
				printf("case1\n");
 8000e3c:	48c2      	ldr	r0, [pc, #776]	; (8001148 <StartTask04+0x364>)
 8000e3e:	f00a fa11 	bl	800b264 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000e42:	2301      	movs	r3, #1
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fba7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2201      	movs	r2, #1
 8000e52:	2100      	movs	r1, #0
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fba1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fb9b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000e66:	2301      	movs	r3, #1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f7ff fb95 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000e72:	2300      	movs	r3, #0
 8000e74:	2201      	movs	r2, #1
 8000e76:	2100      	movs	r1, #0
 8000e78:	2004      	movs	r0, #4
 8000e7a:	f7ff fb8f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	2005      	movs	r0, #5
 8000e86:	f7ff fb89 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2006      	movs	r0, #6
 8000e92:	f7ff fb83 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000e96:	2300      	movs	r3, #0
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2007      	movs	r0, #7
 8000e9e:	f7ff fb7d 	bl	800059c <ws2812SetColor>
				break;
 8000ea2:	e1a2      	b.n	80011ea <StartTask04+0x406>
			case 2:
				printf("case2\n");
 8000ea4:	48a9      	ldr	r0, [pc, #676]	; (800114c <StartTask04+0x368>)
 8000ea6:	f00a f9dd 	bl	800b264 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2007      	movs	r0, #7
 8000eb2:	f7ff fb73 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fb6d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fb67 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff fb61 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000eda:	2300      	movs	r3, #0
 8000edc:	2201      	movs	r2, #1
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f7ff fb5b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2101      	movs	r1, #1
 8000eec:	2004      	movs	r0, #4
 8000eee:	f7ff fb55 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f7ff fb4f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000efe:	2300      	movs	r3, #0
 8000f00:	2201      	movs	r2, #1
 8000f02:	2100      	movs	r1, #0
 8000f04:	2006      	movs	r0, #6
 8000f06:	f7ff fb49 	bl	800059c <ws2812SetColor>
				break;
 8000f0a:	e16e      	b.n	80011ea <StartTask04+0x406>
			case 3:
				printf("case3\n");
 8000f0c:	4890      	ldr	r0, [pc, #576]	; (8001150 <StartTask04+0x36c>)
 8000f0e:	f00a f9a9 	bl	800b264 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000f12:	2301      	movs	r3, #1
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2006      	movs	r0, #6
 8000f1a:	f7ff fb3f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2201      	movs	r2, #1
 8000f22:	2100      	movs	r1, #0
 8000f24:	2007      	movs	r0, #7
 8000f26:	f7ff fb39 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fb33 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000f36:	2301      	movs	r3, #1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff fb2d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000f42:	2300      	movs	r3, #0
 8000f44:	2201      	movs	r2, #1
 8000f46:	2100      	movs	r1, #0
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff fb27 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2200      	movs	r2, #0
 8000f52:	2101      	movs	r1, #1
 8000f54:	2003      	movs	r0, #3
 8000f56:	f7ff fb21 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff fb1b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000f66:	2300      	movs	r3, #0
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f7ff fb15 	bl	800059c <ws2812SetColor>
				break;
 8000f72:	e13a      	b.n	80011ea <StartTask04+0x406>
			case 4:
				printf("case4\n");
 8000f74:	4877      	ldr	r0, [pc, #476]	; (8001154 <StartTask04+0x370>)
 8000f76:	f00a f975 	bl	800b264 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2005      	movs	r0, #5
 8000f82:	f7ff fb0b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000f86:	2300      	movs	r3, #0
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff fb05 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000f92:	2300      	movs	r3, #0
 8000f94:	2200      	movs	r2, #0
 8000f96:	2101      	movs	r1, #1
 8000f98:	2007      	movs	r0, #7
 8000f9a:	f7ff faff 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff faf9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000faa:	2300      	movs	r3, #0
 8000fac:	2201      	movs	r2, #1
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff faf3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f7ff faed 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f7ff fae7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2004      	movs	r0, #4
 8000fd6:	f7ff fae1 	bl	800059c <ws2812SetColor>
				break;
 8000fda:	e106      	b.n	80011ea <StartTask04+0x406>
			case 5:
				printf("case5\n");
 8000fdc:	485e      	ldr	r0, [pc, #376]	; (8001158 <StartTask04+0x374>)
 8000fde:	f00a f941 	bl	800b264 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f7ff fad7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2005      	movs	r0, #5
 8000ff6:	f7ff fad1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2101      	movs	r1, #1
 8001000:	2006      	movs	r0, #6
 8001002:	f7ff facb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8001006:	2301      	movs	r3, #1
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2007      	movs	r0, #7
 800100e:	f7ff fac5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8001012:	2300      	movs	r3, #0
 8001014:	2201      	movs	r2, #1
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fabf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2101      	movs	r1, #1
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fab9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 800102a:	2301      	movs	r3, #1
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff fab3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8001036:	2300      	movs	r3, #0
 8001038:	2201      	movs	r2, #1
 800103a:	2100      	movs	r1, #0
 800103c:	2003      	movs	r0, #3
 800103e:	f7ff faad 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 8001042:	2301      	movs	r3, #1
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2008      	movs	r0, #8
 800104a:	f7ff faa7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 800104e:	2300      	movs	r3, #0
 8001050:	2201      	movs	r2, #1
 8001052:	2100      	movs	r1, #0
 8001054:	2009      	movs	r0, #9
 8001056:	f7ff faa1 	bl	800059c <ws2812SetColor>

				break;
 800105a:	e0c6      	b.n	80011ea <StartTask04+0x406>
			case 6:
				printf("case6\n");
 800105c:	483f      	ldr	r0, [pc, #252]	; (800115c <StartTask04+0x378>)
 800105e:	f00a f901 	bl	800b264 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8001062:	2301      	movs	r3, #1
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2003      	movs	r0, #3
 800106a:	f7ff fa97 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 800106e:	2300      	movs	r3, #0
 8001070:	2201      	movs	r2, #1
 8001072:	2100      	movs	r1, #0
 8001074:	2004      	movs	r0, #4
 8001076:	f7ff fa91 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 800107a:	2300      	movs	r3, #0
 800107c:	2200      	movs	r2, #0
 800107e:	2101      	movs	r1, #1
 8001080:	2005      	movs	r0, #5
 8001082:	f7ff fa8b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8001086:	2301      	movs	r3, #1
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2006      	movs	r0, #6
 800108e:	f7ff fa85 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8001092:	2300      	movs	r3, #0
 8001094:	2201      	movs	r2, #1
 8001096:	2100      	movs	r1, #0
 8001098:	2007      	movs	r0, #7
 800109a:	f7ff fa7f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 800109e:	2300      	movs	r3, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff fa79 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 80010aa:	2301      	movs	r3, #1
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fa73 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 80010b6:	2300      	movs	r3, #0
 80010b8:	2201      	movs	r2, #1
 80010ba:	2100      	movs	r1, #0
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fa6d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 80010c2:	2301      	movs	r3, #1
 80010c4:	2201      	movs	r2, #1
 80010c6:	2100      	movs	r1, #0
 80010c8:	2008      	movs	r0, #8
 80010ca:	f7ff fa67 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 80010ce:	2300      	movs	r3, #0
 80010d0:	2201      	movs	r2, #1
 80010d2:	2101      	movs	r1, #1
 80010d4:	2009      	movs	r0, #9
 80010d6:	f7ff fa61 	bl	800059c <ws2812SetColor>
				break;
 80010da:	e086      	b.n	80011ea <StartTask04+0x406>
			case 7:
				printf("case7\n");
 80010dc:	4820      	ldr	r0, [pc, #128]	; (8001160 <StartTask04+0x37c>)
 80010de:	f00a f8c1 	bl	800b264 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 80010e2:	2301      	movs	r3, #1
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff fa57 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 80010ee:	2300      	movs	r3, #0
 80010f0:	2201      	movs	r2, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff fa51 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	2004      	movs	r0, #4
 8001102:	f7ff fa4b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8001106:	2301      	movs	r3, #1
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2005      	movs	r0, #5
 800110e:	f7ff fa45 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8001112:	2300      	movs	r3, #0
 8001114:	2201      	movs	r2, #1
 8001116:	2100      	movs	r1, #0
 8001118:	2006      	movs	r0, #6
 800111a:	f7ff fa3f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 800111e:	2300      	movs	r3, #0
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	2007      	movs	r0, #7
 8001126:	f7ff fa39 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 800112a:	2301      	movs	r3, #1
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fa33 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8001136:	2300      	movs	r3, #0
 8001138:	2201      	movs	r2, #1
 800113a:	2100      	movs	r1, #0
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff fa2d 	bl	800059c <ws2812SetColor>
				break;
 8001142:	e052      	b.n	80011ea <StartTask04+0x406>
 8001144:	2000061c 	.word	0x2000061c
 8001148:	0800bfe8 	.word	0x0800bfe8
 800114c:	0800bff0 	.word	0x0800bff0
 8001150:	0800bff8 	.word	0x0800bff8
 8001154:	0800c000 	.word	0x0800c000
 8001158:	0800c008 	.word	0x0800c008
 800115c:	0800c010 	.word	0x0800c010
 8001160:	0800c018 	.word	0x0800c018
			case 8:
				printf("case8\n");
 8001164:	4827      	ldr	r0, [pc, #156]	; (8001204 <StartTask04+0x420>)
 8001166:	f00a f87d 	bl	800b264 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800116a:	2301      	movs	r3, #1
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fa13 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8001176:	2300      	movs	r3, #0
 8001178:	2201      	movs	r2, #1
 800117a:	2100      	movs	r1, #0
 800117c:	2002      	movs	r0, #2
 800117e:	f7ff fa0d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8001182:	2300      	movs	r3, #0
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	2003      	movs	r0, #3
 800118a:	f7ff fa07 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 800118e:	2301      	movs	r3, #1
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2004      	movs	r0, #4
 8001196:	f7ff fa01 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 800119a:	2300      	movs	r3, #0
 800119c:	2201      	movs	r2, #1
 800119e:	2100      	movs	r1, #0
 80011a0:	2005      	movs	r0, #5
 80011a2:	f7ff f9fb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 80011a6:	2300      	movs	r3, #0
 80011a8:	2200      	movs	r2, #0
 80011aa:	2101      	movs	r1, #1
 80011ac:	2006      	movs	r0, #6
 80011ae:	f7ff f9f5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 80011b2:	2301      	movs	r3, #1
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2007      	movs	r0, #7
 80011ba:	f7ff f9ef 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 80011be:	2300      	movs	r3, #0
 80011c0:	2201      	movs	r2, #1
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff f9e9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 80011ca:	2301      	movs	r3, #1
 80011cc:	2201      	movs	r2, #1
 80011ce:	2101      	movs	r1, #1
 80011d0:	2008      	movs	r0, #8
 80011d2:	f7ff f9e3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 80011d6:	2301      	movs	r3, #1
 80011d8:	2201      	movs	r2, #1
 80011da:	2101      	movs	r1, #1
 80011dc:	2009      	movs	r0, #9
 80011de:	f7ff f9dd 	bl	800059c <ws2812SetColor>
				temp=1;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <StartTask04+0x424>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
				break;
 80011e8:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fa2c 	bl	800064c <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 80011f4:	2018      	movs	r0, #24
 80011f6:	f7ff f9bd 	bl	8000574 <ws2812NumOn>
		printf("task4\n");
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <StartTask04+0x428>)
 80011fc:	f00a f832 	bl	800b264 <puts>
  {
 8001200:	e5f7      	b.n	8000df2 <StartTask04+0xe>
 8001202:	bf00      	nop
 8001204:	0800c020 	.word	0x0800c020
 8001208:	2000061c 	.word	0x2000061c
 800120c:	0800c028 	.word	0x0800c028

08001210 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8001218:	f006 fb82 	bl	8007920 <osKernelGetTickCount>
 800121c:	60f8      	str	r0, [r7, #12]

	fanInit();
 800121e:	f7ff fcbb 	bl	8000b98 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001228:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f006 fd0a 	bl	8007c44 <osDelayUntil>
	fanOn(30);
 8001230:	201e      	movs	r0, #30
 8001232:	f7ff fcbb 	bl	8000bac <fanOn>
	//htim1.Instance->CCR1 = 50;
	printf("task5\n");
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <StartTask05+0x30>)
 8001238:	f00a f814 	bl	800b264 <puts>
  {
 800123c:	e7f1      	b.n	8001222 <StartTask05+0x12>
 800123e:	bf00      	nop
 8001240:	0800c030 	.word	0x0800c030

08001244 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	//	  		  if(osSemaphoreAcquire(PSx_SIG_BinSemHandle, 0) == osOK)
	//	  		  {
	//	  			printf("StartTask06 PS_SIG1_Pin.\n");
	//	  		  }
	//	  	  }
		  osThreadFlagsWait(1, 0, osWaitForever);
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	2100      	movs	r1, #0
 8001252:	2001      	movs	r0, #1
 8001254:	f006 fc5a 	bl	8007b0c <osThreadFlagsWait>
		  printf("StartTask06 PS_SIG1_Pin.\n");
 8001258:	4801      	ldr	r0, [pc, #4]	; (8001260 <StartTask06+0x1c>)
 800125a:	f00a f803 	bl	800b264 <puts>
  {
 800125e:	e7f5      	b.n	800124c <StartTask06+0x8>
 8001260:	0800c038 	.word	0x0800c038

08001264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b57      	ldr	r3, [pc, #348]	; (80013dc <MX_GPIO_Init+0x178>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a56      	ldr	r2, [pc, #344]	; (80013dc <MX_GPIO_Init+0x178>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <MX_GPIO_Init+0x178>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <MX_GPIO_Init+0x178>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a4f      	ldr	r2, [pc, #316]	; (80013dc <MX_GPIO_Init+0x178>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <MX_GPIO_Init+0x178>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <MX_GPIO_Init+0x178>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a48      	ldr	r2, [pc, #288]	; (80013dc <MX_GPIO_Init+0x178>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <MX_GPIO_Init+0x178>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <MX_GPIO_Init+0x178>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a41      	ldr	r2, [pc, #260]	; (80013dc <MX_GPIO_Init+0x178>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <MX_GPIO_Init+0x178>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <MX_GPIO_Init+0x178>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <MX_GPIO_Init+0x178>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <MX_GPIO_Init+0x178>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8001306:	2200      	movs	r2, #0
 8001308:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 800130c:	4834      	ldr	r0, [pc, #208]	; (80013e0 <MX_GPIO_Init+0x17c>)
 800130e:	f002 fdaf 	bl	8003e70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f244 0110 	movw	r1, #16400	; 0x4010
 8001318:	4832      	ldr	r0, [pc, #200]	; (80013e4 <MX_GPIO_Init+0x180>)
 800131a:	f002 fda9 	bl	8003e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2104      	movs	r1, #4
 8001322:	4831      	ldr	r0, [pc, #196]	; (80013e8 <MX_GPIO_Init+0x184>)
 8001324:	f002 fda4 	bl	8003e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8001328:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 800132c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4827      	ldr	r0, [pc, #156]	; (80013e0 <MX_GPIO_Init+0x17c>)
 8001342:	f002 fbf9 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4821      	ldr	r0, [pc, #132]	; (80013e0 <MX_GPIO_Init+0x17c>)
 800135a:	f002 fbed 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin|PS_SIG4_Pin;
 800135e:	23f0      	movs	r3, #240	; 0xf0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001362:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	481e      	ldr	r0, [pc, #120]	; (80013ec <MX_GPIO_Init+0x188>)
 8001374:	f002 fbe0 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8001378:	f244 0310 	movw	r3, #16400	; 0x4010
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <MX_GPIO_Init+0x180>)
 8001392:	f002 fbd1 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001396:	2304      	movs	r3, #4
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	; (80013e8 <MX_GPIO_Init+0x184>)
 80013ae:	f002 fbc3 	bl	8003b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	200a      	movs	r0, #10
 80013b8:	f001 ff92 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013bc:	200a      	movs	r0, #10
 80013be:	f001 ffab 	bl	8003318 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2105      	movs	r1, #5
 80013c6:	2017      	movs	r0, #23
 80013c8:	f001 ff8a 	bl	80032e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013cc:	2017      	movs	r0, #23
 80013ce:	f001 ffa3 	bl	8003318 <HAL_NVIC_EnableIRQ>

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40020000 	.word	0x40020000

080013f0 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <MX_I2C1_SMBUS_Init+0x6c>)
 80013f8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <MX_I2C1_SMBUS_Init+0x70>)
 80013fe:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001408:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 800142e:	2202      	movs	r2, #2
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001434:	f003 f9f2 	bl	800481c <HAL_SMBUS_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 800143e:	f000 f909 	bl	8001654 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_I2C1_SMBUS_Init+0x68>)
 8001444:	f003 faa0 	bl	8004988 <HAL_SMBUS_EnableAlert_IT>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800144e:	f000 f901 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000620 	.word	0x20000620
 800145c:	40005400 	.word	0x40005400
 8001460:	000186a0 	.word	0x000186a0

08001464 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_SMBUS_MspInit+0x84>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12b      	bne.n	80014de <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_SMBUS_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_SMBUS_MspInit+0x88>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_SMBUS_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014a2:	23e0      	movs	r3, #224	; 0xe0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a6:	2312      	movs	r3, #18
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b2:	2304      	movs	r3, #4
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HAL_SMBUS_MspInit+0x8c>)
 80014be:	f002 fb3b 	bl	8003b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_SMBUS_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_SMBUS_MspInit+0x88>)
 80014cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_SMBUS_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400

080014f4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	b29a      	uxth	r2, r3
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <_write+0x24>)
 800150a:	f004 fffa 	bl	8006502 <HAL_UART_Transmit>
	return (len);
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000808 	.word	0x20000808

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001520:	f000 ff4c 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001524:	f000 f81a 	bl	800155c <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001528:	f7ff fe9c 	bl	8001264 <MX_GPIO_Init>
  MX_CAN1_Init();
 800152c:	f7ff f8dc 	bl	80006e8 <MX_CAN1_Init>

  MX_TIM1_Init();
 8001530:	f000 fad6 	bl	8001ae0 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8001534:	f7ff ff5c 	bl	80013f0 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8001538:	f7ff faf8 	bl	8000b2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800153c:	f000 fe2a 	bl	8002194 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001540:	f000 fdfe 	bl	8002140 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001544:	f000 fbfa 	bl	8001d3c <MX_TIM8_Init>
  MX_TIM3_Init();
 8001548:	f000 fb7c 	bl	8001c44 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800154c:	f006 f99e 	bl	800788c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001550:	f7ff fb64 	bl	8000c1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001554:	f006 f9be 	bl	80078d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	e7fe      	b.n	8001558 <main+0x3c>
	...

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 fd57 	bl	800b01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <SystemClock_Config+0xcc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <SystemClock_Config+0xd0>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80015cc:	2306      	movs	r3, #6
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015d0:	23a8      	movs	r3, #168	; 0xa8
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d8:	2304      	movs	r3, #4
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 fc91 	bl	8003f08 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015ec:	f000 f832 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2302      	movs	r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2105      	movs	r1, #5
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fef2 	bl	80043f8 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161a:	f000 f81b 	bl	8001654 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	; 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001642:	f000 fedd 	bl	8002400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40001000 	.word	0x40001000

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_UART_RxCpltCallback+0x3c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d109      	bne.n	8001686 <HAL_UART_RxCpltCallback+0x26>
 8001672:	220c      	movs	r2, #12
 8001674:	490a      	ldr	r1, [pc, #40]	; (80016a0 <HAL_UART_RxCpltCallback+0x40>)
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <HAL_UART_RxCpltCallback+0x44>)
 8001678:	f004 ffd5 	bl	8006626 <HAL_UART_Receive_IT>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <HAL_UART_RxCpltCallback+0x48>)
 8001682:	f009 fd69 	bl	800b158 <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_UART_RxCpltCallback+0x4c>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <HAL_UART_RxCpltCallback+0x50>)
 800168e:	f009 fde9 	bl	800b264 <puts>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004800 	.word	0x40004800
 80016a0:	20000678 	.word	0x20000678
 80016a4:	2000084c 	.word	0x2000084c
 80016a8:	0800c054 	.word	0x0800c054
 80016ac:	20000674 	.word	0x20000674
 80016b0:	0800c068 	.word	0x0800c068

080016b4 <ServoMotor_writeDMA>:

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
}

void ServoMotor_writeDMA(const char* str)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <ServoMotor_writeDMA+0x48>)
 80016c4:	f002 fbd4 	bl	8003e70 <HAL_GPIO_WritePin>
    osDelay(6);//because transmit_DMA
 80016c8:	2006      	movs	r0, #6
 80016ca:	f006 faa0 	bl	8007c0e <osDelay>
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 80016ce:	2230      	movs	r2, #48	; 0x30
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	480b      	ldr	r0, [pc, #44]	; (8001700 <ServoMotor_writeDMA+0x4c>)
 80016d4:	f004 ffd8 	bl	8006688 <HAL_UART_Transmit_DMA>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <ServoMotor_writeDMA+0x2e>
 80016de:	f7ff ffb9 	bl	8001654 <Error_Handler>
    osDelay(6);//because transmit_DMA
 80016e2:	2006      	movs	r0, #6
 80016e4:	f006 fa93 	bl	8007c0e <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <ServoMotor_writeDMA+0x48>)
 80016f0:	f002 fbbe 	bl	8003e70 <HAL_GPIO_WritePin>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40020400 	.word	0x40020400
 8001700:	2000084c 	.word	0x2000084c

08001704 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const char* str, char id, char direction, unsigned short position, char init)
{
 8001704:	b490      	push	{r4, r7}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4603      	mov	r3, r0
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	460b      	mov	r3, r1
 8001718:	70bb      	strb	r3, [r7, #2]
 800171a:	4613      	mov	r3, r2
 800171c:	803b      	strh	r3, [r7, #0]
    char buf[12];

    buf[0]=0xFF;//header
 800171e:	23ff      	movs	r3, #255	; 0xff
 8001720:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8001722:	23fe      	movs	r3, #254	; 0xfe
 8001724:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 800172a:	2306      	movs	r3, #6
 800172c:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 800172e:	2300      	movs	r3, #0
 8001730:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8001732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001736:	3302      	adds	r3, #2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 8001740:	883b      	ldrh	r3, [r7, #0]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	b29b      	uxth	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 800174a:	883b      	ldrh	r3, [r7, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	743b      	strb	r3, [r7, #16]
    if(init == 1){buf[9]=STOP_SPEED;}//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 8001750:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <DataSetSteering+0x5a>
 8001758:	230a      	movs	r3, #10
 800175a:	747b      	strb	r3, [r7, #17]
 800175c:	e001      	b.n	8001762 <DataSetSteering+0x5e>
    else buf[9]=0x1E;//speed, position second = 3s
 800175e:	231e      	movs	r3, #30
 8001760:	747b      	strb	r3, [r7, #17]
    buf[10]=0x00;//reservation
 8001762:	2300      	movs	r3, #0
 8001764:	74bb      	strb	r3, [r7, #18]
    buf[11]=0x00;//reservation
 8001766:	2300      	movs	r3, #0
 8001768:	74fb      	strb	r3, [r7, #19]

    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 800176a:	2302      	movs	r3, #2
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e00d      	b.n	800178c <DataSetSteering+0x88>
 8001770:	f107 0208 	add.w	r2, r7, #8
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4413      	add	r3, r2
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <DataSetSteering+0xc8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <DataSetSteering+0xc8>)
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b09      	cmp	r3, #9
 8001790:	ddee      	ble.n	8001770 <DataSetSteering+0x6c>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <DataSetSteering+0xc8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	43db      	mvns	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DataSetSteering+0xc8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	461c      	mov	r4, r3
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017ba:	6020      	str	r0, [r4, #0]
 80017bc:	6061      	str	r1, [r4, #4]
 80017be:	60a2      	str	r2, [r4, #8]

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc90      	pop	{r4, r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000670 	.word	0x20000670

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_MspInit+0x54>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_MspInit+0x54>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x54>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_MspInit+0x54>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_MspInit+0x54>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_MspInit+0x54>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	210f      	movs	r1, #15
 8001812:	f06f 0001 	mvn.w	r0, #1
 8001816:	f001 fd63 	bl	80032e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	2036      	movs	r0, #54	; 0x36
 800183e:	f001 fd4f 	bl	80032e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001842:	2036      	movs	r0, #54	; 0x36
 8001844:	f001 fd68 	bl	8003318 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_InitTick+0xa4>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_InitTick+0xa4>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_InitTick+0xa4>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001864:	f107 0210 	add.w	r2, r7, #16
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f002 ffa2 	bl	80047b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001874:	f002 ff78 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8001878:	4603      	mov	r3, r0
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <HAL_InitTick+0xa8>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0c9b      	lsrs	r3, r3, #18
 8001888:	3b01      	subs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_InitTick+0xac>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_InitTick+0xb0>)
 8001890:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_InitTick+0xac>)
 8001894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001898:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_InitTick+0xac>)
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_InitTick+0xac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_InitTick+0xac>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_InitTick+0xac>)
 80018ae:	f003 f88b 	bl	80049c8 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d104      	bne.n	80018c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018b8:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HAL_InitTick+0xac>)
 80018ba:	f003 f8d5 	bl	8004a68 <HAL_TIM_Base_Start_IT>
 80018be:	4603      	mov	r3, r0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	20000684 	.word	0x20000684
 80018d8:	40001000 	.word	0x40001000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 800190c:	2010      	movs	r0, #16
 800190e:	f002 fae3 	bl	8003ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA1_Stream3_IRQHandler+0x10>)
 800191e:	f001 fea1 	bl	8003664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000890 	.word	0x20000890

0800192c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <CAN1_RX0_IRQHandler+0x10>)
 8001932:	f001 f9ed 	bl	8002d10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200005d8 	.word	0x200005d8

08001940 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8001944:	2020      	movs	r0, #32
 8001946:	f002 fac7 	bl	8003ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 800194a:	2040      	movs	r0, #64	; 0x40
 800194c:	f002 fac4 	bl	8003ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8001950:	2080      	movs	r0, #128	; 0x80
 8001952:	f002 fac1 	bl	8003ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <USART2_IRQHandler+0x10>)
 8001962:	f004 ff0f 	bl	8006784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000808 	.word	0x20000808

08001970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <USART3_IRQHandler+0x10>)
 8001976:	f004 ff05 	bl	8006784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000084c 	.word	0x2000084c

08001984 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM6_DAC_IRQHandler+0x10>)
 800198a:	f003 fc16 	bl	80051ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000684 	.word	0x20000684

08001998 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA2_Stream2_IRQHandler+0x10>)
 800199e:	f001 fe61 	bl	8003664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200007a8 	.word	0x200007a8

080019ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e00a      	b.n	80019d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019be:	f3af 8000 	nop.w
 80019c2:	4601      	mov	r1, r0
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbf0      	blt.n	80019be <_read+0x12>
	}

return len;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_isatty>:

int _isatty(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	return 1;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <_sbrk+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <_sbrk+0x60>)
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <_sbrk+0x64>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <_sbrk+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d207      	bcs.n	8001a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a80:	f009 f99c 	bl	800adbc <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	220c      	movs	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e009      	b.n	8001aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <_sbrk+0x64>)
 8001aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20020000 	.word	0x20020000
 8001ab0:	00000400 	.word	0x00000400
 8001ab4:	200006cc 	.word	0x200006cc
 8001ab8:	20005318 	.word	0x20005318

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <SystemInit+0x20>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <SystemInit+0x20>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b096      	sub	sp, #88	; 0x58
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2220      	movs	r2, #32
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f009 fa80 	bl	800b01e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b20:	4a47      	ldr	r2, [pc, #284]	; (8001c40 <MX_TIM1_Init+0x160>)
 8001b22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b26:	f240 628f 	movw	r2, #1679	; 0x68f
 8001b2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b34:	2263      	movs	r2, #99	; 0x63
 8001b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b38:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b4a:	483c      	ldr	r0, [pc, #240]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b4c:	f002 fffc 	bl	8004b48 <HAL_TIM_PWM_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b56:	f7ff fd7d 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001b5a:	4838      	ldr	r0, [pc, #224]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b5c:	f003 fad4 	bl	8005108 <HAL_TIM_IC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b66:	f7ff fd75 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b76:	4619      	mov	r1, r3
 8001b78:	4830      	ldr	r0, [pc, #192]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001b7a:	f004 fb93 	bl	80062a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b84:	f7ff fd66 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b88:	2360      	movs	r3, #96	; 0x60
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b94:	2300      	movs	r3, #0
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	4823      	ldr	r0, [pc, #140]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001bae:	f003 fca9 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001bb8:	f7ff fd4c 	bl	8001654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4819      	ldr	r0, [pc, #100]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001bd6:	f003 fbf8 	bl	80053ca <HAL_TIM_IC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001be0:	f7ff fd38 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	2208      	movs	r2, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	4813      	ldr	r0, [pc, #76]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001bee:	f003 fbec 	bl	80053ca <HAL_TIM_IC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001bf8:	f7ff fd2c 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4807      	ldr	r0, [pc, #28]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001c20:	f004 fbbc 	bl	800639c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001c2a:	f7ff fd13 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c2e:	4803      	ldr	r0, [pc, #12]	; (8001c3c <MX_TIM1_Init+0x15c>)
 8001c30:	f000 fa22 	bl	8002078 <HAL_TIM_MspPostInit>

}
 8001c34:	bf00      	nop
 8001c36:	3758      	adds	r7, #88	; 0x58
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200006d0 	.word	0x200006d0
 8001c40:	40010000 	.word	0x40010000

08001c44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c62:	463b      	mov	r3, r7
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c70:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <MX_TIM3_Init+0xf4>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c94:	4827      	ldr	r0, [pc, #156]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001c96:	f002 fe97 	bl	80049c8 <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001ca0:	f7ff fcd8 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001caa:	f107 0318 	add.w	r3, r7, #24
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4820      	ldr	r0, [pc, #128]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001cb2:	f003 fce9 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cbc:	f7ff fcca 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001cc0:	481c      	ldr	r0, [pc, #112]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001cc2:	f003 fa21 	bl	8005108 <HAL_TIM_IC_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ccc:	f7ff fcc2 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4815      	ldr	r0, [pc, #84]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001ce0:	f004 fae0 	bl	80062a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001cea:	f7ff fcb3 	bl	8001654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2208      	movs	r2, #8
 8001d02:	4619      	mov	r1, r3
 8001d04:	480b      	ldr	r0, [pc, #44]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001d06:	f003 fb60 	bl	80053ca <HAL_TIM_IC_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001d10:	f7ff fca0 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	220c      	movs	r2, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <MX_TIM3_Init+0xf0>)
 8001d1c:	f003 fb55 	bl	80053ca <HAL_TIM_IC_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001d26:	f7ff fc95 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000718 	.word	0x20000718
 8001d38:	40000400 	.word	0x40000400

08001d3c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b096      	sub	sp, #88	; 0x58
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2220      	movs	r2, #32
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f009 f952 	bl	800b01e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <MX_TIM8_Init+0x184>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001d80:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001d8e:	2268      	movs	r2, #104	; 0x68
 8001d90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001da4:	4845      	ldr	r0, [pc, #276]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001da6:	f002 fe0f 	bl	80049c8 <HAL_TIM_Base_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001db0:	f7ff fc50 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	483e      	ldr	r0, [pc, #248]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001dc2:	f003 fc61 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001dcc:	f7ff fc42 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dd0:	483a      	ldr	r0, [pc, #232]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001dd2:	f002 feb9 	bl	8004b48 <HAL_TIM_PWM_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ddc:	f7ff fc3a 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001de8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dec:	4619      	mov	r1, r3
 8001dee:	4833      	ldr	r0, [pc, #204]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001df0:	f004 fa58 	bl	80062a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001dfa:	f7ff fc2b 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfe:	2360      	movs	r3, #96	; 0x60
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4826      	ldr	r0, [pc, #152]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001e24:	f003 fb6e 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001e2e:	f7ff fc11 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	2204      	movs	r2, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4820      	ldr	r0, [pc, #128]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001e3c:	f003 fb62 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001e46:	f7ff fc05 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	481a      	ldr	r0, [pc, #104]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001e54:	f003 fb56 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001e5e:	f7ff fbf9 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	220c      	movs	r2, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4814      	ldr	r0, [pc, #80]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001e6c:	f003 fb4a 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001e76:	f7ff fbed 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001e9e:	f004 fa7d 	bl	800639c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001ea8:	f7ff fbd4 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <MX_TIM8_Init+0x180>)
 8001eae:	f000 f8e3 	bl	8002078 <HAL_TIM_MspPostInit>

}
 8001eb2:	bf00      	nop
 8001eb4:	3758      	adds	r7, #88	; 0x58
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000760 	.word	0x20000760
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_TIM_PWM_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12c      	bne.n	8001f40 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_TIM_PWM_MspInit+0x88>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_TIM_PWM_MspInit+0x88>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_TIM_PWM_MspInit+0x88>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_TIM_PWM_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_TIM_PWM_MspInit+0x88>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_TIM_PWM_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f3c:	f001 fdfc 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000

08001f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_TIM_Base_MspInit+0x10c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12c      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a39      	ldr	r2, [pc, #228]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4827      	ldr	r0, [pc, #156]	; (8002068 <HAL_TIM_Base_MspInit+0x114>)
 8001fca:	f001 fdb5 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fce:	e042      	b.n	8002056 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_TIM_Base_MspInit+0x118>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d13d      	bne.n	8002056 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_TIM_Base_MspInit+0x110>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_TIM_Base_MspInit+0x120>)
 8001ffa:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8001ffe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002002:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8002012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002016:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 800201a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 800203c:	f001 f97a 	bl	8003334 <HAL_DMA_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 8002046:	f7ff fb05 	bl	8001654 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_TIM_Base_MspInit+0x11c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40000400 	.word	0x40000400
 8002064:	40023800 	.word	0x40023800
 8002068:	40020400 	.word	0x40020400
 800206c:	40010400 	.word	0x40010400
 8002070:	200007a8 	.word	0x200007a8
 8002074:	40026440 	.word	0x40026440

08002078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <HAL_TIM_MspPostInit+0xb4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d11f      	bne.n	80020da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_TIM_MspPostInit+0xb8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_TIM_MspPostInit+0xb8>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_TIM_MspPostInit+0xb8>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4818      	ldr	r0, [pc, #96]	; (8002134 <HAL_TIM_MspPostInit+0xbc>)
 80020d4:	f001 fd30 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020d8:	e023      	b.n	8002122 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_TIM_MspPostInit+0xc0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d11e      	bne.n	8002122 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_TIM_MspPostInit+0xb8>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_TIM_MspPostInit+0xb8>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6313      	str	r3, [r2, #48]	; 0x30
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_TIM_MspPostInit+0xb8>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002100:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002112:	2303      	movs	r3, #3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	; (800213c <HAL_TIM_MspPostInit+0xc4>)
 800211e:	f001 fd0b 	bl	8003b38 <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	40010400 	.word	0x40010400
 800213c:	40020800 	.word	0x40020800

08002140 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_USART2_UART_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800214c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_USART2_UART_Init+0x4c>)
 8002178:	f004 f976 	bl	8006468 <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002182:	f7ff fa67 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000808 	.word	0x20000808
 8002190:	40004400 	.word	0x40004400

08002194 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_USART3_UART_Init+0x50>)
 800219c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021cc:	f004 f94c 	bl	8006468 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021d6:	f7ff fa3d 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000084c 	.word	0x2000084c
 80021e4:	40004800 	.word	0x40004800

080021e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a51      	ldr	r2, [pc, #324]	; (800234c <HAL_UART_MspInit+0x164>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d134      	bne.n	8002274 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_UART_MspInit+0x168>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_UART_MspInit+0x168>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002242:	230c      	movs	r3, #12
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002252:	2307      	movs	r3, #7
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	483d      	ldr	r0, [pc, #244]	; (8002354 <HAL_UART_MspInit+0x16c>)
 800225e:	f001 fc6b 	bl	8003b38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2105      	movs	r1, #5
 8002266:	2026      	movs	r0, #38	; 0x26
 8002268:	f001 f83a 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800226c:	2026      	movs	r0, #38	; 0x26
 800226e:	f001 f853 	bl	8003318 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002272:	e067      	b.n	8002344 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a37      	ldr	r2, [pc, #220]	; (8002358 <HAL_UART_MspInit+0x170>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d162      	bne.n	8002344 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a32      	ldr	r2, [pc, #200]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_UART_MspInit+0x168>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <HAL_UART_MspInit+0x168>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <HAL_UART_MspInit+0x168>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_UART_MspInit+0x168>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c8:	2307      	movs	r3, #7
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	4822      	ldr	r0, [pc, #136]	; (800235c <HAL_UART_MspInit+0x174>)
 80022d4:	f001 fc30 	bl	8003b38 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_UART_MspInit+0x178>)
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <HAL_UART_MspInit+0x17c>)
 80022dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_UART_MspInit+0x178>)
 80022e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022e4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_UART_MspInit+0x178>)
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_UART_MspInit+0x178>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_UART_MspInit+0x178>)
 80022f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_UART_MspInit+0x178>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_UART_MspInit+0x178>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_UART_MspInit+0x178>)
 8002308:	2200      	movs	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_UART_MspInit+0x178>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_UART_MspInit+0x178>)
 8002314:	2200      	movs	r2, #0
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002318:	4811      	ldr	r0, [pc, #68]	; (8002360 <HAL_UART_MspInit+0x178>)
 800231a:	f001 f80b 	bl	8003334 <HAL_DMA_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002324:	f7ff f996 	bl	8001654 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <HAL_UART_MspInit+0x178>)
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_UART_MspInit+0x178>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2105      	movs	r1, #5
 8002338:	2027      	movs	r0, #39	; 0x27
 800233a:	f000 ffd1 	bl	80032e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800233e:	2027      	movs	r0, #39	; 0x27
 8002340:	f000 ffea 	bl	8003318 <HAL_NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40004400 	.word	0x40004400
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40004800 	.word	0x40004800
 800235c:	40020400 	.word	0x40020400
 8002360:	20000890 	.word	0x20000890
 8002364:	40026058 	.word	0x40026058

08002368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002384:	4c0b      	ldr	r4, [pc, #44]	; (80023b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002392:	f7ff fb93 	bl	8001abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f008 fe0d 	bl	800afb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239a:	f7ff f8bf 	bl	800151c <main>
  bx  lr    
 800239e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80023ac:	0800c30c 	.word	0x0800c30c
  ldr r2, =_sbss
 80023b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80023b4:	20005314 	.word	0x20005314

080023b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC_IRQHandler>
	...

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_Init+0x40>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_Init+0x40>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_Init+0x40>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 ff70 	bl	80032ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	200f      	movs	r0, #15
 80023ec:	f7ff fa1c 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff f9ee 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	200008f0 	.word	0x200008f0

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200008f0 	.word	0x200008f0

08002440 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0ed      	b.n	800262e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe f978 	bl	8000754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002474:	f7ff ffd8 	bl	8002428 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247a:	e012      	b.n	80024a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800247c:	f7ff ffd4 	bl	8002428 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b0a      	cmp	r3, #10
 8002488:	d90b      	bls.n	80024a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2205      	movs	r2, #5
 800249a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0c5      	b.n	800262e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0e5      	beq.n	800247c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0202 	bic.w	r2, r2, #2
 80024be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c0:	f7ff ffb2 	bl	8002428 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024c6:	e012      	b.n	80024ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c8:	f7ff ffae 	bl	8002428 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b0a      	cmp	r3, #10
 80024d4:	d90b      	bls.n	80024ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2205      	movs	r2, #5
 80024e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e09f      	b.n	800262e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e5      	bne.n	80024c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d108      	bne.n	8002516 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7e5b      	ldrb	r3, [r3, #25]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e007      	b.n	8002550 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e9b      	ldrb	r3, [r3, #26]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0220 	bic.w	r2, r2, #32
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7edb      	ldrb	r3, [r3, #27]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0210 	bic.w	r2, r2, #16
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0210 	orr.w	r2, r2, #16
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0208 	orr.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0208 	bic.w	r2, r2, #8
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7f5b      	ldrb	r3, [r3, #29]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0204 	orr.w	r2, r2, #4
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e007      	b.n	80025f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	ea42 0103 	orr.w	r1, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d003      	beq.n	800265e <HAL_CAN_ConfigFilter+0x26>
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 80be 	bne.w	80027da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800265e:	4b65      	ldr	r3, [pc, #404]	; (80027f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002660:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002678:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2201      	movs	r2, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d123      	bne.n	8002708 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3248      	adds	r2, #72	; 0x48
 80026e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	3348      	adds	r3, #72	; 0x48
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d122      	bne.n	8002756 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002730:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3248      	adds	r2, #72	; 0x48
 8002736:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	3348      	adds	r3, #72	; 0x48
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	401a      	ands	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002770:	e007      	b.n	8002782 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800279c:	e007      	b.n	80027ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	431a      	orrs	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027cc:	f023 0201 	bic.w	r2, r3, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e006      	b.n	80027e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40006400 	.word	0x40006400

080027f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d12e      	bne.n	800286a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff fe00 	bl	8002428 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800282a:	e012      	b.n	8002852 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282c:	f7ff fdfc 	bl	8002428 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d90b      	bls.n	8002852 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e012      	b.n	8002878 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002894:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d003      	beq.n	80028ac <HAL_CAN_AddTxMessage+0x2c>
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	f040 80b8 	bne.w	8002a1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80a0 	beq.w	8002a0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d907      	bls.n	80028ec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e09e      	b.n	8002a2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028ec:	2201      	movs	r2, #1
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	409a      	lsls	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	6809      	ldr	r1, [r1, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3318      	adds	r3, #24
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	440b      	add	r3, r1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e00f      	b.n	800293a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002924:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800292a:	68f9      	ldr	r1, [r7, #12]
 800292c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800292e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3318      	adds	r3, #24
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	440b      	add	r3, r1
 8002938:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3318      	adds	r3, #24
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	440b      	add	r3, r1
 800294a:	3304      	adds	r3, #4
 800294c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	7d1b      	ldrb	r3, [r3, #20]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d111      	bne.n	800297a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3318      	adds	r3, #24
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3318      	adds	r3, #24
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	3304      	adds	r3, #4
 8002978:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3307      	adds	r3, #7
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	061a      	lsls	r2, r3, #24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3306      	adds	r3, #6
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3305      	adds	r3, #5
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	4313      	orrs	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	3204      	adds	r2, #4
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	4610      	mov	r0, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	ea43 0200 	orr.w	r2, r3, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3303      	adds	r3, #3
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	061a      	lsls	r2, r3, #24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3302      	adds	r3, #2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4313      	orrs	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	4610      	mov	r0, r2
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	ea43 0200 	orr.w	r2, r3, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3318      	adds	r3, #24
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4413      	add	r3, r2
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6811      	ldr	r1, [r2, #0]
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3318      	adds	r3, #24
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	440b      	add	r3, r1
 8002a06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e00e      	b.n	8002a2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a48:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d002      	beq.n	8002a56 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d11d      	bne.n	8002a92 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d003      	beq.n	8002ac4 <HAL_CAN_GetRxMessage+0x24>
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	f040 80f3 	bne.w	8002caa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d116      	bne.n	8002b06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0e7      	b.n	8002cb8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d107      	bne.n	8002b06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0d8      	b.n	8002cb8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0204 	and.w	r2, r3, #4
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10c      	bne.n	8002b3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	331b      	adds	r3, #27
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	4413      	add	r3, r2
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0d5b      	lsrs	r3, r3, #21
 8002b34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e00b      	b.n	8002b56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	331b      	adds	r3, #27
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0202 	and.w	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	331b      	adds	r3, #27
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 020f 	and.w	r2, r3, #15
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	331b      	adds	r3, #27
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	331b      	adds	r3, #27
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0a1a      	lsrs	r2, r3, #8
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0c1a      	lsrs	r2, r3, #16
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e1a      	lsrs	r2, r3, #24
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	3303      	adds	r3, #3
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0a1a      	lsrs	r2, r3, #8
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3305      	adds	r3, #5
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0c1a      	lsrs	r2, r3, #16
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3306      	adds	r3, #6
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0e1a      	lsrs	r2, r3, #24
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	3307      	adds	r3, #7
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d108      	bne.n	8002c96 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	e007      	b.n	8002ca6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0220 	orr.w	r2, r2, #32
 8002ca4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e006      	b.n	8002cb8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d002      	beq.n	8002ce2 <HAL_CAN_ActivateNotification+0x1e>
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d109      	bne.n	8002cf6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6959      	ldr	r1, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e006      	b.n	8002d04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d07c      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f983 	bl	800307e <HAL_CAN_TxMailbox0CompleteCallback>
 8002d78:	e016      	b.n	8002da8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	e00c      	b.n	8002da8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002da0:	e002      	b.n	8002da8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f989 	bl	80030ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d024      	beq.n	8002dfc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f963 	bl	8003092 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dcc:	e016      	b.n	8002dfc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	e00c      	b.n	8002dfc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	e002      	b.n	8002dfc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f969 	bl	80030ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d024      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f943 	bl	80030a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e20:	e016      	b.n	8002e50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
 8002e34:	e00c      	b.n	8002e50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	e002      	b.n	8002e50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f949 	bl	80030e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2210      	movs	r2, #16
 8002e72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f930 	bl	80030f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fe1c 	bl	8000aec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f912 	bl	800311e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8f9 	bl	800310a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2210      	movs	r2, #16
 8002f32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8fc 	bl	8003132 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2208      	movs	r2, #8
 8002f54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8f5 	bl	8003146 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d07b      	beq.n	800305e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d072      	beq.n	8003056 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d043      	beq.n	8003056 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03e      	beq.n	8003056 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	2b60      	cmp	r3, #96	; 0x60
 8002fe0:	d02b      	beq.n	800303a <HAL_CAN_IRQHandler+0x32a>
 8002fe2:	2b60      	cmp	r3, #96	; 0x60
 8002fe4:	d82e      	bhi.n	8003044 <HAL_CAN_IRQHandler+0x334>
 8002fe6:	2b50      	cmp	r3, #80	; 0x50
 8002fe8:	d022      	beq.n	8003030 <HAL_CAN_IRQHandler+0x320>
 8002fea:	2b50      	cmp	r3, #80	; 0x50
 8002fec:	d82a      	bhi.n	8003044 <HAL_CAN_IRQHandler+0x334>
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d019      	beq.n	8003026 <HAL_CAN_IRQHandler+0x316>
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d826      	bhi.n	8003044 <HAL_CAN_IRQHandler+0x334>
 8002ff6:	2b30      	cmp	r3, #48	; 0x30
 8002ff8:	d010      	beq.n	800301c <HAL_CAN_IRQHandler+0x30c>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d822      	bhi.n	8003044 <HAL_CAN_IRQHandler+0x334>
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d002      	beq.n	8003008 <HAL_CAN_IRQHandler+0x2f8>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d005      	beq.n	8003012 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003006:	e01d      	b.n	8003044 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003010:	e019      	b.n	8003046 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	f043 0310 	orr.w	r3, r3, #16
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800301a:	e014      	b.n	8003046 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003024:	e00f      	b.n	8003046 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800302e:	e00a      	b.n	8003046 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003038:	e005      	b.n	8003046 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003042:	e000      	b.n	8003046 <HAL_CAN_IRQHandler+0x336>
            break;
 8003044:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003054:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2204      	movs	r2, #4
 800305c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f872 	bl	800315a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003076:	bf00      	nop
 8003078:	3728      	adds	r7, #40	; 0x28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <__NVIC_GetPriorityGrouping+0x18>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0307 	and.w	r3, r3, #7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db0b      	blt.n	80031fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <__NVIC_EnableIRQ+0x38>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2001      	movs	r0, #1
 80031f6:	fa00 f202 	lsl.w	r2, r0, r2
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000e100 	.word	0xe000e100

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	; (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	; (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff4c 	bl	8003170 <__NVIC_SetPriorityGrouping>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f2:	f7ff ff61 	bl	80031b8 <__NVIC_GetPriorityGrouping>
 80032f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	6978      	ldr	r0, [r7, #20]
 80032fe:	f7ff ffb1 	bl	8003264 <NVIC_EncodePriority>
 8003302:	4602      	mov	r2, r0
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ff80 	bl	8003210 <__NVIC_SetPriority>
}
 8003310:	bf00      	nop
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff54 	bl	80031d4 <__NVIC_EnableIRQ>
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff f872 	bl	8002428 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e099      	b.n	8003484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003370:	e00f      	b.n	8003392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003372:	f7ff f859 	bl	8002428 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b05      	cmp	r3, #5
 800337e:	d908      	bls.n	8003392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e078      	b.n	8003484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e8      	bne.n	8003372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_DMA_Init+0x158>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d107      	bne.n	80033fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4313      	orrs	r3, r2
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0307 	bic.w	r3, r3, #7
 8003412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b04      	cmp	r3, #4
 8003424:	d117      	bne.n	8003456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb01 	bl	8003a40 <DMA_CheckFifoParam>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003452:	2301      	movs	r3, #1
 8003454:	e016      	b.n	8003484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fab8 	bl	80039d4 <DMA_CalcBaseAndBitshift>
 8003464:	4603      	mov	r3, r0
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	223f      	movs	r2, #63	; 0x3f
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	f010803f 	.word	0xf010803f

08003490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_DMA_Start_IT+0x26>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e040      	b.n	8003538 <HAL_DMA_Start_IT+0xa8>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d12f      	bne.n	800352a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fa4a 	bl	8003978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	223f      	movs	r2, #63	; 0x3f
 80034ea:	409a      	lsls	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0216 	orr.w	r2, r2, #22
 80034fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e005      	b.n	8003536 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003532:	2302      	movs	r3, #2
 8003534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800354e:	f7fe ff6b 	bl	8002428 <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e052      	b.n	8003618 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0216 	bic.w	r2, r2, #22
 8003580:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003590:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <HAL_DMA_Abort+0x62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0208 	bic.w	r2, r2, #8
 80035b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c2:	e013      	b.n	80035ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c4:	f7fe ff30 	bl	8002428 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d90c      	bls.n	80035ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e015      	b.n	8003618 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e4      	bne.n	80035c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	223f      	movs	r2, #63	; 0x3f
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e00c      	b.n	8003658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2205      	movs	r2, #5
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003670:	4b8e      	ldr	r3, [pc, #568]	; (80038ac <HAL_DMA_IRQHandler+0x248>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a8e      	ldr	r2, [pc, #568]	; (80038b0 <HAL_DMA_IRQHandler+0x24c>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0a9b      	lsrs	r3, r3, #10
 800367c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2208      	movs	r2, #8
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01a      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0204 	bic.w	r2, r2, #4
 80036b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2208      	movs	r2, #8
 80036be:	409a      	lsls	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2201      	movs	r2, #1
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	2201      	movs	r2, #1
 80036f4:	409a      	lsls	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0202 	orr.w	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	2204      	movs	r2, #4
 800370c:	409a      	lsls	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	2204      	movs	r2, #4
 800372a:	409a      	lsls	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	2210      	movs	r2, #16
 8003742:	409a      	lsls	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d043      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03c      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	2210      	movs	r2, #16
 8003760:	409a      	lsls	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d024      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e01f      	b.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e016      	b.n	80037d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0208 	bic.w	r2, r2, #8
 80037c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2220      	movs	r2, #32
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 808f 	beq.w	8003904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8087 	beq.w	8003904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2220      	movs	r2, #32
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b05      	cmp	r3, #5
 800380c:	d136      	bne.n	800387c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0216 	bic.w	r2, r2, #22
 800381c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_DMA_IRQHandler+0x1da>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0208 	bic.w	r2, r2, #8
 800384c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	223f      	movs	r2, #63	; 0x3f
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d07e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
        }
        return;
 800387a:	e079      	b.n	8003970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	2b00      	cmp	r3, #0
 800389e:	d031      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e02c      	b.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000
 80038b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d023      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e01e      	b.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10f      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0210 	bic.w	r2, r2, #16
 80038e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	2b00      	cmp	r3, #0
 800390a:	d032      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2205      	movs	r2, #5
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3301      	adds	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	429a      	cmp	r2, r3
 800393a:	d307      	bcc.n	800394c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f2      	bne.n	8003930 <HAL_DMA_IRQHandler+0x2cc>
 800394a:	e000      	b.n	800394e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800394c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
 800396e:	e000      	b.n	8003972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003970:	bf00      	nop
    }
  }
}
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d108      	bne.n	80039b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039b6:	e007      	b.n	80039c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	3b10      	subs	r3, #16
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <DMA_CalcBaseAndBitshift+0x64>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <DMA_CalcBaseAndBitshift+0x68>)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d909      	bls.n	8003a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	659a      	str	r2, [r3, #88]	; 0x58
 8003a14:	e007      	b.n	8003a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	aaaaaaab 	.word	0xaaaaaaab
 8003a3c:	0800c25c 	.word	0x0800c25c

08003a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11f      	bne.n	8003a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d856      	bhi.n	8003b0e <DMA_CheckFifoParam+0xce>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <DMA_CheckFifoParam+0x28>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a8b 	.word	0x08003a8b
 8003a70:	08003a79 	.word	0x08003a79
 8003a74:	08003b0f 	.word	0x08003b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d046      	beq.n	8003b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a88:	e043      	b.n	8003b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a92:	d140      	bne.n	8003b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e03d      	b.n	8003b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa2:	d121      	bne.n	8003ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d837      	bhi.n	8003b1a <DMA_CheckFifoParam+0xda>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <DMA_CheckFifoParam+0x70>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ac7 	.word	0x08003ac7
 8003ab8:	08003ac1 	.word	0x08003ac1
 8003abc:	08003ad9 	.word	0x08003ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac4:	e030      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d025      	beq.n	8003b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e022      	b.n	8003b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae0:	d11f      	bne.n	8003b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ae6:	e01c      	b.n	8003b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d903      	bls.n	8003af6 <DMA_CheckFifoParam+0xb6>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d003      	beq.n	8003afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af4:	e018      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      break;
 8003afa:	e015      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e00b      	b.n	8003b26 <DMA_CheckFifoParam+0xe6>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e00a      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e008      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e006      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e004      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
    }
  } 
  
  return status; 
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e16b      	b.n	8003e2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b54:	2201      	movs	r2, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f040 815a 	bne.w	8003e26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d005      	beq.n	8003b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d130      	bne.n	8003bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0201 	and.w	r2, r3, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d017      	beq.n	8003c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d123      	bne.n	8003c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0203 	and.w	r2, r3, #3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80b4 	beq.w	8003e26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b60      	ldr	r3, [pc, #384]	; (8003e44 <HAL_GPIO_Init+0x30c>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a5f      	ldr	r2, [pc, #380]	; (8003e44 <HAL_GPIO_Init+0x30c>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <HAL_GPIO_Init+0x30c>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cda:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <HAL_GPIO_Init+0x310>)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_GPIO_Init+0x314>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02b      	beq.n	8003d5e <HAL_GPIO_Init+0x226>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a51      	ldr	r2, [pc, #324]	; (8003e50 <HAL_GPIO_Init+0x318>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d025      	beq.n	8003d5a <HAL_GPIO_Init+0x222>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a50      	ldr	r2, [pc, #320]	; (8003e54 <HAL_GPIO_Init+0x31c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01f      	beq.n	8003d56 <HAL_GPIO_Init+0x21e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4f      	ldr	r2, [pc, #316]	; (8003e58 <HAL_GPIO_Init+0x320>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d019      	beq.n	8003d52 <HAL_GPIO_Init+0x21a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4e      	ldr	r2, [pc, #312]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_GPIO_Init+0x216>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_GPIO_Init+0x328>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00d      	beq.n	8003d4a <HAL_GPIO_Init+0x212>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4c      	ldr	r2, [pc, #304]	; (8003e64 <HAL_GPIO_Init+0x32c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_Init+0x20e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4b      	ldr	r2, [pc, #300]	; (8003e68 <HAL_GPIO_Init+0x330>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_GPIO_Init+0x20a>
 8003d3e:	2307      	movs	r3, #7
 8003d40:	e00e      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d42:	2308      	movs	r3, #8
 8003d44:	e00c      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d46:	2306      	movs	r3, #6
 8003d48:	e00a      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x228>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f002 0203 	and.w	r2, r2, #3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d70:	4935      	ldr	r1, [pc, #212]	; (8003e48 <HAL_GPIO_Init+0x310>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da2:	4a32      	ldr	r2, [pc, #200]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da8:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd2:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e20:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	f67f ae90 	bls.w	8003b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020c00 	.word	0x40020c00
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40021400 	.word	0x40021400
 8003e64:	40021800 	.word	0x40021800
 8003e68:	40021c00 	.word	0x40021c00
 8003e6c:	40013c00 	.word	0x40013c00

08003e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e80:	787b      	ldrb	r3, [r7, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e8c:	e003      	b.n	8003e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	041a      	lsls	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	619a      	str	r2, [r3, #24]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eb4:	887a      	ldrh	r2, [r7, #2]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	041a      	lsls	r2, r3, #16
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43d9      	mvns	r1, r3
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	400b      	ands	r3, r1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	619a      	str	r2, [r3, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eee:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fe76 	bl	8000be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40013c00 	.word	0x40013c00

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e267      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b85      	ldr	r3, [pc, #532]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d112      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b82      	ldr	r3, [pc, #520]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e242      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b70      	ldr	r3, [pc, #448]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6c      	ldr	r2, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a68      	ldr	r2, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b66      	ldr	r3, [pc, #408]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fa32 	bl	8002428 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fe fa2e 	bl	8002428 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e207      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fa1e 	bl	8002428 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fa1a 	bl	8002428 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1f3      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c7      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4937      	ldr	r1, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x244>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fe f9d3 	bl	8002428 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fe f9cf 	bl	8002428 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a8      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4925      	ldr	r1, [pc, #148]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_OscConfig+0x244>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fe f9b2 	bl	8002428 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fe f9ae 	bl	8002428 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e187      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d036      	beq.n	8004160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fe f992 	bl	8002428 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004108:	f7fe f98e 	bl	8002428 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e167      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe f97b 	bl	8002428 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e00e      	b.n	8004154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004136:	f7fe f977 	bl	8002428 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d907      	bls.n	8004154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e150      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004148:	40023800 	.word	0x40023800
 800414c:	42470000 	.word	0x42470000
 8004150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ea      	bne.n	8004136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8097 	beq.w	800429c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b74      	ldr	r3, [pc, #464]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fe f937 	bl	8002428 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fe f933 	bl	8002428 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e10c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ea>
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a63      	ldr	r2, [pc, #396]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x30c>
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a5b      	ldr	r2, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a54      	ldr	r2, [pc, #336]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fe f8f8 	bl	8002428 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fe f8f4 	bl	8002428 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0cb      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCC_OscConfig+0x334>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fe f8e2 	bl	8002428 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fe f8de 	bl	8002428 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b5      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ee      	bne.n	8004268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	4a38      	ldr	r2, [pc, #224]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a1 	beq.w	80043e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d05c      	beq.n	800436c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d141      	bne.n	800433e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe f8b2 	bl	8002428 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fe f8ae 	bl	8002428 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e087      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	491b      	ldr	r1, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fe f887 	bl	8002428 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7fe f883 	bl	8002428 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e05c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x416>
 800433c:	e054      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe f870 	bl	8002428 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fe f86c 	bl	8002428 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e045      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
 800436a:	e03d      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e038      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004378:	40023800 	.word	0x40023800
 800437c:	40007000 	.word	0x40007000
 8004380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d028      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d121      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d11a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7fd ff9e 	bl	8002428 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fd ff9a 	bl	8002428 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490a      	ldr	r1, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fd f942 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	0800c244 	.word	0x0800c244
 80045bc:	20000000 	.word	0x20000000
 80045c0:	20000004 	.word	0x20000004

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b090      	sub	sp, #64	; 0x40
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	2300      	movs	r3, #0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	2300      	movs	r3, #0
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x40>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f200 80a1 	bhi.w	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x3a>
 80045f6:	e09b      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045fc:	e09b      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004602:	e098      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4b4f      	ldr	r3, [pc, #316]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d028      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	627a      	str	r2, [r7, #36]	; 0x24
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800462c:	2100      	movs	r1, #0
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004630:	fb03 f201 	mul.w	r2, r3, r1
 8004634:	2300      	movs	r3, #0
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	4413      	add	r3, r2
 800463c:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 800463e:	fba0 1202 	umull	r1, r2, r0, r2
 8004642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004644:	460a      	mov	r2, r1
 8004646:	62ba      	str	r2, [r7, #40]	; 0x28
 8004648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464a:	4413      	add	r3, r2
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	2200      	movs	r2, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800465e:	f7fb fe07 	bl	8000270 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4613      	mov	r3, r2
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466a:	e053      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466c:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2200      	movs	r2, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	617a      	str	r2, [r7, #20]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800467e:	f04f 0b00 	mov.w	fp, #0
 8004682:	4652      	mov	r2, sl
 8004684:	465b      	mov	r3, fp
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004694:	0150      	lsls	r0, r2, #5
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	ebb2 080a 	subs.w	r8, r2, sl
 800469e:	eb63 090b 	sbc.w	r9, r3, fp
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046b6:	ebb2 0408 	subs.w	r4, r2, r8
 80046ba:	eb63 0509 	sbc.w	r5, r3, r9
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	00eb      	lsls	r3, r5, #3
 80046c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	4614      	mov	r4, r2
 80046d0:	461d      	mov	r5, r3
 80046d2:	eb14 030a 	adds.w	r3, r4, sl
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	eb45 030b 	adc.w	r3, r5, fp
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ea:	4629      	mov	r1, r5
 80046ec:	028b      	lsls	r3, r1, #10
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f4:	4621      	mov	r1, r4
 80046f6:	028a      	lsls	r2, r1, #10
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	2200      	movs	r2, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	60fa      	str	r2, [r7, #12]
 8004704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004708:	f7fb fdb2 	bl	8000270 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	3301      	adds	r3, #1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 8004732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004738:	4618      	mov	r0, r3
 800473a:	3740      	adds	r7, #64	; 0x40
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400
 800474c:	00b71b00 	.word	0x00b71b00

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000000 	.word	0x20000000

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800476c:	f7ff fff0 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a9b      	lsrs	r3, r3, #10
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	0800c254 	.word	0x0800c254

08004790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004794:	f7ff ffdc 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0b5b      	lsrs	r3, r3, #13
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	0800c254 	.word	0x0800c254

080047b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	220f      	movs	r2, #15
 80047c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0203 	and.w	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_GetClockConfig+0x5c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <HAL_RCC_GetClockConfig+0x60>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0207 	and.w	r2, r3, #7
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	601a      	str	r2, [r3, #0]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	40023c00 	.word	0x40023c00

0800481c <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e0a1      	b.n	800497a <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fe0a 	bl	8001464 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004868:	f7ff ff7e 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 800486c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a44      	ldr	r2, [pc, #272]	; (8004984 <HAL_SMBUS_Init+0x168>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	0c9b      	lsrs	r3, r3, #18
 8004878:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80048ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6852      	ldr	r2, [r2, #4]
 80048b6:	0052      	lsls	r2, r2, #1
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	fbb1 f1f2 	udiv	r1, r1, r2
 80048be:	f640 72fc 	movw	r2, #4092	; 0xffc
 80048c2:	400a      	ands	r2, r1
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d006      	beq.n	80048d6 <HAL_SMBUS_Init+0xba>
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6852      	ldr	r2, [r2, #4]
 80048cc:	0052      	lsls	r2, r2, #1
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80048d4:	e000      	b.n	80048d8 <HAL_SMBUS_Init+0xbc>
 80048d6:	2204      	movs	r2, #4
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	6809      	ldr	r1, [r1, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6911      	ldr	r1, [r2, #16]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68d2      	ldr	r2, [r2, #12]
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	430b      	orrs	r3, r1
 8004926:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	431bde83 	.word	0x431bde83

08004988 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800499e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 80049a8:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e041      	b.n	8004a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fab0 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f001 f812 	bl	8005a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e04e      	b.n	8004b1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a19      	ldr	r2, [pc, #100]	; (8004b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d111      	bne.n	8004b0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d010      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	e007      	b.n	8004b1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40010400 	.word	0x40010400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40001800 	.word	0x40001800

08004b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e041      	b.n	8004bde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd f9a8 	bl	8001ec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f000 ff52 	bl	8005a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_TIM_PWM_Start+0x24>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e022      	b.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d109      	bne.n	8004c26 <HAL_TIM_PWM_Start+0x3e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	bf14      	ite	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	2300      	moveq	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e015      	b.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d109      	bne.n	8004c40 <HAL_TIM_PWM_Start+0x58>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e008      	b.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07c      	b.n	8004d54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x82>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c68:	e013      	b.n	8004c92 <HAL_TIM_PWM_Start+0xaa>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x92>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c78:	e00b      	b.n	8004c92 <HAL_TIM_PWM_Start+0xaa>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0xa2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c88:	e003      	b.n	8004c92 <HAL_TIM_PWM_Start+0xaa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fadc 	bl	8006258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_TIM_PWM_Start+0x174>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIM_PWM_Start+0xcc>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <HAL_TIM_PWM_Start+0x178>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_PWM_Start+0xd0>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_TIM_PWM_Start+0xd2>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a22      	ldr	r2, [pc, #136]	; (8004d5c <HAL_TIM_PWM_Start+0x174>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce0:	d01d      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_TIM_PWM_Start+0x17c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <HAL_TIM_PWM_Start+0x180>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <HAL_TIM_PWM_Start+0x184>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_TIM_PWM_Start+0x178>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	; (8004d70 <HAL_TIM_PWM_Start+0x188>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <HAL_TIM_PWM_Start+0x18c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b06      	cmp	r3, #6
 8004d2e:	d010      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d40:	e007      	b.n	8004d52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0201 	orr.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800

08004d78 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e022      	b.n	8004dea <HAL_TIM_PWM_Start_DMA+0x72>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d109      	bne.n	8004dbe <HAL_TIM_PWM_Start_DMA+0x46>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	e015      	b.n	8004dea <HAL_TIM_PWM_Start_DMA+0x72>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d109      	bne.n	8004dd8 <HAL_TIM_PWM_Start_DMA+0x60>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e008      	b.n	8004dea <HAL_TIM_PWM_Start_DMA+0x72>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
 8004df0:	e171      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <HAL_TIM_PWM_Start_DMA+0x94>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e022      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0xda>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d109      	bne.n	8004e26 <HAL_TIM_PWM_Start_DMA+0xae>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	e015      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0xda>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d109      	bne.n	8004e40 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e008      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0xda>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d024      	beq.n	8004ea0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Start_DMA+0xee>
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e137      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	e016      	b.n	8004ea4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	e00e      	b.n	8004ea4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e94:	e006      	b.n	8004ea4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e9e:	e001      	b.n	8004ea4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e118      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	f200 80ae 	bhi.w	8005008 <HAL_TIM_PWM_Start_DMA+0x290>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08005009 	.word	0x08005009
 8004ebc:	08005009 	.word	0x08005009
 8004ec0:	08005009 	.word	0x08005009
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08005009 	.word	0x08005009
 8004ecc:	08005009 	.word	0x08005009
 8004ed0:	08005009 	.word	0x08005009
 8004ed4:	08004f79 	.word	0x08004f79
 8004ed8:	08005009 	.word	0x08005009
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08005009 	.word	0x08005009
 8004ee4:	08004fc1 	.word	0x08004fc1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004eee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4a7b      	ldr	r2, [pc, #492]	; (80050e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	4a7a      	ldr	r2, [pc, #488]	; (80050e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004efe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3334      	adds	r3, #52	; 0x34
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	887b      	ldrh	r3, [r7, #2]
 8004f10:	f7fe fabe 	bl	8003490 <HAL_DMA_Start_IT>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0db      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2c:	60da      	str	r2, [r3, #12]
      break;
 8004f2e:	e06e      	b.n	800500e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	4a69      	ldr	r2, [pc, #420]	; (80050e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	4a68      	ldr	r2, [pc, #416]	; (80050e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3338      	adds	r3, #56	; 0x38
 8004f54:	461a      	mov	r2, r3
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	f7fe fa9a 	bl	8003490 <HAL_DMA_Start_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0b7      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f74:	60da      	str	r2, [r3, #12]
      break;
 8004f76:	e04a      	b.n	800500e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a57      	ldr	r2, [pc, #348]	; (80050e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4a56      	ldr	r2, [pc, #344]	; (80050e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	333c      	adds	r3, #60	; 0x3c
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	f7fe fa76 	bl	8003490 <HAL_DMA_Start_IT>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e093      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	60da      	str	r2, [r3, #12]
      break;
 8004fbe:	e026      	b.n	800500e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4a46      	ldr	r2, [pc, #280]	; (80050e0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004fc6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	4a45      	ldr	r2, [pc, #276]	; (80050e4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	4a44      	ldr	r2, [pc, #272]	; (80050e8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004fd6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3340      	adds	r3, #64	; 0x40
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	f7fe fa52 	bl	8003490 <HAL_DMA_Start_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e06f      	b.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005004:	60da      	str	r2, [r3, #12]
      break;
 8005006:	e002      	b.n	800500e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  if (status == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d15f      	bne.n	80050d4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f001 f91b 	bl	8006258 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a31      	ldr	r2, [pc, #196]	; (80050ec <HAL_TIM_PWM_Start_DMA+0x374>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_TIM_PWM_Start_DMA+0x2be>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <HAL_TIM_PWM_Start_DMA+0x374>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005062:	d01d      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a22      	ldr	r2, [pc, #136]	; (80050f4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_TIM_PWM_Start_DMA+0x384>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1a      	ldr	r2, [pc, #104]	; (80050f0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <HAL_TIM_PWM_Start_DMA+0x388>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d111      	bne.n	80050c4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d010      	beq.n	80050d4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	e007      	b.n	80050d4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	08005921 	.word	0x08005921
 80050e4:	080059c9 	.word	0x080059c9
 80050e8:	0800588f 	.word	0x0800588f
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40014000 	.word	0x40014000
 8005104:	40001800 	.word	0x40001800

08005108 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e041      	b.n	800519e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f839 	bl	80051a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f000 fc72 	bl	8005a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d122      	bne.n	8005216 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d11b      	bne.n	8005216 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f06f 0202 	mvn.w	r2, #2
 80051e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fb14 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 8005202:	e005      	b.n	8005210 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fb06 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fb17 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d122      	bne.n	800526a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d11b      	bne.n	800526a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f06f 0204 	mvn.w	r2, #4
 800523a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 faea 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 8005256:	e005      	b.n	8005264 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fadc 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 faed 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b08      	cmp	r3, #8
 8005276:	d122      	bne.n	80052be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b08      	cmp	r3, #8
 8005284:	d11b      	bne.n	80052be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f06f 0208 	mvn.w	r2, #8
 800528e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fac0 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 80052aa:	e005      	b.n	80052b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fab2 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fac3 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d122      	bne.n	8005312 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d11b      	bne.n	8005312 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f06f 0210 	mvn.w	r2, #16
 80052e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2208      	movs	r2, #8
 80052e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fa96 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 80052fe:	e005      	b.n	800530c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fa88 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa99 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0201 	mvn.w	r2, #1
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc f979 	bl	8001630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b80      	cmp	r3, #128	; 0x80
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b80      	cmp	r3, #128	; 0x80
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f875 	bl	8006454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d10e      	bne.n	8005396 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b40      	cmp	r3, #64	; 0x40
 8005384:	d107      	bne.n	8005396 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800538e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fa68 	bl	8005866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d10e      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d107      	bne.n	80053c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f06f 0220 	mvn.w	r2, #32
 80053ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 f83f 	bl	8006440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e088      	b.n	80054fa <HAL_TIM_IC_ConfigChannel+0x130>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11b      	bne.n	800542e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f000 fd63 	bl	8005ed0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 020c 	bic.w	r2, r2, #12
 8005418:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6999      	ldr	r1, [r3, #24]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
 800542c:	e060      	b.n	80054f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d11c      	bne.n	800546e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f000 fde7 	bl	8006016 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005456:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	619a      	str	r2, [r3, #24]
 800546c:	e040      	b.n	80054f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f000 fe34 	bl	80060f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 020c 	bic.w	r2, r2, #12
 8005496:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69d9      	ldr	r1, [r3, #28]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e021      	b.n	80054f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d11c      	bne.n	80054ec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f000 fe51 	bl	8006168 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69d9      	ldr	r1, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	021a      	lsls	r2, r3, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	e001      	b.n	80054f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ae      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	f200 809f 	bhi.w	8005670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800556d 	.word	0x0800556d
 800553c:	08005671 	.word	0x08005671
 8005540:	08005671 	.word	0x08005671
 8005544:	08005671 	.word	0x08005671
 8005548:	080055ad 	.word	0x080055ad
 800554c:	08005671 	.word	0x08005671
 8005550:	08005671 	.word	0x08005671
 8005554:	08005671 	.word	0x08005671
 8005558:	080055ef 	.word	0x080055ef
 800555c:	08005671 	.word	0x08005671
 8005560:	08005671 	.word	0x08005671
 8005564:	08005671 	.word	0x08005671
 8005568:	0800562f 	.word	0x0800562f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fafc 	bl	8005b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]
      break;
 80055aa:	e064      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fb4c 	bl	8005c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]
      break;
 80055ec:	e043      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fba1 	bl	8005d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0208 	orr.w	r2, r2, #8
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	61da      	str	r2, [r3, #28]
      break;
 800562c:	e023      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fbf5 	bl	8005e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	61da      	str	r2, [r3, #28]
      break;
 800566e:	e002      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_ConfigClockSource+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0b4      	b.n	800580e <HAL_TIM_ConfigClockSource+0x186>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d03e      	beq.n	800575c <HAL_TIM_ConfigClockSource+0xd4>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e2:	f200 8087 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	f000 8086 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x172>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d87f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b70      	cmp	r3, #112	; 0x70
 80056f6:	d01a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xa6>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d87b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b60      	cmp	r3, #96	; 0x60
 80056fe:	d050      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d877      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b50      	cmp	r3, #80	; 0x50
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0xfa>
 8005708:	2b50      	cmp	r3, #80	; 0x50
 800570a:	d873      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d058      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d86f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b30      	cmp	r3, #48	; 0x30
 8005716:	d064      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d86b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d060      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d867      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d05a      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	e062      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 fd6b 	bl	8006218 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e04f      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f000 fd54 	bl	8006218 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800577e:	609a      	str	r2, [r3, #8]
      break;
 8005780:	e03c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	461a      	mov	r2, r3
 8005790:	f000 fc12 	bl	8005fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2150      	movs	r1, #80	; 0x50
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fd21 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 80057a0:	e02c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 fc6e 	bl	8006090 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2160      	movs	r1, #96	; 0x60
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fd11 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 80057c0:	e01c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fbf2 	bl	8005fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fd01 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 fcf8 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 80057f2:	e003      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d107      	bne.n	80058b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b4:	e02a      	b.n	800590c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d107      	bne.n	80058d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2202      	movs	r2, #2
 80058c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ce:	e01d      	b.n	800590c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d107      	bne.n	80058ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2204      	movs	r2, #4
 80058de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e8:	e010      	b.n	800590c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d107      	bne.n	8005904 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2208      	movs	r2, #8
 80058f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005902:	e003      	b.n	800590c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff ffb4 	bl	800587a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d10b      	bne.n	8005950 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d136      	bne.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800594e:	e031      	b.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d10b      	bne.n	8005972 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2202      	movs	r2, #2
 800595e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d125      	bne.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	e020      	b.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d10b      	bne.n	8005994 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2204      	movs	r2, #4
 8005980:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d114      	bne.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005992:	e00f      	b.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d10a      	bne.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2208      	movs	r2, #8
 80059a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff ff42 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d103      	bne.n	80059e8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	771a      	strb	r2, [r3, #28]
 80059e6:	e019      	b.n	8005a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d103      	bne.n	80059fa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2202      	movs	r2, #2
 80059f6:	771a      	strb	r2, [r3, #28]
 80059f8:	e010      	b.n	8005a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d103      	bne.n	8005a0c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2204      	movs	r2, #4
 8005a08:	771a      	strb	r2, [r3, #28]
 8005a0a:	e007      	b.n	8005a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d102      	bne.n	8005a1c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff ff18 	bl	8005852 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a40      	ldr	r2, [pc, #256]	; (8005b44 <TIM_Base_SetConfig+0x114>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4e:	d00f      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a3d      	ldr	r2, [pc, #244]	; (8005b48 <TIM_Base_SetConfig+0x118>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00b      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a3c      	ldr	r2, [pc, #240]	; (8005b4c <TIM_Base_SetConfig+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a3b      	ldr	r2, [pc, #236]	; (8005b50 <TIM_Base_SetConfig+0x120>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3a      	ldr	r2, [pc, #232]	; (8005b54 <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <TIM_Base_SetConfig+0x114>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02b      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d027      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2c      	ldr	r2, [pc, #176]	; (8005b48 <TIM_Base_SetConfig+0x118>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d023      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2b      	ldr	r2, [pc, #172]	; (8005b4c <TIM_Base_SetConfig+0x11c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01f      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <TIM_Base_SetConfig+0x120>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01b      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <TIM_Base_SetConfig+0x124>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d017      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <TIM_Base_SetConfig+0x128>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <TIM_Base_SetConfig+0x12c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00f      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a26      	ldr	r2, [pc, #152]	; (8005b60 <TIM_Base_SetConfig+0x130>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00b      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <TIM_Base_SetConfig+0x134>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <TIM_Base_SetConfig+0x138>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a23      	ldr	r2, [pc, #140]	; (8005b6c <TIM_Base_SetConfig+0x13c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d108      	bne.n	8005af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <TIM_Base_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_Base_SetConfig+0xf8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <TIM_Base_SetConfig+0x124>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d103      	bne.n	8005b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	615a      	str	r2, [r3, #20]
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	40010400 	.word	0x40010400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	40001800 	.word	0x40001800
 8005b68:	40001c00 	.word	0x40001c00
 8005b6c:	40002000 	.word	0x40002000

08005b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 0302 	bic.w	r3, r3, #2
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <TIM_OC1_SetConfig+0xd8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC1_SetConfig+0x64>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <TIM_OC1_SetConfig+0xdc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10c      	bne.n	8005bee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0308 	bic.w	r3, r3, #8
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 0304 	bic.w	r3, r3, #4
 8005bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <TIM_OC1_SetConfig+0xd8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_OC1_SetConfig+0x8e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <TIM_OC1_SetConfig+0xdc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d111      	bne.n	8005c22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010400 	.word	0x40010400

08005c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <TIM_OC2_SetConfig+0xe4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_OC2_SetConfig+0x68>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	; (8005d38 <TIM_OC2_SetConfig+0xe8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10d      	bne.n	8005cd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <TIM_OC2_SetConfig+0xe4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC2_SetConfig+0x94>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <TIM_OC2_SetConfig+0xe8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d113      	bne.n	8005d0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40010400 	.word	0x40010400

08005d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <TIM_OC3_SetConfig+0xe0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC3_SetConfig+0x66>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a20      	ldr	r2, [pc, #128]	; (8005e20 <TIM_OC3_SetConfig+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10d      	bne.n	8005dbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <TIM_OC3_SetConfig+0xe0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_OC3_SetConfig+0x92>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <TIM_OC3_SetConfig+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d113      	bne.n	8005df6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <TIM_OC4_SetConfig+0xa4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC4_SetConfig+0x68>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <TIM_OC4_SetConfig+0xa8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <TIM_TI1_SetConfig+0xcc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01b      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f04:	d017      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <TIM_TI1_SetConfig+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <TIM_TI1_SetConfig+0xd4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a23      	ldr	r2, [pc, #140]	; (8005fa8 <TIM_TI1_SetConfig+0xd8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00b      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a22      	ldr	r2, [pc, #136]	; (8005fac <TIM_TI1_SetConfig+0xdc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <TIM_TI1_SetConfig+0xe0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_TI1_SetConfig+0x66>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <TIM_TI1_SetConfig+0xe4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d101      	bne.n	8005f3a <TIM_TI1_SetConfig+0x6a>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <TIM_TI1_SetConfig+0x6c>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0303 	bic.w	r3, r3, #3
 8005f46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e003      	b.n	8005f5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f023 030a 	bic.w	r3, r3, #10
 8005f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 030a 	and.w	r3, r3, #10
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0201 	bic.w	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 030a 	bic.w	r3, r3, #10
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f023 0210 	bic.w	r2, r3, #16
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006042:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	b29b      	uxth	r3, r3
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006068:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f023 0210 	bic.w	r2, r3, #16
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	031b      	lsls	r3, r3, #12
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	b2db      	uxtb	r3, r3
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006140:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	621a      	str	r2, [r3, #32]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	031b      	lsls	r3, r3, #12
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	621a      	str	r2, [r3, #32]
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	f043 0307 	orr.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	021a      	lsls	r2, r3, #8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	431a      	orrs	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4313      	orrs	r3, r2
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	609a      	str	r2, [r3, #8]
}
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	2201      	movs	r2, #1
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	43db      	mvns	r3, r3
 800627a:	401a      	ands	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1a      	ldr	r2, [r3, #32]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	431a      	orrs	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e05a      	b.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d01d      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1a      	ldr	r2, [pc, #104]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a18      	ldr	r2, [pc, #96]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a17      	ldr	r2, [pc, #92]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d10c      	bne.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	4313      	orrs	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40001800 	.word	0x40001800

0800639c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e03d      	b.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e03f      	b.n	80064fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fb feaa 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	; 0x24
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 ff35 	bl	800731c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b08a      	sub	sp, #40	; 0x28
 8006506:	af02      	add	r7, sp, #8
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b20      	cmp	r3, #32
 8006520:	d17c      	bne.n	800661c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_UART_Transmit+0x2c>
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e075      	b.n	800661e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UART_Transmit+0x3e>
 800653c:	2302      	movs	r3, #2
 800653e:	e06e      	b.n	800661e <HAL_UART_Transmit+0x11c>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2221      	movs	r2, #33	; 0x21
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006556:	f7fb ff67 	bl	8002428 <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	88fa      	ldrh	r2, [r7, #6]
 8006566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d108      	bne.n	8006584 <HAL_UART_Transmit+0x82>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	e003      	b.n	800658c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006594:	e02a      	b.n	80065ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fc4c 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e036      	b.n	800661e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	3302      	adds	r3, #2
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	e007      	b.n	80065de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	3301      	adds	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1cf      	bne.n	8006596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	2140      	movs	r1, #64	; 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fc1c 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	4613      	mov	r3, r2
 8006632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	d11d      	bne.n	800667c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Receive_IT+0x26>
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e016      	b.n	800667e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_UART_Receive_IT+0x38>
 800665a:	2302      	movs	r3, #2
 800665c:	e00f      	b.n	800667e <HAL_UART_Receive_IT+0x58>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	461a      	mov	r2, r3
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fc51 	bl	8006f1a <UART_Start_Receive_IT>
 8006678:	4603      	mov	r3, r0
 800667a:	e000      	b.n	800667e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08c      	sub	sp, #48	; 0x30
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d165      	bne.n	800676e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_UART_Transmit_DMA+0x26>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e05e      	b.n	8006770 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Transmit_DMA+0x38>
 80066bc:	2302      	movs	r3, #2
 80066be:	e057      	b.n	8006770 <HAL_UART_Transmit_DMA+0xe8>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	88fa      	ldrh	r2, [r7, #6]
 80066d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2221      	movs	r2, #33	; 0x21
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	4a22      	ldr	r2, [pc, #136]	; (8006778 <HAL_UART_Transmit_DMA+0xf0>)
 80066ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	4a21      	ldr	r2, [pc, #132]	; (800677c <HAL_UART_Transmit_DMA+0xf4>)
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	4a20      	ldr	r2, [pc, #128]	; (8006780 <HAL_UART_Transmit_DMA+0xf8>)
 80066fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	2200      	movs	r2, #0
 8006706:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3304      	adds	r3, #4
 800671c:	461a      	mov	r2, r3
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	f7fc feb6 	bl	8003490 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800672c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3314      	adds	r3, #20
 800673c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	617b      	str	r3, [r7, #20]
   return(result);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006756:	627a      	str	r2, [r7, #36]	; 0x24
 8006758:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6a39      	ldr	r1, [r7, #32]
 800675c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	61fb      	str	r3, [r7, #28]
   return(result);
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e5      	bne.n	8006736 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e000      	b.n	8006770 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
  }
}
 8006770:	4618      	mov	r0, r3
 8006772:	3730      	adds	r7, #48	; 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	08006cf5 	.word	0x08006cf5
 800677c:	08006d8f 	.word	0x08006d8f
 8006780:	08006dab 	.word	0x08006dab

08006784 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b0ba      	sub	sp, #232	; 0xe8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10f      	bne.n	80067ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <HAL_UART_IRQHandler+0x66>
 80067d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fcde 	bl	80071a4 <UART_Receive_IT>
      return;
 80067e8:	e256      	b.n	8006c98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80de 	beq.w	80069b0 <HAL_UART_IRQHandler+0x22c>
 80067f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006804:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80d1 	beq.w	80069b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_UART_IRQHandler+0xae>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f043 0201 	orr.w	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <HAL_UART_IRQHandler+0xd2>
 800683e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f043 0202 	orr.w	r2, r3, #2
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <HAL_UART_IRQHandler+0xf6>
 8006862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0204 	orr.w	r2, r3, #4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d011      	beq.n	80068aa <HAL_UART_IRQHandler+0x126>
 8006886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f043 0208 	orr.w	r2, r3, #8
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 81ed 	beq.w	8006c8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <HAL_UART_IRQHandler+0x14e>
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc69 	bl	80071a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <HAL_UART_IRQHandler+0x17a>
 80068f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04f      	beq.n	800699e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb71 	bl	8006fe6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d141      	bne.n	8006996 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3314      	adds	r3, #20
 8006918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800692c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800693e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800694a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1d9      	bne.n	8006912 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	2b00      	cmp	r3, #0
 8006964:	d013      	beq.n	800698e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	4a7d      	ldr	r2, [pc, #500]	; (8006b60 <HAL_UART_IRQHandler+0x3dc>)
 800696c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	4618      	mov	r0, r3
 8006974:	f7fc fe54 	bl	8003620 <HAL_DMA_Abort_IT>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	e00e      	b.n	80069ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f99a 	bl	8006cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	e00a      	b.n	80069ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f996 	bl	8006cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	e006      	b.n	80069ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f992 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069aa:	e170      	b.n	8006c8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	bf00      	nop
    return;
 80069ae:	e16e      	b.n	8006c8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f040 814a 	bne.w	8006c4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8143 	beq.w	8006c4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 813c 	beq.w	8006c4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	60bb      	str	r3, [r7, #8]
 80069ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b40      	cmp	r3, #64	; 0x40
 80069f8:	f040 80b4 	bne.w	8006b64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8140 	beq.w	8006c92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	f080 8139 	bcs.w	8006c92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a32:	f000 8088 	beq.w	8006b46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	330c      	adds	r3, #12
 8006a5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1d9      	bne.n	8006a36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3314      	adds	r3, #20
 8006aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e1      	bne.n	8006a82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ae2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ae4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b28:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e3      	bne.n	8006b04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc fcfd 	bl	8003540 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8c0 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b5c:	e099      	b.n	8006c92 <HAL_UART_IRQHandler+0x50e>
 8006b5e:	bf00      	nop
 8006b60:	080070ad 	.word	0x080070ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 808b 	beq.w	8006c96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8086 	beq.w	8006c96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bae:	647a      	str	r2, [r7, #68]	; 0x44
 8006bb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e3      	bne.n	8006b8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006be6:	633a      	str	r2, [r7, #48]	; 0x30
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e3      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c2c:	61fa      	str	r2, [r7, #28]
 8006c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	617b      	str	r3, [r7, #20]
   return(result);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e3      	bne.n	8006c08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f848 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c4c:	e023      	b.n	8006c96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_UART_IRQHandler+0x4ea>
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa34 	bl	80070d4 <UART_Transmit_IT>
    return;
 8006c6c:	e014      	b.n	8006c98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <HAL_UART_IRQHandler+0x514>
 8006c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa74 	bl	8007174 <UART_EndTransmit_IT>
    return;
 8006c8c:	e004      	b.n	8006c98 <HAL_UART_IRQHandler+0x514>
    return;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_UART_IRQHandler+0x514>
      return;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_UART_IRQHandler+0x514>
      return;
 8006c96:	bf00      	nop
  }
}
 8006c98:	37e8      	adds	r7, #232	; 0xe8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b090      	sub	sp, #64	; 0x40
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d137      	bne.n	8006d80 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d12:	2200      	movs	r2, #0
 8006d14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	623b      	str	r3, [r7, #32]
   return(result);
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d36:	633a      	str	r2, [r7, #48]	; 0x30
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
 8006d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d6a:	61fa      	str	r2, [r7, #28]
 8006d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	617b      	str	r3, [r7, #20]
   return(result);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d7e:	e002      	b.n	8006d86 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d82:	f7ff ff8d 	bl	8006ca0 <HAL_UART_TxCpltCallback>
}
 8006d86:	bf00      	nop
 8006d88:	3740      	adds	r7, #64	; 0x40
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff ff89 	bl	8006cb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b80      	cmp	r3, #128	; 0x80
 8006dc8:	bf0c      	ite	eq
 8006dca:	2301      	moveq	r3, #1
 8006dcc:	2300      	movne	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b21      	cmp	r3, #33	; 0x21
 8006ddc:	d108      	bne.n	8006df0 <UART_DMAError+0x46>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006dea:	68b8      	ldr	r0, [r7, #8]
 8006dec:	f000 f8d3 	bl	8006f96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	bf0c      	ite	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	2300      	movne	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b22      	cmp	r3, #34	; 0x22
 8006e10:	d108      	bne.n	8006e24 <UART_DMAError+0x7a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e1e:	68b8      	ldr	r0, [r7, #8]
 8006e20:	f000 f8e1 	bl	8006fe6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	f043 0210 	orr.w	r2, r3, #16
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e30:	68b8      	ldr	r0, [r7, #8]
 8006e32:	f7ff ff49 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b090      	sub	sp, #64	; 0x40
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4e:	e050      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d04c      	beq.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5e:	f7fb fae3 	bl	8002428 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d241      	bcs.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e8e:	637a      	str	r2, [r7, #52]	; 0x34
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3314      	adds	r3, #20
 8006ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec2:	623a      	str	r2, [r7, #32]
 8006ec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	69f9      	ldr	r1, [r7, #28]
 8006ec8:	6a3a      	ldr	r2, [r7, #32]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e00f      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4013      	ands	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d09f      	beq.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3740      	adds	r7, #64	; 0x40
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	4613      	mov	r3, r2
 8006f26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2222      	movs	r2, #34	; 0x22
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695a      	ldr	r2, [r3, #20]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0220 	orr.w	r2, r2, #32
 8006f86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b089      	sub	sp, #36	; 0x24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	61ba      	str	r2, [r7, #24]
 8006fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	613b      	str	r3, [r7, #16]
   return(result);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e5      	bne.n	8006f9e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006fda:	bf00      	nop
 8006fdc:	3724      	adds	r7, #36	; 0x24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b095      	sub	sp, #84	; 0x54
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	330c      	adds	r3, #12
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	330c      	adds	r3, #12
 800700c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800700e:	643a      	str	r2, [r7, #64]	; 0x40
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e5      	bne.n	8006fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3314      	adds	r3, #20
 8007028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	61fb      	str	r3, [r7, #28]
   return(result);
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	64bb      	str	r3, [r7, #72]	; 0x48
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3314      	adds	r3, #20
 8007040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e5      	bne.n	8007022 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	2b01      	cmp	r3, #1
 800705c:	d119      	bne.n	8007092 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	60bb      	str	r3, [r7, #8]
   return(result);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f023 0310 	bic.w	r3, r3, #16
 8007074:	647b      	str	r3, [r7, #68]	; 0x44
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800707e:	61ba      	str	r2, [r7, #24]
 8007080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6979      	ldr	r1, [r7, #20]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	613b      	str	r3, [r7, #16]
   return(result);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070a0:	bf00      	nop
 80070a2:	3754      	adds	r7, #84	; 0x54
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fdfe 	bl	8006cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b21      	cmp	r3, #33	; 0x21
 80070e6:	d13e      	bne.n	8007166 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f0:	d114      	bne.n	800711c <UART_Transmit_IT+0x48>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d110      	bne.n	800711c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	1c9a      	adds	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	621a      	str	r2, [r3, #32]
 800711a:	e008      	b.n	800712e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	1c59      	adds	r1, r3, #1
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6211      	str	r1, [r2, #32]
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29b      	uxth	r3, r3
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4619      	mov	r1, r3
 800713c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10f      	bne.n	8007162 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007150:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007160:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e000      	b.n	8007168 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007166:	2302      	movs	r3, #2
  }
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fd83 	bl	8006ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08c      	sub	sp, #48	; 0x30
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b22      	cmp	r3, #34	; 0x22
 80071b6:	f040 80ab 	bne.w	8007310 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c2:	d117      	bne.n	80071f4 <UART_Receive_IT+0x50>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d113      	bne.n	80071f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	1c9a      	adds	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	629a      	str	r2, [r3, #40]	; 0x28
 80071f2:	e026      	b.n	8007242 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007206:	d007      	beq.n	8007218 <UART_Receive_IT+0x74>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <UART_Receive_IT+0x82>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e008      	b.n	8007238 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	b2da      	uxtb	r2, r3
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4619      	mov	r1, r3
 8007250:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007252:	2b00      	cmp	r3, #0
 8007254:	d15a      	bne.n	800730c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0220 	bic.w	r2, r2, #32
 8007264:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695a      	ldr	r2, [r3, #20]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	2b01      	cmp	r3, #1
 8007294:	d135      	bne.n	8007302 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	613b      	str	r3, [r7, #16]
   return(result);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f023 0310 	bic.w	r3, r3, #16
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072bc:	623a      	str	r2, [r7, #32]
 80072be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	69f9      	ldr	r1, [r7, #28]
 80072c2:	6a3a      	ldr	r2, [r7, #32]
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d10a      	bne.n	80072f4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fcee 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
 8007300:	e002      	b.n	8007308 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fa f9ac 	bl	8001660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e002      	b.n	8007312 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e000      	b.n	8007312 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3730      	adds	r7, #48	; 0x30
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800731c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007320:	b0c0      	sub	sp, #256	; 0x100
 8007322:	af00      	add	r7, sp, #0
 8007324:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	68d9      	ldr	r1, [r3, #12]
 800733a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	ea40 0301 	orr.w	r3, r0, r1
 8007344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	431a      	orrs	r2, r3
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	431a      	orrs	r2, r3
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007374:	f021 010c 	bic.w	r1, r1, #12
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007382:	430b      	orrs	r3, r1
 8007384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007396:	6999      	ldr	r1, [r3, #24]
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	ea40 0301 	orr.w	r3, r0, r1
 80073a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b8f      	ldr	r3, [pc, #572]	; (80075e8 <UART_SetConfig+0x2cc>)
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d005      	beq.n	80073bc <UART_SetConfig+0xa0>
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b8d      	ldr	r3, [pc, #564]	; (80075ec <UART_SetConfig+0x2d0>)
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d104      	bne.n	80073c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073bc:	f7fd f9e8 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 80073c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073c4:	e003      	b.n	80073ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073c6:	f7fd f9cf 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 80073ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d8:	f040 810c 	bne.w	80075f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	1891      	adds	r1, r2, r2
 80073f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80073f6:	415b      	adcs	r3, r3
 80073f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073fe:	4621      	mov	r1, r4
 8007400:	eb12 0801 	adds.w	r8, r2, r1
 8007404:	4629      	mov	r1, r5
 8007406:	eb43 0901 	adc.w	r9, r3, r1
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800741a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800741e:	4690      	mov	r8, r2
 8007420:	4699      	mov	r9, r3
 8007422:	4623      	mov	r3, r4
 8007424:	eb18 0303 	adds.w	r3, r8, r3
 8007428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800742c:	462b      	mov	r3, r5
 800742e:	eb49 0303 	adc.w	r3, r9, r3
 8007432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007442:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800744a:	460b      	mov	r3, r1
 800744c:	18db      	adds	r3, r3, r3
 800744e:	653b      	str	r3, [r7, #80]	; 0x50
 8007450:	4613      	mov	r3, r2
 8007452:	eb42 0303 	adc.w	r3, r2, r3
 8007456:	657b      	str	r3, [r7, #84]	; 0x54
 8007458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800745c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007460:	f7f8 ff06 	bl	8000270 <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4b61      	ldr	r3, [pc, #388]	; (80075f0 <UART_SetConfig+0x2d4>)
 800746a:	fba3 2302 	umull	r2, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	011c      	lsls	r4, r3, #4
 8007472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007476:	2200      	movs	r2, #0
 8007478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800747c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	1891      	adds	r1, r2, r2
 800748a:	64b9      	str	r1, [r7, #72]	; 0x48
 800748c:	415b      	adcs	r3, r3
 800748e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007494:	4641      	mov	r1, r8
 8007496:	eb12 0a01 	adds.w	sl, r2, r1
 800749a:	4649      	mov	r1, r9
 800749c:	eb43 0b01 	adc.w	fp, r3, r1
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074b4:	4692      	mov	sl, r2
 80074b6:	469b      	mov	fp, r3
 80074b8:	4643      	mov	r3, r8
 80074ba:	eb1a 0303 	adds.w	r3, sl, r3
 80074be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074c2:	464b      	mov	r3, r9
 80074c4:	eb4b 0303 	adc.w	r3, fp, r3
 80074c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074e0:	460b      	mov	r3, r1
 80074e2:	18db      	adds	r3, r3, r3
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
 80074e6:	4613      	mov	r3, r2
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	647b      	str	r3, [r7, #68]	; 0x44
 80074ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074f6:	f7f8 febb 	bl	8000270 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	4b3b      	ldr	r3, [pc, #236]	; (80075f0 <UART_SetConfig+0x2d4>)
 8007502:	fba3 2301 	umull	r2, r3, r3, r1
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	2264      	movs	r2, #100	; 0x64
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	1acb      	subs	r3, r1, r3
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007516:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <UART_SetConfig+0x2d4>)
 8007518:	fba3 2302 	umull	r2, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007524:	441c      	add	r4, r3
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752a:	2200      	movs	r2, #0
 800752c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007530:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	1891      	adds	r1, r2, r2
 800753e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007540:	415b      	adcs	r3, r3
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007548:	4641      	mov	r1, r8
 800754a:	1851      	adds	r1, r2, r1
 800754c:	6339      	str	r1, [r7, #48]	; 0x30
 800754e:	4649      	mov	r1, r9
 8007550:	414b      	adcs	r3, r1
 8007552:	637b      	str	r3, [r7, #52]	; 0x34
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007560:	4659      	mov	r1, fp
 8007562:	00cb      	lsls	r3, r1, #3
 8007564:	4651      	mov	r1, sl
 8007566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756a:	4651      	mov	r1, sl
 800756c:	00ca      	lsls	r2, r1, #3
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	4603      	mov	r3, r0
 8007574:	4642      	mov	r2, r8
 8007576:	189b      	adds	r3, r3, r2
 8007578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800757c:	464b      	mov	r3, r9
 800757e:	460a      	mov	r2, r1
 8007580:	eb42 0303 	adc.w	r3, r2, r3
 8007584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007594:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800759c:	460b      	mov	r3, r1
 800759e:	18db      	adds	r3, r3, r3
 80075a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a2:	4613      	mov	r3, r2
 80075a4:	eb42 0303 	adc.w	r3, r2, r3
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075b2:	f7f8 fe5d 	bl	8000270 <__aeabi_uldivmod>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <UART_SetConfig+0x2d4>)
 80075bc:	fba3 1302 	umull	r1, r3, r3, r2
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	2164      	movs	r1, #100	; 0x64
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	3332      	adds	r3, #50	; 0x32
 80075ce:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <UART_SetConfig+0x2d4>)
 80075d0:	fba2 2303 	umull	r2, r3, r2, r3
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	f003 0207 	and.w	r2, r3, #7
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4422      	add	r2, r4
 80075e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075e4:	e105      	b.n	80077f2 <UART_SetConfig+0x4d6>
 80075e6:	bf00      	nop
 80075e8:	40011000 	.word	0x40011000
 80075ec:	40011400 	.word	0x40011400
 80075f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007606:	4642      	mov	r2, r8
 8007608:	464b      	mov	r3, r9
 800760a:	1891      	adds	r1, r2, r2
 800760c:	6239      	str	r1, [r7, #32]
 800760e:	415b      	adcs	r3, r3
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
 8007612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007616:	4641      	mov	r1, r8
 8007618:	1854      	adds	r4, r2, r1
 800761a:	4649      	mov	r1, r9
 800761c:	eb43 0501 	adc.w	r5, r3, r1
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	00eb      	lsls	r3, r5, #3
 800762a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800762e:	00e2      	lsls	r2, r4, #3
 8007630:	4614      	mov	r4, r2
 8007632:	461d      	mov	r5, r3
 8007634:	4643      	mov	r3, r8
 8007636:	18e3      	adds	r3, r4, r3
 8007638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800763c:	464b      	mov	r3, r9
 800763e:	eb45 0303 	adc.w	r3, r5, r3
 8007642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007652:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007662:	4629      	mov	r1, r5
 8007664:	008b      	lsls	r3, r1, #2
 8007666:	4621      	mov	r1, r4
 8007668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800766c:	4621      	mov	r1, r4
 800766e:	008a      	lsls	r2, r1, #2
 8007670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007674:	f7f8 fdfc 	bl	8000270 <__aeabi_uldivmod>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4b60      	ldr	r3, [pc, #384]	; (8007800 <UART_SetConfig+0x4e4>)
 800767e:	fba3 2302 	umull	r2, r3, r3, r2
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	011c      	lsls	r4, r3, #4
 8007686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800768a:	2200      	movs	r2, #0
 800768c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007690:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	1891      	adds	r1, r2, r2
 800769e:	61b9      	str	r1, [r7, #24]
 80076a0:	415b      	adcs	r3, r3
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a8:	4641      	mov	r1, r8
 80076aa:	1851      	adds	r1, r2, r1
 80076ac:	6139      	str	r1, [r7, #16]
 80076ae:	4649      	mov	r1, r9
 80076b0:	414b      	adcs	r3, r1
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c0:	4659      	mov	r1, fp
 80076c2:	00cb      	lsls	r3, r1, #3
 80076c4:	4651      	mov	r1, sl
 80076c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ca:	4651      	mov	r1, sl
 80076cc:	00ca      	lsls	r2, r1, #3
 80076ce:	4610      	mov	r0, r2
 80076d0:	4619      	mov	r1, r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	4642      	mov	r2, r8
 80076d6:	189b      	adds	r3, r3, r2
 80076d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076dc:	464b      	mov	r3, r9
 80076de:	460a      	mov	r2, r1
 80076e0:	eb42 0303 	adc.w	r3, r2, r3
 80076e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007700:	4649      	mov	r1, r9
 8007702:	008b      	lsls	r3, r1, #2
 8007704:	4641      	mov	r1, r8
 8007706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800770a:	4641      	mov	r1, r8
 800770c:	008a      	lsls	r2, r1, #2
 800770e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007712:	f7f8 fdad 	bl	8000270 <__aeabi_uldivmod>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4b39      	ldr	r3, [pc, #228]	; (8007800 <UART_SetConfig+0x4e4>)
 800771c:	fba3 1302 	umull	r1, r3, r3, r2
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	2164      	movs	r1, #100	; 0x64
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	3332      	adds	r3, #50	; 0x32
 800772e:	4a34      	ldr	r2, [pc, #208]	; (8007800 <UART_SetConfig+0x4e4>)
 8007730:	fba2 2303 	umull	r2, r3, r2, r3
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800773a:	441c      	add	r4, r3
 800773c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007740:	2200      	movs	r2, #0
 8007742:	673b      	str	r3, [r7, #112]	; 0x70
 8007744:	677a      	str	r2, [r7, #116]	; 0x74
 8007746:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800774a:	4642      	mov	r2, r8
 800774c:	464b      	mov	r3, r9
 800774e:	1891      	adds	r1, r2, r2
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	415b      	adcs	r3, r3
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800775a:	4641      	mov	r1, r8
 800775c:	1851      	adds	r1, r2, r1
 800775e:	6039      	str	r1, [r7, #0]
 8007760:	4649      	mov	r1, r9
 8007762:	414b      	adcs	r3, r1
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007772:	4659      	mov	r1, fp
 8007774:	00cb      	lsls	r3, r1, #3
 8007776:	4651      	mov	r1, sl
 8007778:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800777c:	4651      	mov	r1, sl
 800777e:	00ca      	lsls	r2, r1, #3
 8007780:	4610      	mov	r0, r2
 8007782:	4619      	mov	r1, r3
 8007784:	4603      	mov	r3, r0
 8007786:	4642      	mov	r2, r8
 8007788:	189b      	adds	r3, r3, r2
 800778a:	66bb      	str	r3, [r7, #104]	; 0x68
 800778c:	464b      	mov	r3, r9
 800778e:	460a      	mov	r2, r1
 8007790:	eb42 0303 	adc.w	r3, r2, r3
 8007794:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	663b      	str	r3, [r7, #96]	; 0x60
 80077a0:	667a      	str	r2, [r7, #100]	; 0x64
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077ae:	4649      	mov	r1, r9
 80077b0:	008b      	lsls	r3, r1, #2
 80077b2:	4641      	mov	r1, r8
 80077b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077b8:	4641      	mov	r1, r8
 80077ba:	008a      	lsls	r2, r1, #2
 80077bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077c0:	f7f8 fd56 	bl	8000270 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <UART_SetConfig+0x4e4>)
 80077ca:	fba3 1302 	umull	r1, r3, r3, r2
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	2164      	movs	r1, #100	; 0x64
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	3332      	adds	r3, #50	; 0x32
 80077dc:	4a08      	ldr	r2, [pc, #32]	; (8007800 <UART_SetConfig+0x4e4>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	f003 020f 	and.w	r2, r3, #15
 80077e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4422      	add	r2, r4
 80077f0:	609a      	str	r2, [r3, #8]
}
 80077f2:	bf00      	nop
 80077f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077f8:	46bd      	mov	sp, r7
 80077fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077fe:	bf00      	nop
 8007800:	51eb851f 	.word	0x51eb851f

08007804 <__NVIC_SetPriority>:
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007814:	2b00      	cmp	r3, #0
 8007816:	db0a      	blt.n	800782e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	490c      	ldr	r1, [pc, #48]	; (8007850 <__NVIC_SetPriority+0x4c>)
 800781e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007822:	0112      	lsls	r2, r2, #4
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	440b      	add	r3, r1
 8007828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800782c:	e00a      	b.n	8007844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	4908      	ldr	r1, [pc, #32]	; (8007854 <__NVIC_SetPriority+0x50>)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	3b04      	subs	r3, #4
 800783c:	0112      	lsls	r2, r2, #4
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	440b      	add	r3, r1
 8007842:	761a      	strb	r2, [r3, #24]
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	e000e100 	.word	0xe000e100
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800785c:	4b05      	ldr	r3, [pc, #20]	; (8007874 <SysTick_Handler+0x1c>)
 800785e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007860:	f002 f844 	bl	80098ec <xTaskGetSchedulerState>
 8007864:	4603      	mov	r3, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	d001      	beq.n	800786e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800786a:	f003 f82d 	bl	800a8c8 <xPortSysTickHandler>
  }
}
 800786e:	bf00      	nop
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	e000e010 	.word	0xe000e010

08007878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800787c:	2100      	movs	r1, #0
 800787e:	f06f 0004 	mvn.w	r0, #4
 8007882:	f7ff ffbf 	bl	8007804 <__NVIC_SetPriority>
#endif
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007892:	f3ef 8305 	mrs	r3, IPSR
 8007896:	603b      	str	r3, [r7, #0]
  return(result);
 8007898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800789e:	f06f 0305 	mvn.w	r3, #5
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e00c      	b.n	80078c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <osKernelInitialize+0x44>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078ae:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <osKernelInitialize+0x44>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	607b      	str	r3, [r7, #4]
 80078b8:	e002      	b.n	80078c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078c0:	687b      	ldr	r3, [r7, #4]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	200008f4 	.word	0x200008f4

080078d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078da:	f3ef 8305 	mrs	r3, IPSR
 80078de:	603b      	str	r3, [r7, #0]
  return(result);
 80078e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80078e6:	f06f 0305 	mvn.w	r3, #5
 80078ea:	607b      	str	r3, [r7, #4]
 80078ec:	e010      	b.n	8007910 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <osKernelStart+0x48>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d109      	bne.n	800790a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078f6:	f7ff ffbf 	bl	8007878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <osKernelStart+0x48>)
 80078fc:	2202      	movs	r2, #2
 80078fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007900:	f001 fb86 	bl	8009010 <vTaskStartScheduler>
      stat = osOK;
 8007904:	2300      	movs	r3, #0
 8007906:	607b      	str	r3, [r7, #4]
 8007908:	e002      	b.n	8007910 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007910:	687b      	ldr	r3, [r7, #4]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200008f4 	.word	0x200008f4

08007920 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007926:	f3ef 8305 	mrs	r3, IPSR
 800792a:	603b      	str	r3, [r7, #0]
  return(result);
 800792c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007932:	f001 fc99 	bl	8009268 <xTaskGetTickCountFromISR>
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	e002      	b.n	8007940 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800793a:	f001 fc85 	bl	8009248 <xTaskGetTickCount>
 800793e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007940:	687b      	ldr	r3, [r7, #4]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800794a:	b580      	push	{r7, lr}
 800794c:	b08e      	sub	sp, #56	; 0x38
 800794e:	af04      	add	r7, sp, #16
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800795a:	f3ef 8305 	mrs	r3, IPSR
 800795e:	617b      	str	r3, [r7, #20]
  return(result);
 8007960:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007962:	2b00      	cmp	r3, #0
 8007964:	d17e      	bne.n	8007a64 <osThreadNew+0x11a>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d07b      	beq.n	8007a64 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800796c:	2380      	movs	r3, #128	; 0x80
 800796e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007970:	2318      	movs	r3, #24
 8007972:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007974:	2300      	movs	r3, #0
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d045      	beq.n	8007a10 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <osThreadNew+0x48>
        name = attr->name;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <osThreadNew+0x6e>
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2b38      	cmp	r3, #56	; 0x38
 80079aa:	d805      	bhi.n	80079b8 <osThreadNew+0x6e>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <osThreadNew+0x72>
        return (NULL);
 80079b8:	2300      	movs	r3, #0
 80079ba:	e054      	b.n	8007a66 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	089b      	lsrs	r3, r3, #2
 80079ca:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00e      	beq.n	80079f2 <osThreadNew+0xa8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2bbb      	cmp	r3, #187	; 0xbb
 80079da:	d90a      	bls.n	80079f2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d006      	beq.n	80079f2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <osThreadNew+0xa8>
        mem = 1;
 80079ec:	2301      	movs	r3, #1
 80079ee:	61bb      	str	r3, [r7, #24]
 80079f0:	e010      	b.n	8007a14 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10c      	bne.n	8007a14 <osThreadNew+0xca>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d108      	bne.n	8007a14 <osThreadNew+0xca>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <osThreadNew+0xca>
          mem = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e001      	b.n	8007a14 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d110      	bne.n	8007a3c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a22:	9202      	str	r2, [sp, #8]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f001 f883 	bl	8008b3c <xTaskCreateStatic>
 8007a36:	4603      	mov	r3, r0
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	e013      	b.n	8007a64 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d110      	bne.n	8007a64 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	f107 0310 	add.w	r3, r7, #16
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f001 f8ce 	bl	8008bf6 <xTaskCreate>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d001      	beq.n	8007a64 <osThreadNew+0x11a>
            hTask = NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a64:	693b      	ldr	r3, [r7, #16]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3728      	adds	r7, #40	; 0x28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <osThreadFlagsSet+0x1a>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da03      	bge.n	8007a92 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8007a8a:	f06f 0303 	mvn.w	r3, #3
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e035      	b.n	8007afe <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a98:	f3ef 8305 	mrs	r3, IPSR
 8007a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a9e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01f      	beq.n	8007ae4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007aa8:	f107 0308 	add.w	r3, r7, #8
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6978      	ldr	r0, [r7, #20]
 8007ab6:	f002 f8c3 	bl	8009c40 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007aba:	f107 030c 	add.w	r3, r7, #12
 8007abe:	2200      	movs	r2, #0
 8007ac0:	9200      	str	r2, [sp, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6978      	ldr	r0, [r7, #20]
 8007ac8:	f002 f8ba 	bl	8009c40 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d015      	beq.n	8007afe <osThreadFlagsSet+0x8e>
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <osThreadFlagsSet+0x98>)
 8007ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	e00c      	b.n	8007afe <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6978      	ldr	r0, [r7, #20]
 8007aec:	f001 ffea 	bl	8009ac4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	2200      	movs	r2, #0
 8007af6:	2100      	movs	r1, #0
 8007af8:	6978      	ldr	r0, [r7, #20]
 8007afa:	f001 ffe3 	bl	8009ac4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b18:	f3ef 8305 	mrs	r3, IPSR
 8007b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b1e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8007b24:	f06f 0305 	mvn.w	r3, #5
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b2a:	e06b      	b.n	8007c04 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da03      	bge.n	8007b3a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8007b32:	f06f 0303 	mvn.w	r3, #3
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b38:	e064      	b.n	8007c04 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b48:	e001      	b.n	8007b4e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8007b56:	f001 fb77 	bl	8009248 <xTaskGetTickCount>
 8007b5a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007b5c:	f107 0210 	add.w	r2, r7, #16
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b64:	2000      	movs	r0, #0
 8007b66:	f001 ff4d 	bl	8009a04 <xTaskNotifyWait>
 8007b6a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d137      	bne.n	8007be2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8007b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4013      	ands	r3, r2
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00c      	beq.n	8007ba6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	4013      	ands	r3, r2
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d032      	beq.n	8007bfe <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10f      	bne.n	8007bbe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007b9e:	f06f 0302 	mvn.w	r3, #2
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007ba4:	e02e      	b.n	8007c04 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d128      	bne.n	8007c02 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d103      	bne.n	8007bbe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007bb6:	f06f 0302 	mvn.w	r3, #2
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007bbc:	e022      	b.n	8007c04 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007bbe:	f001 fb43 	bl	8009248 <xTaskGetTickCount>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d902      	bls.n	8007bd8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd6:	e00e      	b.n	8007bf6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8007bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
 8007be0:	e009      	b.n	8007bf6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d103      	bne.n	8007bf0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8007be8:	f06f 0302 	mvn.w	r3, #2
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bee:	e002      	b.n	8007bf6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007bf0:	f06f 0301 	mvn.w	r3, #1
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1af      	bne.n	8007b5c <osThreadFlagsWait+0x50>
 8007bfc:	e002      	b.n	8007c04 <osThreadFlagsWait+0xf8>
            break;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <osThreadFlagsWait+0xf8>
            break;
 8007c02:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3730      	adds	r7, #48	; 0x30
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c16:	f3ef 8305 	mrs	r3, IPSR
 8007c1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <osDelay+0x1c>
    stat = osErrorISR;
 8007c22:	f06f 0305 	mvn.w	r3, #5
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e007      	b.n	8007c3a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 f9b7 	bl	8008fa8 <vTaskDelay>
    }
  }

  return (stat);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4c:	f3ef 8305 	mrs	r3, IPSR
 8007c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c52:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8007c58:	f06f 0305 	mvn.w	r3, #5
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	e019      	b.n	8007c94 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8007c64:	f001 faf0 	bl	8009248 <xTaskGetTickCount>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <osDelayUntil+0x4a>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db06      	blt.n	8007c8e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8007c80:	f107 0308 	add.w	r3, r7, #8
 8007c84:	6939      	ldr	r1, [r7, #16]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 f910 	bl	8008eac <vTaskDelayUntil>
 8007c8c:	e002      	b.n	8007c94 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007c8e:	f06f 0303 	mvn.w	r3, #3
 8007c92:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007c94:	697b      	ldr	r3, [r7, #20]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b08a      	sub	sp, #40	; 0x28
 8007ca2:	af02      	add	r7, sp, #8
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cae:	f3ef 8305 	mrs	r3, IPSR
 8007cb2:	613b      	str	r3, [r7, #16]
  return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d175      	bne.n	8007da6 <osSemaphoreNew+0x108>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d072      	beq.n	8007da6 <osSemaphoreNew+0x108>
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d86e      	bhi.n	8007da6 <osSemaphoreNew+0x108>
    mem = -1;
 8007cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ccc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d006      	beq.n	8007cea <osSemaphoreNew+0x4c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	2b4f      	cmp	r3, #79	; 0x4f
 8007ce2:	d902      	bls.n	8007cea <osSemaphoreNew+0x4c>
        mem = 1;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e00c      	b.n	8007d04 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d108      	bne.n	8007d04 <osSemaphoreNew+0x66>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <osSemaphoreNew+0x66>
          mem = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	e001      	b.n	8007d04 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d04c      	beq.n	8007da6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d128      	bne.n	8007d64 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10a      	bne.n	8007d2e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	9200      	str	r2, [sp, #0]
 8007d20:	2200      	movs	r2, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	2001      	movs	r0, #1
 8007d26:	f000 f993 	bl	8008050 <xQueueGenericCreateStatic>
 8007d2a:	61f8      	str	r0, [r7, #28]
 8007d2c:	e005      	b.n	8007d3a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007d2e:	2203      	movs	r2, #3
 8007d30:	2100      	movs	r1, #0
 8007d32:	2001      	movs	r0, #1
 8007d34:	f000 fa04 	bl	8008140 <xQueueGenericCreate>
 8007d38:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d022      	beq.n	8007d86 <osSemaphoreNew+0xe8>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01f      	beq.n	8007d86 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007d46:	2300      	movs	r3, #0
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	69f8      	ldr	r0, [r7, #28]
 8007d4e:	f000 fabf 	bl	80082d0 <xQueueGenericSend>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d016      	beq.n	8007d86 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007d58:	69f8      	ldr	r0, [r7, #28]
 8007d5a:	f000 fd33 	bl	80087c4 <vQueueDelete>
            hSemaphore = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	e010      	b.n	8007d86 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d108      	bne.n	8007d7c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 fa41 	bl	80081fa <xQueueCreateCountingSemaphoreStatic>
 8007d78:	61f8      	str	r0, [r7, #28]
 8007d7a:	e004      	b.n	8007d86 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fa72 	bl	8008268 <xQueueCreateCountingSemaphore>
 8007d84:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00c      	beq.n	8007da6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e001      	b.n	8007d9e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007d9e:	6979      	ldr	r1, [r7, #20]
 8007da0:	69f8      	ldr	r0, [r7, #28]
 8007da2:	f000 fe43 	bl	8008a2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007da6:	69fb      	ldr	r3, [r7, #28]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a07      	ldr	r2, [pc, #28]	; (8007ddc <vApplicationGetIdleTaskMemory+0x2c>)
 8007dc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4a06      	ldr	r2, [pc, #24]	; (8007de0 <vApplicationGetIdleTaskMemory+0x30>)
 8007dc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2280      	movs	r2, #128	; 0x80
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	200008f8 	.word	0x200008f8
 8007de0:	200009b4 	.word	0x200009b4

08007de4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a07      	ldr	r2, [pc, #28]	; (8007e10 <vApplicationGetTimerTaskMemory+0x2c>)
 8007df4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4a06      	ldr	r2, [pc, #24]	; (8007e14 <vApplicationGetTimerTaskMemory+0x30>)
 8007dfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e02:	601a      	str	r2, [r3, #0]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20000bb4 	.word	0x20000bb4
 8007e14:	20000c70 	.word	0x20000c70

08007e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f103 0208 	add.w	r2, r3, #8
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f103 0208 	add.w	r2, r3, #8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 0208 	add.w	r2, r3, #8
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
}
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d103      	bne.n	8007eda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e00c      	b.n	8007ef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3308      	adds	r3, #8
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e002      	b.n	8007ee8 <vListInsert+0x2e>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d2f6      	bcs.n	8007ee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6892      	ldr	r2, [r2, #8]
 8007f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6852      	ldr	r2, [r2, #4]
 8007f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d103      	bne.n	8007f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	1e5a      	subs	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007faa:	f002 fbfb 	bl	800a7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fba:	fb01 f303 	mul.w	r3, r1, r3
 8007fbe:	441a      	add	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fe0:	fb01 f303 	mul.w	r3, r1, r3
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	22ff      	movs	r2, #255	; 0xff
 8007fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	22ff      	movs	r2, #255	; 0xff
 8007ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d114      	bne.n	800802a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01a      	beq.n	800803e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3310      	adds	r3, #16
 800800c:	4618      	mov	r0, r3
 800800e:	f001 faab 	bl	8009568 <xTaskRemoveFromEventList>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d012      	beq.n	800803e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008018:	4b0c      	ldr	r3, [pc, #48]	; (800804c <xQueueGenericReset+0xcc>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	e009      	b.n	800803e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3310      	adds	r3, #16
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fef2 	bl	8007e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3324      	adds	r3, #36	; 0x24
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff feed 	bl	8007e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800803e:	f002 fbe1 	bl	800a804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008042:	2301      	movs	r3, #1
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08e      	sub	sp, #56	; 0x38
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <xQueueGenericCreateStatic+0x52>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <xQueueGenericCreateStatic+0x56>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <xQueueGenericCreateStatic+0x58>
 80080a6:	2300      	movs	r3, #0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	623b      	str	r3, [r7, #32]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <xQueueGenericCreateStatic+0x7e>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <xQueueGenericCreateStatic+0x82>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e000      	b.n	80080d4 <xQueueGenericCreateStatic+0x84>
 80080d2:	2300      	movs	r3, #0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61fb      	str	r3, [r7, #28]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080ee:	2350      	movs	r3, #80	; 0x50
 80080f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b50      	cmp	r3, #80	; 0x50
 80080f6:	d00a      	beq.n	800810e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	61bb      	str	r3, [r7, #24]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800810e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008122:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	4613      	mov	r3, r2
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 f83f 	bl	80081b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3730      	adds	r7, #48	; 0x30
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08a      	sub	sp, #40	; 0x28
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	613b      	str	r3, [r7, #16]
}
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	3350      	adds	r3, #80	; 0x50
 8008178:	4618      	mov	r0, r3
 800817a:	f002 fc35 	bl	800a9e8 <pvPortMalloc>
 800817e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3350      	adds	r3, #80	; 0x50
 800818e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008198:	79fa      	ldrb	r2, [r7, #7]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4613      	mov	r3, r2
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f805 	bl	80081b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081aa:	69bb      	ldr	r3, [r7, #24]
	}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e002      	b.n	80081d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081e2:	2101      	movs	r1, #1
 80081e4:	69b8      	ldr	r0, [r7, #24]
 80081e6:	f7ff fecb 	bl	8007f80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b08a      	sub	sp, #40	; 0x28
 80081fe:	af02      	add	r7, sp, #8
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61bb      	str	r3, [r7, #24]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	429a      	cmp	r2, r3
 8008228:	d90a      	bls.n	8008240 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	617b      	str	r3, [r7, #20]
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008240:	2302      	movs	r3, #2
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff ff00 	bl	8008050 <xQueueGenericCreateStatic>
 8008250:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800825e:	69fb      	ldr	r3, [r7, #28]
	}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	613b      	str	r3, [r7, #16]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d90a      	bls.n	80082ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60fb      	str	r3, [r7, #12]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082ac:	2202      	movs	r2, #2
 80082ae:	2100      	movs	r1, #0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff ff45 	bl	8008140 <xQueueGenericCreate>
 80082b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082c4:	697b      	ldr	r3, [r7, #20]
	}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08e      	sub	sp, #56	; 0x38
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082de:	2300      	movs	r3, #0
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <xQueueGenericSend+0x32>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <xQueueGenericSend+0x40>
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <xQueueGenericSend+0x44>
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <xQueueGenericSend+0x46>
 8008314:	2300      	movs	r3, #0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <xQueueGenericSend+0x60>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d103      	bne.n	800833e <xQueueGenericSend+0x6e>
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <xQueueGenericSend+0x72>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <xQueueGenericSend+0x74>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10a      	bne.n	800835e <xQueueGenericSend+0x8e>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	623b      	str	r3, [r7, #32]
}
 800835a:	bf00      	nop
 800835c:	e7fe      	b.n	800835c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800835e:	f001 fac5 	bl	80098ec <xTaskGetSchedulerState>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <xQueueGenericSend+0x9e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <xQueueGenericSend+0xa2>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <xQueueGenericSend+0xa4>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xQueueGenericSend+0xbe>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	61fb      	str	r3, [r7, #28]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800838e:	f002 fa09 	bl	800a7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <xQueueGenericSend+0xd4>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d129      	bne.n	80083f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083aa:	f000 fa2e 	bl	800880a <prvCopyDataToQueue>
 80083ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d010      	beq.n	80083da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	3324      	adds	r3, #36	; 0x24
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 f8d3 	bl	8009568 <xTaskRemoveFromEventList>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d013      	beq.n	80083f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083c8:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <xQueueGenericSend+0x1f8>)
 80083ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	e00a      	b.n	80083f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083e0:	4b39      	ldr	r3, [pc, #228]	; (80084c8 <xQueueGenericSend+0x1f8>)
 80083e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083f0:	f002 fa08 	bl	800a804 <vPortExitCritical>
				return pdPASS;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e063      	b.n	80084c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d103      	bne.n	8008406 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083fe:	f002 fa01 	bl	800a804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008402:	2300      	movs	r3, #0
 8008404:	e05c      	b.n	80084c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	4618      	mov	r0, r3
 8008412:	f001 f90d 	bl	8009630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008416:	2301      	movs	r3, #1
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800841a:	f002 f9f3 	bl	800a804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800841e:	f000 fe67 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008422:	f002 f9bf 	bl	800a7a4 <vPortEnterCritical>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800842c:	b25b      	sxtb	r3, r3
 800842e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008432:	d103      	bne.n	800843c <xQueueGenericSend+0x16c>
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008442:	b25b      	sxtb	r3, r3
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d103      	bne.n	8008452 <xQueueGenericSend+0x182>
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008452:	f002 f9d7 	bl	800a804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008456:	1d3a      	adds	r2, r7, #4
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	4611      	mov	r1, r2
 800845e:	4618      	mov	r0, r3
 8008460:	f001 f8fc 	bl	800965c <xTaskCheckForTimeOut>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d124      	bne.n	80084b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800846a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846c:	f000 fac5 	bl	80089fa <prvIsQueueFull>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d018      	beq.n	80084a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	3310      	adds	r3, #16
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f001 f822 	bl	80094c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008486:	f000 fa50 	bl	800892a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800848a:	f000 fe3f 	bl	800910c <xTaskResumeAll>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	f47f af7c 	bne.w	800838e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <xQueueGenericSend+0x1f8>)
 8008498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	e772      	b.n	800838e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084aa:	f000 fa3e 	bl	800892a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ae:	f000 fe2d 	bl	800910c <xTaskResumeAll>
 80084b2:	e76c      	b.n	800838e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b6:	f000 fa38 	bl	800892a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ba:	f000 fe27 	bl	800910c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3738      	adds	r7, #56	; 0x38
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b090      	sub	sp, #64	; 0x40
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <xQueueGenericSendFromISR+0x3c>
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <xQueueGenericSendFromISR+0x40>
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <xQueueGenericSendFromISR+0x42>
 800850c:	2300      	movs	r3, #0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d103      	bne.n	8008536 <xQueueGenericSendFromISR+0x6a>
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <xQueueGenericSendFromISR+0x6e>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xQueueGenericSendFromISR+0x70>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	623b      	str	r3, [r7, #32]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008556:	f002 fa07 	bl	800a968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800855a:	f3ef 8211 	mrs	r2, BASEPRI
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61fa      	str	r2, [r7, #28]
 8008570:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008572:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	429a      	cmp	r2, r3
 8008580:	d302      	bcc.n	8008588 <xQueueGenericSendFromISR+0xbc>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d12f      	bne.n	80085e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800859e:	f000 f934 	bl	800880a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80085a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085aa:	d112      	bne.n	80085d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d016      	beq.n	80085e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	3324      	adds	r3, #36	; 0x24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 ffd5 	bl	8009568 <xTaskRemoveFromEventList>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e007      	b.n	80085e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085d6:	3301      	adds	r3, #1
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	b25a      	sxtb	r2, r3
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085e2:	2301      	movs	r3, #1
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80085e6:	e001      	b.n	80085ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3740      	adds	r7, #64	; 0x40
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08c      	sub	sp, #48	; 0x30
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008610:	2300      	movs	r3, #0
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <xQueueReceive+0x30>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	623b      	str	r3, [r7, #32]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <xQueueReceive+0x3e>
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <xQueueReceive+0x42>
 8008642:	2301      	movs	r3, #1
 8008644:	e000      	b.n	8008648 <xQueueReceive+0x44>
 8008646:	2300      	movs	r3, #0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xQueueReceive+0x5e>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	61fb      	str	r3, [r7, #28]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008662:	f001 f943 	bl	80098ec <xTaskGetSchedulerState>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d102      	bne.n	8008672 <xQueueReceive+0x6e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <xQueueReceive+0x72>
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <xQueueReceive+0x74>
 8008676:	2300      	movs	r3, #0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueReceive+0x8e>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	61bb      	str	r3, [r7, #24]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008692:	f002 f887 	bl	800a7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01f      	beq.n	80086e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	f000 f91a 	bl	80088de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	1e5a      	subs	r2, r3, #1
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00f      	beq.n	80086da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	3310      	adds	r3, #16
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 ff52 	bl	8009568 <xTaskRemoveFromEventList>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086ca:	4b3d      	ldr	r3, [pc, #244]	; (80087c0 <xQueueReceive+0x1bc>)
 80086cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086da:	f002 f893 	bl	800a804 <vPortExitCritical>
				return pdPASS;
 80086de:	2301      	movs	r3, #1
 80086e0:	e069      	b.n	80087b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d103      	bne.n	80086f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086e8:	f002 f88c 	bl	800a804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e062      	b.n	80087b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086f6:	f107 0310 	add.w	r3, r7, #16
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 ff98 	bl	8009630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008704:	f002 f87e 	bl	800a804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008708:	f000 fcf2 	bl	80090f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800870c:	f002 f84a 	bl	800a7a4 <vPortEnterCritical>
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008716:	b25b      	sxtb	r3, r3
 8008718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871c:	d103      	bne.n	8008726 <xQueueReceive+0x122>
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800872c:	b25b      	sxtb	r3, r3
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d103      	bne.n	800873c <xQueueReceive+0x138>
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800873c:	f002 f862 	bl	800a804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008740:	1d3a      	adds	r2, r7, #4
 8008742:	f107 0310 	add.w	r3, r7, #16
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f000 ff87 	bl	800965c <xTaskCheckForTimeOut>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d123      	bne.n	800879c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008756:	f000 f93a 	bl	80089ce <prvIsQueueEmpty>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d017      	beq.n	8008790 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	3324      	adds	r3, #36	; 0x24
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fead 	bl	80094c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800876e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008770:	f000 f8db 	bl	800892a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008774:	f000 fcca 	bl	800910c <xTaskResumeAll>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d189      	bne.n	8008692 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800877e:	4b10      	ldr	r3, [pc, #64]	; (80087c0 <xQueueReceive+0x1bc>)
 8008780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	e780      	b.n	8008692 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008792:	f000 f8ca 	bl	800892a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008796:	f000 fcb9 	bl	800910c <xTaskResumeAll>
 800879a:	e77a      	b.n	8008692 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800879c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879e:	f000 f8c4 	bl	800892a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087a2:	f000 fcb3 	bl	800910c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a8:	f000 f911 	bl	80089ce <prvIsQueueEmpty>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f43f af6f 	beq.w	8008692 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3730      	adds	r7, #48	; 0x30
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10a      	bne.n	80087ec <vQueueDelete+0x28>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	60bb      	str	r3, [r7, #8]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f947 	bl	8008a80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f002 f9bf 	bl	800ab80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10d      	bne.n	8008844 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d14d      	bne.n	80088cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	4618      	mov	r0, r3
 8008836:	f001 f877 	bl	8009928 <xTaskPriorityDisinherit>
 800883a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	e043      	b.n	80088cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d119      	bne.n	800887e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6858      	ldr	r0, [r3, #4]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	461a      	mov	r2, r3
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	f002 fbd4 	bl	800b002 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	441a      	add	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	429a      	cmp	r2, r3
 8008872:	d32b      	bcc.n	80088cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	605a      	str	r2, [r3, #4]
 800887c:	e026      	b.n	80088cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68d8      	ldr	r0, [r3, #12]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	461a      	mov	r2, r3
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	f002 fbba 	bl	800b002 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	425b      	negs	r3, r3
 8008898:	441a      	add	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d207      	bcs.n	80088ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	425b      	negs	r3, r3
 80088b4:	441a      	add	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d105      	bne.n	80088cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088d4:	697b      	ldr	r3, [r7, #20]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d018      	beq.n	8008922 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68da      	ldr	r2, [r3, #12]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	441a      	add	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	429a      	cmp	r2, r3
 8008908:	d303      	bcc.n	8008912 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68d9      	ldr	r1, [r3, #12]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	461a      	mov	r2, r3
 800891c:	6838      	ldr	r0, [r7, #0]
 800891e:	f002 fb70 	bl	800b002 <memcpy>
	}
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008932:	f001 ff37 	bl	800a7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800893c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800893e:	e011      	b.n	8008964 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	d012      	beq.n	800896e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3324      	adds	r3, #36	; 0x24
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fe0b 	bl	8009568 <xTaskRemoveFromEventList>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008958:	f000 fee2 	bl	8009720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	3b01      	subs	r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008968:	2b00      	cmp	r3, #0
 800896a:	dce9      	bgt.n	8008940 <prvUnlockQueue+0x16>
 800896c:	e000      	b.n	8008970 <prvUnlockQueue+0x46>
					break;
 800896e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	22ff      	movs	r2, #255	; 0xff
 8008974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008978:	f001 ff44 	bl	800a804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800897c:	f001 ff12 	bl	800a7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008986:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008988:	e011      	b.n	80089ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d012      	beq.n	80089b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3310      	adds	r3, #16
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fde6 	bl	8009568 <xTaskRemoveFromEventList>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089a2:	f000 febd 	bl	8009720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dce9      	bgt.n	800898a <prvUnlockQueue+0x60>
 80089b6:	e000      	b.n	80089ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	22ff      	movs	r2, #255	; 0xff
 80089be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089c2:	f001 ff1f 	bl	800a804 <vPortExitCritical>
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d6:	f001 fee5 	bl	800a7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	e001      	b.n	80089ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ec:	f001 ff0a 	bl	800a804 <vPortExitCritical>

	return xReturn;
 80089f0:	68fb      	ldr	r3, [r7, #12]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a02:	f001 fecf 	bl	800a7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d102      	bne.n	8008a18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e001      	b.n	8008a1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a1c:	f001 fef2 	bl	800a804 <vPortExitCritical>

	return xReturn;
 8008a20:	68fb      	ldr	r3, [r7, #12]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	e014      	b.n	8008a66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a3c:	4a0f      	ldr	r2, [pc, #60]	; (8008a7c <vQueueAddToRegistry+0x50>)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10b      	bne.n	8008a60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a48:	490c      	ldr	r1, [pc, #48]	; (8008a7c <vQueueAddToRegistry+0x50>)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a52:	4a0a      	ldr	r2, [pc, #40]	; (8008a7c <vQueueAddToRegistry+0x50>)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	4413      	add	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a5e:	e006      	b.n	8008a6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b07      	cmp	r3, #7
 8008a6a:	d9e7      	bls.n	8008a3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20001070 	.word	0x20001070

08008a80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e016      	b.n	8008abc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a8e:	4a10      	ldr	r2, [pc, #64]	; (8008ad0 <vQueueUnregisterQueue+0x50>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d10b      	bne.n	8008ab6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ad0 <vQueueUnregisterQueue+0x50>)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008aa8:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <vQueueUnregisterQueue+0x50>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	4413      	add	r3, r2
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	605a      	str	r2, [r3, #4]
				break;
 8008ab4:	e006      	b.n	8008ac4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b07      	cmp	r3, #7
 8008ac0:	d9e5      	bls.n	8008a8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	20001070 	.word	0x20001070

08008ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ae4:	f001 fe5e 	bl	800a7a4 <vPortEnterCritical>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aee:	b25b      	sxtb	r3, r3
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af4:	d103      	bne.n	8008afe <vQueueWaitForMessageRestricted+0x2a>
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b04:	b25b      	sxtb	r3, r3
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d103      	bne.n	8008b14 <vQueueWaitForMessageRestricted+0x40>
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b14:	f001 fe76 	bl	800a804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	3324      	adds	r3, #36	; 0x24
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fcf1 	bl	8009510 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b2e:	6978      	ldr	r0, [r7, #20]
 8008b30:	f7ff fefb 	bl	800892a <prvUnlockQueue>
	}
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	623b      	str	r3, [r7, #32]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	61fb      	str	r3, [r7, #28]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b82:	23bc      	movs	r3, #188	; 0xbc
 8008b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2bbc      	cmp	r3, #188	; 0xbc
 8008b8a:	d00a      	beq.n	8008ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	61bb      	str	r3, [r7, #24]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d01e      	beq.n	8008be8 <xTaskCreateStatic+0xac>
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01b      	beq.n	8008be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f850 	bl	8008c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008be2:	f000 f8f3 	bl	8008dcc <prvAddNewTaskToReadyList>
 8008be6:	e001      	b.n	8008bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bec:	697b      	ldr	r3, [r7, #20]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3728      	adds	r7, #40	; 0x28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b08c      	sub	sp, #48	; 0x30
 8008bfa:	af04      	add	r7, sp, #16
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	603b      	str	r3, [r7, #0]
 8008c02:	4613      	mov	r3, r2
 8008c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 feec 	bl	800a9e8 <pvPortMalloc>
 8008c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00e      	beq.n	8008c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c18:	20bc      	movs	r0, #188	; 0xbc
 8008c1a:	f001 fee5 	bl	800a9e8 <pvPortMalloc>
 8008c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8008c2c:	e005      	b.n	8008c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	f001 ffa6 	bl	800ab80 <vPortFree>
 8008c34:	e001      	b.n	8008c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d017      	beq.n	8008c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	9302      	str	r3, [sp, #8]
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f80e 	bl	8008c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c64:	69f8      	ldr	r0, [r7, #28]
 8008c66:	f000 f8b1 	bl	8008dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	e002      	b.n	8008c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295
 8008c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c76:	69bb      	ldr	r3, [r7, #24]
	}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3720      	adds	r7, #32
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	461a      	mov	r2, r3
 8008c98:	21a5      	movs	r1, #165	; 0xa5
 8008c9a:	f002 f9c0 	bl	800b01e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	f023 0307 	bic.w	r3, r3, #7
 8008cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	617b      	str	r3, [r7, #20]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01f      	beq.n	8008d1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	e012      	b.n	8008d0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	7819      	ldrb	r1, [r3, #0]
 8008cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3334      	adds	r3, #52	; 0x34
 8008cf4:	460a      	mov	r2, r1
 8008cf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d006      	beq.n	8008d12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	3301      	adds	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b0f      	cmp	r3, #15
 8008d0e:	d9e9      	bls.n	8008ce4 <prvInitialiseNewTask+0x64>
 8008d10:	e000      	b.n	8008d14 <prvInitialiseNewTask+0x94>
			{
				break;
 8008d12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d1c:	e003      	b.n	8008d26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	2b37      	cmp	r3, #55	; 0x37
 8008d2a:	d901      	bls.n	8008d30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d2c:	2337      	movs	r3, #55	; 0x37
 8008d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	2200      	movs	r2, #0
 8008d40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	3304      	adds	r3, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff f886 	bl	8007e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	3318      	adds	r3, #24
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff f881 	bl	8007e58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	3354      	adds	r3, #84	; 0x54
 8008d80:	2260      	movs	r2, #96	; 0x60
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 f94a 	bl	800b01e <memset>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	4a0c      	ldr	r2, [pc, #48]	; (8008dc0 <prvInitialiseNewTask+0x140>)
 8008d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	4a0c      	ldr	r2, [pc, #48]	; (8008dc4 <prvInitialiseNewTask+0x144>)
 8008d94:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	4a0b      	ldr	r2, [pc, #44]	; (8008dc8 <prvInitialiseNewTask+0x148>)
 8008d9a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	69b8      	ldr	r0, [r7, #24]
 8008da2:	f001 fbd3 	bl	800a54c <pxPortInitialiseStack>
 8008da6:	4602      	mov	r2, r0
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db8:	bf00      	nop
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	0800c284 	.word	0x0800c284
 8008dc4:	0800c2a4 	.word	0x0800c2a4
 8008dc8:	0800c264 	.word	0x0800c264

08008dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dd4:	f001 fce6 	bl	800a7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dd8:	4b2d      	ldr	r3, [pc, #180]	; (8008e90 <prvAddNewTaskToReadyList+0xc4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	4a2c      	ldr	r2, [pc, #176]	; (8008e90 <prvAddNewTaskToReadyList+0xc4>)
 8008de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008de2:	4b2c      	ldr	r3, [pc, #176]	; (8008e94 <prvAddNewTaskToReadyList+0xc8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dea:	4a2a      	ldr	r2, [pc, #168]	; (8008e94 <prvAddNewTaskToReadyList+0xc8>)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008df0:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <prvAddNewTaskToReadyList+0xc4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d110      	bne.n	8008e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008df8:	f000 fcb6 	bl	8009768 <prvInitialiseTaskLists>
 8008dfc:	e00d      	b.n	8008e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dfe:	4b26      	ldr	r3, [pc, #152]	; (8008e98 <prvAddNewTaskToReadyList+0xcc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e06:	4b23      	ldr	r3, [pc, #140]	; (8008e94 <prvAddNewTaskToReadyList+0xc8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d802      	bhi.n	8008e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <prvAddNewTaskToReadyList+0xc8>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e1a:	4b20      	ldr	r3, [pc, #128]	; (8008e9c <prvAddNewTaskToReadyList+0xd0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	4a1e      	ldr	r2, [pc, #120]	; (8008e9c <prvAddNewTaskToReadyList+0xd0>)
 8008e22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e24:	4b1d      	ldr	r3, [pc, #116]	; (8008e9c <prvAddNewTaskToReadyList+0xd0>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e30:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <prvAddNewTaskToReadyList+0xd4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d903      	bls.n	8008e40 <prvAddNewTaskToReadyList+0x74>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <prvAddNewTaskToReadyList+0xd4>)
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a15      	ldr	r2, [pc, #84]	; (8008ea4 <prvAddNewTaskToReadyList+0xd8>)
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7ff f80b 	bl	8007e72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e5c:	f001 fcd2 	bl	800a804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e60:	4b0d      	ldr	r3, [pc, #52]	; (8008e98 <prvAddNewTaskToReadyList+0xcc>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00e      	beq.n	8008e86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <prvAddNewTaskToReadyList+0xc8>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d207      	bcs.n	8008e86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e76:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <prvAddNewTaskToReadyList+0xdc>)
 8008e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20001584 	.word	0x20001584
 8008e94:	200010b0 	.word	0x200010b0
 8008e98:	20001590 	.word	0x20001590
 8008e9c:	200015a0 	.word	0x200015a0
 8008ea0:	2000158c 	.word	0x2000158c
 8008ea4:	200010b4 	.word	0x200010b4
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08a      	sub	sp, #40	; 0x28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	617b      	str	r3, [r7, #20]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <vTaskDelayUntil+0x46>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	613b      	str	r3, [r7, #16]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008ef2:	4b2a      	ldr	r3, [pc, #168]	; (8008f9c <vTaskDelayUntil+0xf0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <vTaskDelayUntil+0x64>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	60fb      	str	r3, [r7, #12]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008f10:	f000 f8ee 	bl	80090f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008f14:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <vTaskDelayUntil+0xf4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4413      	add	r3, r2
 8008f22:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6a3a      	ldr	r2, [r7, #32]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d20b      	bcs.n	8008f46 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d211      	bcs.n	8008f5c <vTaskDelayUntil+0xb0>
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d90d      	bls.n	8008f5c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008f40:	2301      	movs	r3, #1
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
 8008f44:	e00a      	b.n	8008f5c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d303      	bcc.n	8008f58 <vTaskDelayUntil+0xac>
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d901      	bls.n	8008f5c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d006      	beq.n	8008f76 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 ff49 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008f76:	f000 f8c9 	bl	800910c <xTaskResumeAll>
 8008f7a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d107      	bne.n	8008f92 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008f82:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <vTaskDelayUntil+0xf8>)
 8008f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f92:	bf00      	nop
 8008f94:	3728      	adds	r7, #40	; 0x28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200015ac 	.word	0x200015ac
 8008fa0:	20001588 	.word	0x20001588
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d017      	beq.n	8008fea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fba:	4b13      	ldr	r3, [pc, #76]	; (8009008 <vTaskDelay+0x60>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <vTaskDelay+0x30>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	60bb      	str	r3, [r7, #8]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fd8:	f000 f88a 	bl	80090f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 ff12 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fe4:	f000 f892 	bl	800910c <xTaskResumeAll>
 8008fe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d107      	bne.n	8009000 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ff0:	4b06      	ldr	r3, [pc, #24]	; (800900c <vTaskDelay+0x64>)
 8008ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	200015ac 	.word	0x200015ac
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800901e:	463a      	mov	r2, r7
 8009020:	1d39      	adds	r1, r7, #4
 8009022:	f107 0308 	add.w	r3, r7, #8
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fec2 	bl	8007db0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	9202      	str	r2, [sp, #8]
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	2300      	movs	r3, #0
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	2300      	movs	r3, #0
 800903c:	460a      	mov	r2, r1
 800903e:	4924      	ldr	r1, [pc, #144]	; (80090d0 <vTaskStartScheduler+0xc0>)
 8009040:	4824      	ldr	r0, [pc, #144]	; (80090d4 <vTaskStartScheduler+0xc4>)
 8009042:	f7ff fd7b 	bl	8008b3c <xTaskCreateStatic>
 8009046:	4603      	mov	r3, r0
 8009048:	4a23      	ldr	r2, [pc, #140]	; (80090d8 <vTaskStartScheduler+0xc8>)
 800904a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800904c:	4b22      	ldr	r3, [pc, #136]	; (80090d8 <vTaskStartScheduler+0xc8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009054:	2301      	movs	r3, #1
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	e001      	b.n	800905e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d102      	bne.n	800906a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009064:	f000 ff24 	bl	8009eb0 <xTimerCreateTimerTask>
 8009068:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d11b      	bne.n	80090a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	613b      	str	r3, [r7, #16]
}
 8009082:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009084:	4b15      	ldr	r3, [pc, #84]	; (80090dc <vTaskStartScheduler+0xcc>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3354      	adds	r3, #84	; 0x54
 800908a:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <vTaskStartScheduler+0xd0>)
 800908c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800908e:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <vTaskStartScheduler+0xd4>)
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009096:	4b14      	ldr	r3, [pc, #80]	; (80090e8 <vTaskStartScheduler+0xd8>)
 8009098:	2201      	movs	r2, #1
 800909a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800909c:	4b13      	ldr	r3, [pc, #76]	; (80090ec <vTaskStartScheduler+0xdc>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090a2:	f001 fadd 	bl	800a660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090a6:	e00e      	b.n	80090c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d10a      	bne.n	80090c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <vTaskStartScheduler+0xb4>
}
 80090c6:	bf00      	nop
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	0800c144 	.word	0x0800c144
 80090d4:	08009739 	.word	0x08009739
 80090d8:	200015a8 	.word	0x200015a8
 80090dc:	200010b0 	.word	0x200010b0
 80090e0:	20000010 	.word	0x20000010
 80090e4:	200015a4 	.word	0x200015a4
 80090e8:	20001590 	.word	0x20001590
 80090ec:	20001588 	.word	0x20001588

080090f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <vTaskSuspendAll+0x18>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	4a03      	ldr	r2, [pc, #12]	; (8009108 <vTaskSuspendAll+0x18>)
 80090fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090fe:	bf00      	nop
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	200015ac 	.word	0x200015ac

0800910c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800911a:	4b42      	ldr	r3, [pc, #264]	; (8009224 <xTaskResumeAll+0x118>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xTaskResumeAll+0x2c>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	603b      	str	r3, [r7, #0]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009138:	f001 fb34 	bl	800a7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <xTaskResumeAll+0x118>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3b01      	subs	r3, #1
 8009142:	4a38      	ldr	r2, [pc, #224]	; (8009224 <xTaskResumeAll+0x118>)
 8009144:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009146:	4b37      	ldr	r3, [pc, #220]	; (8009224 <xTaskResumeAll+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d162      	bne.n	8009214 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800914e:	4b36      	ldr	r3, [pc, #216]	; (8009228 <xTaskResumeAll+0x11c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d05e      	beq.n	8009214 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009156:	e02f      	b.n	80091b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009158:	4b34      	ldr	r3, [pc, #208]	; (800922c <xTaskResumeAll+0x120>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3318      	adds	r3, #24
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fee1 	bl	8007f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fedc 	bl	8007f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <xTaskResumeAll+0x124>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <xTaskResumeAll+0x7c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a2a      	ldr	r2, [pc, #168]	; (8009230 <xTaskResumeAll+0x124>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a27      	ldr	r2, [pc, #156]	; (8009234 <xTaskResumeAll+0x128>)
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe fe67 	bl	8007e72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b23      	ldr	r3, [pc, #140]	; (8009238 <xTaskResumeAll+0x12c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091b2:	4b22      	ldr	r3, [pc, #136]	; (800923c <xTaskResumeAll+0x130>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b8:	4b1c      	ldr	r3, [pc, #112]	; (800922c <xTaskResumeAll+0x120>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1cb      	bne.n	8009158 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091c6:	f000 fb71 	bl	80098ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <xTaskResumeAll+0x134>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d010      	beq.n	80091f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091d6:	f000 f859 	bl	800928c <xTaskIncrementTick>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091e0:	4b16      	ldr	r3, [pc, #88]	; (800923c <xTaskResumeAll+0x130>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f1      	bne.n	80091d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <xTaskResumeAll+0x134>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091f8:	4b10      	ldr	r3, [pc, #64]	; (800923c <xTaskResumeAll+0x130>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <xTaskResumeAll+0x138>)
 8009206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009214:	f001 faf6 	bl	800a804 <vPortExitCritical>

	return xAlreadyYielded;
 8009218:	68bb      	ldr	r3, [r7, #8]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200015ac 	.word	0x200015ac
 8009228:	20001584 	.word	0x20001584
 800922c:	20001544 	.word	0x20001544
 8009230:	2000158c 	.word	0x2000158c
 8009234:	200010b4 	.word	0x200010b4
 8009238:	200010b0 	.word	0x200010b0
 800923c:	20001598 	.word	0x20001598
 8009240:	20001594 	.word	0x20001594
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <xTaskGetTickCount+0x1c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009254:	687b      	ldr	r3, [r7, #4]
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20001588 	.word	0x20001588

08009268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800926e:	f001 fb7b 	bl	800a968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009272:	2300      	movs	r3, #0
 8009274:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009276:	4b04      	ldr	r3, [pc, #16]	; (8009288 <xTaskGetTickCountFromISR+0x20>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800927c:	683b      	ldr	r3, [r7, #0]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20001588 	.word	0x20001588

0800928c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009296:	4b4f      	ldr	r3, [pc, #316]	; (80093d4 <xTaskIncrementTick+0x148>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f040 808f 	bne.w	80093be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092a0:	4b4d      	ldr	r3, [pc, #308]	; (80093d8 <xTaskIncrementTick+0x14c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092a8:	4a4b      	ldr	r2, [pc, #300]	; (80093d8 <xTaskIncrementTick+0x14c>)
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d120      	bne.n	80092f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092b4:	4b49      	ldr	r3, [pc, #292]	; (80093dc <xTaskIncrementTick+0x150>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	603b      	str	r3, [r7, #0]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xTaskIncrementTick+0x46>
 80092d4:	4b41      	ldr	r3, [pc, #260]	; (80093dc <xTaskIncrementTick+0x150>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	4b41      	ldr	r3, [pc, #260]	; (80093e0 <xTaskIncrementTick+0x154>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a3f      	ldr	r2, [pc, #252]	; (80093dc <xTaskIncrementTick+0x150>)
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	4a3f      	ldr	r2, [pc, #252]	; (80093e0 <xTaskIncrementTick+0x154>)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	4b3e      	ldr	r3, [pc, #248]	; (80093e4 <xTaskIncrementTick+0x158>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3301      	adds	r3, #1
 80092ee:	4a3d      	ldr	r2, [pc, #244]	; (80093e4 <xTaskIncrementTick+0x158>)
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	f000 fadb 	bl	80098ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092f6:	4b3c      	ldr	r3, [pc, #240]	; (80093e8 <xTaskIncrementTick+0x15c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d349      	bcc.n	8009394 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009300:	4b36      	ldr	r3, [pc, #216]	; (80093dc <xTaskIncrementTick+0x150>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800930a:	4b37      	ldr	r3, [pc, #220]	; (80093e8 <xTaskIncrementTick+0x15c>)
 800930c:	f04f 32ff 	mov.w	r2, #4294967295
 8009310:	601a      	str	r2, [r3, #0]
					break;
 8009312:	e03f      	b.n	8009394 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009314:	4b31      	ldr	r3, [pc, #196]	; (80093dc <xTaskIncrementTick+0x150>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d203      	bcs.n	8009334 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800932c:	4a2e      	ldr	r2, [pc, #184]	; (80093e8 <xTaskIncrementTick+0x15c>)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009332:	e02f      	b.n	8009394 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	3304      	adds	r3, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fdf7 	bl	8007f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	3318      	adds	r3, #24
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fdee 	bl	8007f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009354:	4b25      	ldr	r3, [pc, #148]	; (80093ec <xTaskIncrementTick+0x160>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d903      	bls.n	8009364 <xTaskIncrementTick+0xd8>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a22      	ldr	r2, [pc, #136]	; (80093ec <xTaskIncrementTick+0x160>)
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <xTaskIncrementTick+0x164>)
 8009372:	441a      	add	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	3304      	adds	r3, #4
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fe fd79 	bl	8007e72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009384:	4b1b      	ldr	r3, [pc, #108]	; (80093f4 <xTaskIncrementTick+0x168>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938a:	429a      	cmp	r2, r3
 800938c:	d3b8      	bcc.n	8009300 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800938e:	2301      	movs	r3, #1
 8009390:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009392:	e7b5      	b.n	8009300 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009394:	4b17      	ldr	r3, [pc, #92]	; (80093f4 <xTaskIncrementTick+0x168>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	4915      	ldr	r1, [pc, #84]	; (80093f0 <xTaskIncrementTick+0x164>)
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d901      	bls.n	80093b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093b0:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <xTaskIncrementTick+0x16c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e004      	b.n	80093c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093be:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <xTaskIncrementTick+0x170>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3301      	adds	r3, #1
 80093c4:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <xTaskIncrementTick+0x170>)
 80093c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093c8:	697b      	ldr	r3, [r7, #20]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200015ac 	.word	0x200015ac
 80093d8:	20001588 	.word	0x20001588
 80093dc:	2000153c 	.word	0x2000153c
 80093e0:	20001540 	.word	0x20001540
 80093e4:	2000159c 	.word	0x2000159c
 80093e8:	200015a4 	.word	0x200015a4
 80093ec:	2000158c 	.word	0x2000158c
 80093f0:	200010b4 	.word	0x200010b4
 80093f4:	200010b0 	.word	0x200010b0
 80093f8:	20001598 	.word	0x20001598
 80093fc:	20001594 	.word	0x20001594

08009400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <vTaskSwitchContext+0xb0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800940e:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <vTaskSwitchContext+0xb4>)
 8009410:	2201      	movs	r2, #1
 8009412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009414:	e046      	b.n	80094a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <vTaskSwitchContext+0xb4>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800941c:	4b26      	ldr	r3, [pc, #152]	; (80094b8 <vTaskSwitchContext+0xb8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	e010      	b.n	8009446 <vTaskSwitchContext+0x46>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <vTaskSwitchContext+0x40>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	607b      	str	r3, [r7, #4]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <vTaskSwitchContext+0x3e>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3b01      	subs	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	491d      	ldr	r1, [pc, #116]	; (80094bc <vTaskSwitchContext+0xbc>)
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0e4      	beq.n	8009424 <vTaskSwitchContext+0x24>
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4a15      	ldr	r2, [pc, #84]	; (80094bc <vTaskSwitchContext+0xbc>)
 8009466:	4413      	add	r3, r2
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	605a      	str	r2, [r3, #4]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	3308      	adds	r3, #8
 800947c:	429a      	cmp	r2, r3
 800947e:	d104      	bne.n	800948a <vTaskSwitchContext+0x8a>
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	4a0b      	ldr	r2, [pc, #44]	; (80094c0 <vTaskSwitchContext+0xc0>)
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	4a08      	ldr	r2, [pc, #32]	; (80094b8 <vTaskSwitchContext+0xb8>)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <vTaskSwitchContext+0xc0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3354      	adds	r3, #84	; 0x54
 80094a0:	4a08      	ldr	r2, [pc, #32]	; (80094c4 <vTaskSwitchContext+0xc4>)
 80094a2:	6013      	str	r3, [r2, #0]
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	200015ac 	.word	0x200015ac
 80094b4:	20001598 	.word	0x20001598
 80094b8:	2000158c 	.word	0x2000158c
 80094bc:	200010b4 	.word	0x200010b4
 80094c0:	200010b0 	.word	0x200010b0
 80094c4:	20000010 	.word	0x20000010

080094c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	60fb      	str	r3, [r7, #12]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094ee:	4b07      	ldr	r3, [pc, #28]	; (800950c <vTaskPlaceOnEventList+0x44>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3318      	adds	r3, #24
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fe fcdf 	bl	8007eba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094fc:	2101      	movs	r1, #1
 80094fe:	6838      	ldr	r0, [r7, #0]
 8009500:	f000 fc82 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	200010b0 	.word	0x200010b0

08009510 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	617b      	str	r3, [r7, #20]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <vTaskPlaceOnEventListRestricted+0x54>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3318      	adds	r3, #24
 800953e:	4619      	mov	r1, r3
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7fe fc96 	bl	8007e72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800954c:	f04f 33ff 	mov.w	r3, #4294967295
 8009550:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	68b8      	ldr	r0, [r7, #8]
 8009556:	f000 fc57 	bl	8009e08 <prvAddCurrentTaskToDelayedList>
	}
 800955a:	bf00      	nop
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200010b0 	.word	0x200010b0

08009568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	60fb      	str	r3, [r7, #12]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	3318      	adds	r3, #24
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fcc7 	bl	8007f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959e:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <xTaskRemoveFromEventList+0xb0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d11d      	bne.n	80095e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fcbe 	bl	8007f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4b19      	ldr	r3, [pc, #100]	; (800961c <xTaskRemoveFromEventList+0xb4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d903      	bls.n	80095c4 <xTaskRemoveFromEventList+0x5c>
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	4a16      	ldr	r2, [pc, #88]	; (800961c <xTaskRemoveFromEventList+0xb4>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a13      	ldr	r2, [pc, #76]	; (8009620 <xTaskRemoveFromEventList+0xb8>)
 80095d2:	441a      	add	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fc49 	bl	8007e72 <vListInsertEnd>
 80095e0:	e005      	b.n	80095ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3318      	adds	r3, #24
 80095e6:	4619      	mov	r1, r3
 80095e8:	480e      	ldr	r0, [pc, #56]	; (8009624 <xTaskRemoveFromEventList+0xbc>)
 80095ea:	f7fe fc42 	bl	8007e72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f2:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <xTaskRemoveFromEventList+0xc0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d905      	bls.n	8009608 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095fc:	2301      	movs	r3, #1
 80095fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <xTaskRemoveFromEventList+0xc4>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e001      	b.n	800960c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800960c:	697b      	ldr	r3, [r7, #20]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200015ac 	.word	0x200015ac
 800961c:	2000158c 	.word	0x2000158c
 8009620:	200010b4 	.word	0x200010b4
 8009624:	20001544 	.word	0x20001544
 8009628:	200010b0 	.word	0x200010b0
 800962c:	20001598 	.word	0x20001598

08009630 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009638:	4b06      	ldr	r3, [pc, #24]	; (8009654 <vTaskInternalSetTimeOutState+0x24>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009640:	4b05      	ldr	r3, [pc, #20]	; (8009658 <vTaskInternalSetTimeOutState+0x28>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	605a      	str	r2, [r3, #4]
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	2000159c 	.word	0x2000159c
 8009658:	20001588 	.word	0x20001588

0800965c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b088      	sub	sp, #32
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	613b      	str	r3, [r7, #16]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	60fb      	str	r3, [r7, #12]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800969e:	f001 f881 	bl	800a7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <xTaskCheckForTimeOut+0xbc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ba:	d102      	bne.n	80096c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	e023      	b.n	800970a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4b15      	ldr	r3, [pc, #84]	; (800971c <xTaskCheckForTimeOut+0xc0>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d007      	beq.n	80096de <xTaskCheckForTimeOut+0x82>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d302      	bcc.n	80096de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	61fb      	str	r3, [r7, #28]
 80096dc:	e015      	b.n	800970a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d20b      	bcs.n	8009700 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff ff9b 	bl	8009630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
 80096fe:	e004      	b.n	800970a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009706:	2301      	movs	r3, #1
 8009708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800970a:	f001 f87b 	bl	800a804 <vPortExitCritical>

	return xReturn;
 800970e:	69fb      	ldr	r3, [r7, #28]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3720      	adds	r7, #32
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20001588 	.word	0x20001588
 800971c:	2000159c 	.word	0x2000159c

08009720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009724:	4b03      	ldr	r3, [pc, #12]	; (8009734 <vTaskMissedYield+0x14>)
 8009726:	2201      	movs	r2, #1
 8009728:	601a      	str	r2, [r3, #0]
}
 800972a:	bf00      	nop
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20001598 	.word	0x20001598

08009738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009740:	f000 f852 	bl	80097e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <prvIdleTask+0x28>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d9f9      	bls.n	8009740 <prvIdleTask+0x8>
			{
				taskYIELD();
 800974c:	4b05      	ldr	r3, [pc, #20]	; (8009764 <prvIdleTask+0x2c>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800975c:	e7f0      	b.n	8009740 <prvIdleTask+0x8>
 800975e:	bf00      	nop
 8009760:	200010b4 	.word	0x200010b4
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800976e:	2300      	movs	r3, #0
 8009770:	607b      	str	r3, [r7, #4]
 8009772:	e00c      	b.n	800978e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4a12      	ldr	r2, [pc, #72]	; (80097c8 <prvInitialiseTaskLists+0x60>)
 8009780:	4413      	add	r3, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fb48 	bl	8007e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3301      	adds	r3, #1
 800978c:	607b      	str	r3, [r7, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b37      	cmp	r3, #55	; 0x37
 8009792:	d9ef      	bls.n	8009774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009794:	480d      	ldr	r0, [pc, #52]	; (80097cc <prvInitialiseTaskLists+0x64>)
 8009796:	f7fe fb3f 	bl	8007e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800979a:	480d      	ldr	r0, [pc, #52]	; (80097d0 <prvInitialiseTaskLists+0x68>)
 800979c:	f7fe fb3c 	bl	8007e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097a0:	480c      	ldr	r0, [pc, #48]	; (80097d4 <prvInitialiseTaskLists+0x6c>)
 80097a2:	f7fe fb39 	bl	8007e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097a6:	480c      	ldr	r0, [pc, #48]	; (80097d8 <prvInitialiseTaskLists+0x70>)
 80097a8:	f7fe fb36 	bl	8007e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097ac:	480b      	ldr	r0, [pc, #44]	; (80097dc <prvInitialiseTaskLists+0x74>)
 80097ae:	f7fe fb33 	bl	8007e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097b2:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <prvInitialiseTaskLists+0x78>)
 80097b4:	4a05      	ldr	r2, [pc, #20]	; (80097cc <prvInitialiseTaskLists+0x64>)
 80097b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <prvInitialiseTaskLists+0x7c>)
 80097ba:	4a05      	ldr	r2, [pc, #20]	; (80097d0 <prvInitialiseTaskLists+0x68>)
 80097bc:	601a      	str	r2, [r3, #0]
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	200010b4 	.word	0x200010b4
 80097cc:	20001514 	.word	0x20001514
 80097d0:	20001528 	.word	0x20001528
 80097d4:	20001544 	.word	0x20001544
 80097d8:	20001558 	.word	0x20001558
 80097dc:	20001570 	.word	0x20001570
 80097e0:	2000153c 	.word	0x2000153c
 80097e4:	20001540 	.word	0x20001540

080097e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ee:	e019      	b.n	8009824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097f0:	f000 ffd8 	bl	800a7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f4:	4b10      	ldr	r3, [pc, #64]	; (8009838 <prvCheckTasksWaitingTermination+0x50>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	4618      	mov	r0, r3
 8009802:	f7fe fb93 	bl	8007f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009806:	4b0d      	ldr	r3, [pc, #52]	; (800983c <prvCheckTasksWaitingTermination+0x54>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3b01      	subs	r3, #1
 800980c:	4a0b      	ldr	r2, [pc, #44]	; (800983c <prvCheckTasksWaitingTermination+0x54>)
 800980e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009810:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <prvCheckTasksWaitingTermination+0x58>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3b01      	subs	r3, #1
 8009816:	4a0a      	ldr	r2, [pc, #40]	; (8009840 <prvCheckTasksWaitingTermination+0x58>)
 8009818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800981a:	f000 fff3 	bl	800a804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f810 	bl	8009844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <prvCheckTasksWaitingTermination+0x58>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e1      	bne.n	80097f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20001558 	.word	0x20001558
 800983c:	20001584 	.word	0x20001584
 8009840:	2000156c 	.word	0x2000156c

08009844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3354      	adds	r3, #84	; 0x54
 8009850:	4618      	mov	r0, r3
 8009852:	f001 fd1d 	bl	800b290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009864:	4618      	mov	r0, r3
 8009866:	f001 f98b 	bl	800ab80 <vPortFree>
				vPortFree( pxTCB );
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f988 	bl	800ab80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009870:	e018      	b.n	80098a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009878:	2b01      	cmp	r3, #1
 800987a:	d103      	bne.n	8009884 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 f97f 	bl	800ab80 <vPortFree>
	}
 8009882:	e00f      	b.n	80098a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800988a:	2b02      	cmp	r3, #2
 800988c:	d00a      	beq.n	80098a4 <prvDeleteTCB+0x60>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	60fb      	str	r3, [r7, #12]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <prvDeleteTCB+0x5e>
	}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098b2:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <prvResetNextTaskUnblockTime+0x38>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <prvResetNextTaskUnblockTime+0x3c>)
 80098be:	f04f 32ff 	mov.w	r2, #4294967295
 80098c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098c4:	e008      	b.n	80098d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c6:	4b07      	ldr	r3, [pc, #28]	; (80098e4 <prvResetNextTaskUnblockTime+0x38>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	4a04      	ldr	r2, [pc, #16]	; (80098e8 <prvResetNextTaskUnblockTime+0x3c>)
 80098d6:	6013      	str	r3, [r2, #0]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	2000153c 	.word	0x2000153c
 80098e8:	200015a4 	.word	0x200015a4

080098ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <xTaskGetSchedulerState+0x34>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098fa:	2301      	movs	r3, #1
 80098fc:	607b      	str	r3, [r7, #4]
 80098fe:	e008      	b.n	8009912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009900:	4b08      	ldr	r3, [pc, #32]	; (8009924 <xTaskGetSchedulerState+0x38>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d102      	bne.n	800990e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009908:	2302      	movs	r3, #2
 800990a:	607b      	str	r3, [r7, #4]
 800990c:	e001      	b.n	8009912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800990e:	2300      	movs	r3, #0
 8009910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009912:	687b      	ldr	r3, [r7, #4]
	}
 8009914:	4618      	mov	r0, r3
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	20001590 	.word	0x20001590
 8009924:	200015ac 	.word	0x200015ac

08009928 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d056      	beq.n	80099ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800993e:	4b2e      	ldr	r3, [pc, #184]	; (80099f8 <xTaskPriorityDisinherit+0xd0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	429a      	cmp	r2, r3
 8009946:	d00a      	beq.n	800995e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	60fb      	str	r3, [r7, #12]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60bb      	str	r3, [r7, #8]
}
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009980:	1e5a      	subs	r2, r3, #1
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998e:	429a      	cmp	r2, r3
 8009990:	d02c      	beq.n	80099ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009996:	2b00      	cmp	r3, #0
 8009998:	d128      	bne.n	80099ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3304      	adds	r3, #4
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fac4 	bl	8007f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <xTaskPriorityDisinherit+0xd4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d903      	bls.n	80099cc <xTaskPriorityDisinherit+0xa4>
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	4a0c      	ldr	r2, [pc, #48]	; (80099fc <xTaskPriorityDisinherit+0xd4>)
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <xTaskPriorityDisinherit+0xd8>)
 80099da:	441a      	add	r2, r3
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	3304      	adds	r3, #4
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f7fe fa45 	bl	8007e72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099e8:	2301      	movs	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099ec:	697b      	ldr	r3, [r7, #20]
	}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	200010b0 	.word	0x200010b0
 80099fc:	2000158c 	.word	0x2000158c
 8009a00:	200010b4 	.word	0x200010b4

08009a04 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009a12:	f000 fec7 	bl	800a7a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a16:	4b29      	ldr	r3, [pc, #164]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d01c      	beq.n	8009a5e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009a24:	4b25      	ldr	r3, [pc, #148]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	43d2      	mvns	r2, r2
 8009a30:	400a      	ands	r2, r1
 8009a32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a46:	2101      	movs	r1, #1
 8009a48:	6838      	ldr	r0, [r7, #0]
 8009a4a:	f000 f9dd 	bl	8009e08 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <xTaskNotifyWait+0xbc>)
 8009a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a5e:	f000 fed1 	bl	800a804 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a62:	f000 fe9f 	bl	800a7a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009a6c:	4b13      	ldr	r3, [pc, #76]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a78:	4b10      	ldr	r3, [pc, #64]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d002      	beq.n	8009a8c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e00a      	b.n	8009aa2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	43d2      	mvns	r2, r2
 8009a98:	400a      	ands	r2, r1
 8009a9a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009aa2:	4b06      	ldr	r3, [pc, #24]	; (8009abc <xTaskNotifyWait+0xb8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009aac:	f000 feaa 	bl	800a804 <vPortExitCritical>

		return xReturn;
 8009ab0:	697b      	ldr	r3, [r7, #20]
	}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	200010b0 	.word	0x200010b0
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08a      	sub	sp, #40	; 0x28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <xTaskGenericNotify+0x30>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	61bb      	str	r3, [r7, #24]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009af8:	f000 fe54 	bl	800a7a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d004      	beq.n	8009b0c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009b12:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d82d      	bhi.n	8009b7e <xTaskGenericNotify+0xba>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <xTaskGenericNotify+0x64>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009ba1 	.word	0x08009ba1
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b4f 	.word	0x08009b4f
 8009b34:	08009b5f 	.word	0x08009b5f
 8009b38:	08009b69 	.word	0x08009b69
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	431a      	orrs	r2, r3
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009b4c:	e02b      	b.n	8009ba6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009b5c:	e023      	b.n	8009ba6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009b66:	e01e      	b.n	8009ba6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b68:	7ffb      	ldrb	r3, [r7, #31]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d004      	beq.n	8009b78 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b76:	e016      	b.n	8009ba6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009b7c:	e013      	b.n	8009ba6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d00c      	beq.n	8009ba4 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	617b      	str	r3, [r7, #20]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <xTaskGenericNotify+0xda>
					break;
 8009ba0:	bf00      	nop
 8009ba2:	e000      	b.n	8009ba6 <xTaskGenericNotify+0xe2>

					break;
 8009ba4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ba6:	7ffb      	ldrb	r3, [r7, #31]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d13a      	bne.n	8009c22 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe f9bb 	bl	8007f2c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <xTaskGenericNotify+0x16c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d903      	bls.n	8009bca <xTaskGenericNotify+0x106>
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc6:	4a1a      	ldr	r2, [pc, #104]	; (8009c30 <xTaskGenericNotify+0x16c>)
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4a17      	ldr	r2, [pc, #92]	; (8009c34 <xTaskGenericNotify+0x170>)
 8009bd8:	441a      	add	r2, r3
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f7fe f946 	bl	8007e72 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <xTaskGenericNotify+0x140>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	613b      	str	r3, [r7, #16]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c08:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <xTaskGenericNotify+0x174>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d907      	bls.n	8009c22 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <xTaskGenericNotify+0x178>)
 8009c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009c22:	f000 fdef 	bl	800a804 <vPortExitCritical>

		return xReturn;
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3728      	adds	r7, #40	; 0x28
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	2000158c 	.word	0x2000158c
 8009c34:	200010b4 	.word	0x200010b4
 8009c38:	200010b0 	.word	0x200010b0
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08e      	sub	sp, #56	; 0x38
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009c50:	2301      	movs	r3, #1
 8009c52:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c70:	f000 fe7a 	bl	800a968 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009c78:	f3ef 8211 	mrs	r2, BASEPRI
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	623a      	str	r2, [r7, #32]
 8009c8e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009c90:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	d82f      	bhi.n	8009d1c <xTaskGenericNotifyFromISR+0xdc>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <xTaskGenericNotifyFromISR+0x84>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009d3f 	.word	0x08009d3f
 8009cc8:	08009cd9 	.word	0x08009cd9
 8009ccc:	08009ceb 	.word	0x08009ceb
 8009cd0:	08009cfb 	.word	0x08009cfb
 8009cd4:	08009d05 	.word	0x08009d05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009ce8:	e02c      	b.n	8009d44 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009cf8:	e024      	b.n	8009d44 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009d02:	e01f      	b.n	8009d44 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d004      	beq.n	8009d16 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d14:	e016      	b.n	8009d44 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009d1a:	e013      	b.n	8009d44 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d00c      	beq.n	8009d42 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	61bb      	str	r3, [r7, #24]
}
 8009d3a:	bf00      	nop
 8009d3c:	e7fe      	b.n	8009d3c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009d3e:	bf00      	nop
 8009d40:	e000      	b.n	8009d44 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009d42:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d146      	bne.n	8009dda <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00a      	beq.n	8009d6a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	617b      	str	r3, [r7, #20]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d6a:	4b21      	ldr	r3, [pc, #132]	; (8009df0 <xTaskGenericNotifyFromISR+0x1b0>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d11d      	bne.n	8009dae <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	3304      	adds	r3, #4
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe f8d8 	bl	8007f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d903      	bls.n	8009d90 <xTaskGenericNotifyFromISR+0x150>
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	4a19      	ldr	r2, [pc, #100]	; (8009df4 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4a16      	ldr	r2, [pc, #88]	; (8009df8 <xTaskGenericNotifyFromISR+0x1b8>)
 8009d9e:	441a      	add	r2, r3
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fe f863 	bl	8007e72 <vListInsertEnd>
 8009dac:	e005      	b.n	8009dba <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	3318      	adds	r3, #24
 8009db2:	4619      	mov	r1, r3
 8009db4:	4811      	ldr	r0, [pc, #68]	; (8009dfc <xTaskGenericNotifyFromISR+0x1bc>)
 8009db6:	f7fe f85c 	bl	8007e72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbe:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <xTaskGenericNotifyFromISR+0x1c0>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d908      	bls.n	8009dda <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009dd4:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <xTaskGenericNotifyFromISR+0x1c4>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f383 8811 	msr	BASEPRI, r3
}
 8009de4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3738      	adds	r7, #56	; 0x38
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200015ac 	.word	0x200015ac
 8009df4:	2000158c 	.word	0x2000158c
 8009df8:	200010b4 	.word	0x200010b4
 8009dfc:	20001544 	.word	0x20001544
 8009e00:	200010b0 	.word	0x200010b0
 8009e04:	20001598 	.word	0x20001598

08009e08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e12:	4b21      	ldr	r3, [pc, #132]	; (8009e98 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e18:	4b20      	ldr	r3, [pc, #128]	; (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe f884 	bl	8007f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2a:	d10a      	bne.n	8009e42 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e32:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4819      	ldr	r0, [pc, #100]	; (8009ea0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e3c:	f7fe f819 	bl	8007e72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e40:	e026      	b.n	8009e90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4413      	add	r3, r2
 8009e48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d209      	bcs.n	8009e6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e5a:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe f827 	bl	8007eba <vListInsert>
}
 8009e6c:	e010      	b.n	8009e90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ea8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f7fe f81d 	bl	8007eba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d202      	bcs.n	8009e90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e8a:	4a08      	ldr	r2, [pc, #32]	; (8009eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6013      	str	r3, [r2, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20001588 	.word	0x20001588
 8009e9c:	200010b0 	.word	0x200010b0
 8009ea0:	20001570 	.word	0x20001570
 8009ea4:	20001540 	.word	0x20001540
 8009ea8:	2000153c 	.word	0x2000153c
 8009eac:	200015a4 	.word	0x200015a4

08009eb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	; 0x28
 8009eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009eba:	f000 fb07 	bl	800a4cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <xTimerCreateTimerTask+0x80>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d021      	beq.n	8009f0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ece:	1d3a      	adds	r2, r7, #4
 8009ed0:	f107 0108 	add.w	r1, r7, #8
 8009ed4:	f107 030c 	add.w	r3, r7, #12
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fd ff83 	bl	8007de4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	9202      	str	r2, [sp, #8]
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	2302      	movs	r3, #2
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	2300      	movs	r3, #0
 8009eee:	460a      	mov	r2, r1
 8009ef0:	4910      	ldr	r1, [pc, #64]	; (8009f34 <xTimerCreateTimerTask+0x84>)
 8009ef2:	4811      	ldr	r0, [pc, #68]	; (8009f38 <xTimerCreateTimerTask+0x88>)
 8009ef4:	f7fe fe22 	bl	8008b3c <xTaskCreateStatic>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	4a10      	ldr	r2, [pc, #64]	; (8009f3c <xTimerCreateTimerTask+0x8c>)
 8009efc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009efe:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <xTimerCreateTimerTask+0x8c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f06:	2301      	movs	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f26:	697b      	ldr	r3, [r7, #20]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	200015e0 	.word	0x200015e0
 8009f34:	0800c14c 	.word	0x0800c14c
 8009f38:	0800a075 	.word	0x0800a075
 8009f3c:	200015e4 	.word	0x200015e4

08009f40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	; 0x28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	623b      	str	r3, [r7, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f6e:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <xTimerGenericCommand+0x98>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d02a      	beq.n	8009fcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	dc18      	bgt.n	8009fba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f88:	f7ff fcb0 	bl	80098ec <xTaskGetSchedulerState>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d109      	bne.n	8009fa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <xTimerGenericCommand+0x98>)
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	f107 0110 	add.w	r1, r7, #16
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f9e:	f7fe f997 	bl	80082d0 <xQueueGenericSend>
 8009fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8009fa4:	e012      	b.n	8009fcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fa6:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <xTimerGenericCommand+0x98>)
 8009fa8:	6818      	ldr	r0, [r3, #0]
 8009faa:	f107 0110 	add.w	r1, r7, #16
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f7fe f98d 	bl	80082d0 <xQueueGenericSend>
 8009fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8009fb8:	e008      	b.n	8009fcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <xTimerGenericCommand+0x98>)
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f107 0110 	add.w	r1, r7, #16
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	f7fe fa81 	bl	80084cc <xQueueGenericSendFromISR>
 8009fca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3728      	adds	r7, #40	; 0x28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	200015e0 	.word	0x200015e0

08009fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe6:	4b22      	ldr	r3, [pc, #136]	; (800a070 <prvProcessExpiredTimer+0x94>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fd ff99 	bl	8007f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	d022      	beq.n	800a04e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	699a      	ldr	r2, [r3, #24]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	18d1      	adds	r1, r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	6978      	ldr	r0, [r7, #20]
 800a016:	f000 f8d1 	bl	800a1bc <prvInsertTimerInActiveList>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01f      	beq.n	800a060 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a020:	2300      	movs	r3, #0
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	2100      	movs	r1, #0
 800a02a:	6978      	ldr	r0, [r7, #20]
 800a02c:	f7ff ff88 	bl	8009f40 <xTimerGenericCommand>
 800a030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d113      	bne.n	800a060 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60fb      	str	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a054:	f023 0301 	bic.w	r3, r3, #1
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	6978      	ldr	r0, [r7, #20]
 800a066:	4798      	blx	r3
}
 800a068:	bf00      	nop
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200015d8 	.word	0x200015d8

0800a074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	4618      	mov	r0, r3
 800a082:	f000 f857 	bl	800a134 <prvGetNextExpireTime>
 800a086:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	4619      	mov	r1, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f803 	bl	800a098 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a092:	f000 f8d5 	bl	800a240 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a096:	e7f1      	b.n	800a07c <prvTimerTask+0x8>

0800a098 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0a2:	f7ff f825 	bl	80090f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 f866 	bl	800a17c <prvSampleTimeNow>
 800a0b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d130      	bne.n	800a11a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <prvProcessTimerOrBlockTask+0x3c>
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d806      	bhi.n	800a0d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0c6:	f7ff f821 	bl	800910c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ff85 	bl	8009fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0d2:	e024      	b.n	800a11e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d008      	beq.n	800a0ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0da:	4b13      	ldr	r3, [pc, #76]	; (800a128 <prvProcessTimerOrBlockTask+0x90>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <prvProcessTimerOrBlockTask+0x50>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e000      	b.n	800a0ea <prvProcessTimerOrBlockTask+0x52>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <prvProcessTimerOrBlockTask+0x94>)
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f7fe fceb 	bl	8008ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0fe:	f7ff f805 	bl	800910c <xTaskResumeAll>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10a      	bne.n	800a11e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a108:	4b09      	ldr	r3, [pc, #36]	; (800a130 <prvProcessTimerOrBlockTask+0x98>)
 800a10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	f3bf 8f6f 	isb	sy
}
 800a118:	e001      	b.n	800a11e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a11a:	f7fe fff7 	bl	800910c <xTaskResumeAll>
}
 800a11e:	bf00      	nop
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200015dc 	.word	0x200015dc
 800a12c:	200015e0 	.word	0x200015e0
 800a130:	e000ed04 	.word	0xe000ed04

0800a134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a13c:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <prvGetNextExpireTime+0x44>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <prvGetNextExpireTime+0x16>
 800a146:	2201      	movs	r2, #1
 800a148:	e000      	b.n	800a14c <prvGetNextExpireTime+0x18>
 800a14a:	2200      	movs	r2, #0
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d105      	bne.n	800a164 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a158:	4b07      	ldr	r3, [pc, #28]	; (800a178 <prvGetNextExpireTime+0x44>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	60fb      	str	r3, [r7, #12]
 800a162:	e001      	b.n	800a168 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a168:	68fb      	ldr	r3, [r7, #12]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	200015d8 	.word	0x200015d8

0800a17c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a184:	f7ff f860 	bl	8009248 <xTaskGetTickCount>
 800a188:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a18a:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <prvSampleTimeNow+0x3c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	429a      	cmp	r2, r3
 800a192:	d205      	bcs.n	800a1a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a194:	f000 f936 	bl	800a404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1a6:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <prvSampleTimeNow+0x3c>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	200015e8 	.word	0x200015e8

0800a1bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d812      	bhi.n	800a208 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	1ad2      	subs	r2, r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d302      	bcc.n	800a1f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	e01b      	b.n	800a22e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1f6:	4b10      	ldr	r3, [pc, #64]	; (800a238 <prvInsertTimerInActiveList+0x7c>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4619      	mov	r1, r3
 800a200:	4610      	mov	r0, r2
 800a202:	f7fd fe5a 	bl	8007eba <vListInsert>
 800a206:	e012      	b.n	800a22e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d206      	bcs.n	800a21e <prvInsertTimerInActiveList+0x62>
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d302      	bcc.n	800a21e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a218:	2301      	movs	r3, #1
 800a21a:	617b      	str	r3, [r7, #20]
 800a21c:	e007      	b.n	800a22e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <prvInsertTimerInActiveList+0x80>)
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3304      	adds	r3, #4
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f7fd fe46 	bl	8007eba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a22e:	697b      	ldr	r3, [r7, #20]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	200015dc 	.word	0x200015dc
 800a23c:	200015d8 	.word	0x200015d8

0800a240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08e      	sub	sp, #56	; 0x38
 800a244:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a246:	e0ca      	b.n	800a3de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da18      	bge.n	800a280 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a24e:	1d3b      	adds	r3, r7, #4
 800a250:	3304      	adds	r3, #4
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10a      	bne.n	800a270 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	61fb      	str	r3, [r7, #28]
}
 800a26c:	bf00      	nop
 800a26e:	e7fe      	b.n	800a26e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a276:	6850      	ldr	r0, [r2, #4]
 800a278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a27a:	6892      	ldr	r2, [r2, #8]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f2c0 80aa 	blt.w	800a3dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	3304      	adds	r3, #4
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd fe47 	bl	8007f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff ff6b 	bl	800a17c <prvSampleTimeNow>
 800a2a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b09      	cmp	r3, #9
 800a2ac:	f200 8097 	bhi.w	800a3de <prvProcessReceivedCommands+0x19e>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <prvProcessReceivedCommands+0x78>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2e1 	.word	0x0800a2e1
 800a2bc:	0800a2e1 	.word	0x0800a2e1
 800a2c0:	0800a2e1 	.word	0x0800a2e1
 800a2c4:	0800a355 	.word	0x0800a355
 800a2c8:	0800a369 	.word	0x0800a369
 800a2cc:	0800a3b3 	.word	0x0800a3b3
 800a2d0:	0800a2e1 	.word	0x0800a2e1
 800a2d4:	0800a2e1 	.word	0x0800a2e1
 800a2d8:	0800a355 	.word	0x0800a355
 800a2dc:	0800a369 	.word	0x0800a369
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2e6:	f043 0301 	orr.w	r3, r3, #1
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	18d1      	adds	r1, r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a300:	f7ff ff5c 	bl	800a1bc <prvInsertTimerInActiveList>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d069      	beq.n	800a3de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a310:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d05e      	beq.n	800a3de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	441a      	add	r2, r3
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	2300      	movs	r3, #0
 800a32e:	2100      	movs	r1, #0
 800a330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a332:	f7ff fe05 	bl	8009f40 <xTimerGenericCommand>
 800a336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d14f      	bne.n	800a3de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	61bb      	str	r3, [r7, #24]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a366:	e03a      	b.n	800a3de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	617b      	str	r3, [r7, #20]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	699a      	ldr	r2, [r3, #24]
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	18d1      	adds	r1, r2, r3
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ac:	f7ff ff06 	bl	800a1bc <prvInsertTimerInActiveList>
					break;
 800a3b0:	e015      	b.n	800a3de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d103      	bne.n	800a3c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a3c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3c2:	f000 fbdd 	bl	800ab80 <vPortFree>
 800a3c6:	e00a      	b.n	800a3de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ce:	f023 0301 	bic.w	r3, r3, #1
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3da:	e000      	b.n	800a3de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a3dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <prvProcessReceivedCommands+0x1c0>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1d39      	adds	r1, r7, #4
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe f90c 	bl	8008604 <xQueueReceive>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f47f af2a 	bne.w	800a248 <prvProcessReceivedCommands+0x8>
	}
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	3730      	adds	r7, #48	; 0x30
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200015e0 	.word	0x200015e0

0800a404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a40a:	e048      	b.n	800a49e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a40c:	4b2d      	ldr	r3, [pc, #180]	; (800a4c4 <prvSwitchTimerLists+0xc0>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a416:	4b2b      	ldr	r3, [pc, #172]	; (800a4c4 <prvSwitchTimerLists+0xc0>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3304      	adds	r3, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7fd fd81 	bl	8007f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d02e      	beq.n	800a49e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4413      	add	r3, r2
 800a448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d90e      	bls.n	800a470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a45e:	4b19      	ldr	r3, [pc, #100]	; (800a4c4 <prvSwitchTimerLists+0xc0>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3304      	adds	r3, #4
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f7fd fd26 	bl	8007eba <vListInsert>
 800a46e:	e016      	b.n	800a49e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a470:	2300      	movs	r3, #0
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	2100      	movs	r1, #0
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fd60 	bl	8009f40 <xTimerGenericCommand>
 800a480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10a      	bne.n	800a49e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	603b      	str	r3, [r7, #0]
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <prvSwitchTimerLists+0xc0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1b1      	bne.n	800a40c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4a8:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <prvSwitchTimerLists+0xc0>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a04      	ldr	r2, [pc, #16]	; (800a4c4 <prvSwitchTimerLists+0xc0>)
 800a4b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4b6:	4a04      	ldr	r2, [pc, #16]	; (800a4c8 <prvSwitchTimerLists+0xc4>)
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	6013      	str	r3, [r2, #0]
}
 800a4bc:	bf00      	nop
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	200015d8 	.word	0x200015d8
 800a4c8:	200015dc 	.word	0x200015dc

0800a4cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4d2:	f000 f967 	bl	800a7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4d6:	4b15      	ldr	r3, [pc, #84]	; (800a52c <prvCheckForValidListAndQueue+0x60>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d120      	bne.n	800a520 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4de:	4814      	ldr	r0, [pc, #80]	; (800a530 <prvCheckForValidListAndQueue+0x64>)
 800a4e0:	f7fd fc9a 	bl	8007e18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4e4:	4813      	ldr	r0, [pc, #76]	; (800a534 <prvCheckForValidListAndQueue+0x68>)
 800a4e6:	f7fd fc97 	bl	8007e18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4ea:	4b13      	ldr	r3, [pc, #76]	; (800a538 <prvCheckForValidListAndQueue+0x6c>)
 800a4ec:	4a10      	ldr	r2, [pc, #64]	; (800a530 <prvCheckForValidListAndQueue+0x64>)
 800a4ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4f0:	4b12      	ldr	r3, [pc, #72]	; (800a53c <prvCheckForValidListAndQueue+0x70>)
 800a4f2:	4a10      	ldr	r2, [pc, #64]	; (800a534 <prvCheckForValidListAndQueue+0x68>)
 800a4f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	4b11      	ldr	r3, [pc, #68]	; (800a540 <prvCheckForValidListAndQueue+0x74>)
 800a4fc:	4a11      	ldr	r2, [pc, #68]	; (800a544 <prvCheckForValidListAndQueue+0x78>)
 800a4fe:	2110      	movs	r1, #16
 800a500:	200a      	movs	r0, #10
 800a502:	f7fd fda5 	bl	8008050 <xQueueGenericCreateStatic>
 800a506:	4603      	mov	r3, r0
 800a508:	4a08      	ldr	r2, [pc, #32]	; (800a52c <prvCheckForValidListAndQueue+0x60>)
 800a50a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a50c:	4b07      	ldr	r3, [pc, #28]	; (800a52c <prvCheckForValidListAndQueue+0x60>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a514:	4b05      	ldr	r3, [pc, #20]	; (800a52c <prvCheckForValidListAndQueue+0x60>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	490b      	ldr	r1, [pc, #44]	; (800a548 <prvCheckForValidListAndQueue+0x7c>)
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fa86 	bl	8008a2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a520:	f000 f970 	bl	800a804 <vPortExitCritical>
}
 800a524:	bf00      	nop
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	200015e0 	.word	0x200015e0
 800a530:	200015b0 	.word	0x200015b0
 800a534:	200015c4 	.word	0x200015c4
 800a538:	200015d8 	.word	0x200015d8
 800a53c:	200015dc 	.word	0x200015dc
 800a540:	2000168c 	.word	0x2000168c
 800a544:	200015ec 	.word	0x200015ec
 800a548:	0800c154 	.word	0x0800c154

0800a54c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3b04      	subs	r3, #4
 800a55c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3b04      	subs	r3, #4
 800a56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f023 0201 	bic.w	r2, r3, #1
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3b04      	subs	r3, #4
 800a57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a57c:	4a0c      	ldr	r2, [pc, #48]	; (800a5b0 <pxPortInitialiseStack+0x64>)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3b14      	subs	r3, #20
 800a586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3b04      	subs	r3, #4
 800a592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f06f 0202 	mvn.w	r2, #2
 800a59a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3b20      	subs	r3, #32
 800a5a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	0800a5b5 	.word	0x0800a5b5

0800a5b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5be:	4b12      	ldr	r3, [pc, #72]	; (800a608 <prvTaskExitError+0x54>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c6:	d00a      	beq.n	800a5de <prvTaskExitError+0x2a>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	60fb      	str	r3, [r7, #12]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <prvTaskExitError+0x28>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60bb      	str	r3, [r7, #8]
}
 800a5f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5f2:	bf00      	nop
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0fc      	beq.n	800a5f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	2000000c 	.word	0x2000000c
 800a60c:	00000000 	.word	0x00000000

0800a610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <pxCurrentTCBConst2>)
 800a612:	6819      	ldr	r1, [r3, #0]
 800a614:	6808      	ldr	r0, [r1, #0]
 800a616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	f380 8809 	msr	PSP, r0
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f04f 0000 	mov.w	r0, #0
 800a626:	f380 8811 	msr	BASEPRI, r0
 800a62a:	4770      	bx	lr
 800a62c:	f3af 8000 	nop.w

0800a630 <pxCurrentTCBConst2>:
 800a630:	200010b0 	.word	0x200010b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop

0800a638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a638:	4808      	ldr	r0, [pc, #32]	; (800a65c <prvPortStartFirstTask+0x24>)
 800a63a:	6800      	ldr	r0, [r0, #0]
 800a63c:	6800      	ldr	r0, [r0, #0]
 800a63e:	f380 8808 	msr	MSP, r0
 800a642:	f04f 0000 	mov.w	r0, #0
 800a646:	f380 8814 	msr	CONTROL, r0
 800a64a:	b662      	cpsie	i
 800a64c:	b661      	cpsie	f
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	df00      	svc	0
 800a658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a65a:	bf00      	nop
 800a65c:	e000ed08 	.word	0xe000ed08

0800a660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a666:	4b46      	ldr	r3, [pc, #280]	; (800a780 <xPortStartScheduler+0x120>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a46      	ldr	r2, [pc, #280]	; (800a784 <xPortStartScheduler+0x124>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10a      	bne.n	800a686 <xPortStartScheduler+0x26>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	613b      	str	r3, [r7, #16]
}
 800a682:	bf00      	nop
 800a684:	e7fe      	b.n	800a684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a686:	4b3e      	ldr	r3, [pc, #248]	; (800a780 <xPortStartScheduler+0x120>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a3f      	ldr	r2, [pc, #252]	; (800a788 <xPortStartScheduler+0x128>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d10a      	bne.n	800a6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	60fb      	str	r3, [r7, #12]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6a6:	4b39      	ldr	r3, [pc, #228]	; (800a78c <xPortStartScheduler+0x12c>)
 800a6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	22ff      	movs	r2, #255	; 0xff
 800a6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	4b31      	ldr	r3, [pc, #196]	; (800a790 <xPortStartScheduler+0x130>)
 800a6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6ce:	4b31      	ldr	r3, [pc, #196]	; (800a794 <xPortStartScheduler+0x134>)
 800a6d0:	2207      	movs	r2, #7
 800a6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6d4:	e009      	b.n	800a6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a6d6:	4b2f      	ldr	r3, [pc, #188]	; (800a794 <xPortStartScheduler+0x134>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4a2d      	ldr	r2, [pc, #180]	; (800a794 <xPortStartScheduler+0x134>)
 800a6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	005b      	lsls	r3, r3, #1
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f2:	2b80      	cmp	r3, #128	; 0x80
 800a6f4:	d0ef      	beq.n	800a6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6f6:	4b27      	ldr	r3, [pc, #156]	; (800a794 <xPortStartScheduler+0x134>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f1c3 0307 	rsb	r3, r3, #7
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	d00a      	beq.n	800a718 <xPortStartScheduler+0xb8>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60bb      	str	r3, [r7, #8]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a718:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <xPortStartScheduler+0x134>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <xPortStartScheduler+0x134>)
 800a720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <xPortStartScheduler+0x134>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a72a:	4a1a      	ldr	r2, [pc, #104]	; (800a794 <xPortStartScheduler+0x134>)
 800a72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	b2da      	uxtb	r2, r3
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a736:	4b18      	ldr	r3, [pc, #96]	; (800a798 <xPortStartScheduler+0x138>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a17      	ldr	r2, [pc, #92]	; (800a798 <xPortStartScheduler+0x138>)
 800a73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a742:	4b15      	ldr	r3, [pc, #84]	; (800a798 <xPortStartScheduler+0x138>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a14      	ldr	r2, [pc, #80]	; (800a798 <xPortStartScheduler+0x138>)
 800a748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a74e:	f000 f8dd 	bl	800a90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a752:	4b12      	ldr	r3, [pc, #72]	; (800a79c <xPortStartScheduler+0x13c>)
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a758:	f000 f8fc 	bl	800a954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a75c:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <xPortStartScheduler+0x140>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a0f      	ldr	r2, [pc, #60]	; (800a7a0 <xPortStartScheduler+0x140>)
 800a762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a768:	f7ff ff66 	bl	800a638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a76c:	f7fe fe48 	bl	8009400 <vTaskSwitchContext>
	prvTaskExitError();
 800a770:	f7ff ff20 	bl	800a5b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	e000ed00 	.word	0xe000ed00
 800a784:	410fc271 	.word	0x410fc271
 800a788:	410fc270 	.word	0x410fc270
 800a78c:	e000e400 	.word	0xe000e400
 800a790:	200016dc 	.word	0x200016dc
 800a794:	200016e0 	.word	0x200016e0
 800a798:	e000ed20 	.word	0xe000ed20
 800a79c:	2000000c 	.word	0x2000000c
 800a7a0:	e000ef34 	.word	0xe000ef34

0800a7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	607b      	str	r3, [r7, #4]
}
 800a7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7be:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <vPortEnterCritical+0x58>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	4a0d      	ldr	r2, [pc, #52]	; (800a7fc <vPortEnterCritical+0x58>)
 800a7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7c8:	4b0c      	ldr	r3, [pc, #48]	; (800a7fc <vPortEnterCritical+0x58>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d10f      	bne.n	800a7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7d0:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <vPortEnterCritical+0x5c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	603b      	str	r3, [r7, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	e7fe      	b.n	800a7ee <vPortEnterCritical+0x4a>
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	2000000c 	.word	0x2000000c
 800a800:	e000ed04 	.word	0xe000ed04

0800a804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a80a:	4b12      	ldr	r3, [pc, #72]	; (800a854 <vPortExitCritical+0x50>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <vPortExitCritical+0x24>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	607b      	str	r3, [r7, #4]
}
 800a824:	bf00      	nop
 800a826:	e7fe      	b.n	800a826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <vPortExitCritical+0x50>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	4a09      	ldr	r2, [pc, #36]	; (800a854 <vPortExitCritical+0x50>)
 800a830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a832:	4b08      	ldr	r3, [pc, #32]	; (800a854 <vPortExitCritical+0x50>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d105      	bne.n	800a846 <vPortExitCritical+0x42>
 800a83a:	2300      	movs	r3, #0
 800a83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	f383 8811 	msr	BASEPRI, r3
}
 800a844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	2000000c 	.word	0x2000000c
	...

0800a860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a860:	f3ef 8009 	mrs	r0, PSP
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <pxCurrentTCBConst>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	f01e 0f10 	tst.w	lr, #16
 800a870:	bf08      	it	eq
 800a872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87a:	6010      	str	r0, [r2, #0]
 800a87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a884:	f380 8811 	msr	BASEPRI, r0
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f7fe fdb6 	bl	8009400 <vTaskSwitchContext>
 800a894:	f04f 0000 	mov.w	r0, #0
 800a898:	f380 8811 	msr	BASEPRI, r0
 800a89c:	bc09      	pop	{r0, r3}
 800a89e:	6819      	ldr	r1, [r3, #0]
 800a8a0:	6808      	ldr	r0, [r1, #0]
 800a8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a6:	f01e 0f10 	tst.w	lr, #16
 800a8aa:	bf08      	it	eq
 800a8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8b0:	f380 8809 	msr	PSP, r0
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	f3af 8000 	nop.w

0800a8c0 <pxCurrentTCBConst>:
 800a8c0:	200010b0 	.word	0x200010b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8c4:	bf00      	nop
 800a8c6:	bf00      	nop

0800a8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8e2:	f7fe fcd3 	bl	800928c <xTaskIncrementTick>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8ec:	4b06      	ldr	r3, [pc, #24]	; (800a908 <xPortSysTickHandler+0x40>)
 800a8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	f383 8811 	msr	BASEPRI, r3
}
 800a8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	e000ed04 	.word	0xe000ed04

0800a90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a910:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <vPortSetupTimerInterrupt+0x34>)
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a916:	4b0b      	ldr	r3, [pc, #44]	; (800a944 <vPortSetupTimerInterrupt+0x38>)
 800a918:	2200      	movs	r2, #0
 800a91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a91c:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <vPortSetupTimerInterrupt+0x3c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <vPortSetupTimerInterrupt+0x40>)
 800a922:	fba2 2303 	umull	r2, r3, r2, r3
 800a926:	099b      	lsrs	r3, r3, #6
 800a928:	4a09      	ldr	r2, [pc, #36]	; (800a950 <vPortSetupTimerInterrupt+0x44>)
 800a92a:	3b01      	subs	r3, #1
 800a92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a92e:	4b04      	ldr	r3, [pc, #16]	; (800a940 <vPortSetupTimerInterrupt+0x34>)
 800a930:	2207      	movs	r2, #7
 800a932:	601a      	str	r2, [r3, #0]
}
 800a934:	bf00      	nop
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	e000e010 	.word	0xe000e010
 800a944:	e000e018 	.word	0xe000e018
 800a948:	20000000 	.word	0x20000000
 800a94c:	10624dd3 	.word	0x10624dd3
 800a950:	e000e014 	.word	0xe000e014

0800a954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a964 <vPortEnableVFP+0x10>
 800a958:	6801      	ldr	r1, [r0, #0]
 800a95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a95e:	6001      	str	r1, [r0, #0]
 800a960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a962:	bf00      	nop
 800a964:	e000ed88 	.word	0xe000ed88

0800a968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a96e:	f3ef 8305 	mrs	r3, IPSR
 800a972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b0f      	cmp	r3, #15
 800a978:	d914      	bls.n	800a9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a97a:	4a17      	ldr	r2, [pc, #92]	; (800a9d8 <vPortValidateInterruptPriority+0x70>)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a984:	4b15      	ldr	r3, [pc, #84]	; (800a9dc <vPortValidateInterruptPriority+0x74>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	7afa      	ldrb	r2, [r7, #11]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d20a      	bcs.n	800a9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	607b      	str	r3, [r7, #4]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9a4:	4b0e      	ldr	r3, [pc, #56]	; (800a9e0 <vPortValidateInterruptPriority+0x78>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <vPortValidateInterruptPriority+0x7c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d90a      	bls.n	800a9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	603b      	str	r3, [r7, #0]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <vPortValidateInterruptPriority+0x60>
	}
 800a9ca:	bf00      	nop
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	e000e3f0 	.word	0xe000e3f0
 800a9dc:	200016dc 	.word	0x200016dc
 800a9e0:	e000ed0c 	.word	0xe000ed0c
 800a9e4:	200016e0 	.word	0x200016e0

0800a9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08a      	sub	sp, #40	; 0x28
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9f4:	f7fe fb7c 	bl	80090f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9f8:	4b5b      	ldr	r3, [pc, #364]	; (800ab68 <pvPortMalloc+0x180>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa00:	f000 f920 	bl	800ac44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa04:	4b59      	ldr	r3, [pc, #356]	; (800ab6c <pvPortMalloc+0x184>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 8093 	bne.w	800ab38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01d      	beq.n	800aa54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa18:	2208      	movs	r2, #8
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f003 0307 	and.w	r3, r3, #7
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d014      	beq.n	800aa54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f023 0307 	bic.w	r3, r3, #7
 800aa30:	3308      	adds	r3, #8
 800aa32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <pvPortMalloc+0x6c>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	617b      	str	r3, [r7, #20]
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d06e      	beq.n	800ab38 <pvPortMalloc+0x150>
 800aa5a:	4b45      	ldr	r3, [pc, #276]	; (800ab70 <pvPortMalloc+0x188>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d869      	bhi.n	800ab38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa64:	4b43      	ldr	r3, [pc, #268]	; (800ab74 <pvPortMalloc+0x18c>)
 800aa66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa68:	4b42      	ldr	r3, [pc, #264]	; (800ab74 <pvPortMalloc+0x18c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa6e:	e004      	b.n	800aa7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d903      	bls.n	800aa8c <pvPortMalloc+0xa4>
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1f1      	bne.n	800aa70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa8c:	4b36      	ldr	r3, [pc, #216]	; (800ab68 <pvPortMalloc+0x180>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d050      	beq.n	800ab38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	4413      	add	r3, r2
 800aa9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	2308      	movs	r3, #8
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d91f      	bls.n	800aaf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4413      	add	r3, r2
 800aabe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	f003 0307 	and.w	r3, r3, #7
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00a      	beq.n	800aae0 <pvPortMalloc+0xf8>
	__asm volatile
 800aaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	613b      	str	r3, [r7, #16]
}
 800aadc:	bf00      	nop
 800aade:	e7fe      	b.n	800aade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	1ad2      	subs	r2, r2, r3
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaf2:	69b8      	ldr	r0, [r7, #24]
 800aaf4:	f000 f908 	bl	800ad08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaf8:	4b1d      	ldr	r3, [pc, #116]	; (800ab70 <pvPortMalloc+0x188>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	4a1b      	ldr	r2, [pc, #108]	; (800ab70 <pvPortMalloc+0x188>)
 800ab04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab06:	4b1a      	ldr	r3, [pc, #104]	; (800ab70 <pvPortMalloc+0x188>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	4b1b      	ldr	r3, [pc, #108]	; (800ab78 <pvPortMalloc+0x190>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d203      	bcs.n	800ab1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab12:	4b17      	ldr	r3, [pc, #92]	; (800ab70 <pvPortMalloc+0x188>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <pvPortMalloc+0x190>)
 800ab18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <pvPortMalloc+0x184>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab2e:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <pvPortMalloc+0x194>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	4a11      	ldr	r2, [pc, #68]	; (800ab7c <pvPortMalloc+0x194>)
 800ab36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab38:	f7fe fae8 	bl	800910c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	f003 0307 	and.w	r3, r3, #7
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <pvPortMalloc+0x174>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	60fb      	str	r3, [r7, #12]
}
 800ab58:	bf00      	nop
 800ab5a:	e7fe      	b.n	800ab5a <pvPortMalloc+0x172>
	return pvReturn;
 800ab5c:	69fb      	ldr	r3, [r7, #28]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3728      	adds	r7, #40	; 0x28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200052ec 	.word	0x200052ec
 800ab6c:	20005300 	.word	0x20005300
 800ab70:	200052f0 	.word	0x200052f0
 800ab74:	200052e4 	.word	0x200052e4
 800ab78:	200052f4 	.word	0x200052f4
 800ab7c:	200052f8 	.word	0x200052f8

0800ab80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d04d      	beq.n	800ac2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab92:	2308      	movs	r3, #8
 800ab94:	425b      	negs	r3, r3
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4413      	add	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	4b24      	ldr	r3, [pc, #144]	; (800ac38 <vPortFree+0xb8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4013      	ands	r3, r2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <vPortFree+0x44>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	60fb      	str	r3, [r7, #12]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00a      	beq.n	800abe2 <vPortFree+0x62>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	60bb      	str	r3, [r7, #8]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <vPortFree+0xb8>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4013      	ands	r3, r2
 800abec:	2b00      	cmp	r3, #0
 800abee:	d01e      	beq.n	800ac2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d11a      	bne.n	800ac2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	4b0e      	ldr	r3, [pc, #56]	; (800ac38 <vPortFree+0xb8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	43db      	mvns	r3, r3
 800ac02:	401a      	ands	r2, r3
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac08:	f7fe fa72 	bl	80090f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <vPortFree+0xbc>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4413      	add	r3, r2
 800ac16:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <vPortFree+0xbc>)
 800ac18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac1a:	6938      	ldr	r0, [r7, #16]
 800ac1c:	f000 f874 	bl	800ad08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac20:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <vPortFree+0xc0>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3301      	adds	r3, #1
 800ac26:	4a06      	ldr	r2, [pc, #24]	; (800ac40 <vPortFree+0xc0>)
 800ac28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac2a:	f7fe fa6f 	bl	800910c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac2e:	bf00      	nop
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20005300 	.word	0x20005300
 800ac3c:	200052f0 	.word	0x200052f0
 800ac40:	200052fc 	.word	0x200052fc

0800ac44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac50:	4b27      	ldr	r3, [pc, #156]	; (800acf0 <prvHeapInit+0xac>)
 800ac52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00c      	beq.n	800ac78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3307      	adds	r3, #7
 800ac62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f023 0307 	bic.w	r3, r3, #7
 800ac6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	4a1f      	ldr	r2, [pc, #124]	; (800acf0 <prvHeapInit+0xac>)
 800ac74:	4413      	add	r3, r2
 800ac76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac7c:	4a1d      	ldr	r2, [pc, #116]	; (800acf4 <prvHeapInit+0xb0>)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac82:	4b1c      	ldr	r3, [pc, #112]	; (800acf4 <prvHeapInit+0xb0>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac90:	2208      	movs	r2, #8
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	1a9b      	subs	r3, r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0307 	bic.w	r3, r3, #7
 800ac9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4a15      	ldr	r2, [pc, #84]	; (800acf8 <prvHeapInit+0xb4>)
 800aca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aca6:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <prvHeapInit+0xb4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2200      	movs	r2, #0
 800acac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acae:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <prvHeapInit+0xb4>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	1ad2      	subs	r2, r2, r3
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acc4:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <prvHeapInit+0xb4>)
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	4a0a      	ldr	r2, [pc, #40]	; (800acfc <prvHeapInit+0xb8>)
 800acd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <prvHeapInit+0xbc>)
 800acda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <prvHeapInit+0xc0>)
 800acde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ace2:	601a      	str	r2, [r3, #0]
}
 800ace4:	bf00      	nop
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	200016e4 	.word	0x200016e4
 800acf4:	200052e4 	.word	0x200052e4
 800acf8:	200052ec 	.word	0x200052ec
 800acfc:	200052f4 	.word	0x200052f4
 800ad00:	200052f0 	.word	0x200052f0
 800ad04:	20005300 	.word	0x20005300

0800ad08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad10:	4b28      	ldr	r3, [pc, #160]	; (800adb4 <prvInsertBlockIntoFreeList+0xac>)
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	e002      	b.n	800ad1c <prvInsertBlockIntoFreeList+0x14>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d8f7      	bhi.n	800ad16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	4413      	add	r3, r2
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d108      	bne.n	800ad4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	441a      	add	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	441a      	add	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d118      	bne.n	800ad90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d00d      	beq.n	800ad86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	441a      	add	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	e008      	b.n	800ad98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	e003      	b.n	800ad98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d002      	beq.n	800ada6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ada6:	bf00      	nop
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	200052e4 	.word	0x200052e4
 800adb8:	200052ec 	.word	0x200052ec

0800adbc <__errno>:
 800adbc:	4b01      	ldr	r3, [pc, #4]	; (800adc4 <__errno+0x8>)
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20000010 	.word	0x20000010

0800adc8 <std>:
 800adc8:	2300      	movs	r3, #0
 800adca:	b510      	push	{r4, lr}
 800adcc:	4604      	mov	r4, r0
 800adce:	e9c0 3300 	strd	r3, r3, [r0]
 800add2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800add6:	6083      	str	r3, [r0, #8]
 800add8:	8181      	strh	r1, [r0, #12]
 800adda:	6643      	str	r3, [r0, #100]	; 0x64
 800addc:	81c2      	strh	r2, [r0, #14]
 800adde:	6183      	str	r3, [r0, #24]
 800ade0:	4619      	mov	r1, r3
 800ade2:	2208      	movs	r2, #8
 800ade4:	305c      	adds	r0, #92	; 0x5c
 800ade6:	f000 f91a 	bl	800b01e <memset>
 800adea:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <std+0x38>)
 800adec:	6263      	str	r3, [r4, #36]	; 0x24
 800adee:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <std+0x3c>)
 800adf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <std+0x40>)
 800adf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adf6:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <std+0x44>)
 800adf8:	6224      	str	r4, [r4, #32]
 800adfa:	6323      	str	r3, [r4, #48]	; 0x30
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	bf00      	nop
 800ae00:	0800b369 	.word	0x0800b369
 800ae04:	0800b38b 	.word	0x0800b38b
 800ae08:	0800b3c3 	.word	0x0800b3c3
 800ae0c:	0800b3e7 	.word	0x0800b3e7

0800ae10 <_cleanup_r>:
 800ae10:	4901      	ldr	r1, [pc, #4]	; (800ae18 <_cleanup_r+0x8>)
 800ae12:	f000 b8af 	b.w	800af74 <_fwalk_reent>
 800ae16:	bf00      	nop
 800ae18:	0800b6c1 	.word	0x0800b6c1

0800ae1c <__sfmoreglue>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	2268      	movs	r2, #104	; 0x68
 800ae20:	1e4d      	subs	r5, r1, #1
 800ae22:	4355      	muls	r5, r2
 800ae24:	460e      	mov	r6, r1
 800ae26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae2a:	f000 f921 	bl	800b070 <_malloc_r>
 800ae2e:	4604      	mov	r4, r0
 800ae30:	b140      	cbz	r0, 800ae44 <__sfmoreglue+0x28>
 800ae32:	2100      	movs	r1, #0
 800ae34:	e9c0 1600 	strd	r1, r6, [r0]
 800ae38:	300c      	adds	r0, #12
 800ae3a:	60a0      	str	r0, [r4, #8]
 800ae3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae40:	f000 f8ed 	bl	800b01e <memset>
 800ae44:	4620      	mov	r0, r4
 800ae46:	bd70      	pop	{r4, r5, r6, pc}

0800ae48 <__sfp_lock_acquire>:
 800ae48:	4801      	ldr	r0, [pc, #4]	; (800ae50 <__sfp_lock_acquire+0x8>)
 800ae4a:	f000 b8d8 	b.w	800affe <__retarget_lock_acquire_recursive>
 800ae4e:	bf00      	nop
 800ae50:	20005305 	.word	0x20005305

0800ae54 <__sfp_lock_release>:
 800ae54:	4801      	ldr	r0, [pc, #4]	; (800ae5c <__sfp_lock_release+0x8>)
 800ae56:	f000 b8d3 	b.w	800b000 <__retarget_lock_release_recursive>
 800ae5a:	bf00      	nop
 800ae5c:	20005305 	.word	0x20005305

0800ae60 <__sinit_lock_acquire>:
 800ae60:	4801      	ldr	r0, [pc, #4]	; (800ae68 <__sinit_lock_acquire+0x8>)
 800ae62:	f000 b8cc 	b.w	800affe <__retarget_lock_acquire_recursive>
 800ae66:	bf00      	nop
 800ae68:	20005306 	.word	0x20005306

0800ae6c <__sinit_lock_release>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	; (800ae74 <__sinit_lock_release+0x8>)
 800ae6e:	f000 b8c7 	b.w	800b000 <__retarget_lock_release_recursive>
 800ae72:	bf00      	nop
 800ae74:	20005306 	.word	0x20005306

0800ae78 <__sinit>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	f7ff fff0 	bl	800ae60 <__sinit_lock_acquire>
 800ae80:	69a3      	ldr	r3, [r4, #24]
 800ae82:	b11b      	cbz	r3, 800ae8c <__sinit+0x14>
 800ae84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae88:	f7ff bff0 	b.w	800ae6c <__sinit_lock_release>
 800ae8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae90:	6523      	str	r3, [r4, #80]	; 0x50
 800ae92:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <__sinit+0x68>)
 800ae94:	4a13      	ldr	r2, [pc, #76]	; (800aee4 <__sinit+0x6c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	bf04      	itt	eq
 800ae9e:	2301      	moveq	r3, #1
 800aea0:	61a3      	streq	r3, [r4, #24]
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 f820 	bl	800aee8 <__sfp>
 800aea8:	6060      	str	r0, [r4, #4]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 f81c 	bl	800aee8 <__sfp>
 800aeb0:	60a0      	str	r0, [r4, #8]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 f818 	bl	800aee8 <__sfp>
 800aeb8:	2200      	movs	r2, #0
 800aeba:	60e0      	str	r0, [r4, #12]
 800aebc:	2104      	movs	r1, #4
 800aebe:	6860      	ldr	r0, [r4, #4]
 800aec0:	f7ff ff82 	bl	800adc8 <std>
 800aec4:	68a0      	ldr	r0, [r4, #8]
 800aec6:	2201      	movs	r2, #1
 800aec8:	2109      	movs	r1, #9
 800aeca:	f7ff ff7d 	bl	800adc8 <std>
 800aece:	68e0      	ldr	r0, [r4, #12]
 800aed0:	2202      	movs	r2, #2
 800aed2:	2112      	movs	r1, #18
 800aed4:	f7ff ff78 	bl	800adc8 <std>
 800aed8:	2301      	movs	r3, #1
 800aeda:	61a3      	str	r3, [r4, #24]
 800aedc:	e7d2      	b.n	800ae84 <__sinit+0xc>
 800aede:	bf00      	nop
 800aee0:	0800c2c4 	.word	0x0800c2c4
 800aee4:	0800ae11 	.word	0x0800ae11

0800aee8 <__sfp>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	4607      	mov	r7, r0
 800aeec:	f7ff ffac 	bl	800ae48 <__sfp_lock_acquire>
 800aef0:	4b1e      	ldr	r3, [pc, #120]	; (800af6c <__sfp+0x84>)
 800aef2:	681e      	ldr	r6, [r3, #0]
 800aef4:	69b3      	ldr	r3, [r6, #24]
 800aef6:	b913      	cbnz	r3, 800aefe <__sfp+0x16>
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff ffbd 	bl	800ae78 <__sinit>
 800aefe:	3648      	adds	r6, #72	; 0x48
 800af00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af04:	3b01      	subs	r3, #1
 800af06:	d503      	bpl.n	800af10 <__sfp+0x28>
 800af08:	6833      	ldr	r3, [r6, #0]
 800af0a:	b30b      	cbz	r3, 800af50 <__sfp+0x68>
 800af0c:	6836      	ldr	r6, [r6, #0]
 800af0e:	e7f7      	b.n	800af00 <__sfp+0x18>
 800af10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af14:	b9d5      	cbnz	r5, 800af4c <__sfp+0x64>
 800af16:	4b16      	ldr	r3, [pc, #88]	; (800af70 <__sfp+0x88>)
 800af18:	60e3      	str	r3, [r4, #12]
 800af1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af1e:	6665      	str	r5, [r4, #100]	; 0x64
 800af20:	f000 f86c 	bl	800affc <__retarget_lock_init_recursive>
 800af24:	f7ff ff96 	bl	800ae54 <__sfp_lock_release>
 800af28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af30:	6025      	str	r5, [r4, #0]
 800af32:	61a5      	str	r5, [r4, #24]
 800af34:	2208      	movs	r2, #8
 800af36:	4629      	mov	r1, r5
 800af38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af3c:	f000 f86f 	bl	800b01e <memset>
 800af40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af48:	4620      	mov	r0, r4
 800af4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af4c:	3468      	adds	r4, #104	; 0x68
 800af4e:	e7d9      	b.n	800af04 <__sfp+0x1c>
 800af50:	2104      	movs	r1, #4
 800af52:	4638      	mov	r0, r7
 800af54:	f7ff ff62 	bl	800ae1c <__sfmoreglue>
 800af58:	4604      	mov	r4, r0
 800af5a:	6030      	str	r0, [r6, #0]
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1d5      	bne.n	800af0c <__sfp+0x24>
 800af60:	f7ff ff78 	bl	800ae54 <__sfp_lock_release>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	e7ee      	b.n	800af48 <__sfp+0x60>
 800af6a:	bf00      	nop
 800af6c:	0800c2c4 	.word	0x0800c2c4
 800af70:	ffff0001 	.word	0xffff0001

0800af74 <_fwalk_reent>:
 800af74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af78:	4606      	mov	r6, r0
 800af7a:	4688      	mov	r8, r1
 800af7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af80:	2700      	movs	r7, #0
 800af82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af86:	f1b9 0901 	subs.w	r9, r9, #1
 800af8a:	d505      	bpl.n	800af98 <_fwalk_reent+0x24>
 800af8c:	6824      	ldr	r4, [r4, #0]
 800af8e:	2c00      	cmp	r4, #0
 800af90:	d1f7      	bne.n	800af82 <_fwalk_reent+0xe>
 800af92:	4638      	mov	r0, r7
 800af94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af98:	89ab      	ldrh	r3, [r5, #12]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d907      	bls.n	800afae <_fwalk_reent+0x3a>
 800af9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afa2:	3301      	adds	r3, #1
 800afa4:	d003      	beq.n	800afae <_fwalk_reent+0x3a>
 800afa6:	4629      	mov	r1, r5
 800afa8:	4630      	mov	r0, r6
 800afaa:	47c0      	blx	r8
 800afac:	4307      	orrs	r7, r0
 800afae:	3568      	adds	r5, #104	; 0x68
 800afb0:	e7e9      	b.n	800af86 <_fwalk_reent+0x12>
	...

0800afb4 <__libc_init_array>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	4d0d      	ldr	r5, [pc, #52]	; (800afec <__libc_init_array+0x38>)
 800afb8:	4c0d      	ldr	r4, [pc, #52]	; (800aff0 <__libc_init_array+0x3c>)
 800afba:	1b64      	subs	r4, r4, r5
 800afbc:	10a4      	asrs	r4, r4, #2
 800afbe:	2600      	movs	r6, #0
 800afc0:	42a6      	cmp	r6, r4
 800afc2:	d109      	bne.n	800afd8 <__libc_init_array+0x24>
 800afc4:	4d0b      	ldr	r5, [pc, #44]	; (800aff4 <__libc_init_array+0x40>)
 800afc6:	4c0c      	ldr	r4, [pc, #48]	; (800aff8 <__libc_init_array+0x44>)
 800afc8:	f000 ffa8 	bl	800bf1c <_init>
 800afcc:	1b64      	subs	r4, r4, r5
 800afce:	10a4      	asrs	r4, r4, #2
 800afd0:	2600      	movs	r6, #0
 800afd2:	42a6      	cmp	r6, r4
 800afd4:	d105      	bne.n	800afe2 <__libc_init_array+0x2e>
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afdc:	4798      	blx	r3
 800afde:	3601      	adds	r6, #1
 800afe0:	e7ee      	b.n	800afc0 <__libc_init_array+0xc>
 800afe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe6:	4798      	blx	r3
 800afe8:	3601      	adds	r6, #1
 800afea:	e7f2      	b.n	800afd2 <__libc_init_array+0x1e>
 800afec:	0800c304 	.word	0x0800c304
 800aff0:	0800c304 	.word	0x0800c304
 800aff4:	0800c304 	.word	0x0800c304
 800aff8:	0800c308 	.word	0x0800c308

0800affc <__retarget_lock_init_recursive>:
 800affc:	4770      	bx	lr

0800affe <__retarget_lock_acquire_recursive>:
 800affe:	4770      	bx	lr

0800b000 <__retarget_lock_release_recursive>:
 800b000:	4770      	bx	lr

0800b002 <memcpy>:
 800b002:	440a      	add	r2, r1
 800b004:	4291      	cmp	r1, r2
 800b006:	f100 33ff 	add.w	r3, r0, #4294967295
 800b00a:	d100      	bne.n	800b00e <memcpy+0xc>
 800b00c:	4770      	bx	lr
 800b00e:	b510      	push	{r4, lr}
 800b010:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b014:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b018:	4291      	cmp	r1, r2
 800b01a:	d1f9      	bne.n	800b010 <memcpy+0xe>
 800b01c:	bd10      	pop	{r4, pc}

0800b01e <memset>:
 800b01e:	4402      	add	r2, r0
 800b020:	4603      	mov	r3, r0
 800b022:	4293      	cmp	r3, r2
 800b024:	d100      	bne.n	800b028 <memset+0xa>
 800b026:	4770      	bx	lr
 800b028:	f803 1b01 	strb.w	r1, [r3], #1
 800b02c:	e7f9      	b.n	800b022 <memset+0x4>
	...

0800b030 <sbrk_aligned>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	4e0e      	ldr	r6, [pc, #56]	; (800b06c <sbrk_aligned+0x3c>)
 800b034:	460c      	mov	r4, r1
 800b036:	6831      	ldr	r1, [r6, #0]
 800b038:	4605      	mov	r5, r0
 800b03a:	b911      	cbnz	r1, 800b042 <sbrk_aligned+0x12>
 800b03c:	f000 f984 	bl	800b348 <_sbrk_r>
 800b040:	6030      	str	r0, [r6, #0]
 800b042:	4621      	mov	r1, r4
 800b044:	4628      	mov	r0, r5
 800b046:	f000 f97f 	bl	800b348 <_sbrk_r>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	d00a      	beq.n	800b064 <sbrk_aligned+0x34>
 800b04e:	1cc4      	adds	r4, r0, #3
 800b050:	f024 0403 	bic.w	r4, r4, #3
 800b054:	42a0      	cmp	r0, r4
 800b056:	d007      	beq.n	800b068 <sbrk_aligned+0x38>
 800b058:	1a21      	subs	r1, r4, r0
 800b05a:	4628      	mov	r0, r5
 800b05c:	f000 f974 	bl	800b348 <_sbrk_r>
 800b060:	3001      	adds	r0, #1
 800b062:	d101      	bne.n	800b068 <sbrk_aligned+0x38>
 800b064:	f04f 34ff 	mov.w	r4, #4294967295
 800b068:	4620      	mov	r0, r4
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	2000530c 	.word	0x2000530c

0800b070 <_malloc_r>:
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	1ccd      	adds	r5, r1, #3
 800b076:	f025 0503 	bic.w	r5, r5, #3
 800b07a:	3508      	adds	r5, #8
 800b07c:	2d0c      	cmp	r5, #12
 800b07e:	bf38      	it	cc
 800b080:	250c      	movcc	r5, #12
 800b082:	2d00      	cmp	r5, #0
 800b084:	4607      	mov	r7, r0
 800b086:	db01      	blt.n	800b08c <_malloc_r+0x1c>
 800b088:	42a9      	cmp	r1, r5
 800b08a:	d905      	bls.n	800b098 <_malloc_r+0x28>
 800b08c:	230c      	movs	r3, #12
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	2600      	movs	r6, #0
 800b092:	4630      	mov	r0, r6
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b098:	4e2e      	ldr	r6, [pc, #184]	; (800b154 <_malloc_r+0xe4>)
 800b09a:	f000 fbc5 	bl	800b828 <__malloc_lock>
 800b09e:	6833      	ldr	r3, [r6, #0]
 800b0a0:	461c      	mov	r4, r3
 800b0a2:	bb34      	cbnz	r4, 800b0f2 <_malloc_r+0x82>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f7ff ffc2 	bl	800b030 <sbrk_aligned>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	d14d      	bne.n	800b14e <_malloc_r+0xde>
 800b0b2:	6834      	ldr	r4, [r6, #0]
 800b0b4:	4626      	mov	r6, r4
 800b0b6:	2e00      	cmp	r6, #0
 800b0b8:	d140      	bne.n	800b13c <_malloc_r+0xcc>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4638      	mov	r0, r7
 800b0c0:	eb04 0803 	add.w	r8, r4, r3
 800b0c4:	f000 f940 	bl	800b348 <_sbrk_r>
 800b0c8:	4580      	cmp	r8, r0
 800b0ca:	d13a      	bne.n	800b142 <_malloc_r+0xd2>
 800b0cc:	6821      	ldr	r1, [r4, #0]
 800b0ce:	3503      	adds	r5, #3
 800b0d0:	1a6d      	subs	r5, r5, r1
 800b0d2:	f025 0503 	bic.w	r5, r5, #3
 800b0d6:	3508      	adds	r5, #8
 800b0d8:	2d0c      	cmp	r5, #12
 800b0da:	bf38      	it	cc
 800b0dc:	250c      	movcc	r5, #12
 800b0de:	4629      	mov	r1, r5
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff ffa5 	bl	800b030 <sbrk_aligned>
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	d02b      	beq.n	800b142 <_malloc_r+0xd2>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	442b      	add	r3, r5
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	e00e      	b.n	800b110 <_malloc_r+0xa0>
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	1b52      	subs	r2, r2, r5
 800b0f6:	d41e      	bmi.n	800b136 <_malloc_r+0xc6>
 800b0f8:	2a0b      	cmp	r2, #11
 800b0fa:	d916      	bls.n	800b12a <_malloc_r+0xba>
 800b0fc:	1961      	adds	r1, r4, r5
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	6025      	str	r5, [r4, #0]
 800b102:	bf18      	it	ne
 800b104:	6059      	strne	r1, [r3, #4]
 800b106:	6863      	ldr	r3, [r4, #4]
 800b108:	bf08      	it	eq
 800b10a:	6031      	streq	r1, [r6, #0]
 800b10c:	5162      	str	r2, [r4, r5]
 800b10e:	604b      	str	r3, [r1, #4]
 800b110:	4638      	mov	r0, r7
 800b112:	f104 060b 	add.w	r6, r4, #11
 800b116:	f000 fb8d 	bl	800b834 <__malloc_unlock>
 800b11a:	f026 0607 	bic.w	r6, r6, #7
 800b11e:	1d23      	adds	r3, r4, #4
 800b120:	1af2      	subs	r2, r6, r3
 800b122:	d0b6      	beq.n	800b092 <_malloc_r+0x22>
 800b124:	1b9b      	subs	r3, r3, r6
 800b126:	50a3      	str	r3, [r4, r2]
 800b128:	e7b3      	b.n	800b092 <_malloc_r+0x22>
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	bf0c      	ite	eq
 800b130:	6032      	streq	r2, [r6, #0]
 800b132:	605a      	strne	r2, [r3, #4]
 800b134:	e7ec      	b.n	800b110 <_malloc_r+0xa0>
 800b136:	4623      	mov	r3, r4
 800b138:	6864      	ldr	r4, [r4, #4]
 800b13a:	e7b2      	b.n	800b0a2 <_malloc_r+0x32>
 800b13c:	4634      	mov	r4, r6
 800b13e:	6876      	ldr	r6, [r6, #4]
 800b140:	e7b9      	b.n	800b0b6 <_malloc_r+0x46>
 800b142:	230c      	movs	r3, #12
 800b144:	603b      	str	r3, [r7, #0]
 800b146:	4638      	mov	r0, r7
 800b148:	f000 fb74 	bl	800b834 <__malloc_unlock>
 800b14c:	e7a1      	b.n	800b092 <_malloc_r+0x22>
 800b14e:	6025      	str	r5, [r4, #0]
 800b150:	e7de      	b.n	800b110 <_malloc_r+0xa0>
 800b152:	bf00      	nop
 800b154:	20005308 	.word	0x20005308

0800b158 <iprintf>:
 800b158:	b40f      	push	{r0, r1, r2, r3}
 800b15a:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <iprintf+0x2c>)
 800b15c:	b513      	push	{r0, r1, r4, lr}
 800b15e:	681c      	ldr	r4, [r3, #0]
 800b160:	b124      	cbz	r4, 800b16c <iprintf+0x14>
 800b162:	69a3      	ldr	r3, [r4, #24]
 800b164:	b913      	cbnz	r3, 800b16c <iprintf+0x14>
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff fe86 	bl	800ae78 <__sinit>
 800b16c:	ab05      	add	r3, sp, #20
 800b16e:	9a04      	ldr	r2, [sp, #16]
 800b170:	68a1      	ldr	r1, [r4, #8]
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	4620      	mov	r0, r4
 800b176:	f000 fbd9 	bl	800b92c <_vfiprintf_r>
 800b17a:	b002      	add	sp, #8
 800b17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b180:	b004      	add	sp, #16
 800b182:	4770      	bx	lr
 800b184:	20000010 	.word	0x20000010

0800b188 <_puts_r>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	460e      	mov	r6, r1
 800b18c:	4605      	mov	r5, r0
 800b18e:	b118      	cbz	r0, 800b198 <_puts_r+0x10>
 800b190:	6983      	ldr	r3, [r0, #24]
 800b192:	b90b      	cbnz	r3, 800b198 <_puts_r+0x10>
 800b194:	f7ff fe70 	bl	800ae78 <__sinit>
 800b198:	69ab      	ldr	r3, [r5, #24]
 800b19a:	68ac      	ldr	r4, [r5, #8]
 800b19c:	b913      	cbnz	r3, 800b1a4 <_puts_r+0x1c>
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f7ff fe6a 	bl	800ae78 <__sinit>
 800b1a4:	4b2c      	ldr	r3, [pc, #176]	; (800b258 <_puts_r+0xd0>)
 800b1a6:	429c      	cmp	r4, r3
 800b1a8:	d120      	bne.n	800b1ec <_puts_r+0x64>
 800b1aa:	686c      	ldr	r4, [r5, #4]
 800b1ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1ae:	07db      	lsls	r3, r3, #31
 800b1b0:	d405      	bmi.n	800b1be <_puts_r+0x36>
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	0598      	lsls	r0, r3, #22
 800b1b6:	d402      	bmi.n	800b1be <_puts_r+0x36>
 800b1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ba:	f7ff ff20 	bl	800affe <__retarget_lock_acquire_recursive>
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	0719      	lsls	r1, r3, #28
 800b1c2:	d51d      	bpl.n	800b200 <_puts_r+0x78>
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	b1db      	cbz	r3, 800b200 <_puts_r+0x78>
 800b1c8:	3e01      	subs	r6, #1
 800b1ca:	68a3      	ldr	r3, [r4, #8]
 800b1cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	60a3      	str	r3, [r4, #8]
 800b1d4:	bb39      	cbnz	r1, 800b226 <_puts_r+0x9e>
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da38      	bge.n	800b24c <_puts_r+0xc4>
 800b1da:	4622      	mov	r2, r4
 800b1dc:	210a      	movs	r1, #10
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f000 f906 	bl	800b3f0 <__swbuf_r>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d011      	beq.n	800b20c <_puts_r+0x84>
 800b1e8:	250a      	movs	r5, #10
 800b1ea:	e011      	b.n	800b210 <_puts_r+0x88>
 800b1ec:	4b1b      	ldr	r3, [pc, #108]	; (800b25c <_puts_r+0xd4>)
 800b1ee:	429c      	cmp	r4, r3
 800b1f0:	d101      	bne.n	800b1f6 <_puts_r+0x6e>
 800b1f2:	68ac      	ldr	r4, [r5, #8]
 800b1f4:	e7da      	b.n	800b1ac <_puts_r+0x24>
 800b1f6:	4b1a      	ldr	r3, [pc, #104]	; (800b260 <_puts_r+0xd8>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	bf08      	it	eq
 800b1fc:	68ec      	ldreq	r4, [r5, #12]
 800b1fe:	e7d5      	b.n	800b1ac <_puts_r+0x24>
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	f000 f958 	bl	800b4b8 <__swsetup_r>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d0dd      	beq.n	800b1c8 <_puts_r+0x40>
 800b20c:	f04f 35ff 	mov.w	r5, #4294967295
 800b210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b212:	07da      	lsls	r2, r3, #31
 800b214:	d405      	bmi.n	800b222 <_puts_r+0x9a>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	059b      	lsls	r3, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_puts_r+0x9a>
 800b21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b21e:	f7ff feef 	bl	800b000 <__retarget_lock_release_recursive>
 800b222:	4628      	mov	r0, r5
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	2b00      	cmp	r3, #0
 800b228:	da04      	bge.n	800b234 <_puts_r+0xac>
 800b22a:	69a2      	ldr	r2, [r4, #24]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	dc06      	bgt.n	800b23e <_puts_r+0xb6>
 800b230:	290a      	cmp	r1, #10
 800b232:	d004      	beq.n	800b23e <_puts_r+0xb6>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	7019      	strb	r1, [r3, #0]
 800b23c:	e7c5      	b.n	800b1ca <_puts_r+0x42>
 800b23e:	4622      	mov	r2, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 f8d5 	bl	800b3f0 <__swbuf_r>
 800b246:	3001      	adds	r0, #1
 800b248:	d1bf      	bne.n	800b1ca <_puts_r+0x42>
 800b24a:	e7df      	b.n	800b20c <_puts_r+0x84>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	250a      	movs	r5, #10
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	6022      	str	r2, [r4, #0]
 800b254:	701d      	strb	r5, [r3, #0]
 800b256:	e7db      	b.n	800b210 <_puts_r+0x88>
 800b258:	0800c284 	.word	0x0800c284
 800b25c:	0800c2a4 	.word	0x0800c2a4
 800b260:	0800c264 	.word	0x0800c264

0800b264 <puts>:
 800b264:	4b02      	ldr	r3, [pc, #8]	; (800b270 <puts+0xc>)
 800b266:	4601      	mov	r1, r0
 800b268:	6818      	ldr	r0, [r3, #0]
 800b26a:	f7ff bf8d 	b.w	800b188 <_puts_r>
 800b26e:	bf00      	nop
 800b270:	20000010 	.word	0x20000010

0800b274 <cleanup_glue>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	460c      	mov	r4, r1
 800b278:	6809      	ldr	r1, [r1, #0]
 800b27a:	4605      	mov	r5, r0
 800b27c:	b109      	cbz	r1, 800b282 <cleanup_glue+0xe>
 800b27e:	f7ff fff9 	bl	800b274 <cleanup_glue>
 800b282:	4621      	mov	r1, r4
 800b284:	4628      	mov	r0, r5
 800b286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b28a:	f000 bad9 	b.w	800b840 <_free_r>
	...

0800b290 <_reclaim_reent>:
 800b290:	4b2c      	ldr	r3, [pc, #176]	; (800b344 <_reclaim_reent+0xb4>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4283      	cmp	r3, r0
 800b296:	b570      	push	{r4, r5, r6, lr}
 800b298:	4604      	mov	r4, r0
 800b29a:	d051      	beq.n	800b340 <_reclaim_reent+0xb0>
 800b29c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b29e:	b143      	cbz	r3, 800b2b2 <_reclaim_reent+0x22>
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d14a      	bne.n	800b33c <_reclaim_reent+0xac>
 800b2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a8:	6819      	ldr	r1, [r3, #0]
 800b2aa:	b111      	cbz	r1, 800b2b2 <_reclaim_reent+0x22>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 fac7 	bl	800b840 <_free_r>
 800b2b2:	6961      	ldr	r1, [r4, #20]
 800b2b4:	b111      	cbz	r1, 800b2bc <_reclaim_reent+0x2c>
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 fac2 	bl	800b840 <_free_r>
 800b2bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2be:	b111      	cbz	r1, 800b2c6 <_reclaim_reent+0x36>
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f000 fabd 	bl	800b840 <_free_r>
 800b2c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2c8:	b111      	cbz	r1, 800b2d0 <_reclaim_reent+0x40>
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 fab8 	bl	800b840 <_free_r>
 800b2d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2d2:	b111      	cbz	r1, 800b2da <_reclaim_reent+0x4a>
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f000 fab3 	bl	800b840 <_free_r>
 800b2da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2dc:	b111      	cbz	r1, 800b2e4 <_reclaim_reent+0x54>
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 faae 	bl	800b840 <_free_r>
 800b2e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2e6:	b111      	cbz	r1, 800b2ee <_reclaim_reent+0x5e>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f000 faa9 	bl	800b840 <_free_r>
 800b2ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2f0:	b111      	cbz	r1, 800b2f8 <_reclaim_reent+0x68>
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f000 faa4 	bl	800b840 <_free_r>
 800b2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2fa:	b111      	cbz	r1, 800b302 <_reclaim_reent+0x72>
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fa9f 	bl	800b840 <_free_r>
 800b302:	69a3      	ldr	r3, [r4, #24]
 800b304:	b1e3      	cbz	r3, 800b340 <_reclaim_reent+0xb0>
 800b306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b308:	4620      	mov	r0, r4
 800b30a:	4798      	blx	r3
 800b30c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b30e:	b1b9      	cbz	r1, 800b340 <_reclaim_reent+0xb0>
 800b310:	4620      	mov	r0, r4
 800b312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b316:	f7ff bfad 	b.w	800b274 <cleanup_glue>
 800b31a:	5949      	ldr	r1, [r1, r5]
 800b31c:	b941      	cbnz	r1, 800b330 <_reclaim_reent+0xa0>
 800b31e:	3504      	adds	r5, #4
 800b320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b322:	2d80      	cmp	r5, #128	; 0x80
 800b324:	68d9      	ldr	r1, [r3, #12]
 800b326:	d1f8      	bne.n	800b31a <_reclaim_reent+0x8a>
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fa89 	bl	800b840 <_free_r>
 800b32e:	e7ba      	b.n	800b2a6 <_reclaim_reent+0x16>
 800b330:	680e      	ldr	r6, [r1, #0]
 800b332:	4620      	mov	r0, r4
 800b334:	f000 fa84 	bl	800b840 <_free_r>
 800b338:	4631      	mov	r1, r6
 800b33a:	e7ef      	b.n	800b31c <_reclaim_reent+0x8c>
 800b33c:	2500      	movs	r5, #0
 800b33e:	e7ef      	b.n	800b320 <_reclaim_reent+0x90>
 800b340:	bd70      	pop	{r4, r5, r6, pc}
 800b342:	bf00      	nop
 800b344:	20000010 	.word	0x20000010

0800b348 <_sbrk_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d06      	ldr	r5, [pc, #24]	; (800b364 <_sbrk_r+0x1c>)
 800b34c:	2300      	movs	r3, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	602b      	str	r3, [r5, #0]
 800b354:	f7f6 fb7c 	bl	8001a50 <_sbrk>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d102      	bne.n	800b362 <_sbrk_r+0x1a>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	b103      	cbz	r3, 800b362 <_sbrk_r+0x1a>
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20005310 	.word	0x20005310

0800b368 <__sread>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	460c      	mov	r4, r1
 800b36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b370:	f000 fda0 	bl	800beb4 <_read_r>
 800b374:	2800      	cmp	r0, #0
 800b376:	bfab      	itete	ge
 800b378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b37a:	89a3      	ldrhlt	r3, [r4, #12]
 800b37c:	181b      	addge	r3, r3, r0
 800b37e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b382:	bfac      	ite	ge
 800b384:	6563      	strge	r3, [r4, #84]	; 0x54
 800b386:	81a3      	strhlt	r3, [r4, #12]
 800b388:	bd10      	pop	{r4, pc}

0800b38a <__swrite>:
 800b38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38e:	461f      	mov	r7, r3
 800b390:	898b      	ldrh	r3, [r1, #12]
 800b392:	05db      	lsls	r3, r3, #23
 800b394:	4605      	mov	r5, r0
 800b396:	460c      	mov	r4, r1
 800b398:	4616      	mov	r6, r2
 800b39a:	d505      	bpl.n	800b3a8 <__swrite+0x1e>
 800b39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f000 f9c8 	bl	800b738 <_lseek_r>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3be:	f000 b869 	b.w	800b494 <_write_r>

0800b3c2 <__sseek>:
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ca:	f000 f9b5 	bl	800b738 <_lseek_r>
 800b3ce:	1c43      	adds	r3, r0, #1
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	bf15      	itete	ne
 800b3d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3de:	81a3      	strheq	r3, [r4, #12]
 800b3e0:	bf18      	it	ne
 800b3e2:	81a3      	strhne	r3, [r4, #12]
 800b3e4:	bd10      	pop	{r4, pc}

0800b3e6 <__sclose>:
 800b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ea:	f000 b8d3 	b.w	800b594 <_close_r>
	...

0800b3f0 <__swbuf_r>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	460e      	mov	r6, r1
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	b118      	cbz	r0, 800b402 <__swbuf_r+0x12>
 800b3fa:	6983      	ldr	r3, [r0, #24]
 800b3fc:	b90b      	cbnz	r3, 800b402 <__swbuf_r+0x12>
 800b3fe:	f7ff fd3b 	bl	800ae78 <__sinit>
 800b402:	4b21      	ldr	r3, [pc, #132]	; (800b488 <__swbuf_r+0x98>)
 800b404:	429c      	cmp	r4, r3
 800b406:	d12b      	bne.n	800b460 <__swbuf_r+0x70>
 800b408:	686c      	ldr	r4, [r5, #4]
 800b40a:	69a3      	ldr	r3, [r4, #24]
 800b40c:	60a3      	str	r3, [r4, #8]
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	071a      	lsls	r2, r3, #28
 800b412:	d52f      	bpl.n	800b474 <__swbuf_r+0x84>
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	b36b      	cbz	r3, 800b474 <__swbuf_r+0x84>
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	6820      	ldr	r0, [r4, #0]
 800b41c:	1ac0      	subs	r0, r0, r3
 800b41e:	6963      	ldr	r3, [r4, #20]
 800b420:	b2f6      	uxtb	r6, r6
 800b422:	4283      	cmp	r3, r0
 800b424:	4637      	mov	r7, r6
 800b426:	dc04      	bgt.n	800b432 <__swbuf_r+0x42>
 800b428:	4621      	mov	r1, r4
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 f948 	bl	800b6c0 <_fflush_r>
 800b430:	bb30      	cbnz	r0, 800b480 <__swbuf_r+0x90>
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	3b01      	subs	r3, #1
 800b436:	60a3      	str	r3, [r4, #8]
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	6022      	str	r2, [r4, #0]
 800b43e:	701e      	strb	r6, [r3, #0]
 800b440:	6963      	ldr	r3, [r4, #20]
 800b442:	3001      	adds	r0, #1
 800b444:	4283      	cmp	r3, r0
 800b446:	d004      	beq.n	800b452 <__swbuf_r+0x62>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	07db      	lsls	r3, r3, #31
 800b44c:	d506      	bpl.n	800b45c <__swbuf_r+0x6c>
 800b44e:	2e0a      	cmp	r6, #10
 800b450:	d104      	bne.n	800b45c <__swbuf_r+0x6c>
 800b452:	4621      	mov	r1, r4
 800b454:	4628      	mov	r0, r5
 800b456:	f000 f933 	bl	800b6c0 <_fflush_r>
 800b45a:	b988      	cbnz	r0, 800b480 <__swbuf_r+0x90>
 800b45c:	4638      	mov	r0, r7
 800b45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b460:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <__swbuf_r+0x9c>)
 800b462:	429c      	cmp	r4, r3
 800b464:	d101      	bne.n	800b46a <__swbuf_r+0x7a>
 800b466:	68ac      	ldr	r4, [r5, #8]
 800b468:	e7cf      	b.n	800b40a <__swbuf_r+0x1a>
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <__swbuf_r+0xa0>)
 800b46c:	429c      	cmp	r4, r3
 800b46e:	bf08      	it	eq
 800b470:	68ec      	ldreq	r4, [r5, #12]
 800b472:	e7ca      	b.n	800b40a <__swbuf_r+0x1a>
 800b474:	4621      	mov	r1, r4
 800b476:	4628      	mov	r0, r5
 800b478:	f000 f81e 	bl	800b4b8 <__swsetup_r>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d0cb      	beq.n	800b418 <__swbuf_r+0x28>
 800b480:	f04f 37ff 	mov.w	r7, #4294967295
 800b484:	e7ea      	b.n	800b45c <__swbuf_r+0x6c>
 800b486:	bf00      	nop
 800b488:	0800c284 	.word	0x0800c284
 800b48c:	0800c2a4 	.word	0x0800c2a4
 800b490:	0800c264 	.word	0x0800c264

0800b494 <_write_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d07      	ldr	r5, [pc, #28]	; (800b4b4 <_write_r+0x20>)
 800b498:	4604      	mov	r4, r0
 800b49a:	4608      	mov	r0, r1
 800b49c:	4611      	mov	r1, r2
 800b49e:	2200      	movs	r2, #0
 800b4a0:	602a      	str	r2, [r5, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f7f6 f826 	bl	80014f4 <_write>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d102      	bne.n	800b4b2 <_write_r+0x1e>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	b103      	cbz	r3, 800b4b2 <_write_r+0x1e>
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	bd38      	pop	{r3, r4, r5, pc}
 800b4b4:	20005310 	.word	0x20005310

0800b4b8 <__swsetup_r>:
 800b4b8:	4b32      	ldr	r3, [pc, #200]	; (800b584 <__swsetup_r+0xcc>)
 800b4ba:	b570      	push	{r4, r5, r6, lr}
 800b4bc:	681d      	ldr	r5, [r3, #0]
 800b4be:	4606      	mov	r6, r0
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	b125      	cbz	r5, 800b4ce <__swsetup_r+0x16>
 800b4c4:	69ab      	ldr	r3, [r5, #24]
 800b4c6:	b913      	cbnz	r3, 800b4ce <__swsetup_r+0x16>
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f7ff fcd5 	bl	800ae78 <__sinit>
 800b4ce:	4b2e      	ldr	r3, [pc, #184]	; (800b588 <__swsetup_r+0xd0>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	d10f      	bne.n	800b4f4 <__swsetup_r+0x3c>
 800b4d4:	686c      	ldr	r4, [r5, #4]
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4dc:	0719      	lsls	r1, r3, #28
 800b4de:	d42c      	bmi.n	800b53a <__swsetup_r+0x82>
 800b4e0:	06dd      	lsls	r5, r3, #27
 800b4e2:	d411      	bmi.n	800b508 <__swsetup_r+0x50>
 800b4e4:	2309      	movs	r3, #9
 800b4e6:	6033      	str	r3, [r6, #0]
 800b4e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f2:	e03e      	b.n	800b572 <__swsetup_r+0xba>
 800b4f4:	4b25      	ldr	r3, [pc, #148]	; (800b58c <__swsetup_r+0xd4>)
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d101      	bne.n	800b4fe <__swsetup_r+0x46>
 800b4fa:	68ac      	ldr	r4, [r5, #8]
 800b4fc:	e7eb      	b.n	800b4d6 <__swsetup_r+0x1e>
 800b4fe:	4b24      	ldr	r3, [pc, #144]	; (800b590 <__swsetup_r+0xd8>)
 800b500:	429c      	cmp	r4, r3
 800b502:	bf08      	it	eq
 800b504:	68ec      	ldreq	r4, [r5, #12]
 800b506:	e7e6      	b.n	800b4d6 <__swsetup_r+0x1e>
 800b508:	0758      	lsls	r0, r3, #29
 800b50a:	d512      	bpl.n	800b532 <__swsetup_r+0x7a>
 800b50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b50e:	b141      	cbz	r1, 800b522 <__swsetup_r+0x6a>
 800b510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b514:	4299      	cmp	r1, r3
 800b516:	d002      	beq.n	800b51e <__swsetup_r+0x66>
 800b518:	4630      	mov	r0, r6
 800b51a:	f000 f991 	bl	800b840 <_free_r>
 800b51e:	2300      	movs	r3, #0
 800b520:	6363      	str	r3, [r4, #52]	; 0x34
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	2300      	movs	r3, #0
 800b52c:	6063      	str	r3, [r4, #4]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f043 0308 	orr.w	r3, r3, #8
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	b94b      	cbnz	r3, 800b552 <__swsetup_r+0x9a>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b548:	d003      	beq.n	800b552 <__swsetup_r+0x9a>
 800b54a:	4621      	mov	r1, r4
 800b54c:	4630      	mov	r0, r6
 800b54e:	f000 f92b 	bl	800b7a8 <__smakebuf_r>
 800b552:	89a0      	ldrh	r0, [r4, #12]
 800b554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b558:	f010 0301 	ands.w	r3, r0, #1
 800b55c:	d00a      	beq.n	800b574 <__swsetup_r+0xbc>
 800b55e:	2300      	movs	r3, #0
 800b560:	60a3      	str	r3, [r4, #8]
 800b562:	6963      	ldr	r3, [r4, #20]
 800b564:	425b      	negs	r3, r3
 800b566:	61a3      	str	r3, [r4, #24]
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	b943      	cbnz	r3, 800b57e <__swsetup_r+0xc6>
 800b56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b570:	d1ba      	bne.n	800b4e8 <__swsetup_r+0x30>
 800b572:	bd70      	pop	{r4, r5, r6, pc}
 800b574:	0781      	lsls	r1, r0, #30
 800b576:	bf58      	it	pl
 800b578:	6963      	ldrpl	r3, [r4, #20]
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	e7f4      	b.n	800b568 <__swsetup_r+0xb0>
 800b57e:	2000      	movs	r0, #0
 800b580:	e7f7      	b.n	800b572 <__swsetup_r+0xba>
 800b582:	bf00      	nop
 800b584:	20000010 	.word	0x20000010
 800b588:	0800c284 	.word	0x0800c284
 800b58c:	0800c2a4 	.word	0x0800c2a4
 800b590:	0800c264 	.word	0x0800c264

0800b594 <_close_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d06      	ldr	r5, [pc, #24]	; (800b5b0 <_close_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7f6 fa21 	bl	80019e6 <_close>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_close_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_close_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	20005310 	.word	0x20005310

0800b5b4 <__sflush_r>:
 800b5b4:	898a      	ldrh	r2, [r1, #12]
 800b5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	0710      	lsls	r0, r2, #28
 800b5be:	460c      	mov	r4, r1
 800b5c0:	d458      	bmi.n	800b674 <__sflush_r+0xc0>
 800b5c2:	684b      	ldr	r3, [r1, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dc05      	bgt.n	800b5d4 <__sflush_r+0x20>
 800b5c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	dc02      	bgt.n	800b5d4 <__sflush_r+0x20>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5d6:	2e00      	cmp	r6, #0
 800b5d8:	d0f9      	beq.n	800b5ce <__sflush_r+0x1a>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5e0:	682f      	ldr	r7, [r5, #0]
 800b5e2:	602b      	str	r3, [r5, #0]
 800b5e4:	d032      	beq.n	800b64c <__sflush_r+0x98>
 800b5e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	075a      	lsls	r2, r3, #29
 800b5ec:	d505      	bpl.n	800b5fa <__sflush_r+0x46>
 800b5ee:	6863      	ldr	r3, [r4, #4]
 800b5f0:	1ac0      	subs	r0, r0, r3
 800b5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5f4:	b10b      	cbz	r3, 800b5fa <__sflush_r+0x46>
 800b5f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5f8:	1ac0      	subs	r0, r0, r3
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b600:	6a21      	ldr	r1, [r4, #32]
 800b602:	4628      	mov	r0, r5
 800b604:	47b0      	blx	r6
 800b606:	1c43      	adds	r3, r0, #1
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	d106      	bne.n	800b61a <__sflush_r+0x66>
 800b60c:	6829      	ldr	r1, [r5, #0]
 800b60e:	291d      	cmp	r1, #29
 800b610:	d82c      	bhi.n	800b66c <__sflush_r+0xb8>
 800b612:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <__sflush_r+0x108>)
 800b614:	40ca      	lsrs	r2, r1
 800b616:	07d6      	lsls	r6, r2, #31
 800b618:	d528      	bpl.n	800b66c <__sflush_r+0xb8>
 800b61a:	2200      	movs	r2, #0
 800b61c:	6062      	str	r2, [r4, #4]
 800b61e:	04d9      	lsls	r1, r3, #19
 800b620:	6922      	ldr	r2, [r4, #16]
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	d504      	bpl.n	800b630 <__sflush_r+0x7c>
 800b626:	1c42      	adds	r2, r0, #1
 800b628:	d101      	bne.n	800b62e <__sflush_r+0x7a>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	b903      	cbnz	r3, 800b630 <__sflush_r+0x7c>
 800b62e:	6560      	str	r0, [r4, #84]	; 0x54
 800b630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b632:	602f      	str	r7, [r5, #0]
 800b634:	2900      	cmp	r1, #0
 800b636:	d0ca      	beq.n	800b5ce <__sflush_r+0x1a>
 800b638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b63c:	4299      	cmp	r1, r3
 800b63e:	d002      	beq.n	800b646 <__sflush_r+0x92>
 800b640:	4628      	mov	r0, r5
 800b642:	f000 f8fd 	bl	800b840 <_free_r>
 800b646:	2000      	movs	r0, #0
 800b648:	6360      	str	r0, [r4, #52]	; 0x34
 800b64a:	e7c1      	b.n	800b5d0 <__sflush_r+0x1c>
 800b64c:	6a21      	ldr	r1, [r4, #32]
 800b64e:	2301      	movs	r3, #1
 800b650:	4628      	mov	r0, r5
 800b652:	47b0      	blx	r6
 800b654:	1c41      	adds	r1, r0, #1
 800b656:	d1c7      	bne.n	800b5e8 <__sflush_r+0x34>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0c4      	beq.n	800b5e8 <__sflush_r+0x34>
 800b65e:	2b1d      	cmp	r3, #29
 800b660:	d001      	beq.n	800b666 <__sflush_r+0xb2>
 800b662:	2b16      	cmp	r3, #22
 800b664:	d101      	bne.n	800b66a <__sflush_r+0xb6>
 800b666:	602f      	str	r7, [r5, #0]
 800b668:	e7b1      	b.n	800b5ce <__sflush_r+0x1a>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	e7ad      	b.n	800b5d0 <__sflush_r+0x1c>
 800b674:	690f      	ldr	r7, [r1, #16]
 800b676:	2f00      	cmp	r7, #0
 800b678:	d0a9      	beq.n	800b5ce <__sflush_r+0x1a>
 800b67a:	0793      	lsls	r3, r2, #30
 800b67c:	680e      	ldr	r6, [r1, #0]
 800b67e:	bf08      	it	eq
 800b680:	694b      	ldreq	r3, [r1, #20]
 800b682:	600f      	str	r7, [r1, #0]
 800b684:	bf18      	it	ne
 800b686:	2300      	movne	r3, #0
 800b688:	eba6 0807 	sub.w	r8, r6, r7
 800b68c:	608b      	str	r3, [r1, #8]
 800b68e:	f1b8 0f00 	cmp.w	r8, #0
 800b692:	dd9c      	ble.n	800b5ce <__sflush_r+0x1a>
 800b694:	6a21      	ldr	r1, [r4, #32]
 800b696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b698:	4643      	mov	r3, r8
 800b69a:	463a      	mov	r2, r7
 800b69c:	4628      	mov	r0, r5
 800b69e:	47b0      	blx	r6
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	dc06      	bgt.n	800b6b2 <__sflush_r+0xfe>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6aa:	81a3      	strh	r3, [r4, #12]
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	e78e      	b.n	800b5d0 <__sflush_r+0x1c>
 800b6b2:	4407      	add	r7, r0
 800b6b4:	eba8 0800 	sub.w	r8, r8, r0
 800b6b8:	e7e9      	b.n	800b68e <__sflush_r+0xda>
 800b6ba:	bf00      	nop
 800b6bc:	20400001 	.word	0x20400001

0800b6c0 <_fflush_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	690b      	ldr	r3, [r1, #16]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	b913      	cbnz	r3, 800b6d0 <_fflush_r+0x10>
 800b6ca:	2500      	movs	r5, #0
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	b118      	cbz	r0, 800b6da <_fflush_r+0x1a>
 800b6d2:	6983      	ldr	r3, [r0, #24]
 800b6d4:	b90b      	cbnz	r3, 800b6da <_fflush_r+0x1a>
 800b6d6:	f7ff fbcf 	bl	800ae78 <__sinit>
 800b6da:	4b14      	ldr	r3, [pc, #80]	; (800b72c <_fflush_r+0x6c>)
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	d11b      	bne.n	800b718 <_fflush_r+0x58>
 800b6e0:	686c      	ldr	r4, [r5, #4]
 800b6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0ef      	beq.n	800b6ca <_fflush_r+0xa>
 800b6ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6ec:	07d0      	lsls	r0, r2, #31
 800b6ee:	d404      	bmi.n	800b6fa <_fflush_r+0x3a>
 800b6f0:	0599      	lsls	r1, r3, #22
 800b6f2:	d402      	bmi.n	800b6fa <_fflush_r+0x3a>
 800b6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f6:	f7ff fc82 	bl	800affe <__retarget_lock_acquire_recursive>
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f7ff ff59 	bl	800b5b4 <__sflush_r>
 800b702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b704:	07da      	lsls	r2, r3, #31
 800b706:	4605      	mov	r5, r0
 800b708:	d4e0      	bmi.n	800b6cc <_fflush_r+0xc>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	059b      	lsls	r3, r3, #22
 800b70e:	d4dd      	bmi.n	800b6cc <_fflush_r+0xc>
 800b710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b712:	f7ff fc75 	bl	800b000 <__retarget_lock_release_recursive>
 800b716:	e7d9      	b.n	800b6cc <_fflush_r+0xc>
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <_fflush_r+0x70>)
 800b71a:	429c      	cmp	r4, r3
 800b71c:	d101      	bne.n	800b722 <_fflush_r+0x62>
 800b71e:	68ac      	ldr	r4, [r5, #8]
 800b720:	e7df      	b.n	800b6e2 <_fflush_r+0x22>
 800b722:	4b04      	ldr	r3, [pc, #16]	; (800b734 <_fflush_r+0x74>)
 800b724:	429c      	cmp	r4, r3
 800b726:	bf08      	it	eq
 800b728:	68ec      	ldreq	r4, [r5, #12]
 800b72a:	e7da      	b.n	800b6e2 <_fflush_r+0x22>
 800b72c:	0800c284 	.word	0x0800c284
 800b730:	0800c2a4 	.word	0x0800c2a4
 800b734:	0800c264 	.word	0x0800c264

0800b738 <_lseek_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d07      	ldr	r5, [pc, #28]	; (800b758 <_lseek_r+0x20>)
 800b73c:	4604      	mov	r4, r0
 800b73e:	4608      	mov	r0, r1
 800b740:	4611      	mov	r1, r2
 800b742:	2200      	movs	r2, #0
 800b744:	602a      	str	r2, [r5, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	f7f6 f974 	bl	8001a34 <_lseek>
 800b74c:	1c43      	adds	r3, r0, #1
 800b74e:	d102      	bne.n	800b756 <_lseek_r+0x1e>
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	b103      	cbz	r3, 800b756 <_lseek_r+0x1e>
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	bd38      	pop	{r3, r4, r5, pc}
 800b758:	20005310 	.word	0x20005310

0800b75c <__swhatbuf_r>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	460e      	mov	r6, r1
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	2900      	cmp	r1, #0
 800b766:	b096      	sub	sp, #88	; 0x58
 800b768:	4614      	mov	r4, r2
 800b76a:	461d      	mov	r5, r3
 800b76c:	da08      	bge.n	800b780 <__swhatbuf_r+0x24>
 800b76e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	602a      	str	r2, [r5, #0]
 800b776:	061a      	lsls	r2, r3, #24
 800b778:	d410      	bmi.n	800b79c <__swhatbuf_r+0x40>
 800b77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b77e:	e00e      	b.n	800b79e <__swhatbuf_r+0x42>
 800b780:	466a      	mov	r2, sp
 800b782:	f000 fba9 	bl	800bed8 <_fstat_r>
 800b786:	2800      	cmp	r0, #0
 800b788:	dbf1      	blt.n	800b76e <__swhatbuf_r+0x12>
 800b78a:	9a01      	ldr	r2, [sp, #4]
 800b78c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b790:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b794:	425a      	negs	r2, r3
 800b796:	415a      	adcs	r2, r3
 800b798:	602a      	str	r2, [r5, #0]
 800b79a:	e7ee      	b.n	800b77a <__swhatbuf_r+0x1e>
 800b79c:	2340      	movs	r3, #64	; 0x40
 800b79e:	2000      	movs	r0, #0
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	b016      	add	sp, #88	; 0x58
 800b7a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7a8 <__smakebuf_r>:
 800b7a8:	898b      	ldrh	r3, [r1, #12]
 800b7aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7ac:	079d      	lsls	r5, r3, #30
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	d507      	bpl.n	800b7c4 <__smakebuf_r+0x1c>
 800b7b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	2301      	movs	r3, #1
 800b7be:	6163      	str	r3, [r4, #20]
 800b7c0:	b002      	add	sp, #8
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	ab01      	add	r3, sp, #4
 800b7c6:	466a      	mov	r2, sp
 800b7c8:	f7ff ffc8 	bl	800b75c <__swhatbuf_r>
 800b7cc:	9900      	ldr	r1, [sp, #0]
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff fc4d 	bl	800b070 <_malloc_r>
 800b7d6:	b948      	cbnz	r0, 800b7ec <__smakebuf_r+0x44>
 800b7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7dc:	059a      	lsls	r2, r3, #22
 800b7de:	d4ef      	bmi.n	800b7c0 <__smakebuf_r+0x18>
 800b7e0:	f023 0303 	bic.w	r3, r3, #3
 800b7e4:	f043 0302 	orr.w	r3, r3, #2
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	e7e3      	b.n	800b7b4 <__smakebuf_r+0xc>
 800b7ec:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <__smakebuf_r+0x7c>)
 800b7ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	6020      	str	r0, [r4, #0]
 800b7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	9b00      	ldr	r3, [sp, #0]
 800b7fc:	6163      	str	r3, [r4, #20]
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	6120      	str	r0, [r4, #16]
 800b802:	b15b      	cbz	r3, 800b81c <__smakebuf_r+0x74>
 800b804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 fb77 	bl	800befc <_isatty_r>
 800b80e:	b128      	cbz	r0, 800b81c <__smakebuf_r+0x74>
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	f043 0301 	orr.w	r3, r3, #1
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	89a0      	ldrh	r0, [r4, #12]
 800b81e:	4305      	orrs	r5, r0
 800b820:	81a5      	strh	r5, [r4, #12]
 800b822:	e7cd      	b.n	800b7c0 <__smakebuf_r+0x18>
 800b824:	0800ae11 	.word	0x0800ae11

0800b828 <__malloc_lock>:
 800b828:	4801      	ldr	r0, [pc, #4]	; (800b830 <__malloc_lock+0x8>)
 800b82a:	f7ff bbe8 	b.w	800affe <__retarget_lock_acquire_recursive>
 800b82e:	bf00      	nop
 800b830:	20005304 	.word	0x20005304

0800b834 <__malloc_unlock>:
 800b834:	4801      	ldr	r0, [pc, #4]	; (800b83c <__malloc_unlock+0x8>)
 800b836:	f7ff bbe3 	b.w	800b000 <__retarget_lock_release_recursive>
 800b83a:	bf00      	nop
 800b83c:	20005304 	.word	0x20005304

0800b840 <_free_r>:
 800b840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b842:	2900      	cmp	r1, #0
 800b844:	d044      	beq.n	800b8d0 <_free_r+0x90>
 800b846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b84a:	9001      	str	r0, [sp, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f1a1 0404 	sub.w	r4, r1, #4
 800b852:	bfb8      	it	lt
 800b854:	18e4      	addlt	r4, r4, r3
 800b856:	f7ff ffe7 	bl	800b828 <__malloc_lock>
 800b85a:	4a1e      	ldr	r2, [pc, #120]	; (800b8d4 <_free_r+0x94>)
 800b85c:	9801      	ldr	r0, [sp, #4]
 800b85e:	6813      	ldr	r3, [r2, #0]
 800b860:	b933      	cbnz	r3, 800b870 <_free_r+0x30>
 800b862:	6063      	str	r3, [r4, #4]
 800b864:	6014      	str	r4, [r2, #0]
 800b866:	b003      	add	sp, #12
 800b868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b86c:	f7ff bfe2 	b.w	800b834 <__malloc_unlock>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d908      	bls.n	800b886 <_free_r+0x46>
 800b874:	6825      	ldr	r5, [r4, #0]
 800b876:	1961      	adds	r1, r4, r5
 800b878:	428b      	cmp	r3, r1
 800b87a:	bf01      	itttt	eq
 800b87c:	6819      	ldreq	r1, [r3, #0]
 800b87e:	685b      	ldreq	r3, [r3, #4]
 800b880:	1949      	addeq	r1, r1, r5
 800b882:	6021      	streq	r1, [r4, #0]
 800b884:	e7ed      	b.n	800b862 <_free_r+0x22>
 800b886:	461a      	mov	r2, r3
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	b10b      	cbz	r3, 800b890 <_free_r+0x50>
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d9fa      	bls.n	800b886 <_free_r+0x46>
 800b890:	6811      	ldr	r1, [r2, #0]
 800b892:	1855      	adds	r5, r2, r1
 800b894:	42a5      	cmp	r5, r4
 800b896:	d10b      	bne.n	800b8b0 <_free_r+0x70>
 800b898:	6824      	ldr	r4, [r4, #0]
 800b89a:	4421      	add	r1, r4
 800b89c:	1854      	adds	r4, r2, r1
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	d1e0      	bne.n	800b866 <_free_r+0x26>
 800b8a4:	681c      	ldr	r4, [r3, #0]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	6053      	str	r3, [r2, #4]
 800b8aa:	4421      	add	r1, r4
 800b8ac:	6011      	str	r1, [r2, #0]
 800b8ae:	e7da      	b.n	800b866 <_free_r+0x26>
 800b8b0:	d902      	bls.n	800b8b8 <_free_r+0x78>
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	6003      	str	r3, [r0, #0]
 800b8b6:	e7d6      	b.n	800b866 <_free_r+0x26>
 800b8b8:	6825      	ldr	r5, [r4, #0]
 800b8ba:	1961      	adds	r1, r4, r5
 800b8bc:	428b      	cmp	r3, r1
 800b8be:	bf04      	itt	eq
 800b8c0:	6819      	ldreq	r1, [r3, #0]
 800b8c2:	685b      	ldreq	r3, [r3, #4]
 800b8c4:	6063      	str	r3, [r4, #4]
 800b8c6:	bf04      	itt	eq
 800b8c8:	1949      	addeq	r1, r1, r5
 800b8ca:	6021      	streq	r1, [r4, #0]
 800b8cc:	6054      	str	r4, [r2, #4]
 800b8ce:	e7ca      	b.n	800b866 <_free_r+0x26>
 800b8d0:	b003      	add	sp, #12
 800b8d2:	bd30      	pop	{r4, r5, pc}
 800b8d4:	20005308 	.word	0x20005308

0800b8d8 <__sfputc_r>:
 800b8d8:	6893      	ldr	r3, [r2, #8]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	b410      	push	{r4}
 800b8e0:	6093      	str	r3, [r2, #8]
 800b8e2:	da08      	bge.n	800b8f6 <__sfputc_r+0x1e>
 800b8e4:	6994      	ldr	r4, [r2, #24]
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	db01      	blt.n	800b8ee <__sfputc_r+0x16>
 800b8ea:	290a      	cmp	r1, #10
 800b8ec:	d103      	bne.n	800b8f6 <__sfputc_r+0x1e>
 800b8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f2:	f7ff bd7d 	b.w	800b3f0 <__swbuf_r>
 800b8f6:	6813      	ldr	r3, [r2, #0]
 800b8f8:	1c58      	adds	r0, r3, #1
 800b8fa:	6010      	str	r0, [r2, #0]
 800b8fc:	7019      	strb	r1, [r3, #0]
 800b8fe:	4608      	mov	r0, r1
 800b900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <__sfputs_r>:
 800b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b908:	4606      	mov	r6, r0
 800b90a:	460f      	mov	r7, r1
 800b90c:	4614      	mov	r4, r2
 800b90e:	18d5      	adds	r5, r2, r3
 800b910:	42ac      	cmp	r4, r5
 800b912:	d101      	bne.n	800b918 <__sfputs_r+0x12>
 800b914:	2000      	movs	r0, #0
 800b916:	e007      	b.n	800b928 <__sfputs_r+0x22>
 800b918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b91c:	463a      	mov	r2, r7
 800b91e:	4630      	mov	r0, r6
 800b920:	f7ff ffda 	bl	800b8d8 <__sfputc_r>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d1f3      	bne.n	800b910 <__sfputs_r+0xa>
 800b928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b92c <_vfiprintf_r>:
 800b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	460d      	mov	r5, r1
 800b932:	b09d      	sub	sp, #116	; 0x74
 800b934:	4614      	mov	r4, r2
 800b936:	4698      	mov	r8, r3
 800b938:	4606      	mov	r6, r0
 800b93a:	b118      	cbz	r0, 800b944 <_vfiprintf_r+0x18>
 800b93c:	6983      	ldr	r3, [r0, #24]
 800b93e:	b90b      	cbnz	r3, 800b944 <_vfiprintf_r+0x18>
 800b940:	f7ff fa9a 	bl	800ae78 <__sinit>
 800b944:	4b89      	ldr	r3, [pc, #548]	; (800bb6c <_vfiprintf_r+0x240>)
 800b946:	429d      	cmp	r5, r3
 800b948:	d11b      	bne.n	800b982 <_vfiprintf_r+0x56>
 800b94a:	6875      	ldr	r5, [r6, #4]
 800b94c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b94e:	07d9      	lsls	r1, r3, #31
 800b950:	d405      	bmi.n	800b95e <_vfiprintf_r+0x32>
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	059a      	lsls	r2, r3, #22
 800b956:	d402      	bmi.n	800b95e <_vfiprintf_r+0x32>
 800b958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95a:	f7ff fb50 	bl	800affe <__retarget_lock_acquire_recursive>
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	071b      	lsls	r3, r3, #28
 800b962:	d501      	bpl.n	800b968 <_vfiprintf_r+0x3c>
 800b964:	692b      	ldr	r3, [r5, #16]
 800b966:	b9eb      	cbnz	r3, 800b9a4 <_vfiprintf_r+0x78>
 800b968:	4629      	mov	r1, r5
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7ff fda4 	bl	800b4b8 <__swsetup_r>
 800b970:	b1c0      	cbz	r0, 800b9a4 <_vfiprintf_r+0x78>
 800b972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b974:	07dc      	lsls	r4, r3, #31
 800b976:	d50e      	bpl.n	800b996 <_vfiprintf_r+0x6a>
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	b01d      	add	sp, #116	; 0x74
 800b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b982:	4b7b      	ldr	r3, [pc, #492]	; (800bb70 <_vfiprintf_r+0x244>)
 800b984:	429d      	cmp	r5, r3
 800b986:	d101      	bne.n	800b98c <_vfiprintf_r+0x60>
 800b988:	68b5      	ldr	r5, [r6, #8]
 800b98a:	e7df      	b.n	800b94c <_vfiprintf_r+0x20>
 800b98c:	4b79      	ldr	r3, [pc, #484]	; (800bb74 <_vfiprintf_r+0x248>)
 800b98e:	429d      	cmp	r5, r3
 800b990:	bf08      	it	eq
 800b992:	68f5      	ldreq	r5, [r6, #12]
 800b994:	e7da      	b.n	800b94c <_vfiprintf_r+0x20>
 800b996:	89ab      	ldrh	r3, [r5, #12]
 800b998:	0598      	lsls	r0, r3, #22
 800b99a:	d4ed      	bmi.n	800b978 <_vfiprintf_r+0x4c>
 800b99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b99e:	f7ff fb2f 	bl	800b000 <__retarget_lock_release_recursive>
 800b9a2:	e7e9      	b.n	800b978 <_vfiprintf_r+0x4c>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a8:	2320      	movs	r3, #32
 800b9aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9b2:	2330      	movs	r3, #48	; 0x30
 800b9b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb78 <_vfiprintf_r+0x24c>
 800b9b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9bc:	f04f 0901 	mov.w	r9, #1
 800b9c0:	4623      	mov	r3, r4
 800b9c2:	469a      	mov	sl, r3
 800b9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c8:	b10a      	cbz	r2, 800b9ce <_vfiprintf_r+0xa2>
 800b9ca:	2a25      	cmp	r2, #37	; 0x25
 800b9cc:	d1f9      	bne.n	800b9c2 <_vfiprintf_r+0x96>
 800b9ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b9d2:	d00b      	beq.n	800b9ec <_vfiprintf_r+0xc0>
 800b9d4:	465b      	mov	r3, fp
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7ff ff93 	bl	800b906 <__sfputs_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f000 80aa 	beq.w	800bb3a <_vfiprintf_r+0x20e>
 800b9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e8:	445a      	add	r2, fp
 800b9ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 80a2 	beq.w	800bb3a <_vfiprintf_r+0x20e>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba00:	f10a 0a01 	add.w	sl, sl, #1
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	9307      	str	r3, [sp, #28]
 800ba08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba0e:	4654      	mov	r4, sl
 800ba10:	2205      	movs	r2, #5
 800ba12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba16:	4858      	ldr	r0, [pc, #352]	; (800bb78 <_vfiprintf_r+0x24c>)
 800ba18:	f7f4 fbda 	bl	80001d0 <memchr>
 800ba1c:	9a04      	ldr	r2, [sp, #16]
 800ba1e:	b9d8      	cbnz	r0, 800ba58 <_vfiprintf_r+0x12c>
 800ba20:	06d1      	lsls	r1, r2, #27
 800ba22:	bf44      	itt	mi
 800ba24:	2320      	movmi	r3, #32
 800ba26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba2a:	0713      	lsls	r3, r2, #28
 800ba2c:	bf44      	itt	mi
 800ba2e:	232b      	movmi	r3, #43	; 0x2b
 800ba30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba34:	f89a 3000 	ldrb.w	r3, [sl]
 800ba38:	2b2a      	cmp	r3, #42	; 0x2a
 800ba3a:	d015      	beq.n	800ba68 <_vfiprintf_r+0x13c>
 800ba3c:	9a07      	ldr	r2, [sp, #28]
 800ba3e:	4654      	mov	r4, sl
 800ba40:	2000      	movs	r0, #0
 800ba42:	f04f 0c0a 	mov.w	ip, #10
 800ba46:	4621      	mov	r1, r4
 800ba48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba4c:	3b30      	subs	r3, #48	; 0x30
 800ba4e:	2b09      	cmp	r3, #9
 800ba50:	d94e      	bls.n	800baf0 <_vfiprintf_r+0x1c4>
 800ba52:	b1b0      	cbz	r0, 800ba82 <_vfiprintf_r+0x156>
 800ba54:	9207      	str	r2, [sp, #28]
 800ba56:	e014      	b.n	800ba82 <_vfiprintf_r+0x156>
 800ba58:	eba0 0308 	sub.w	r3, r0, r8
 800ba5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba60:	4313      	orrs	r3, r2
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	46a2      	mov	sl, r4
 800ba66:	e7d2      	b.n	800ba0e <_vfiprintf_r+0xe2>
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	1d19      	adds	r1, r3, #4
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	9103      	str	r1, [sp, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	bfbb      	ittet	lt
 800ba74:	425b      	neglt	r3, r3
 800ba76:	f042 0202 	orrlt.w	r2, r2, #2
 800ba7a:	9307      	strge	r3, [sp, #28]
 800ba7c:	9307      	strlt	r3, [sp, #28]
 800ba7e:	bfb8      	it	lt
 800ba80:	9204      	strlt	r2, [sp, #16]
 800ba82:	7823      	ldrb	r3, [r4, #0]
 800ba84:	2b2e      	cmp	r3, #46	; 0x2e
 800ba86:	d10c      	bne.n	800baa2 <_vfiprintf_r+0x176>
 800ba88:	7863      	ldrb	r3, [r4, #1]
 800ba8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8c:	d135      	bne.n	800bafa <_vfiprintf_r+0x1ce>
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	1d1a      	adds	r2, r3, #4
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	9203      	str	r2, [sp, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	bfb8      	it	lt
 800ba9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba9e:	3402      	adds	r4, #2
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb88 <_vfiprintf_r+0x25c>
 800baa6:	7821      	ldrb	r1, [r4, #0]
 800baa8:	2203      	movs	r2, #3
 800baaa:	4650      	mov	r0, sl
 800baac:	f7f4 fb90 	bl	80001d0 <memchr>
 800bab0:	b140      	cbz	r0, 800bac4 <_vfiprintf_r+0x198>
 800bab2:	2340      	movs	r3, #64	; 0x40
 800bab4:	eba0 000a 	sub.w	r0, r0, sl
 800bab8:	fa03 f000 	lsl.w	r0, r3, r0
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	4303      	orrs	r3, r0
 800bac0:	3401      	adds	r4, #1
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac8:	482c      	ldr	r0, [pc, #176]	; (800bb7c <_vfiprintf_r+0x250>)
 800baca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bace:	2206      	movs	r2, #6
 800bad0:	f7f4 fb7e 	bl	80001d0 <memchr>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d03f      	beq.n	800bb58 <_vfiprintf_r+0x22c>
 800bad8:	4b29      	ldr	r3, [pc, #164]	; (800bb80 <_vfiprintf_r+0x254>)
 800bada:	bb1b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x1f8>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	3307      	adds	r3, #7
 800bae0:	f023 0307 	bic.w	r3, r3, #7
 800bae4:	3308      	adds	r3, #8
 800bae6:	9303      	str	r3, [sp, #12]
 800bae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baea:	443b      	add	r3, r7
 800baec:	9309      	str	r3, [sp, #36]	; 0x24
 800baee:	e767      	b.n	800b9c0 <_vfiprintf_r+0x94>
 800baf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800baf4:	460c      	mov	r4, r1
 800baf6:	2001      	movs	r0, #1
 800baf8:	e7a5      	b.n	800ba46 <_vfiprintf_r+0x11a>
 800bafa:	2300      	movs	r3, #0
 800bafc:	3401      	adds	r4, #1
 800bafe:	9305      	str	r3, [sp, #20]
 800bb00:	4619      	mov	r1, r3
 800bb02:	f04f 0c0a 	mov.w	ip, #10
 800bb06:	4620      	mov	r0, r4
 800bb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb0c:	3a30      	subs	r2, #48	; 0x30
 800bb0e:	2a09      	cmp	r2, #9
 800bb10:	d903      	bls.n	800bb1a <_vfiprintf_r+0x1ee>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0c5      	beq.n	800baa2 <_vfiprintf_r+0x176>
 800bb16:	9105      	str	r1, [sp, #20]
 800bb18:	e7c3      	b.n	800baa2 <_vfiprintf_r+0x176>
 800bb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb1e:	4604      	mov	r4, r0
 800bb20:	2301      	movs	r3, #1
 800bb22:	e7f0      	b.n	800bb06 <_vfiprintf_r+0x1da>
 800bb24:	ab03      	add	r3, sp, #12
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	462a      	mov	r2, r5
 800bb2a:	4b16      	ldr	r3, [pc, #88]	; (800bb84 <_vfiprintf_r+0x258>)
 800bb2c:	a904      	add	r1, sp, #16
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f3af 8000 	nop.w
 800bb34:	4607      	mov	r7, r0
 800bb36:	1c78      	adds	r0, r7, #1
 800bb38:	d1d6      	bne.n	800bae8 <_vfiprintf_r+0x1bc>
 800bb3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb3c:	07d9      	lsls	r1, r3, #31
 800bb3e:	d405      	bmi.n	800bb4c <_vfiprintf_r+0x220>
 800bb40:	89ab      	ldrh	r3, [r5, #12]
 800bb42:	059a      	lsls	r2, r3, #22
 800bb44:	d402      	bmi.n	800bb4c <_vfiprintf_r+0x220>
 800bb46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb48:	f7ff fa5a 	bl	800b000 <__retarget_lock_release_recursive>
 800bb4c:	89ab      	ldrh	r3, [r5, #12]
 800bb4e:	065b      	lsls	r3, r3, #25
 800bb50:	f53f af12 	bmi.w	800b978 <_vfiprintf_r+0x4c>
 800bb54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb56:	e711      	b.n	800b97c <_vfiprintf_r+0x50>
 800bb58:	ab03      	add	r3, sp, #12
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	4b09      	ldr	r3, [pc, #36]	; (800bb84 <_vfiprintf_r+0x258>)
 800bb60:	a904      	add	r1, sp, #16
 800bb62:	4630      	mov	r0, r6
 800bb64:	f000 f880 	bl	800bc68 <_printf_i>
 800bb68:	e7e4      	b.n	800bb34 <_vfiprintf_r+0x208>
 800bb6a:	bf00      	nop
 800bb6c:	0800c284 	.word	0x0800c284
 800bb70:	0800c2a4 	.word	0x0800c2a4
 800bb74:	0800c264 	.word	0x0800c264
 800bb78:	0800c2c8 	.word	0x0800c2c8
 800bb7c:	0800c2d2 	.word	0x0800c2d2
 800bb80:	00000000 	.word	0x00000000
 800bb84:	0800b907 	.word	0x0800b907
 800bb88:	0800c2ce 	.word	0x0800c2ce

0800bb8c <_printf_common>:
 800bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb90:	4616      	mov	r6, r2
 800bb92:	4699      	mov	r9, r3
 800bb94:	688a      	ldr	r2, [r1, #8]
 800bb96:	690b      	ldr	r3, [r1, #16]
 800bb98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	bfb8      	it	lt
 800bba0:	4613      	movlt	r3, r2
 800bba2:	6033      	str	r3, [r6, #0]
 800bba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bba8:	4607      	mov	r7, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	b10a      	cbz	r2, 800bbb2 <_printf_common+0x26>
 800bbae:	3301      	adds	r3, #1
 800bbb0:	6033      	str	r3, [r6, #0]
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	0699      	lsls	r1, r3, #26
 800bbb6:	bf42      	ittt	mi
 800bbb8:	6833      	ldrmi	r3, [r6, #0]
 800bbba:	3302      	addmi	r3, #2
 800bbbc:	6033      	strmi	r3, [r6, #0]
 800bbbe:	6825      	ldr	r5, [r4, #0]
 800bbc0:	f015 0506 	ands.w	r5, r5, #6
 800bbc4:	d106      	bne.n	800bbd4 <_printf_common+0x48>
 800bbc6:	f104 0a19 	add.w	sl, r4, #25
 800bbca:	68e3      	ldr	r3, [r4, #12]
 800bbcc:	6832      	ldr	r2, [r6, #0]
 800bbce:	1a9b      	subs	r3, r3, r2
 800bbd0:	42ab      	cmp	r3, r5
 800bbd2:	dc26      	bgt.n	800bc22 <_printf_common+0x96>
 800bbd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbd8:	1e13      	subs	r3, r2, #0
 800bbda:	6822      	ldr	r2, [r4, #0]
 800bbdc:	bf18      	it	ne
 800bbde:	2301      	movne	r3, #1
 800bbe0:	0692      	lsls	r2, r2, #26
 800bbe2:	d42b      	bmi.n	800bc3c <_printf_common+0xb0>
 800bbe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbe8:	4649      	mov	r1, r9
 800bbea:	4638      	mov	r0, r7
 800bbec:	47c0      	blx	r8
 800bbee:	3001      	adds	r0, #1
 800bbf0:	d01e      	beq.n	800bc30 <_printf_common+0xa4>
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	68e5      	ldr	r5, [r4, #12]
 800bbf6:	6832      	ldr	r2, [r6, #0]
 800bbf8:	f003 0306 	and.w	r3, r3, #6
 800bbfc:	2b04      	cmp	r3, #4
 800bbfe:	bf08      	it	eq
 800bc00:	1aad      	subeq	r5, r5, r2
 800bc02:	68a3      	ldr	r3, [r4, #8]
 800bc04:	6922      	ldr	r2, [r4, #16]
 800bc06:	bf0c      	ite	eq
 800bc08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc0c:	2500      	movne	r5, #0
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	bfc4      	itt	gt
 800bc12:	1a9b      	subgt	r3, r3, r2
 800bc14:	18ed      	addgt	r5, r5, r3
 800bc16:	2600      	movs	r6, #0
 800bc18:	341a      	adds	r4, #26
 800bc1a:	42b5      	cmp	r5, r6
 800bc1c:	d11a      	bne.n	800bc54 <_printf_common+0xc8>
 800bc1e:	2000      	movs	r0, #0
 800bc20:	e008      	b.n	800bc34 <_printf_common+0xa8>
 800bc22:	2301      	movs	r3, #1
 800bc24:	4652      	mov	r2, sl
 800bc26:	4649      	mov	r1, r9
 800bc28:	4638      	mov	r0, r7
 800bc2a:	47c0      	blx	r8
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	d103      	bne.n	800bc38 <_printf_common+0xac>
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295
 800bc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc38:	3501      	adds	r5, #1
 800bc3a:	e7c6      	b.n	800bbca <_printf_common+0x3e>
 800bc3c:	18e1      	adds	r1, r4, r3
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	2030      	movs	r0, #48	; 0x30
 800bc42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc46:	4422      	add	r2, r4
 800bc48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc50:	3302      	adds	r3, #2
 800bc52:	e7c7      	b.n	800bbe4 <_printf_common+0x58>
 800bc54:	2301      	movs	r3, #1
 800bc56:	4622      	mov	r2, r4
 800bc58:	4649      	mov	r1, r9
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	47c0      	blx	r8
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d0e6      	beq.n	800bc30 <_printf_common+0xa4>
 800bc62:	3601      	adds	r6, #1
 800bc64:	e7d9      	b.n	800bc1a <_printf_common+0x8e>
	...

0800bc68 <_printf_i>:
 800bc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	7e0f      	ldrb	r7, [r1, #24]
 800bc6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc70:	2f78      	cmp	r7, #120	; 0x78
 800bc72:	4691      	mov	r9, r2
 800bc74:	4680      	mov	r8, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	469a      	mov	sl, r3
 800bc7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc7e:	d807      	bhi.n	800bc90 <_printf_i+0x28>
 800bc80:	2f62      	cmp	r7, #98	; 0x62
 800bc82:	d80a      	bhi.n	800bc9a <_printf_i+0x32>
 800bc84:	2f00      	cmp	r7, #0
 800bc86:	f000 80d8 	beq.w	800be3a <_printf_i+0x1d2>
 800bc8a:	2f58      	cmp	r7, #88	; 0x58
 800bc8c:	f000 80a3 	beq.w	800bdd6 <_printf_i+0x16e>
 800bc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc98:	e03a      	b.n	800bd10 <_printf_i+0xa8>
 800bc9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc9e:	2b15      	cmp	r3, #21
 800bca0:	d8f6      	bhi.n	800bc90 <_printf_i+0x28>
 800bca2:	a101      	add	r1, pc, #4	; (adr r1, 800bca8 <_printf_i+0x40>)
 800bca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bca8:	0800bd01 	.word	0x0800bd01
 800bcac:	0800bd15 	.word	0x0800bd15
 800bcb0:	0800bc91 	.word	0x0800bc91
 800bcb4:	0800bc91 	.word	0x0800bc91
 800bcb8:	0800bc91 	.word	0x0800bc91
 800bcbc:	0800bc91 	.word	0x0800bc91
 800bcc0:	0800bd15 	.word	0x0800bd15
 800bcc4:	0800bc91 	.word	0x0800bc91
 800bcc8:	0800bc91 	.word	0x0800bc91
 800bccc:	0800bc91 	.word	0x0800bc91
 800bcd0:	0800bc91 	.word	0x0800bc91
 800bcd4:	0800be21 	.word	0x0800be21
 800bcd8:	0800bd45 	.word	0x0800bd45
 800bcdc:	0800be03 	.word	0x0800be03
 800bce0:	0800bc91 	.word	0x0800bc91
 800bce4:	0800bc91 	.word	0x0800bc91
 800bce8:	0800be43 	.word	0x0800be43
 800bcec:	0800bc91 	.word	0x0800bc91
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bc91 	.word	0x0800bc91
 800bcf8:	0800bc91 	.word	0x0800bc91
 800bcfc:	0800be0b 	.word	0x0800be0b
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	1d1a      	adds	r2, r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	602a      	str	r2, [r5, #0]
 800bd08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd10:	2301      	movs	r3, #1
 800bd12:	e0a3      	b.n	800be5c <_printf_i+0x1f4>
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	6829      	ldr	r1, [r5, #0]
 800bd18:	0606      	lsls	r6, r0, #24
 800bd1a:	f101 0304 	add.w	r3, r1, #4
 800bd1e:	d50a      	bpl.n	800bd36 <_printf_i+0xce>
 800bd20:	680e      	ldr	r6, [r1, #0]
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	2e00      	cmp	r6, #0
 800bd26:	da03      	bge.n	800bd30 <_printf_i+0xc8>
 800bd28:	232d      	movs	r3, #45	; 0x2d
 800bd2a:	4276      	negs	r6, r6
 800bd2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd30:	485e      	ldr	r0, [pc, #376]	; (800beac <_printf_i+0x244>)
 800bd32:	230a      	movs	r3, #10
 800bd34:	e019      	b.n	800bd6a <_printf_i+0x102>
 800bd36:	680e      	ldr	r6, [r1, #0]
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd3e:	bf18      	it	ne
 800bd40:	b236      	sxthne	r6, r6
 800bd42:	e7ef      	b.n	800bd24 <_printf_i+0xbc>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	6820      	ldr	r0, [r4, #0]
 800bd48:	1d19      	adds	r1, r3, #4
 800bd4a:	6029      	str	r1, [r5, #0]
 800bd4c:	0601      	lsls	r1, r0, #24
 800bd4e:	d501      	bpl.n	800bd54 <_printf_i+0xec>
 800bd50:	681e      	ldr	r6, [r3, #0]
 800bd52:	e002      	b.n	800bd5a <_printf_i+0xf2>
 800bd54:	0646      	lsls	r6, r0, #25
 800bd56:	d5fb      	bpl.n	800bd50 <_printf_i+0xe8>
 800bd58:	881e      	ldrh	r6, [r3, #0]
 800bd5a:	4854      	ldr	r0, [pc, #336]	; (800beac <_printf_i+0x244>)
 800bd5c:	2f6f      	cmp	r7, #111	; 0x6f
 800bd5e:	bf0c      	ite	eq
 800bd60:	2308      	moveq	r3, #8
 800bd62:	230a      	movne	r3, #10
 800bd64:	2100      	movs	r1, #0
 800bd66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd6a:	6865      	ldr	r5, [r4, #4]
 800bd6c:	60a5      	str	r5, [r4, #8]
 800bd6e:	2d00      	cmp	r5, #0
 800bd70:	bfa2      	ittt	ge
 800bd72:	6821      	ldrge	r1, [r4, #0]
 800bd74:	f021 0104 	bicge.w	r1, r1, #4
 800bd78:	6021      	strge	r1, [r4, #0]
 800bd7a:	b90e      	cbnz	r6, 800bd80 <_printf_i+0x118>
 800bd7c:	2d00      	cmp	r5, #0
 800bd7e:	d04d      	beq.n	800be1c <_printf_i+0x1b4>
 800bd80:	4615      	mov	r5, r2
 800bd82:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd86:	fb03 6711 	mls	r7, r3, r1, r6
 800bd8a:	5dc7      	ldrb	r7, [r0, r7]
 800bd8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd90:	4637      	mov	r7, r6
 800bd92:	42bb      	cmp	r3, r7
 800bd94:	460e      	mov	r6, r1
 800bd96:	d9f4      	bls.n	800bd82 <_printf_i+0x11a>
 800bd98:	2b08      	cmp	r3, #8
 800bd9a:	d10b      	bne.n	800bdb4 <_printf_i+0x14c>
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	07de      	lsls	r6, r3, #31
 800bda0:	d508      	bpl.n	800bdb4 <_printf_i+0x14c>
 800bda2:	6923      	ldr	r3, [r4, #16]
 800bda4:	6861      	ldr	r1, [r4, #4]
 800bda6:	4299      	cmp	r1, r3
 800bda8:	bfde      	ittt	le
 800bdaa:	2330      	movle	r3, #48	; 0x30
 800bdac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdb4:	1b52      	subs	r2, r2, r5
 800bdb6:	6122      	str	r2, [r4, #16]
 800bdb8:	f8cd a000 	str.w	sl, [sp]
 800bdbc:	464b      	mov	r3, r9
 800bdbe:	aa03      	add	r2, sp, #12
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	f7ff fee2 	bl	800bb8c <_printf_common>
 800bdc8:	3001      	adds	r0, #1
 800bdca:	d14c      	bne.n	800be66 <_printf_i+0x1fe>
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	b004      	add	sp, #16
 800bdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd6:	4835      	ldr	r0, [pc, #212]	; (800beac <_printf_i+0x244>)
 800bdd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bddc:	6829      	ldr	r1, [r5, #0]
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bde4:	6029      	str	r1, [r5, #0]
 800bde6:	061d      	lsls	r5, r3, #24
 800bde8:	d514      	bpl.n	800be14 <_printf_i+0x1ac>
 800bdea:	07df      	lsls	r7, r3, #31
 800bdec:	bf44      	itt	mi
 800bdee:	f043 0320 	orrmi.w	r3, r3, #32
 800bdf2:	6023      	strmi	r3, [r4, #0]
 800bdf4:	b91e      	cbnz	r6, 800bdfe <_printf_i+0x196>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	f023 0320 	bic.w	r3, r3, #32
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	2310      	movs	r3, #16
 800be00:	e7b0      	b.n	800bd64 <_printf_i+0xfc>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	f043 0320 	orr.w	r3, r3, #32
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	2378      	movs	r3, #120	; 0x78
 800be0c:	4828      	ldr	r0, [pc, #160]	; (800beb0 <_printf_i+0x248>)
 800be0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be12:	e7e3      	b.n	800bddc <_printf_i+0x174>
 800be14:	0659      	lsls	r1, r3, #25
 800be16:	bf48      	it	mi
 800be18:	b2b6      	uxthmi	r6, r6
 800be1a:	e7e6      	b.n	800bdea <_printf_i+0x182>
 800be1c:	4615      	mov	r5, r2
 800be1e:	e7bb      	b.n	800bd98 <_printf_i+0x130>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	6826      	ldr	r6, [r4, #0]
 800be24:	6961      	ldr	r1, [r4, #20]
 800be26:	1d18      	adds	r0, r3, #4
 800be28:	6028      	str	r0, [r5, #0]
 800be2a:	0635      	lsls	r5, r6, #24
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	d501      	bpl.n	800be34 <_printf_i+0x1cc>
 800be30:	6019      	str	r1, [r3, #0]
 800be32:	e002      	b.n	800be3a <_printf_i+0x1d2>
 800be34:	0670      	lsls	r0, r6, #25
 800be36:	d5fb      	bpl.n	800be30 <_printf_i+0x1c8>
 800be38:	8019      	strh	r1, [r3, #0]
 800be3a:	2300      	movs	r3, #0
 800be3c:	6123      	str	r3, [r4, #16]
 800be3e:	4615      	mov	r5, r2
 800be40:	e7ba      	b.n	800bdb8 <_printf_i+0x150>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	1d1a      	adds	r2, r3, #4
 800be46:	602a      	str	r2, [r5, #0]
 800be48:	681d      	ldr	r5, [r3, #0]
 800be4a:	6862      	ldr	r2, [r4, #4]
 800be4c:	2100      	movs	r1, #0
 800be4e:	4628      	mov	r0, r5
 800be50:	f7f4 f9be 	bl	80001d0 <memchr>
 800be54:	b108      	cbz	r0, 800be5a <_printf_i+0x1f2>
 800be56:	1b40      	subs	r0, r0, r5
 800be58:	6060      	str	r0, [r4, #4]
 800be5a:	6863      	ldr	r3, [r4, #4]
 800be5c:	6123      	str	r3, [r4, #16]
 800be5e:	2300      	movs	r3, #0
 800be60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be64:	e7a8      	b.n	800bdb8 <_printf_i+0x150>
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	462a      	mov	r2, r5
 800be6a:	4649      	mov	r1, r9
 800be6c:	4640      	mov	r0, r8
 800be6e:	47d0      	blx	sl
 800be70:	3001      	adds	r0, #1
 800be72:	d0ab      	beq.n	800bdcc <_printf_i+0x164>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	079b      	lsls	r3, r3, #30
 800be78:	d413      	bmi.n	800bea2 <_printf_i+0x23a>
 800be7a:	68e0      	ldr	r0, [r4, #12]
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	4298      	cmp	r0, r3
 800be80:	bfb8      	it	lt
 800be82:	4618      	movlt	r0, r3
 800be84:	e7a4      	b.n	800bdd0 <_printf_i+0x168>
 800be86:	2301      	movs	r3, #1
 800be88:	4632      	mov	r2, r6
 800be8a:	4649      	mov	r1, r9
 800be8c:	4640      	mov	r0, r8
 800be8e:	47d0      	blx	sl
 800be90:	3001      	adds	r0, #1
 800be92:	d09b      	beq.n	800bdcc <_printf_i+0x164>
 800be94:	3501      	adds	r5, #1
 800be96:	68e3      	ldr	r3, [r4, #12]
 800be98:	9903      	ldr	r1, [sp, #12]
 800be9a:	1a5b      	subs	r3, r3, r1
 800be9c:	42ab      	cmp	r3, r5
 800be9e:	dcf2      	bgt.n	800be86 <_printf_i+0x21e>
 800bea0:	e7eb      	b.n	800be7a <_printf_i+0x212>
 800bea2:	2500      	movs	r5, #0
 800bea4:	f104 0619 	add.w	r6, r4, #25
 800bea8:	e7f5      	b.n	800be96 <_printf_i+0x22e>
 800beaa:	bf00      	nop
 800beac:	0800c2d9 	.word	0x0800c2d9
 800beb0:	0800c2ea 	.word	0x0800c2ea

0800beb4 <_read_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4d07      	ldr	r5, [pc, #28]	; (800bed4 <_read_r+0x20>)
 800beb8:	4604      	mov	r4, r0
 800beba:	4608      	mov	r0, r1
 800bebc:	4611      	mov	r1, r2
 800bebe:	2200      	movs	r2, #0
 800bec0:	602a      	str	r2, [r5, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	f7f5 fd72 	bl	80019ac <_read>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	d102      	bne.n	800bed2 <_read_r+0x1e>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b103      	cbz	r3, 800bed2 <_read_r+0x1e>
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	20005310 	.word	0x20005310

0800bed8 <_fstat_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d07      	ldr	r5, [pc, #28]	; (800bef8 <_fstat_r+0x20>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	4611      	mov	r1, r2
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	f7f5 fd8a 	bl	80019fe <_fstat>
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	d102      	bne.n	800bef4 <_fstat_r+0x1c>
 800beee:	682b      	ldr	r3, [r5, #0]
 800bef0:	b103      	cbz	r3, 800bef4 <_fstat_r+0x1c>
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	bf00      	nop
 800bef8:	20005310 	.word	0x20005310

0800befc <_isatty_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	; (800bf18 <_isatty_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f5 fd89 	bl	8001a1e <_isatty>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_isatty_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_isatty_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	20005310 	.word	0x20005310

0800bf1c <_init>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr

0800bf28 <_fini>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	bf00      	nop
 800bf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2e:	bc08      	pop	{r3}
 800bf30:	469e      	mov	lr, r3
 800bf32:	4770      	bx	lr
